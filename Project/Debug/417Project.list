
417Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08008088  08008088  00018088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008410  08008410  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008410  08008410  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008410  08008410  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008414  08008414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  080085f4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080085f4  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da25  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002707  00000000  00000000  0002dc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  00030338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  00030f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195f6  00000000  00000000  00031aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c858  00000000  00000000  0004b09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a8a6  00000000  00000000  000578f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e219c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004310  00000000  00000000  000e2218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008070 	.word	0x08008070

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008070 	.word	0x08008070

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b7a:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b94:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000ba8:	f000 fc34 	bl	8001414 <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 f9f4 	bl	8000f9e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000bc8:	f000 fec2 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f9e4 	bl	8000f9e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000be4:	f000 feb4 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 f9d6 	bl	8000f9e <Error_Handler>
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000204 	.word	0x20000204
 8000c00:	40012400 	.word	0x40012400

08000c04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <HAL_ADC_MspInit+0xcc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d151      	bne.n	8000cc8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c54:	2303      	movs	r3, #3
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	481d      	ldr	r0, [pc, #116]	; (8000cd8 <HAL_ADC_MspInit+0xd4>)
 8000c64:	f001 fb64 	bl	8002330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c92:	2220      	movs	r2, #32
 8000c94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c9e:	f001 f959 	bl	8001f54 <HAL_DMA_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ca8:	f000 f979 	bl	8000f9e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000cb0:	621a      	str	r2, [r3, #32]
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2012      	movs	r0, #18
 8000cbe:	f001 f912 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cc2:	2012      	movs	r0, #18
 8000cc4:	f001 f92b 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40012400 	.word	0x40012400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	20000234 	.word	0x20000234
 8000ce0:	40020008 	.word	0x40020008

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_DMA_Init+0x38>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <MX_DMA_Init+0x38>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_DMA_Init+0x38>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	200b      	movs	r0, #11
 8000d08:	f001 f8ed 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d0c:	200b      	movs	r0, #11
 8000d0e:	f001 f906 	bl	8001f1e <HAL_NVIC_EnableIRQ>

}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000

08000d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <MX_I2C1_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_I2C1_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dd2:	f001 fc07 	bl	80025e4 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 f8df 	bl	8000f9e <Error_Handler>
  }

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000278 	.word	0x20000278
 8000de8:	40005400 	.word	0x40005400
 8000dec:	000186a0 	.word	0x000186a0

08000df0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_I2C_MspInit+0x70>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d123      	bne.n	8000e58 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e28:	23c0      	movs	r3, #192	; 0xc0
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e3c:	f001 fa78 	bl	8002330 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4a:	61d3      	str	r3, [r2, #28]
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40005400 	.word	0x40005400
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010c00 	.word	0x40010c00

08000e6c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
 8000e74:	1d39      	adds	r1, r7, #4
 8000e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <__io_putchar+0x20>)
 8000e7e:	f002 fd0e 	bl	800389e <HAL_UART_Transmit>
    return ch;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200002d0 	.word	0x200002d0

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e94:	f000 fa3a 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e98:	f000 f826 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f7ff ff40 	bl	8000d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea0:	f7ff ff20 	bl	8000ce4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ea4:	f7ff fe60 	bl	8000b68 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ea8:	f7ff ff74 	bl	8000d94 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 f994 	bl	80011d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000eb0:	f002 fe90 	bl	8003bd4 <lcd_init>
  HAL_ADC_Start_DMA((ADC_HandleTypeDef*)&hadc1, (uint32_t*)adc_buf, (uint32_t)1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <main+0x48>)
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <main+0x4c>)
 8000eba:	f000 fb83 	bl	80015c4 <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */

	  //printf("HELLO WORLD count = %d \r\n");

	  printf("ADC = %d\r\n",adc_buf[0]);
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <main+0x48>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <main+0x50>)
 8000ec6:	f003 fd25 	bl	8004914 <iprintf>
	  	  printf("voltage: %f\r\n,(float)adc_buf[0]/4096*3.3");
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <main+0x54>)
 8000ecc:	f003 fd22 	bl	8004914 <iprintf>
	  	HAL_Delay(250);
 8000ed0:	20fa      	movs	r0, #250	; 0xfa
 8000ed2:	f000 fa7d 	bl	80013d0 <HAL_Delay>
	  printf("ADC = %d\r\n",adc_buf[0]);
 8000ed6:	e7f2      	b.n	8000ebe <main+0x2e>
 8000ed8:	200002cc 	.word	0x200002cc
 8000edc:	20000204 	.word	0x20000204
 8000ee0:	08008088 	.word	0x08008088
 8000ee4:	08008094 	.word	0x08008094

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	; 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef2:	2228      	movs	r2, #40	; 0x28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fed4 	bl	8003ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f26:	2301      	movs	r3, #1
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 ff8e 	bl	8002e60 <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f4a:	f000 f828 	bl	8000f9e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 f9f8 	bl	8003360 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f76:	f000 f812 	bl	8000f9e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f82:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fb86 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f92:	f000 f804 	bl	8000f9e <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	; 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_MspInit+0x5c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_MspInit+0x5c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_MspInit+0x5c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_MspInit+0x5c>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_MspInit+0x5c>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_MspInit+0x5c>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_MspInit+0x60>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_MspInit+0x60>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <HardFault_Handler+0x4>

08001022 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <MemManage_Handler+0x4>

08001028 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <BusFault_Handler+0x4>

0800102e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f99c 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <DMA1_Channel1_IRQHandler+0x10>)
 800106a:	f001 f82d 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000234 	.word	0x20000234

08001078 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <ADC1_2_IRQHandler+0x10>)
 800107e:	f000 fb7f 	bl	8001780 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000204 	.word	0x20000204

0800108c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e00a      	b.n	80010b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800109e:	f3af 8000 	nop.w
 80010a2:	4601      	mov	r1, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf0      	blt.n	800109e <_read+0x12>
	}

return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e009      	b.n	80010ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	60ba      	str	r2, [r7, #8]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fec3 	bl	8000e6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf1      	blt.n	80010d8 <_write+0x12>
	}
	return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_close>:

int _close(int file)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	return -1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001124:	605a      	str	r2, [r3, #4]
	return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <_isatty>:

int _isatty(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
	return 0;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f002 fd5e 	bl	8003c50 <__errno>
 8001194:	4602      	mov	r2, r0
 8001196:	230c      	movs	r3, #12
 8001198:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20005000 	.word	0x20005000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	20000318 	.word	0x20000318

080011cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f002 faf8 	bl	8003804 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f7ff fec0 	bl	8000f9e <Error_Handler>
  }

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002d0 	.word	0x200002d0
 8001228:	40004400 	.word	0x40004400

0800122c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d12f      	bne.n	80012ac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 8001252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001256:	61d3      	str	r3, [r2, #28]
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127c:	2304      	movs	r3, #4
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_UART_MspInit+0x90>)
 8001290:	f001 f84e 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001294:	2308      	movs	r3, #8
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_UART_MspInit+0x90>)
 80012a8:	f001 f842 	bl	8002330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010800 	.word	0x40010800

080012c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e6:	f7ff ff71 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f002 fcb7 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff fdcf 	bl	8000e90 <main>
  bx lr
 80012f2:	4770      	bx	lr
  ldr r3, =_sidata
 80012f4:	08008418 	.word	0x08008418
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001300:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001304:	20000318 	.word	0x20000318

08001308 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <CAN1_RX1_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 fdd7 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fe40 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fdef 	bl	8001f3a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 fdb7 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000310 	.word	0x20000310

080013bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000310 	.word	0x20000310

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_Delay+0x40>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000008 	.word	0x20000008

08001414 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0be      	b.n	80015b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	d109      	bne.n	8001458 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fbd6 	bl	8000c04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fbc3 	bl	8001be4 <ADC_ConversionStop_Disable>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 8099 	bne.w	80015a2 <HAL_ADC_Init+0x18e>
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 8095 	bne.w	80015a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001480:	f023 0302 	bic.w	r3, r3, #2
 8001484:	f043 0202 	orr.w	r2, r3, #2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001494:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7b1b      	ldrb	r3, [r3, #12]
 800149a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800149c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ac:	d003      	beq.n	80014b6 <HAL_ADC_Init+0xa2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d102      	bne.n	80014bc <HAL_ADC_Init+0xa8>
 80014b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ba:	e000      	b.n	80014be <HAL_ADC_Init+0xaa>
 80014bc:	2300      	movs	r3, #0
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7d1b      	ldrb	r3, [r3, #20]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d119      	bne.n	8001500 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7b1b      	ldrb	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	3b01      	subs	r3, #1
 80014da:	035a      	lsls	r2, r3, #13
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e00b      	b.n	8001500 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f043 0220 	orr.w	r2, r3, #32
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_ADC_Init+0x1a8>)
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	430b      	orrs	r3, r1
 8001526:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001530:	d003      	beq.n	800153a <HAL_ADC_Init+0x126>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d104      	bne.n	8001544 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	3b01      	subs	r3, #1
 8001540:	051b      	lsls	r3, r3, #20
 8001542:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	430a      	orrs	r2, r1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_ADC_Init+0x1ac>)
 8001560:	4013      	ands	r3, r2
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d10b      	bne.n	8001580 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800157e:	e018      	b.n	80015b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f023 0312 	bic.w	r3, r3, #18
 8001588:	f043 0210 	orr.w	r2, r3, #16
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a0:	e007      	b.n	80015b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	ffe1f7fd 	.word	0xffe1f7fd
 80015c0:	ff1f0efe 	.word	0xff1f0efe

080015c4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a64      	ldr	r2, [pc, #400]	; (800176c <HAL_ADC_Start_DMA+0x1a8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d004      	beq.n	80015e8 <HAL_ADC_Start_DMA+0x24>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a63      	ldr	r2, [pc, #396]	; (8001770 <HAL_ADC_Start_DMA+0x1ac>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d106      	bne.n	80015f6 <HAL_ADC_Start_DMA+0x32>
 80015e8:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_ADC_Start_DMA+0x1a8>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f040 80b3 	bne.w	800175c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_Start_DMA+0x40>
 8001600:	2302      	movs	r3, #2
 8001602:	e0ae      	b.n	8001762 <HAL_ADC_Start_DMA+0x19e>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 fa97 	bl	8001b40 <ADC_Enable>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 809a 	bne.w	8001752 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_ADC_Start_DMA+0x1ac>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d105      	bne.n	8001648 <HAL_ADC_Start_DMA+0x84>
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <HAL_ADC_Start_DMA+0x1a8>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d115      	bne.n	8001674 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	2b00      	cmp	r3, #0
 8001660:	d026      	beq.n	80016b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001672:	e01d      	b.n	80016b0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a39      	ldr	r2, [pc, #228]	; (800176c <HAL_ADC_Start_DMA+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_ADC_Start_DMA+0xd0>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a38      	ldr	r2, [pc, #224]	; (8001770 <HAL_ADC_Start_DMA+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d10d      	bne.n	80016b0 <HAL_ADC_Start_DMA+0xec>
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_ADC_Start_DMA+0x1a8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	f023 0206 	bic.w	r2, r3, #6
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_ADC_Start_DMA+0x1b0>)
 80016de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_ADC_Start_DMA+0x1b4>)
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <HAL_ADC_Start_DMA+0x1b8>)
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0202 	mvn.w	r2, #2
 80016f8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001708:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a18      	ldr	r0, [r3, #32]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	334c      	adds	r3, #76	; 0x4c
 8001714:	4619      	mov	r1, r3
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f000 fc75 	bl	8002008 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001728:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800172c:	d108      	bne.n	8001740 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800173c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800173e:	e00f      	b.n	8001760 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800174e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001750:	e006      	b.n	8001760 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800175a:	e001      	b.n	8001760 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001760:	7dfb      	ldrb	r3, [r7, #23]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40012400 	.word	0x40012400
 8001770:	40012800 	.word	0x40012800
 8001774:	08001c59 	.word	0x08001c59
 8001778:	08001cd5 	.word	0x08001cd5
 800177c:	08001cf1 	.word	0x08001cf1

08001780 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b20      	cmp	r3, #32
 8001794:	d140      	bne.n	8001818 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d139      	bne.n	8001818 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ca:	d11d      	bne.n	8001808 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d119      	bne.n	8001808 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0220 	bic.w	r2, r2, #32
 80017e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f87c 	bl	8001906 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f06f 0212 	mvn.w	r2, #18
 8001816:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b80      	cmp	r3, #128	; 0x80
 8001824:	d14f      	bne.n	80018c6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b04      	cmp	r3, #4
 8001832:	d148      	bne.n	80018c6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001856:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800185a:	d012      	beq.n	8001882 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001866:	2b00      	cmp	r3, #0
 8001868:	d125      	bne.n	80018b6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001874:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001878:	d11d      	bne.n	80018b6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001890:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fa34 	bl	8001d24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 020c 	mvn.w	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d0:	2b40      	cmp	r3, #64	; 0x40
 80018d2:	d114      	bne.n	80018fe <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10d      	bne.n	80018fe <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f81b 	bl	800192a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0201 	mvn.w	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x20>
 800196c:	2302      	movs	r3, #2
 800196e:	e0dc      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x1da>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b06      	cmp	r3, #6
 800197e:	d81c      	bhi.n	80019ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b05      	subs	r3, #5
 8001992:	221f      	movs	r2, #31
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	4019      	ands	r1, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b05      	subs	r3, #5
 80019ac:	fa00 f203 	lsl.w	r2, r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34
 80019b8:	e03c      	b.n	8001a34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d81c      	bhi.n	80019fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b23      	subs	r3, #35	; 0x23
 80019d4:	221f      	movs	r2, #31
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	4019      	ands	r1, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b23      	subs	r3, #35	; 0x23
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
 80019fa:	e01b      	b.n	8001a34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b41      	subs	r3, #65	; 0x41
 8001a0e:	221f      	movs	r2, #31
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4019      	ands	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b41      	subs	r3, #65	; 0x41
 8001a28:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d91c      	bls.n	8001a76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68d9      	ldr	r1, [r3, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b1e      	subs	r3, #30
 8001a4e:	2207      	movs	r2, #7
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4019      	ands	r1, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6898      	ldr	r0, [r3, #8]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	e019      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6919      	ldr	r1, [r3, #16]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6898      	ldr	r0, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d003      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab6:	2b11      	cmp	r3, #17
 8001ab8:	d132      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d125      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d126      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d11a      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_ADC_ConfigChannel+0x1e8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_ADC_ConfigChannel+0x1ec>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	0c9a      	lsrs	r2, r3, #18
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x1b2>
 8001b0e:	e007      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40012400 	.word	0x40012400
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	431bde83 	.word	0x431bde83

08001b40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d039      	beq.n	8001bd2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <ADC_Enable+0x9c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <ADC_Enable+0xa0>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b7c:	e002      	b.n	8001b84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b8a:	f7ff fc17 	bl	80013bc <HAL_GetTick>
 8001b8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b90:	e018      	b.n	8001bc4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b92:	f7ff fc13 	bl	80013bc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d911      	bls.n	8001bc4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f043 0210 	orr.w	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e007      	b.n	8001bd4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d1df      	bne.n	8001b92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	431bde83 	.word	0x431bde83

08001be4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d127      	bne.n	8001c4e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c0e:	f7ff fbd5 	bl	80013bc <HAL_GetTick>
 8001c12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c14:	e014      	b.n	8001c40 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c16:	f7ff fbd1 	bl	80013bc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d90d      	bls.n	8001c40 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e007      	b.n	8001c50 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d0e3      	beq.n	8001c16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d127      	bne.n	8001cc2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c88:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c8c:	d115      	bne.n	8001cba <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d111      	bne.n	8001cba <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7ff fe23 	bl	8001906 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cc0:	e004      	b.n	8001ccc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fe18 	bl	8001918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f043 0204 	orr.w	r2, r3, #4
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff fe10 	bl	800193c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
	...

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <__NVIC_EnableIRQ+0x34>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff90 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff2d 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff42 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff90 	bl	8001e28 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff35 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e043      	b.n	8001ff2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_DMA_Init+0xa8>)
 8001f72:	4413      	add	r3, r2
 8001f74:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_DMA_Init+0xac>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_DMA_Init+0xb0>)
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	bffdfff8 	.word	0xbffdfff8
 8002000:	cccccccd 	.word	0xcccccccd
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Start_IT+0x20>
 8002024:	2302      	movs	r3, #2
 8002026:	e04a      	b.n	80020be <HAL_DMA_Start_IT+0xb6>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002036:	2b01      	cmp	r3, #1
 8002038:	d13a      	bne.n	80020b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2202      	movs	r2, #2
 800203e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f938 	bl	80022d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 020e 	orr.w	r2, r2, #14
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e00f      	b.n	800209e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0204 	bic.w	r2, r2, #4
 800208c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 020a 	orr.w	r2, r2, #10
 800209c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e005      	b.n	80020bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
 80020ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2204      	movs	r2, #4
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d04f      	beq.n	8002190 <HAL_DMA_IRQHandler+0xc8>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04a      	beq.n	8002190 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0204 	bic.w	r2, r2, #4
 8002116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_DMA_IRQHandler+0x1f0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d029      	beq.n	8002176 <HAL_DMA_IRQHandler+0xae>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a65      	ldr	r2, [pc, #404]	; (80022bc <HAL_DMA_IRQHandler+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_DMA_IRQHandler+0xaa>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_DMA_IRQHandler+0x1f8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01a      	beq.n	800216c <HAL_DMA_IRQHandler+0xa4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a62      	ldr	r2, [pc, #392]	; (80022c4 <HAL_DMA_IRQHandler+0x1fc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d012      	beq.n	8002166 <HAL_DMA_IRQHandler+0x9e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_DMA_IRQHandler+0x200>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00a      	beq.n	8002160 <HAL_DMA_IRQHandler+0x98>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a5f      	ldr	r2, [pc, #380]	; (80022cc <HAL_DMA_IRQHandler+0x204>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_DMA_IRQHandler+0x92>
 8002154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002158:	e00e      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 800215a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800215e:	e00b      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002164:	e008      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216a:	e005      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	e002      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	e000      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002176:	2304      	movs	r3, #4
 8002178:	4a55      	ldr	r2, [pc, #340]	; (80022d0 <HAL_DMA_IRQHandler+0x208>)
 800217a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8094 	beq.w	80022ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800218e:	e08e      	b.n	80022ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2202      	movs	r2, #2
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d056      	beq.n	800224e <HAL_DMA_IRQHandler+0x186>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d051      	beq.n	800224e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10b      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020a 	bic.w	r2, r2, #10
 80021c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_DMA_IRQHandler+0x1f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d029      	beq.n	800222e <HAL_DMA_IRQHandler+0x166>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_DMA_IRQHandler+0x1f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_DMA_IRQHandler+0x162>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <HAL_DMA_IRQHandler+0x1f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x15c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_DMA_IRQHandler+0x1fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d012      	beq.n	800221e <HAL_DMA_IRQHandler+0x156>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <HAL_DMA_IRQHandler+0x200>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00a      	beq.n	8002218 <HAL_DMA_IRQHandler+0x150>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_DMA_IRQHandler+0x204>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_DMA_IRQHandler+0x14a>
 800220c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002210:	e00e      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	e00b      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	e008      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 800221e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002222:	e005      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 8002224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002228:	e002      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 800222a:	2320      	movs	r3, #32
 800222c:	e000      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 800222e:	2302      	movs	r3, #2
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_DMA_IRQHandler+0x208>)
 8002232:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d034      	beq.n	80022ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800224c:	e02f      	b.n	80022ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2208      	movs	r2, #8
 8002254:	409a      	lsls	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1e8>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 020e 	bic.w	r2, r2, #14
 8002276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
    }
  }
  return;
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
}
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40020008 	.word	0x40020008
 80022bc:	4002001c 	.word	0x4002001c
 80022c0:	40020030 	.word	0x40020030
 80022c4:	40020044 	.word	0x40020044
 80022c8:	40020058 	.word	0x40020058
 80022cc:	4002006c 	.word	0x4002006c
 80022d0:	40020000 	.word	0x40020000

080022d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d108      	bne.n	8002314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002312:	e007      	b.n	8002324 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
	...

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b08b      	sub	sp, #44	; 0x2c
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e127      	b.n	8002594 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002344:	2201      	movs	r2, #1
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	f040 8116 	bne.w	800258e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b12      	cmp	r3, #18
 8002368:	d034      	beq.n	80023d4 <HAL_GPIO_Init+0xa4>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d80d      	bhi.n	800238a <HAL_GPIO_Init+0x5a>
 800236e:	2b02      	cmp	r3, #2
 8002370:	d02b      	beq.n	80023ca <HAL_GPIO_Init+0x9a>
 8002372:	2b02      	cmp	r3, #2
 8002374:	d804      	bhi.n	8002380 <HAL_GPIO_Init+0x50>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d031      	beq.n	80023de <HAL_GPIO_Init+0xae>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d01c      	beq.n	80023b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800237e:	e048      	b.n	8002412 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002380:	2b03      	cmp	r3, #3
 8002382:	d043      	beq.n	800240c <HAL_GPIO_Init+0xdc>
 8002384:	2b11      	cmp	r3, #17
 8002386:	d01b      	beq.n	80023c0 <HAL_GPIO_Init+0x90>
          break;
 8002388:	e043      	b.n	8002412 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800238a:	4a89      	ldr	r2, [pc, #548]	; (80025b0 <HAL_GPIO_Init+0x280>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d026      	beq.n	80023de <HAL_GPIO_Init+0xae>
 8002390:	4a87      	ldr	r2, [pc, #540]	; (80025b0 <HAL_GPIO_Init+0x280>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d806      	bhi.n	80023a4 <HAL_GPIO_Init+0x74>
 8002396:	4a87      	ldr	r2, [pc, #540]	; (80025b4 <HAL_GPIO_Init+0x284>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d020      	beq.n	80023de <HAL_GPIO_Init+0xae>
 800239c:	4a86      	ldr	r2, [pc, #536]	; (80025b8 <HAL_GPIO_Init+0x288>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_GPIO_Init+0xae>
          break;
 80023a2:	e036      	b.n	8002412 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023a4:	4a85      	ldr	r2, [pc, #532]	; (80025bc <HAL_GPIO_Init+0x28c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0xae>
 80023aa:	4a85      	ldr	r2, [pc, #532]	; (80025c0 <HAL_GPIO_Init+0x290>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d016      	beq.n	80023de <HAL_GPIO_Init+0xae>
 80023b0:	4a84      	ldr	r2, [pc, #528]	; (80025c4 <HAL_GPIO_Init+0x294>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xae>
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e028      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e023      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01e      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e019      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e012      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e008      	b.n	8002412 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2bff      	cmp	r3, #255	; 0xff
 8002416:	d801      	bhi.n	800241c <HAL_GPIO_Init+0xec>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	e001      	b.n	8002420 <HAL_GPIO_Init+0xf0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d802      	bhi.n	800242e <HAL_GPIO_Init+0xfe>
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x104>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3b08      	subs	r3, #8
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	210f      	movs	r1, #15
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	6a39      	ldr	r1, [r7, #32]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	431a      	orrs	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8096 	beq.w	800258e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002462:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_GPIO_Init+0x298>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_GPIO_Init+0x298>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x298>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247a:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_GPIO_Init+0x29c>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <HAL_GPIO_Init+0x2a0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x19e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4a      	ldr	r2, [pc, #296]	; (80025d4 <HAL_GPIO_Init+0x2a4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x19a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_GPIO_Init+0x2a8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x196>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a48      	ldr	r2, [pc, #288]	; (80025dc <HAL_GPIO_Init+0x2ac>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x192>
 80024be:	2303      	movs	r3, #3
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024ce:	2300      	movs	r3, #0
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e0:	493a      	ldr	r1, [pc, #232]	; (80025cc <HAL_GPIO_Init+0x29c>)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4938      	ldr	r1, [pc, #224]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	43db      	mvns	r3, r3
 8002510:	4933      	ldr	r1, [pc, #204]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002512:	4013      	ands	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	492e      	ldr	r1, [pc, #184]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
 800252e:	e006      	b.n	800253e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	43db      	mvns	r3, r3
 8002538:	4929      	ldr	r1, [pc, #164]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800253a:	4013      	ands	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4924      	ldr	r1, [pc, #144]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	43db      	mvns	r3, r3
 8002560:	491f      	ldr	r1, [pc, #124]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002562:	4013      	ands	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	491a      	ldr	r1, [pc, #104]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43db      	mvns	r3, r3
 8002588:	4915      	ldr	r1, [pc, #84]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800258a:	4013      	ands	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f aed0 	bne.w	8002344 <HAL_GPIO_Init+0x14>
  }
}
 80025a4:	bf00      	nop
 80025a6:	372c      	adds	r7, #44	; 0x2c
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	10210000 	.word	0x10210000
 80025b4:	10110000 	.word	0x10110000
 80025b8:	10120000 	.word	0x10120000
 80025bc:	10310000 	.word	0x10310000
 80025c0:	10320000 	.word	0x10320000
 80025c4:	10220000 	.word	0x10220000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40010800 	.word	0x40010800
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40011400 	.word	0x40011400
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e11f      	b.n	8002836 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fbf0 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002648:	f000 ffe0 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4a7b      	ldr	r2, [pc, #492]	; (8002840 <HAL_I2C_Init+0x25c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d807      	bhi.n	8002668 <HAL_I2C_Init+0x84>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a7a      	ldr	r2, [pc, #488]	; (8002844 <HAL_I2C_Init+0x260>)
 800265c:	4293      	cmp	r3, r2
 800265e:	bf94      	ite	ls
 8002660:	2301      	movls	r3, #1
 8002662:	2300      	movhi	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e006      	b.n	8002676 <HAL_I2C_Init+0x92>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a77      	ldr	r2, [pc, #476]	; (8002848 <HAL_I2C_Init+0x264>)
 800266c:	4293      	cmp	r3, r2
 800266e:	bf94      	ite	ls
 8002670:	2301      	movls	r3, #1
 8002672:	2300      	movhi	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0db      	b.n	8002836 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a72      	ldr	r2, [pc, #456]	; (800284c <HAL_I2C_Init+0x268>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0c9b      	lsrs	r3, r3, #18
 8002688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a64      	ldr	r2, [pc, #400]	; (8002840 <HAL_I2C_Init+0x25c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d802      	bhi.n	80026b8 <HAL_I2C_Init+0xd4>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3301      	adds	r3, #1
 80026b6:	e009      	b.n	80026cc <HAL_I2C_Init+0xe8>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_I2C_Init+0x26c>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	3301      	adds	r3, #1
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4956      	ldr	r1, [pc, #344]	; (8002840 <HAL_I2C_Init+0x25c>)
 80026e8:	428b      	cmp	r3, r1
 80026ea:	d80d      	bhi.n	8002708 <HAL_I2C_Init+0x124>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e59      	subs	r1, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	2b04      	cmp	r3, #4
 8002702:	bf38      	it	cc
 8002704:	2304      	movcc	r3, #4
 8002706:	e04f      	b.n	80027a8 <HAL_I2C_Init+0x1c4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <HAL_I2C_Init+0x150>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_I2C_Init+0x176>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Init+0x17e>
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_I2C_Init+0x1c4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <HAL_I2C_Init+0x1a4>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e58      	subs	r0, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	e00f      	b.n	80027a8 <HAL_I2C_Init+0x1c4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6809      	ldr	r1, [r1, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6911      	ldr	r1, [r2, #16]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	000186a0 	.word	0x000186a0
 8002844:	001e847f 	.word	0x001e847f
 8002848:	003d08ff 	.word	0x003d08ff
 800284c:	431bde83 	.word	0x431bde83
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	460b      	mov	r3, r1
 8002862:	817b      	strh	r3, [r7, #10]
 8002864:	4613      	mov	r3, r2
 8002866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7fe fda8 	bl	80013bc <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	f040 80e0 	bne.w	8002a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2319      	movs	r3, #25
 8002882:	2201      	movs	r2, #1
 8002884:	4970      	ldr	r1, [pc, #448]	; (8002a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f964 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	e0d3      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0x50>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0cc      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d007      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2221      	movs	r2, #33	; 0x21
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2210      	movs	r2, #16
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	893a      	ldrh	r2, [r7, #8]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f89c 	bl	8002a50 <I2C_MasterRequestWrite>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e08d      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002938:	e066      	b.n	8002a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f9de 	bl	8002d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06b      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d11b      	bne.n	80029dc <HAL_I2C_Master_Transmit+0x188>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	6a39      	ldr	r1, [r7, #32]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f9ce 	bl	8002d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e01a      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d194      	bne.n	800293a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	00100002 	.word	0x00100002
 8002a4c:	ffff0000 	.word	0xffff0000

08002a50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d006      	beq.n	8002a7a <I2C_MasterRequestWrite+0x2a>
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d003      	beq.n	8002a7a <I2C_MasterRequestWrite+0x2a>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e00b      	b.n	8002aa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d107      	bne.n	8002aa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f84f 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aca:	d103      	bne.n	8002ad4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e035      	b.n	8002b44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae0:	d108      	bne.n	8002af4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af0:	611a      	str	r2, [r3, #16]
 8002af2:	e01b      	b.n	8002b2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002af4:	897b      	ldrh	r3, [r7, #10]
 8002af6:	11db      	asrs	r3, r3, #7
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0306 	and.w	r3, r3, #6
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f063 030f 	orn	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <I2C_MasterRequestWrite+0xfc>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f875 	bl	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e010      	b.n	8002b44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <I2C_MasterRequestWrite+0x100>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f865 	bl	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	00010008 	.word	0x00010008
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b64:	e025      	b.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d021      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fc25 	bl	80013bc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e023      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10d      	bne.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	e00c      	b.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d0b6      	beq.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c10:	e051      	b.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	d123      	bne.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e046      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe fba3 	bl	80013bc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e020      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e00b      	b.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d18d      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d0c:	e02d      	b.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f878 	bl	8002e04 <I2C_IsAcknowledgeFailed>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e02d      	b.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d021      	beq.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe fb49 	bl	80013bc <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e007      	b.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d1ca      	bne.n	8002d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8e:	e02d      	b.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f837 	bl	8002e04 <I2C_IsAcknowledgeFailed>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e02d      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d021      	beq.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7fe fb08 	bl	80013bc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d1ca      	bne.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d11b      	bne.n	8002e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e26c      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e80:	4b92      	ldr	r3, [pc, #584]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e8c:	4b8f      	ldr	r3, [pc, #572]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
 8002e98:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	4b89      	ldr	r3, [pc, #548]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x12c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d168      	bne.n	8002f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e246      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x76>
 8002ec8:	4b80      	ldr	r3, [pc, #512]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7f      	ldr	r2, [pc, #508]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a77      	ldr	r2, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0xbc>
 8002f02:	4b72      	ldr	r3, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a71      	ldr	r2, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fa3e 	bl	80013bc <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fa3a 	bl	80013bc <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1fa      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe4>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fa2a 	bl	80013bc <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fa26 	bl	80013bc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1e6      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x10c>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fa6:	4b49      	ldr	r3, [pc, #292]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
 8002fb2:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1ba      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe f9df 	bl	80013bc <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe f9db 	bl	80013bc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e19b      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4927      	ldr	r1, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_RCC_OscConfig+0x270>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe f9be 	bl	80013bc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe f9ba 	bl	80013bc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e17a      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03a      	beq.n	80030e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d019      	beq.n	80030aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x274>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fe f99e 	bl	80013bc <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe f99a 	bl	80013bc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e15a      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 fada 	bl	800365c <RCC_Delay>
 80030a8:	e01c      	b.n	80030e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_OscConfig+0x274>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe f984 	bl	80013bc <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	e00f      	b.n	80030d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe f980 	bl	80013bc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d908      	bls.n	80030d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e140      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	42420000 	.word	0x42420000
 80030d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b9e      	ldr	r3, [pc, #632]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e9      	bne.n	80030b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a6 	beq.w	800323e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f6:	4b97      	ldr	r3, [pc, #604]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b94      	ldr	r3, [pc, #592]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a93      	ldr	r2, [pc, #588]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b8e      	ldr	r3, [pc, #568]	; (8003358 <HAL_RCC_OscConfig+0x4f8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <HAL_RCC_OscConfig+0x4f8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a8a      	ldr	r2, [pc, #552]	; (8003358 <HAL_RCC_OscConfig+0x4f8>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe f941 	bl	80013bc <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe f93d 	bl	80013bc <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0fd      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b81      	ldr	r3, [pc, #516]	; (8003358 <HAL_RCC_OscConfig+0x4f8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x312>
 8003164:	4b7b      	ldr	r3, [pc, #492]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a7a      	ldr	r2, [pc, #488]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e02d      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x334>
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a72      	ldr	r2, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	e01c      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x356>
 800319c:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a6c      	ldr	r2, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a66      	ldr	r2, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a63      	ldr	r2, [pc, #396]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe f8f1 	bl	80013bc <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f8ed 	bl	80013bc <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0ab      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCC_OscConfig+0x37e>
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe f8db 	bl	80013bc <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe f8d7 	bl	80013bc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e095      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4a47      	ldr	r2, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8081 	beq.w	800334a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d061      	beq.n	8003318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d146      	bne.n	80032ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <HAL_RCC_OscConfig+0x4fc>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe f8ab 	bl	80013bc <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe f8a7 	bl	80013bc <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e067      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	492d      	ldr	r1, [pc, #180]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a19      	ldr	r1, [r3, #32]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	430b      	orrs	r3, r1
 80032b6:	4927      	ldr	r1, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x4fc>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe f87b 	bl	80013bc <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe f877 	bl	80013bc <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e037      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x46a>
 80032e8:	e02f      	b.n	800334a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b1c      	ldr	r3, [pc, #112]	; (800335c <HAL_RCC_OscConfig+0x4fc>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe f864 	bl	80013bc <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe f860 	bl	80013bc <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e020      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x498>
 8003316:	e018      	b.n	800334a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e013      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	429a      	cmp	r2, r3
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	42420060 	.word	0x42420060

08003360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0d0      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b67      	ldr	r3, [pc, #412]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4965      	ldr	r1, [pc, #404]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b8      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033bc:	4b59      	ldr	r3, [pc, #356]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a52      	ldr	r2, [pc, #328]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	494d      	ldr	r1, [pc, #308]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d040      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d115      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e073      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06b      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4936      	ldr	r1, [pc, #216]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fd ffb4 	bl	80013bc <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fd ffb0 	bl	80013bc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e053      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d210      	bcs.n	80034b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	4922      	ldr	r1, [pc, #136]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e032      	b.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4916      	ldr	r1, [pc, #88]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034da:	4b12      	ldr	r3, [pc, #72]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	490e      	ldr	r1, [pc, #56]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ee:	f000 f821 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034f2:	4601      	mov	r1, r0
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	fa21 f303 	lsr.w	r3, r1, r3
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1cc>)
 8003508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1d0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd ff12 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40022000 	.word	0x40022000
 8003524:	40021000 	.word	0x40021000
 8003528:	080080d4 	.word	0x080080d4
 800352c:	20000000 	.word	0x20000000
 8003530:	20000004 	.word	0x20000004

08003534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b490      	push	{r4, r7}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800353c:	1d3c      	adds	r4, r7, #4
 800353e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d002      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x40>
 800356e:	2b08      	cmp	r3, #8
 8003570:	d003      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x46>
 8003572:	e02d      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003576:	623b      	str	r3, [r7, #32]
      break;
 8003578:	e02d      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	0c9b      	lsrs	r3, r3, #18
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003586:	4413      	add	r3, r2
 8003588:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800358c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0c5b      	lsrs	r3, r3, #17
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035a6:	4413      	add	r3, r2
 80035a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035b2:	fb02 f203 	mul.w	r2, r2, r3
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	e004      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	623b      	str	r3, [r7, #32]
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d2:	623b      	str	r3, [r7, #32]
      break;
 80035d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d6:	6a3b      	ldr	r3, [r7, #32]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc90      	pop	{r4, r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	080080c0 	.word	0x080080c0
 80035e8:	080080d0 	.word	0x080080d0
 80035ec:	40021000 	.word	0x40021000
 80035f0:	007a1200 	.word	0x007a1200
 80035f4:	003d0900 	.word	0x003d0900

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b02      	ldr	r3, [pc, #8]	; (8003608 <HAL_RCC_GetHCLKFreq+0x10>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	20000000 	.word	0x20000000

0800360c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003610:	f7ff fff2 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003614:	4601      	mov	r1, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4a03      	ldr	r2, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	080080e4 	.word	0x080080e4

08003634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003638:	f7ff ffde 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 800363c:	4601      	mov	r1, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0adb      	lsrs	r3, r3, #11
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4a03      	ldr	r2, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	080080e4 	.word	0x080080e4

0800365c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <RCC_Delay+0x34>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <RCC_Delay+0x38>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0a5b      	lsrs	r3, r3, #9
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003678:	bf00      	nop
  }
  while (Delay --);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	60fa      	str	r2, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f9      	bne.n	8003678 <RCC_Delay+0x1c>
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000
 8003694:	10624dd3 	.word	0x10624dd3

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d07d      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c4:	4b4c      	ldr	r3, [pc, #304]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ce:	61d3      	str	r3, [r2, #28]
 80036d0:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d118      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ec:	4b43      	ldr	r3, [pc, #268]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a42      	ldr	r2, [pc, #264]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f8:	f7fd fe60 	bl	80013bc <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	e008      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003700:	f7fd fe5c 	bl	80013bc <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e06d      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	4b3a      	ldr	r3, [pc, #232]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d027      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373c:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d014      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd fe2b 	bl	80013bc <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fe27 	bl	80013bc <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e036      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4917      	ldr	r1, [pc, #92]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	4313      	orrs	r3, r2
 800379c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	490b      	ldr	r1, [pc, #44]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
 8003800:	42420440 	.word	0x42420440

08003804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e03f      	b.n	8003896 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fcfe 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f905 	bl	8003a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800385c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800386c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800387c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08a      	sub	sp, #40	; 0x28
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d17c      	bne.n	80039b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_Transmit+0x2c>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e075      	b.n	80039ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Transmit+0x3e>
 80038d8:	2302      	movs	r3, #2
 80038da:	e06e      	b.n	80039ba <HAL_UART_Transmit+0x11c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2221      	movs	r2, #33	; 0x21
 80038ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038f2:	f7fd fd63 	bl	80013bc <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d108      	bne.n	8003920 <HAL_UART_Transmit+0x82>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e003      	b.n	8003928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003930:	e02a      	b.n	8003988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f840 	bl	80039c2 <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e036      	b.n	80039ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3302      	adds	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e007      	b.n	800397a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3301      	adds	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cf      	bne.n	8003932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f810 	bl	80039c2 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d2:	e02c      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d028      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80039e2:	f7fd fceb 	bl	80013bc <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d21d      	bcs.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d0c3      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a92:	f023 030c 	bic.w	r3, r3, #12
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <UART_SetConfig+0x114>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac0:	f7ff fdb8 	bl	8003634 <HAL_RCC_GetPCLK2Freq>
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	e002      	b.n	8003ace <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7ff fda0 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <UART_SetConfig+0x118>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	0119      	lsls	r1, r3, #4
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <UART_SetConfig+0x118>)
 8003b06:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2064      	movs	r0, #100	; 0x64
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	3332      	adds	r3, #50	; 0x32
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <UART_SetConfig+0x118>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	4419      	add	r1, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <UART_SetConfig+0x118>)
 8003b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2064      	movs	r0, #100	; 0x64
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <UART_SetConfig+0x118>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	440a      	add	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	51eb851f 	.word	0x51eb851f

08003b74 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	f023 030f 	bic.w	r3, r3, #15
 8003b84:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	f043 030c 	orr.w	r3, r3, #12
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003ba0:	7bbb      	ldrb	r3, [r7, #14]
 8003ba2:	f043 030c 	orr.w	r3, r3, #12
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003baa:	7bbb      	ldrb	r3, [r7, #14]
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bb4:	f107 0208 	add.w	r2, r7, #8
 8003bb8:	2364      	movs	r3, #100	; 0x64
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	214e      	movs	r1, #78	; 0x4e
 8003bc0:	4803      	ldr	r0, [pc, #12]	; (8003bd0 <lcd_send_cmd+0x5c>)
 8003bc2:	f7fe fe47 	bl	8002854 <HAL_I2C_Master_Transmit>
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000278 	.word	0x20000278

08003bd4 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003bd8:	2032      	movs	r0, #50	; 0x32
 8003bda:	f7fd fbf9 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bde:	2030      	movs	r0, #48	; 0x30
 8003be0:	f7ff ffc8 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003be4:	2005      	movs	r0, #5
 8003be6:	f7fd fbf3 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bea:	2030      	movs	r0, #48	; 0x30
 8003bec:	f7ff ffc2 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f7fd fbed 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bf6:	2030      	movs	r0, #48	; 0x30
 8003bf8:	f7ff ffbc 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(10);
 8003bfc:	200a      	movs	r0, #10
 8003bfe:	f7fd fbe7 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003c02:	2020      	movs	r0, #32
 8003c04:	f7ff ffb6 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(10);
 8003c08:	200a      	movs	r0, #10
 8003c0a:	f7fd fbe1 	bl	80013d0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003c0e:	2028      	movs	r0, #40	; 0x28
 8003c10:	f7ff ffb0 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(1);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7fd fbdb 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003c1a:	2008      	movs	r0, #8
 8003c1c:	f7ff ffaa 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(1);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7fd fbd5 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003c26:	2001      	movs	r0, #1
 8003c28:	f7ff ffa4 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(1);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7fd fbcf 	bl	80013d0 <HAL_Delay>
	HAL_Delay(1);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7fd fbcc 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003c38:	2006      	movs	r0, #6
 8003c3a:	f7ff ff9b 	bl	8003b74 <lcd_send_cmd>
	HAL_Delay(1);
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f7fd fbc6 	bl	80013d0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003c44:	200c      	movs	r0, #12
 8003c46:	f7ff ff95 	bl	8003b74 <lcd_send_cmd>
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000000c 	.word	0x2000000c

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	2500      	movs	r5, #0
 8003c60:	4e0c      	ldr	r6, [pc, #48]	; (8003c94 <__libc_init_array+0x38>)
 8003c62:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c64:	1ba4      	subs	r4, r4, r6
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	42a5      	cmp	r5, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	f004 fa00 	bl	8008070 <_init>
 8003c70:	2500      	movs	r5, #0
 8003c72:	4e0a      	ldr	r6, [pc, #40]	; (8003c9c <__libc_init_array+0x40>)
 8003c74:	4c0a      	ldr	r4, [pc, #40]	; (8003ca0 <__libc_init_array+0x44>)
 8003c76:	1ba4      	subs	r4, r4, r6
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	42a5      	cmp	r5, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c84:	4798      	blx	r3
 8003c86:	3501      	adds	r5, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c8e:	4798      	blx	r3
 8003c90:	3501      	adds	r5, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08008410 	.word	0x08008410
 8003c98:	08008410 	.word	0x08008410
 8003c9c:	08008410 	.word	0x08008410
 8003ca0:	08008414 	.word	0x08008414

08003ca4 <memset>:
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4402      	add	r2, r0
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <memset+0xa>
 8003cac:	4770      	bx	lr
 8003cae:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb2:	e7f9      	b.n	8003ca8 <memset+0x4>

08003cb4 <__cvt>:
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cba:	461e      	mov	r6, r3
 8003cbc:	bfbb      	ittet	lt
 8003cbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	461e      	movlt	r6, r3
 8003cc4:	2300      	movge	r3, #0
 8003cc6:	232d      	movlt	r3, #45	; 0x2d
 8003cc8:	b088      	sub	sp, #32
 8003cca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003ccc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003cd0:	f027 0720 	bic.w	r7, r7, #32
 8003cd4:	2f46      	cmp	r7, #70	; 0x46
 8003cd6:	4614      	mov	r4, r2
 8003cd8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003cda:	700b      	strb	r3, [r1, #0]
 8003cdc:	d004      	beq.n	8003ce8 <__cvt+0x34>
 8003cde:	2f45      	cmp	r7, #69	; 0x45
 8003ce0:	d100      	bne.n	8003ce4 <__cvt+0x30>
 8003ce2:	3501      	adds	r5, #1
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e000      	b.n	8003cea <__cvt+0x36>
 8003ce8:	2303      	movs	r3, #3
 8003cea:	aa07      	add	r2, sp, #28
 8003cec:	9204      	str	r2, [sp, #16]
 8003cee:	aa06      	add	r2, sp, #24
 8003cf0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cf4:	e9cd 3500 	strd	r3, r5, [sp]
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4633      	mov	r3, r6
 8003cfc:	f001 fd94 	bl	8005828 <_dtoa_r>
 8003d00:	2f47      	cmp	r7, #71	; 0x47
 8003d02:	4680      	mov	r8, r0
 8003d04:	d102      	bne.n	8003d0c <__cvt+0x58>
 8003d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d08:	07db      	lsls	r3, r3, #31
 8003d0a:	d526      	bpl.n	8003d5a <__cvt+0xa6>
 8003d0c:	2f46      	cmp	r7, #70	; 0x46
 8003d0e:	eb08 0905 	add.w	r9, r8, r5
 8003d12:	d111      	bne.n	8003d38 <__cvt+0x84>
 8003d14:	f898 3000 	ldrb.w	r3, [r8]
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d10a      	bne.n	8003d32 <__cvt+0x7e>
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	4620      	mov	r0, r4
 8003d22:	4631      	mov	r1, r6
 8003d24:	f7fc fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8003d28:	b918      	cbnz	r0, 8003d32 <__cvt+0x7e>
 8003d2a:	f1c5 0501 	rsb	r5, r5, #1
 8003d2e:	f8ca 5000 	str.w	r5, [sl]
 8003d32:	f8da 3000 	ldr.w	r3, [sl]
 8003d36:	4499      	add	r9, r3
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4631      	mov	r1, r6
 8003d40:	f7fc fe32 	bl	80009a8 <__aeabi_dcmpeq>
 8003d44:	b938      	cbnz	r0, 8003d56 <__cvt+0xa2>
 8003d46:	2230      	movs	r2, #48	; 0x30
 8003d48:	9b07      	ldr	r3, [sp, #28]
 8003d4a:	454b      	cmp	r3, r9
 8003d4c:	d205      	bcs.n	8003d5a <__cvt+0xa6>
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	9107      	str	r1, [sp, #28]
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e7f8      	b.n	8003d48 <__cvt+0x94>
 8003d56:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	9b07      	ldr	r3, [sp, #28]
 8003d5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d60:	eba3 0308 	sub.w	r3, r3, r8
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	b008      	add	sp, #32
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d6c <__exponent>:
 8003d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	bfb4      	ite	lt
 8003d72:	232d      	movlt	r3, #45	; 0x2d
 8003d74:	232b      	movge	r3, #43	; 0x2b
 8003d76:	4604      	mov	r4, r0
 8003d78:	bfb8      	it	lt
 8003d7a:	4249      	neglt	r1, r1
 8003d7c:	2909      	cmp	r1, #9
 8003d7e:	f804 2b02 	strb.w	r2, [r4], #2
 8003d82:	7043      	strb	r3, [r0, #1]
 8003d84:	dd21      	ble.n	8003dca <__exponent+0x5e>
 8003d86:	f10d 0307 	add.w	r3, sp, #7
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	260a      	movs	r6, #10
 8003d8e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d92:	fb06 1115 	mls	r1, r6, r5, r1
 8003d96:	2d09      	cmp	r5, #9
 8003d98:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003d9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003da0:	f103 32ff 	add.w	r2, r3, #4294967295
 8003da4:	4629      	mov	r1, r5
 8003da6:	dc09      	bgt.n	8003dbc <__exponent+0x50>
 8003da8:	3130      	adds	r1, #48	; 0x30
 8003daa:	3b02      	subs	r3, #2
 8003dac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003db0:	42bb      	cmp	r3, r7
 8003db2:	4622      	mov	r2, r4
 8003db4:	d304      	bcc.n	8003dc0 <__exponent+0x54>
 8003db6:	1a10      	subs	r0, r2, r0
 8003db8:	b003      	add	sp, #12
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	e7e6      	b.n	8003d8e <__exponent+0x22>
 8003dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc4:	f804 2b01 	strb.w	r2, [r4], #1
 8003dc8:	e7f2      	b.n	8003db0 <__exponent+0x44>
 8003dca:	2330      	movs	r3, #48	; 0x30
 8003dcc:	4419      	add	r1, r3
 8003dce:	7083      	strb	r3, [r0, #2]
 8003dd0:	1d02      	adds	r2, r0, #4
 8003dd2:	70c1      	strb	r1, [r0, #3]
 8003dd4:	e7ef      	b.n	8003db6 <__exponent+0x4a>
	...

08003dd8 <_printf_float>:
 8003dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ddc:	b091      	sub	sp, #68	; 0x44
 8003dde:	460c      	mov	r4, r1
 8003de0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003de2:	4693      	mov	fp, r2
 8003de4:	461e      	mov	r6, r3
 8003de6:	4605      	mov	r5, r0
 8003de8:	f002 feca 	bl	8006b80 <_localeconv_r>
 8003dec:	6803      	ldr	r3, [r0, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	9309      	str	r3, [sp, #36]	; 0x24
 8003df2:	f7fc f9ad 	bl	8000150 <strlen>
 8003df6:	2300      	movs	r3, #0
 8003df8:	930e      	str	r3, [sp, #56]	; 0x38
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8003dfe:	3307      	adds	r3, #7
 8003e00:	f023 0307 	bic.w	r3, r3, #7
 8003e04:	f103 0208 	add.w	r2, r3, #8
 8003e08:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003e0c:	f8d4 a000 	ldr.w	sl, [r4]
 8003e10:	603a      	str	r2, [r7, #0]
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e1a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003e1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	4ba6      	ldr	r3, [pc, #664]	; (80040c4 <_printf_float+0x2ec>)
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e2e:	f7fc fded 	bl	8000a0c <__aeabi_dcmpun>
 8003e32:	bb68      	cbnz	r0, 8003e90 <_printf_float+0xb8>
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295
 8003e38:	4ba2      	ldr	r3, [pc, #648]	; (80040c4 <_printf_float+0x2ec>)
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e3e:	f7fc fdc7 	bl	80009d0 <__aeabi_dcmple>
 8003e42:	bb28      	cbnz	r0, 8003e90 <_printf_float+0xb8>
 8003e44:	2200      	movs	r2, #0
 8003e46:	2300      	movs	r3, #0
 8003e48:	4638      	mov	r0, r7
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f7fc fdb6 	bl	80009bc <__aeabi_dcmplt>
 8003e50:	b110      	cbz	r0, 8003e58 <_printf_float+0x80>
 8003e52:	232d      	movs	r3, #45	; 0x2d
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e58:	4f9b      	ldr	r7, [pc, #620]	; (80040c8 <_printf_float+0x2f0>)
 8003e5a:	4b9c      	ldr	r3, [pc, #624]	; (80040cc <_printf_float+0x2f4>)
 8003e5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e60:	bf98      	it	ls
 8003e62:	461f      	movls	r7, r3
 8003e64:	2303      	movs	r3, #3
 8003e66:	f04f 0900 	mov.w	r9, #0
 8003e6a:	6123      	str	r3, [r4, #16]
 8003e6c:	f02a 0304 	bic.w	r3, sl, #4
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	9600      	str	r6, [sp, #0]
 8003e74:	465b      	mov	r3, fp
 8003e76:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 f9e2 	bl	8004244 <_printf_common>
 8003e80:	3001      	adds	r0, #1
 8003e82:	f040 8090 	bne.w	8003fa6 <_printf_float+0x1ce>
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	b011      	add	sp, #68	; 0x44
 8003e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e90:	463a      	mov	r2, r7
 8003e92:	464b      	mov	r3, r9
 8003e94:	4638      	mov	r0, r7
 8003e96:	4649      	mov	r1, r9
 8003e98:	f7fc fdb8 	bl	8000a0c <__aeabi_dcmpun>
 8003e9c:	b110      	cbz	r0, 8003ea4 <_printf_float+0xcc>
 8003e9e:	4f8c      	ldr	r7, [pc, #560]	; (80040d0 <_printf_float+0x2f8>)
 8003ea0:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <_printf_float+0x2fc>)
 8003ea2:	e7db      	b.n	8003e5c <_printf_float+0x84>
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	a80d      	add	r0, sp, #52	; 0x34
 8003eae:	a90e      	add	r1, sp, #56	; 0x38
 8003eb0:	d140      	bne.n	8003f34 <_printf_float+0x15c>
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	f04f 0c00 	mov.w	ip, #0
 8003eba:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003ebe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003ec2:	6863      	ldr	r3, [r4, #4]
 8003ec4:	6022      	str	r2, [r4, #0]
 8003ec6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	463a      	mov	r2, r7
 8003ece:	464b      	mov	r3, r9
 8003ed0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f7ff feed 	bl	8003cb4 <__cvt>
 8003eda:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003ede:	2b47      	cmp	r3, #71	; 0x47
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	d109      	bne.n	8003ef8 <_printf_float+0x120>
 8003ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ee6:	1cd8      	adds	r0, r3, #3
 8003ee8:	db02      	blt.n	8003ef0 <_printf_float+0x118>
 8003eea:	6862      	ldr	r2, [r4, #4]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	dd47      	ble.n	8003f80 <_printf_float+0x1a8>
 8003ef0:	f1a8 0802 	sub.w	r8, r8, #2
 8003ef4:	fa5f f888 	uxtb.w	r8, r8
 8003ef8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003efc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003efe:	d824      	bhi.n	8003f4a <_printf_float+0x172>
 8003f00:	3901      	subs	r1, #1
 8003f02:	4642      	mov	r2, r8
 8003f04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f08:	910d      	str	r1, [sp, #52]	; 0x34
 8003f0a:	f7ff ff2f 	bl	8003d6c <__exponent>
 8003f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f10:	4681      	mov	r9, r0
 8003f12:	1813      	adds	r3, r2, r0
 8003f14:	2a01      	cmp	r2, #1
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	dc02      	bgt.n	8003f20 <_printf_float+0x148>
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	07d1      	lsls	r1, r2, #31
 8003f1e:	d501      	bpl.n	8003f24 <_printf_float+0x14c>
 8003f20:	3301      	adds	r3, #1
 8003f22:	6123      	str	r3, [r4, #16]
 8003f24:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0a2      	beq.n	8003e72 <_printf_float+0x9a>
 8003f2c:	232d      	movs	r3, #45	; 0x2d
 8003f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f32:	e79e      	b.n	8003e72 <_printf_float+0x9a>
 8003f34:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003f38:	f000 816e 	beq.w	8004218 <_printf_float+0x440>
 8003f3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f40:	d1b9      	bne.n	8003eb6 <_printf_float+0xde>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1b7      	bne.n	8003eb6 <_printf_float+0xde>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7b4      	b.n	8003eb4 <_printf_float+0xdc>
 8003f4a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003f4e:	d119      	bne.n	8003f84 <_printf_float+0x1ac>
 8003f50:	2900      	cmp	r1, #0
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	dd0c      	ble.n	8003f70 <_printf_float+0x198>
 8003f56:	6121      	str	r1, [r4, #16]
 8003f58:	b913      	cbnz	r3, 8003f60 <_printf_float+0x188>
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	07d2      	lsls	r2, r2, #31
 8003f5e:	d502      	bpl.n	8003f66 <_printf_float+0x18e>
 8003f60:	3301      	adds	r3, #1
 8003f62:	440b      	add	r3, r1
 8003f64:	6123      	str	r3, [r4, #16]
 8003f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f68:	f04f 0900 	mov.w	r9, #0
 8003f6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f6e:	e7d9      	b.n	8003f24 <_printf_float+0x14c>
 8003f70:	b913      	cbnz	r3, 8003f78 <_printf_float+0x1a0>
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	07d0      	lsls	r0, r2, #31
 8003f76:	d501      	bpl.n	8003f7c <_printf_float+0x1a4>
 8003f78:	3302      	adds	r3, #2
 8003f7a:	e7f3      	b.n	8003f64 <_printf_float+0x18c>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e7f1      	b.n	8003f64 <_printf_float+0x18c>
 8003f80:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003f84:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	db05      	blt.n	8003f98 <_printf_float+0x1c0>
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	6123      	str	r3, [r4, #16]
 8003f90:	07d1      	lsls	r1, r2, #31
 8003f92:	d5e8      	bpl.n	8003f66 <_printf_float+0x18e>
 8003f94:	3301      	adds	r3, #1
 8003f96:	e7e5      	b.n	8003f64 <_printf_float+0x18c>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bfcc      	ite	gt
 8003f9c:	2301      	movgt	r3, #1
 8003f9e:	f1c3 0302 	rsble	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	e7de      	b.n	8003f64 <_printf_float+0x18c>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	055a      	lsls	r2, r3, #21
 8003faa:	d407      	bmi.n	8003fbc <_printf_float+0x1e4>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	463a      	mov	r2, r7
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b0      	blx	r6
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d129      	bne.n	800400e <_printf_float+0x236>
 8003fba:	e764      	b.n	8003e86 <_printf_float+0xae>
 8003fbc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003fc0:	f240 80d7 	bls.w	8004172 <_printf_float+0x39a>
 8003fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f7fc fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8003fd0:	b388      	cbz	r0, 8004036 <_printf_float+0x25e>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <_printf_float+0x300>)
 8003fd6:	4659      	mov	r1, fp
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b0      	blx	r6
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f43f af52 	beq.w	8003e86 <_printf_float+0xae>
 8003fe2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	db02      	blt.n	8003ff0 <_printf_float+0x218>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	07d8      	lsls	r0, r3, #31
 8003fee:	d50e      	bpl.n	800400e <_printf_float+0x236>
 8003ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	47b0      	blx	r6
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f43f af43 	beq.w	8003e86 <_printf_float+0xae>
 8004000:	2700      	movs	r7, #0
 8004002:	f104 081a 	add.w	r8, r4, #26
 8004006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004008:	3b01      	subs	r3, #1
 800400a:	42bb      	cmp	r3, r7
 800400c:	dc09      	bgt.n	8004022 <_printf_float+0x24a>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	079f      	lsls	r7, r3, #30
 8004012:	f100 80fd 	bmi.w	8004210 <_printf_float+0x438>
 8004016:	68e0      	ldr	r0, [r4, #12]
 8004018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800401a:	4298      	cmp	r0, r3
 800401c:	bfb8      	it	lt
 800401e:	4618      	movlt	r0, r3
 8004020:	e733      	b.n	8003e8a <_printf_float+0xb2>
 8004022:	2301      	movs	r3, #1
 8004024:	4642      	mov	r2, r8
 8004026:	4659      	mov	r1, fp
 8004028:	4628      	mov	r0, r5
 800402a:	47b0      	blx	r6
 800402c:	3001      	adds	r0, #1
 800402e:	f43f af2a 	beq.w	8003e86 <_printf_float+0xae>
 8004032:	3701      	adds	r7, #1
 8004034:	e7e7      	b.n	8004006 <_printf_float+0x22e>
 8004036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004038:	2b00      	cmp	r3, #0
 800403a:	dc2b      	bgt.n	8004094 <_printf_float+0x2bc>
 800403c:	2301      	movs	r3, #1
 800403e:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <_printf_float+0x300>)
 8004040:	4659      	mov	r1, fp
 8004042:	4628      	mov	r0, r5
 8004044:	47b0      	blx	r6
 8004046:	3001      	adds	r0, #1
 8004048:	f43f af1d 	beq.w	8003e86 <_printf_float+0xae>
 800404c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800404e:	b923      	cbnz	r3, 800405a <_printf_float+0x282>
 8004050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004052:	b913      	cbnz	r3, 800405a <_printf_float+0x282>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	07d9      	lsls	r1, r3, #31
 8004058:	d5d9      	bpl.n	800400e <_printf_float+0x236>
 800405a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800405e:	4659      	mov	r1, fp
 8004060:	4628      	mov	r0, r5
 8004062:	47b0      	blx	r6
 8004064:	3001      	adds	r0, #1
 8004066:	f43f af0e 	beq.w	8003e86 <_printf_float+0xae>
 800406a:	f04f 0800 	mov.w	r8, #0
 800406e:	f104 091a 	add.w	r9, r4, #26
 8004072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004074:	425b      	negs	r3, r3
 8004076:	4543      	cmp	r3, r8
 8004078:	dc01      	bgt.n	800407e <_printf_float+0x2a6>
 800407a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800407c:	e797      	b.n	8003fae <_printf_float+0x1d6>
 800407e:	2301      	movs	r3, #1
 8004080:	464a      	mov	r2, r9
 8004082:	4659      	mov	r1, fp
 8004084:	4628      	mov	r0, r5
 8004086:	47b0      	blx	r6
 8004088:	3001      	adds	r0, #1
 800408a:	f43f aefc 	beq.w	8003e86 <_printf_float+0xae>
 800408e:	f108 0801 	add.w	r8, r8, #1
 8004092:	e7ee      	b.n	8004072 <_printf_float+0x29a>
 8004094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004098:	429a      	cmp	r2, r3
 800409a:	bfa8      	it	ge
 800409c:	461a      	movge	r2, r3
 800409e:	2a00      	cmp	r2, #0
 80040a0:	4690      	mov	r8, r2
 80040a2:	dd07      	ble.n	80040b4 <_printf_float+0x2dc>
 80040a4:	4613      	mov	r3, r2
 80040a6:	4659      	mov	r1, fp
 80040a8:	463a      	mov	r2, r7
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b0      	blx	r6
 80040ae:	3001      	adds	r0, #1
 80040b0:	f43f aee9 	beq.w	8003e86 <_printf_float+0xae>
 80040b4:	f104 031a 	add.w	r3, r4, #26
 80040b8:	f04f 0a00 	mov.w	sl, #0
 80040bc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80040c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c2:	e015      	b.n	80040f0 <_printf_float+0x318>
 80040c4:	7fefffff 	.word	0x7fefffff
 80040c8:	080080f4 	.word	0x080080f4
 80040cc:	080080f0 	.word	0x080080f0
 80040d0:	080080fc 	.word	0x080080fc
 80040d4:	080080f8 	.word	0x080080f8
 80040d8:	08008100 	.word	0x08008100
 80040dc:	2301      	movs	r3, #1
 80040de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040e0:	4659      	mov	r1, fp
 80040e2:	4628      	mov	r0, r5
 80040e4:	47b0      	blx	r6
 80040e6:	3001      	adds	r0, #1
 80040e8:	f43f aecd 	beq.w	8003e86 <_printf_float+0xae>
 80040ec:	f10a 0a01 	add.w	sl, sl, #1
 80040f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80040f4:	eba9 0308 	sub.w	r3, r9, r8
 80040f8:	4553      	cmp	r3, sl
 80040fa:	dcef      	bgt.n	80040dc <_printf_float+0x304>
 80040fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004100:	429a      	cmp	r2, r3
 8004102:	444f      	add	r7, r9
 8004104:	db14      	blt.n	8004130 <_printf_float+0x358>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	07da      	lsls	r2, r3, #31
 800410a:	d411      	bmi.n	8004130 <_printf_float+0x358>
 800410c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800410e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004110:	eba3 0209 	sub.w	r2, r3, r9
 8004114:	eba3 0901 	sub.w	r9, r3, r1
 8004118:	4591      	cmp	r9, r2
 800411a:	bfa8      	it	ge
 800411c:	4691      	movge	r9, r2
 800411e:	f1b9 0f00 	cmp.w	r9, #0
 8004122:	dc0d      	bgt.n	8004140 <_printf_float+0x368>
 8004124:	2700      	movs	r7, #0
 8004126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800412a:	f104 081a 	add.w	r8, r4, #26
 800412e:	e018      	b.n	8004162 <_printf_float+0x38a>
 8004130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004134:	4659      	mov	r1, fp
 8004136:	4628      	mov	r0, r5
 8004138:	47b0      	blx	r6
 800413a:	3001      	adds	r0, #1
 800413c:	d1e6      	bne.n	800410c <_printf_float+0x334>
 800413e:	e6a2      	b.n	8003e86 <_printf_float+0xae>
 8004140:	464b      	mov	r3, r9
 8004142:	463a      	mov	r2, r7
 8004144:	4659      	mov	r1, fp
 8004146:	4628      	mov	r0, r5
 8004148:	47b0      	blx	r6
 800414a:	3001      	adds	r0, #1
 800414c:	d1ea      	bne.n	8004124 <_printf_float+0x34c>
 800414e:	e69a      	b.n	8003e86 <_printf_float+0xae>
 8004150:	2301      	movs	r3, #1
 8004152:	4642      	mov	r2, r8
 8004154:	4659      	mov	r1, fp
 8004156:	4628      	mov	r0, r5
 8004158:	47b0      	blx	r6
 800415a:	3001      	adds	r0, #1
 800415c:	f43f ae93 	beq.w	8003e86 <_printf_float+0xae>
 8004160:	3701      	adds	r7, #1
 8004162:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	eba3 0309 	sub.w	r3, r3, r9
 800416c:	42bb      	cmp	r3, r7
 800416e:	dcef      	bgt.n	8004150 <_printf_float+0x378>
 8004170:	e74d      	b.n	800400e <_printf_float+0x236>
 8004172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004174:	2a01      	cmp	r2, #1
 8004176:	dc01      	bgt.n	800417c <_printf_float+0x3a4>
 8004178:	07db      	lsls	r3, r3, #31
 800417a:	d538      	bpl.n	80041ee <_printf_float+0x416>
 800417c:	2301      	movs	r3, #1
 800417e:	463a      	mov	r2, r7
 8004180:	4659      	mov	r1, fp
 8004182:	4628      	mov	r0, r5
 8004184:	47b0      	blx	r6
 8004186:	3001      	adds	r0, #1
 8004188:	f43f ae7d 	beq.w	8003e86 <_printf_float+0xae>
 800418c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004190:	4659      	mov	r1, fp
 8004192:	4628      	mov	r0, r5
 8004194:	47b0      	blx	r6
 8004196:	3001      	adds	r0, #1
 8004198:	f107 0701 	add.w	r7, r7, #1
 800419c:	f43f ae73 	beq.w	8003e86 <_printf_float+0xae>
 80041a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a6:	2200      	movs	r2, #0
 80041a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80041ac:	2300      	movs	r3, #0
 80041ae:	f7fc fbfb 	bl	80009a8 <__aeabi_dcmpeq>
 80041b2:	b9c0      	cbnz	r0, 80041e6 <_printf_float+0x40e>
 80041b4:	4643      	mov	r3, r8
 80041b6:	463a      	mov	r2, r7
 80041b8:	4659      	mov	r1, fp
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b0      	blx	r6
 80041be:	3001      	adds	r0, #1
 80041c0:	d10d      	bne.n	80041de <_printf_float+0x406>
 80041c2:	e660      	b.n	8003e86 <_printf_float+0xae>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4642      	mov	r2, r8
 80041c8:	4659      	mov	r1, fp
 80041ca:	4628      	mov	r0, r5
 80041cc:	47b0      	blx	r6
 80041ce:	3001      	adds	r0, #1
 80041d0:	f43f ae59 	beq.w	8003e86 <_printf_float+0xae>
 80041d4:	3701      	adds	r7, #1
 80041d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041d8:	3b01      	subs	r3, #1
 80041da:	42bb      	cmp	r3, r7
 80041dc:	dcf2      	bgt.n	80041c4 <_printf_float+0x3ec>
 80041de:	464b      	mov	r3, r9
 80041e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041e4:	e6e4      	b.n	8003fb0 <_printf_float+0x1d8>
 80041e6:	2700      	movs	r7, #0
 80041e8:	f104 081a 	add.w	r8, r4, #26
 80041ec:	e7f3      	b.n	80041d6 <_printf_float+0x3fe>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e7e1      	b.n	80041b6 <_printf_float+0x3de>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4642      	mov	r2, r8
 80041f6:	4659      	mov	r1, fp
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b0      	blx	r6
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f ae42 	beq.w	8003e86 <_printf_float+0xae>
 8004202:	3701      	adds	r7, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	42bb      	cmp	r3, r7
 800420c:	dcf1      	bgt.n	80041f2 <_printf_float+0x41a>
 800420e:	e702      	b.n	8004016 <_printf_float+0x23e>
 8004210:	2700      	movs	r7, #0
 8004212:	f104 0819 	add.w	r8, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_float+0x42c>
 8004218:	2b00      	cmp	r3, #0
 800421a:	f43f ae94 	beq.w	8003f46 <_printf_float+0x16e>
 800421e:	f04f 0c00 	mov.w	ip, #0
 8004222:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004226:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004230:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	463a      	mov	r2, r7
 8004238:	464b      	mov	r3, r9
 800423a:	4628      	mov	r0, r5
 800423c:	f7ff fd3a 	bl	8003cb4 <__cvt>
 8004240:	4607      	mov	r7, r0
 8004242:	e64f      	b.n	8003ee4 <_printf_float+0x10c>

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4691      	mov	r9, r2
 800424a:	461f      	mov	r7, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	4606      	mov	r6, r0
 8004252:	4293      	cmp	r3, r2
 8004254:	bfb8      	it	lt
 8004256:	4613      	movlt	r3, r2
 8004258:	f8c9 3000 	str.w	r3, [r9]
 800425c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004260:	460c      	mov	r4, r1
 8004262:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004266:	b112      	cbz	r2, 800426e <_printf_common+0x2a>
 8004268:	3301      	adds	r3, #1
 800426a:	f8c9 3000 	str.w	r3, [r9]
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	0699      	lsls	r1, r3, #26
 8004272:	bf42      	ittt	mi
 8004274:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004278:	3302      	addmi	r3, #2
 800427a:	f8c9 3000 	strmi.w	r3, [r9]
 800427e:	6825      	ldr	r5, [r4, #0]
 8004280:	f015 0506 	ands.w	r5, r5, #6
 8004284:	d107      	bne.n	8004296 <_printf_common+0x52>
 8004286:	f104 0a19 	add.w	sl, r4, #25
 800428a:	68e3      	ldr	r3, [r4, #12]
 800428c:	f8d9 2000 	ldr.w	r2, [r9]
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	42ab      	cmp	r3, r5
 8004294:	dc29      	bgt.n	80042ea <_printf_common+0xa6>
 8004296:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	3300      	adds	r3, #0
 800429e:	bf18      	it	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	0692      	lsls	r2, r2, #26
 80042a4:	d42e      	bmi.n	8004304 <_printf_common+0xc0>
 80042a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042aa:	4639      	mov	r1, r7
 80042ac:	4630      	mov	r0, r6
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d021      	beq.n	80042f8 <_printf_common+0xb4>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	68e5      	ldr	r5, [r4, #12]
 80042b8:	f003 0306 	and.w	r3, r3, #6
 80042bc:	2b04      	cmp	r3, #4
 80042be:	bf18      	it	ne
 80042c0:	2500      	movne	r5, #0
 80042c2:	f8d9 2000 	ldr.w	r2, [r9]
 80042c6:	f04f 0900 	mov.w	r9, #0
 80042ca:	bf08      	it	eq
 80042cc:	1aad      	subeq	r5, r5, r2
 80042ce:	68a3      	ldr	r3, [r4, #8]
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	bf08      	it	eq
 80042d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d8:	4293      	cmp	r3, r2
 80042da:	bfc4      	itt	gt
 80042dc:	1a9b      	subgt	r3, r3, r2
 80042de:	18ed      	addgt	r5, r5, r3
 80042e0:	341a      	adds	r4, #26
 80042e2:	454d      	cmp	r5, r9
 80042e4:	d11a      	bne.n	800431c <_printf_common+0xd8>
 80042e6:	2000      	movs	r0, #0
 80042e8:	e008      	b.n	80042fc <_printf_common+0xb8>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4652      	mov	r2, sl
 80042ee:	4639      	mov	r1, r7
 80042f0:	4630      	mov	r0, r6
 80042f2:	47c0      	blx	r8
 80042f4:	3001      	adds	r0, #1
 80042f6:	d103      	bne.n	8004300 <_printf_common+0xbc>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	3501      	adds	r5, #1
 8004302:	e7c2      	b.n	800428a <_printf_common+0x46>
 8004304:	2030      	movs	r0, #48	; 0x30
 8004306:	18e1      	adds	r1, r4, r3
 8004308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004312:	4422      	add	r2, r4
 8004314:	3302      	adds	r3, #2
 8004316:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431a:	e7c4      	b.n	80042a6 <_printf_common+0x62>
 800431c:	2301      	movs	r3, #1
 800431e:	4622      	mov	r2, r4
 8004320:	4639      	mov	r1, r7
 8004322:	4630      	mov	r0, r6
 8004324:	47c0      	blx	r8
 8004326:	3001      	adds	r0, #1
 8004328:	d0e6      	beq.n	80042f8 <_printf_common+0xb4>
 800432a:	f109 0901 	add.w	r9, r9, #1
 800432e:	e7d8      	b.n	80042e2 <_printf_common+0x9e>

08004330 <_printf_i>:
 8004330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004334:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004338:	460c      	mov	r4, r1
 800433a:	7e09      	ldrb	r1, [r1, #24]
 800433c:	b085      	sub	sp, #20
 800433e:	296e      	cmp	r1, #110	; 0x6e
 8004340:	4617      	mov	r7, r2
 8004342:	4606      	mov	r6, r0
 8004344:	4698      	mov	r8, r3
 8004346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004348:	f000 80b3 	beq.w	80044b2 <_printf_i+0x182>
 800434c:	d822      	bhi.n	8004394 <_printf_i+0x64>
 800434e:	2963      	cmp	r1, #99	; 0x63
 8004350:	d036      	beq.n	80043c0 <_printf_i+0x90>
 8004352:	d80a      	bhi.n	800436a <_printf_i+0x3a>
 8004354:	2900      	cmp	r1, #0
 8004356:	f000 80b9 	beq.w	80044cc <_printf_i+0x19c>
 800435a:	2958      	cmp	r1, #88	; 0x58
 800435c:	f000 8083 	beq.w	8004466 <_printf_i+0x136>
 8004360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004364:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004368:	e032      	b.n	80043d0 <_printf_i+0xa0>
 800436a:	2964      	cmp	r1, #100	; 0x64
 800436c:	d001      	beq.n	8004372 <_printf_i+0x42>
 800436e:	2969      	cmp	r1, #105	; 0x69
 8004370:	d1f6      	bne.n	8004360 <_printf_i+0x30>
 8004372:	6820      	ldr	r0, [r4, #0]
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	0605      	lsls	r5, r0, #24
 8004378:	f103 0104 	add.w	r1, r3, #4
 800437c:	d52a      	bpl.n	80043d4 <_printf_i+0xa4>
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da03      	bge.n	800438e <_printf_i+0x5e>
 8004386:	222d      	movs	r2, #45	; 0x2d
 8004388:	425b      	negs	r3, r3
 800438a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800438e:	486f      	ldr	r0, [pc, #444]	; (800454c <_printf_i+0x21c>)
 8004390:	220a      	movs	r2, #10
 8004392:	e039      	b.n	8004408 <_printf_i+0xd8>
 8004394:	2973      	cmp	r1, #115	; 0x73
 8004396:	f000 809d 	beq.w	80044d4 <_printf_i+0x1a4>
 800439a:	d808      	bhi.n	80043ae <_printf_i+0x7e>
 800439c:	296f      	cmp	r1, #111	; 0x6f
 800439e:	d020      	beq.n	80043e2 <_printf_i+0xb2>
 80043a0:	2970      	cmp	r1, #112	; 0x70
 80043a2:	d1dd      	bne.n	8004360 <_printf_i+0x30>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f043 0320 	orr.w	r3, r3, #32
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	e003      	b.n	80043b6 <_printf_i+0x86>
 80043ae:	2975      	cmp	r1, #117	; 0x75
 80043b0:	d017      	beq.n	80043e2 <_printf_i+0xb2>
 80043b2:	2978      	cmp	r1, #120	; 0x78
 80043b4:	d1d4      	bne.n	8004360 <_printf_i+0x30>
 80043b6:	2378      	movs	r3, #120	; 0x78
 80043b8:	4865      	ldr	r0, [pc, #404]	; (8004550 <_printf_i+0x220>)
 80043ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043be:	e055      	b.n	800446c <_printf_i+0x13c>
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c6:	1d19      	adds	r1, r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6011      	str	r1, [r2, #0]
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e08c      	b.n	80044ee <_printf_i+0x1be>
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043da:	6011      	str	r1, [r2, #0]
 80043dc:	bf18      	it	ne
 80043de:	b21b      	sxthne	r3, r3
 80043e0:	e7cf      	b.n	8004382 <_printf_i+0x52>
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6010      	str	r0, [r2, #0]
 80043ea:	0628      	lsls	r0, r5, #24
 80043ec:	d501      	bpl.n	80043f2 <_printf_i+0xc2>
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <_printf_i+0xc8>
 80043f2:	0668      	lsls	r0, r5, #25
 80043f4:	d5fb      	bpl.n	80043ee <_printf_i+0xbe>
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	296f      	cmp	r1, #111	; 0x6f
 80043fa:	bf14      	ite	ne
 80043fc:	220a      	movne	r2, #10
 80043fe:	2208      	moveq	r2, #8
 8004400:	4852      	ldr	r0, [pc, #328]	; (800454c <_printf_i+0x21c>)
 8004402:	2100      	movs	r1, #0
 8004404:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004408:	6865      	ldr	r5, [r4, #4]
 800440a:	2d00      	cmp	r5, #0
 800440c:	60a5      	str	r5, [r4, #8]
 800440e:	f2c0 8095 	blt.w	800453c <_printf_i+0x20c>
 8004412:	6821      	ldr	r1, [r4, #0]
 8004414:	f021 0104 	bic.w	r1, r1, #4
 8004418:	6021      	str	r1, [r4, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d13d      	bne.n	800449a <_printf_i+0x16a>
 800441e:	2d00      	cmp	r5, #0
 8004420:	f040 808e 	bne.w	8004540 <_printf_i+0x210>
 8004424:	4665      	mov	r5, ip
 8004426:	2a08      	cmp	r2, #8
 8004428:	d10b      	bne.n	8004442 <_printf_i+0x112>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	07db      	lsls	r3, r3, #31
 800442e:	d508      	bpl.n	8004442 <_printf_i+0x112>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	6862      	ldr	r2, [r4, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	bfde      	ittt	le
 8004438:	2330      	movle	r3, #48	; 0x30
 800443a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800443e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004442:	ebac 0305 	sub.w	r3, ip, r5
 8004446:	6123      	str	r3, [r4, #16]
 8004448:	f8cd 8000 	str.w	r8, [sp]
 800444c:	463b      	mov	r3, r7
 800444e:	aa03      	add	r2, sp, #12
 8004450:	4621      	mov	r1, r4
 8004452:	4630      	mov	r0, r6
 8004454:	f7ff fef6 	bl	8004244 <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	d14d      	bne.n	80044f8 <_printf_i+0x1c8>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	b005      	add	sp, #20
 8004462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004466:	4839      	ldr	r0, [pc, #228]	; (800454c <_printf_i+0x21c>)
 8004468:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	6821      	ldr	r1, [r4, #0]
 8004470:	1d1d      	adds	r5, r3, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6015      	str	r5, [r2, #0]
 8004476:	060a      	lsls	r2, r1, #24
 8004478:	d50b      	bpl.n	8004492 <_printf_i+0x162>
 800447a:	07ca      	lsls	r2, r1, #31
 800447c:	bf44      	itt	mi
 800447e:	f041 0120 	orrmi.w	r1, r1, #32
 8004482:	6021      	strmi	r1, [r4, #0]
 8004484:	b91b      	cbnz	r3, 800448e <_printf_i+0x15e>
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	f022 0220 	bic.w	r2, r2, #32
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	2210      	movs	r2, #16
 8004490:	e7b7      	b.n	8004402 <_printf_i+0xd2>
 8004492:	064d      	lsls	r5, r1, #25
 8004494:	bf48      	it	mi
 8004496:	b29b      	uxthmi	r3, r3
 8004498:	e7ef      	b.n	800447a <_printf_i+0x14a>
 800449a:	4665      	mov	r5, ip
 800449c:	fbb3 f1f2 	udiv	r1, r3, r2
 80044a0:	fb02 3311 	mls	r3, r2, r1, r3
 80044a4:	5cc3      	ldrb	r3, [r0, r3]
 80044a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044aa:	460b      	mov	r3, r1
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d1f5      	bne.n	800449c <_printf_i+0x16c>
 80044b0:	e7b9      	b.n	8004426 <_printf_i+0xf6>
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	6825      	ldr	r5, [r4, #0]
 80044b6:	1d18      	adds	r0, r3, #4
 80044b8:	6961      	ldr	r1, [r4, #20]
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	0628      	lsls	r0, r5, #24
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0x196>
 80044c2:	6019      	str	r1, [r3, #0]
 80044c4:	e002      	b.n	80044cc <_printf_i+0x19c>
 80044c6:	066a      	lsls	r2, r5, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0x192>
 80044ca:	8019      	strh	r1, [r3, #0]
 80044cc:	2300      	movs	r3, #0
 80044ce:	4665      	mov	r5, ip
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	e7b9      	b.n	8004448 <_printf_i+0x118>
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	1d19      	adds	r1, r3, #4
 80044d8:	6011      	str	r1, [r2, #0]
 80044da:	681d      	ldr	r5, [r3, #0]
 80044dc:	6862      	ldr	r2, [r4, #4]
 80044de:	2100      	movs	r1, #0
 80044e0:	4628      	mov	r0, r5
 80044e2:	f002 fb75 	bl	8006bd0 <memchr>
 80044e6:	b108      	cbz	r0, 80044ec <_printf_i+0x1bc>
 80044e8:	1b40      	subs	r0, r0, r5
 80044ea:	6060      	str	r0, [r4, #4]
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	2300      	movs	r3, #0
 80044f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f6:	e7a7      	b.n	8004448 <_printf_i+0x118>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	462a      	mov	r2, r5
 80044fc:	4639      	mov	r1, r7
 80044fe:	4630      	mov	r0, r6
 8004500:	47c0      	blx	r8
 8004502:	3001      	adds	r0, #1
 8004504:	d0aa      	beq.n	800445c <_printf_i+0x12c>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	079b      	lsls	r3, r3, #30
 800450a:	d413      	bmi.n	8004534 <_printf_i+0x204>
 800450c:	68e0      	ldr	r0, [r4, #12]
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	4298      	cmp	r0, r3
 8004512:	bfb8      	it	lt
 8004514:	4618      	movlt	r0, r3
 8004516:	e7a3      	b.n	8004460 <_printf_i+0x130>
 8004518:	2301      	movs	r3, #1
 800451a:	464a      	mov	r2, r9
 800451c:	4639      	mov	r1, r7
 800451e:	4630      	mov	r0, r6
 8004520:	47c0      	blx	r8
 8004522:	3001      	adds	r0, #1
 8004524:	d09a      	beq.n	800445c <_printf_i+0x12c>
 8004526:	3501      	adds	r5, #1
 8004528:	68e3      	ldr	r3, [r4, #12]
 800452a:	9a03      	ldr	r2, [sp, #12]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	42ab      	cmp	r3, r5
 8004530:	dcf2      	bgt.n	8004518 <_printf_i+0x1e8>
 8004532:	e7eb      	b.n	800450c <_printf_i+0x1dc>
 8004534:	2500      	movs	r5, #0
 8004536:	f104 0919 	add.w	r9, r4, #25
 800453a:	e7f5      	b.n	8004528 <_printf_i+0x1f8>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ac      	bne.n	800449a <_printf_i+0x16a>
 8004540:	7803      	ldrb	r3, [r0, #0]
 8004542:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004546:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454a:	e76c      	b.n	8004426 <_printf_i+0xf6>
 800454c:	08008102 	.word	0x08008102
 8004550:	08008113 	.word	0x08008113

08004554 <_scanf_float>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	469a      	mov	sl, r3
 800455a:	688b      	ldr	r3, [r1, #8]
 800455c:	4616      	mov	r6, r2
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004564:	bf88      	it	hi
 8004566:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800456a:	b087      	sub	sp, #28
 800456c:	bf85      	ittet	hi
 800456e:	189b      	addhi	r3, r3, r2
 8004570:	9301      	strhi	r3, [sp, #4]
 8004572:	2300      	movls	r3, #0
 8004574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004578:	4688      	mov	r8, r1
 800457a:	f04f 0b00 	mov.w	fp, #0
 800457e:	bf8c      	ite	hi
 8004580:	608b      	strhi	r3, [r1, #8]
 8004582:	9301      	strls	r3, [sp, #4]
 8004584:	680b      	ldr	r3, [r1, #0]
 8004586:	4607      	mov	r7, r0
 8004588:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800458c:	f848 3b1c 	str.w	r3, [r8], #28
 8004590:	460c      	mov	r4, r1
 8004592:	4645      	mov	r5, r8
 8004594:	465a      	mov	r2, fp
 8004596:	46d9      	mov	r9, fp
 8004598:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800459c:	f8cd b008 	str.w	fp, [sp, #8]
 80045a0:	68a1      	ldr	r1, [r4, #8]
 80045a2:	b181      	cbz	r1, 80045c6 <_scanf_float+0x72>
 80045a4:	6833      	ldr	r3, [r6, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b49      	cmp	r3, #73	; 0x49
 80045aa:	d071      	beq.n	8004690 <_scanf_float+0x13c>
 80045ac:	d84d      	bhi.n	800464a <_scanf_float+0xf6>
 80045ae:	2b39      	cmp	r3, #57	; 0x39
 80045b0:	d840      	bhi.n	8004634 <_scanf_float+0xe0>
 80045b2:	2b31      	cmp	r3, #49	; 0x31
 80045b4:	f080 8088 	bcs.w	80046c8 <_scanf_float+0x174>
 80045b8:	2b2d      	cmp	r3, #45	; 0x2d
 80045ba:	f000 8090 	beq.w	80046de <_scanf_float+0x18a>
 80045be:	d815      	bhi.n	80045ec <_scanf_float+0x98>
 80045c0:	2b2b      	cmp	r3, #43	; 0x2b
 80045c2:	f000 808c 	beq.w	80046de <_scanf_float+0x18a>
 80045c6:	f1b9 0f00 	cmp.w	r9, #0
 80045ca:	d003      	beq.n	80045d4 <_scanf_float+0x80>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	3a01      	subs	r2, #1
 80045d6:	2a01      	cmp	r2, #1
 80045d8:	f200 80ea 	bhi.w	80047b0 <_scanf_float+0x25c>
 80045dc:	4545      	cmp	r5, r8
 80045de:	f200 80dc 	bhi.w	800479a <_scanf_float+0x246>
 80045e2:	2601      	movs	r6, #1
 80045e4:	4630      	mov	r0, r6
 80045e6:	b007      	add	sp, #28
 80045e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ec:	2b2e      	cmp	r3, #46	; 0x2e
 80045ee:	f000 809f 	beq.w	8004730 <_scanf_float+0x1dc>
 80045f2:	2b30      	cmp	r3, #48	; 0x30
 80045f4:	d1e7      	bne.n	80045c6 <_scanf_float+0x72>
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80045fc:	d064      	beq.n	80046c8 <_scanf_float+0x174>
 80045fe:	9b01      	ldr	r3, [sp, #4]
 8004600:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004604:	6020      	str	r0, [r4, #0]
 8004606:	f109 0901 	add.w	r9, r9, #1
 800460a:	b11b      	cbz	r3, 8004614 <_scanf_float+0xc0>
 800460c:	3b01      	subs	r3, #1
 800460e:	3101      	adds	r1, #1
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	60a1      	str	r1, [r4, #8]
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	60a3      	str	r3, [r4, #8]
 800461a:	6923      	ldr	r3, [r4, #16]
 800461c:	3301      	adds	r3, #1
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	6873      	ldr	r3, [r6, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	6073      	str	r3, [r6, #4]
 8004628:	f340 80ac 	ble.w	8004784 <_scanf_float+0x230>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	6033      	str	r3, [r6, #0]
 8004632:	e7b5      	b.n	80045a0 <_scanf_float+0x4c>
 8004634:	2b45      	cmp	r3, #69	; 0x45
 8004636:	f000 8085 	beq.w	8004744 <_scanf_float+0x1f0>
 800463a:	2b46      	cmp	r3, #70	; 0x46
 800463c:	d06a      	beq.n	8004714 <_scanf_float+0x1c0>
 800463e:	2b41      	cmp	r3, #65	; 0x41
 8004640:	d1c1      	bne.n	80045c6 <_scanf_float+0x72>
 8004642:	2a01      	cmp	r2, #1
 8004644:	d1bf      	bne.n	80045c6 <_scanf_float+0x72>
 8004646:	2202      	movs	r2, #2
 8004648:	e046      	b.n	80046d8 <_scanf_float+0x184>
 800464a:	2b65      	cmp	r3, #101	; 0x65
 800464c:	d07a      	beq.n	8004744 <_scanf_float+0x1f0>
 800464e:	d818      	bhi.n	8004682 <_scanf_float+0x12e>
 8004650:	2b54      	cmp	r3, #84	; 0x54
 8004652:	d066      	beq.n	8004722 <_scanf_float+0x1ce>
 8004654:	d811      	bhi.n	800467a <_scanf_float+0x126>
 8004656:	2b4e      	cmp	r3, #78	; 0x4e
 8004658:	d1b5      	bne.n	80045c6 <_scanf_float+0x72>
 800465a:	2a00      	cmp	r2, #0
 800465c:	d146      	bne.n	80046ec <_scanf_float+0x198>
 800465e:	f1b9 0f00 	cmp.w	r9, #0
 8004662:	d145      	bne.n	80046f0 <_scanf_float+0x19c>
 8004664:	6821      	ldr	r1, [r4, #0]
 8004666:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800466a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800466e:	d13f      	bne.n	80046f0 <_scanf_float+0x19c>
 8004670:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004674:	6021      	str	r1, [r4, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	e02e      	b.n	80046d8 <_scanf_float+0x184>
 800467a:	2b59      	cmp	r3, #89	; 0x59
 800467c:	d01e      	beq.n	80046bc <_scanf_float+0x168>
 800467e:	2b61      	cmp	r3, #97	; 0x61
 8004680:	e7de      	b.n	8004640 <_scanf_float+0xec>
 8004682:	2b6e      	cmp	r3, #110	; 0x6e
 8004684:	d0e9      	beq.n	800465a <_scanf_float+0x106>
 8004686:	d815      	bhi.n	80046b4 <_scanf_float+0x160>
 8004688:	2b66      	cmp	r3, #102	; 0x66
 800468a:	d043      	beq.n	8004714 <_scanf_float+0x1c0>
 800468c:	2b69      	cmp	r3, #105	; 0x69
 800468e:	d19a      	bne.n	80045c6 <_scanf_float+0x72>
 8004690:	f1bb 0f00 	cmp.w	fp, #0
 8004694:	d138      	bne.n	8004708 <_scanf_float+0x1b4>
 8004696:	f1b9 0f00 	cmp.w	r9, #0
 800469a:	d197      	bne.n	80045cc <_scanf_float+0x78>
 800469c:	6821      	ldr	r1, [r4, #0]
 800469e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80046a2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80046a6:	d195      	bne.n	80045d4 <_scanf_float+0x80>
 80046a8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80046ac:	6021      	str	r1, [r4, #0]
 80046ae:	f04f 0b01 	mov.w	fp, #1
 80046b2:	e011      	b.n	80046d8 <_scanf_float+0x184>
 80046b4:	2b74      	cmp	r3, #116	; 0x74
 80046b6:	d034      	beq.n	8004722 <_scanf_float+0x1ce>
 80046b8:	2b79      	cmp	r3, #121	; 0x79
 80046ba:	d184      	bne.n	80045c6 <_scanf_float+0x72>
 80046bc:	f1bb 0f07 	cmp.w	fp, #7
 80046c0:	d181      	bne.n	80045c6 <_scanf_float+0x72>
 80046c2:	f04f 0b08 	mov.w	fp, #8
 80046c6:	e007      	b.n	80046d8 <_scanf_float+0x184>
 80046c8:	eb12 0f0b 	cmn.w	r2, fp
 80046cc:	f47f af7b 	bne.w	80045c6 <_scanf_float+0x72>
 80046d0:	6821      	ldr	r1, [r4, #0]
 80046d2:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80046d6:	6021      	str	r1, [r4, #0]
 80046d8:	702b      	strb	r3, [r5, #0]
 80046da:	3501      	adds	r5, #1
 80046dc:	e79a      	b.n	8004614 <_scanf_float+0xc0>
 80046de:	6821      	ldr	r1, [r4, #0]
 80046e0:	0608      	lsls	r0, r1, #24
 80046e2:	f57f af70 	bpl.w	80045c6 <_scanf_float+0x72>
 80046e6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046ea:	e7f4      	b.n	80046d6 <_scanf_float+0x182>
 80046ec:	2a02      	cmp	r2, #2
 80046ee:	d047      	beq.n	8004780 <_scanf_float+0x22c>
 80046f0:	f1bb 0f01 	cmp.w	fp, #1
 80046f4:	d003      	beq.n	80046fe <_scanf_float+0x1aa>
 80046f6:	f1bb 0f04 	cmp.w	fp, #4
 80046fa:	f47f af64 	bne.w	80045c6 <_scanf_float+0x72>
 80046fe:	f10b 0b01 	add.w	fp, fp, #1
 8004702:	fa5f fb8b 	uxtb.w	fp, fp
 8004706:	e7e7      	b.n	80046d8 <_scanf_float+0x184>
 8004708:	f1bb 0f03 	cmp.w	fp, #3
 800470c:	d0f7      	beq.n	80046fe <_scanf_float+0x1aa>
 800470e:	f1bb 0f05 	cmp.w	fp, #5
 8004712:	e7f2      	b.n	80046fa <_scanf_float+0x1a6>
 8004714:	f1bb 0f02 	cmp.w	fp, #2
 8004718:	f47f af55 	bne.w	80045c6 <_scanf_float+0x72>
 800471c:	f04f 0b03 	mov.w	fp, #3
 8004720:	e7da      	b.n	80046d8 <_scanf_float+0x184>
 8004722:	f1bb 0f06 	cmp.w	fp, #6
 8004726:	f47f af4e 	bne.w	80045c6 <_scanf_float+0x72>
 800472a:	f04f 0b07 	mov.w	fp, #7
 800472e:	e7d3      	b.n	80046d8 <_scanf_float+0x184>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	0588      	lsls	r0, r1, #22
 8004734:	f57f af47 	bpl.w	80045c6 <_scanf_float+0x72>
 8004738:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800473c:	6021      	str	r1, [r4, #0]
 800473e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004742:	e7c9      	b.n	80046d8 <_scanf_float+0x184>
 8004744:	6821      	ldr	r1, [r4, #0]
 8004746:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800474a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800474e:	d006      	beq.n	800475e <_scanf_float+0x20a>
 8004750:	0548      	lsls	r0, r1, #21
 8004752:	f57f af38 	bpl.w	80045c6 <_scanf_float+0x72>
 8004756:	f1b9 0f00 	cmp.w	r9, #0
 800475a:	f43f af3b 	beq.w	80045d4 <_scanf_float+0x80>
 800475e:	0588      	lsls	r0, r1, #22
 8004760:	bf58      	it	pl
 8004762:	9802      	ldrpl	r0, [sp, #8]
 8004764:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004768:	bf58      	it	pl
 800476a:	eba9 0000 	subpl.w	r0, r9, r0
 800476e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004772:	bf58      	it	pl
 8004774:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004778:	6021      	str	r1, [r4, #0]
 800477a:	f04f 0900 	mov.w	r9, #0
 800477e:	e7ab      	b.n	80046d8 <_scanf_float+0x184>
 8004780:	2203      	movs	r2, #3
 8004782:	e7a9      	b.n	80046d8 <_scanf_float+0x184>
 8004784:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004788:	4631      	mov	r1, r6
 800478a:	4638      	mov	r0, r7
 800478c:	9205      	str	r2, [sp, #20]
 800478e:	4798      	blx	r3
 8004790:	9a05      	ldr	r2, [sp, #20]
 8004792:	2800      	cmp	r0, #0
 8004794:	f43f af04 	beq.w	80045a0 <_scanf_float+0x4c>
 8004798:	e715      	b.n	80045c6 <_scanf_float+0x72>
 800479a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800479e:	4632      	mov	r2, r6
 80047a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80047a4:	4638      	mov	r0, r7
 80047a6:	4798      	blx	r3
 80047a8:	6923      	ldr	r3, [r4, #16]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	6123      	str	r3, [r4, #16]
 80047ae:	e715      	b.n	80045dc <_scanf_float+0x88>
 80047b0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80047b4:	2b06      	cmp	r3, #6
 80047b6:	d80a      	bhi.n	80047ce <_scanf_float+0x27a>
 80047b8:	f1bb 0f02 	cmp.w	fp, #2
 80047bc:	d967      	bls.n	800488e <_scanf_float+0x33a>
 80047be:	f1ab 0b03 	sub.w	fp, fp, #3
 80047c2:	fa5f fb8b 	uxtb.w	fp, fp
 80047c6:	eba5 0b0b 	sub.w	fp, r5, fp
 80047ca:	455d      	cmp	r5, fp
 80047cc:	d14a      	bne.n	8004864 <_scanf_float+0x310>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	05da      	lsls	r2, r3, #23
 80047d2:	d51f      	bpl.n	8004814 <_scanf_float+0x2c0>
 80047d4:	055b      	lsls	r3, r3, #21
 80047d6:	d467      	bmi.n	80048a8 <_scanf_float+0x354>
 80047d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	2965      	cmp	r1, #101	; 0x65
 80047e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80047e4:	f105 3bff 	add.w	fp, r5, #4294967295
 80047e8:	6123      	str	r3, [r4, #16]
 80047ea:	d00d      	beq.n	8004808 <_scanf_float+0x2b4>
 80047ec:	2945      	cmp	r1, #69	; 0x45
 80047ee:	d00b      	beq.n	8004808 <_scanf_float+0x2b4>
 80047f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047f4:	4632      	mov	r2, r6
 80047f6:	4638      	mov	r0, r7
 80047f8:	4798      	blx	r3
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004800:	3b01      	subs	r3, #1
 8004802:	f1a5 0b02 	sub.w	fp, r5, #2
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800480c:	4632      	mov	r2, r6
 800480e:	4638      	mov	r0, r7
 8004810:	4798      	blx	r3
 8004812:	465d      	mov	r5, fp
 8004814:	6826      	ldr	r6, [r4, #0]
 8004816:	f016 0610 	ands.w	r6, r6, #16
 800481a:	d176      	bne.n	800490a <_scanf_float+0x3b6>
 800481c:	702e      	strb	r6, [r5, #0]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004828:	d141      	bne.n	80048ae <_scanf_float+0x35a>
 800482a:	9b02      	ldr	r3, [sp, #8]
 800482c:	eba9 0303 	sub.w	r3, r9, r3
 8004830:	425a      	negs	r2, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d148      	bne.n	80048c8 <_scanf_float+0x374>
 8004836:	4641      	mov	r1, r8
 8004838:	2200      	movs	r2, #0
 800483a:	4638      	mov	r0, r7
 800483c:	f000 fec8 	bl	80055d0 <_strtod_r>
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	4680      	mov	r8, r0
 8004844:	f015 0f02 	tst.w	r5, #2
 8004848:	4689      	mov	r9, r1
 800484a:	f8da 3000 	ldr.w	r3, [sl]
 800484e:	d046      	beq.n	80048de <_scanf_float+0x38a>
 8004850:	1d1a      	adds	r2, r3, #4
 8004852:	f8ca 2000 	str.w	r2, [sl]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	e9c3 8900 	strd	r8, r9, [r3]
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	60e3      	str	r3, [r4, #12]
 8004862:	e6bf      	b.n	80045e4 <_scanf_float+0x90>
 8004864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004868:	4632      	mov	r2, r6
 800486a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800486e:	4638      	mov	r0, r7
 8004870:	4798      	blx	r3
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	3b01      	subs	r3, #1
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	e7a7      	b.n	80047ca <_scanf_float+0x276>
 800487a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800487e:	4632      	mov	r2, r6
 8004880:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004884:	4638      	mov	r0, r7
 8004886:	4798      	blx	r3
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	3b01      	subs	r3, #1
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	4545      	cmp	r5, r8
 8004890:	d8f3      	bhi.n	800487a <_scanf_float+0x326>
 8004892:	e6a6      	b.n	80045e2 <_scanf_float+0x8e>
 8004894:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004898:	4632      	mov	r2, r6
 800489a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800489e:	4638      	mov	r0, r7
 80048a0:	4798      	blx	r3
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	4545      	cmp	r5, r8
 80048aa:	d8f3      	bhi.n	8004894 <_scanf_float+0x340>
 80048ac:	e699      	b.n	80045e2 <_scanf_float+0x8e>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0c0      	beq.n	8004836 <_scanf_float+0x2e2>
 80048b4:	9904      	ldr	r1, [sp, #16]
 80048b6:	230a      	movs	r3, #10
 80048b8:	4632      	mov	r2, r6
 80048ba:	3101      	adds	r1, #1
 80048bc:	4638      	mov	r0, r7
 80048be:	f000 ff13 	bl	80056e8 <_strtol_r>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	9d04      	ldr	r5, [sp, #16]
 80048c6:	1ac2      	subs	r2, r0, r3
 80048c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80048cc:	429d      	cmp	r5, r3
 80048ce:	bf28      	it	cs
 80048d0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <_scanf_float+0x3bc>)
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f838 	bl	800494c <siprintf>
 80048dc:	e7ab      	b.n	8004836 <_scanf_float+0x2e2>
 80048de:	1d1f      	adds	r7, r3, #4
 80048e0:	f015 0504 	ands.w	r5, r5, #4
 80048e4:	f8ca 7000 	str.w	r7, [sl]
 80048e8:	d1b5      	bne.n	8004856 <_scanf_float+0x302>
 80048ea:	681f      	ldr	r7, [r3, #0]
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	f7fc f88c 	bl	8000a0c <__aeabi_dcmpun>
 80048f4:	b120      	cbz	r0, 8004900 <_scanf_float+0x3ac>
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 f824 	bl	8004944 <nanf>
 80048fc:	6038      	str	r0, [r7, #0]
 80048fe:	e7ad      	b.n	800485c <_scanf_float+0x308>
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fc f8e0 	bl	8000ac8 <__aeabi_d2f>
 8004908:	e7f8      	b.n	80048fc <_scanf_float+0x3a8>
 800490a:	2600      	movs	r6, #0
 800490c:	e66a      	b.n	80045e4 <_scanf_float+0x90>
 800490e:	bf00      	nop
 8004910:	08008124 	.word	0x08008124

08004914 <iprintf>:
 8004914:	b40f      	push	{r0, r1, r2, r3}
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <iprintf+0x2c>)
 8004918:	b513      	push	{r0, r1, r4, lr}
 800491a:	681c      	ldr	r4, [r3, #0]
 800491c:	b124      	cbz	r4, 8004928 <iprintf+0x14>
 800491e:	69a3      	ldr	r3, [r4, #24]
 8004920:	b913      	cbnz	r3, 8004928 <iprintf+0x14>
 8004922:	4620      	mov	r0, r4
 8004924:	f001 fd74 	bl	8006410 <__sinit>
 8004928:	ab05      	add	r3, sp, #20
 800492a:	9a04      	ldr	r2, [sp, #16]
 800492c:	68a1      	ldr	r1, [r4, #8]
 800492e:	4620      	mov	r0, r4
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	f002 ff8d 	bl	8007850 <_vfiprintf_r>
 8004936:	b002      	add	sp, #8
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	b004      	add	sp, #16
 800493e:	4770      	bx	lr
 8004940:	2000000c 	.word	0x2000000c

08004944 <nanf>:
 8004944:	4800      	ldr	r0, [pc, #0]	; (8004948 <nanf+0x4>)
 8004946:	4770      	bx	lr
 8004948:	7fc00000 	.word	0x7fc00000

0800494c <siprintf>:
 800494c:	b40e      	push	{r1, r2, r3}
 800494e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004952:	b500      	push	{lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	ab1d      	add	r3, sp, #116	; 0x74
 8004958:	9002      	str	r0, [sp, #8]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	9107      	str	r1, [sp, #28]
 800495e:	9104      	str	r1, [sp, #16]
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <siprintf+0x38>)
 8004962:	4909      	ldr	r1, [pc, #36]	; (8004988 <siprintf+0x3c>)
 8004964:	f853 2b04 	ldr.w	r2, [r3], #4
 8004968:	9105      	str	r1, [sp, #20]
 800496a:	6800      	ldr	r0, [r0, #0]
 800496c:	a902      	add	r1, sp, #8
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	f002 fe4e 	bl	8007610 <_svfiprintf_r>
 8004974:	2200      	movs	r2, #0
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	b01c      	add	sp, #112	; 0x70
 800497c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004980:	b003      	add	sp, #12
 8004982:	4770      	bx	lr
 8004984:	2000000c 	.word	0x2000000c
 8004988:	ffff0208 	.word	0xffff0208

0800498c <sulp>:
 800498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004990:	460f      	mov	r7, r1
 8004992:	4690      	mov	r8, r2
 8004994:	f002 fc00 	bl	8007198 <__ulp>
 8004998:	4604      	mov	r4, r0
 800499a:	460d      	mov	r5, r1
 800499c:	f1b8 0f00 	cmp.w	r8, #0
 80049a0:	d011      	beq.n	80049c6 <sulp+0x3a>
 80049a2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80049a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dd0b      	ble.n	80049c6 <sulp+0x3a>
 80049ae:	2400      	movs	r4, #0
 80049b0:	051b      	lsls	r3, r3, #20
 80049b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80049b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	f7fb fd8b 	bl	80004d8 <__aeabi_dmul>
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080049d0 <_strtod_l>:
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	461f      	mov	r7, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	b0a1      	sub	sp, #132	; 0x84
 80049da:	4683      	mov	fp, r0
 80049dc:	4638      	mov	r0, r7
 80049de:	460e      	mov	r6, r1
 80049e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80049e2:	931c      	str	r3, [sp, #112]	; 0x70
 80049e4:	f002 f8c9 	bl	8006b7a <__localeconv_l>
 80049e8:	4680      	mov	r8, r0
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	f7fb fbb0 	bl	8000150 <strlen>
 80049f0:	f04f 0900 	mov.w	r9, #0
 80049f4:	4604      	mov	r4, r0
 80049f6:	f04f 0a00 	mov.w	sl, #0
 80049fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80049fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	2a0d      	cmp	r2, #13
 8004a02:	d832      	bhi.n	8004a6a <_strtod_l+0x9a>
 8004a04:	2a09      	cmp	r2, #9
 8004a06:	d236      	bcs.n	8004a76 <_strtod_l+0xa6>
 8004a08:	2a00      	cmp	r2, #0
 8004a0a:	d03e      	beq.n	8004a8a <_strtod_l+0xba>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8004a10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004a12:	782b      	ldrb	r3, [r5, #0]
 8004a14:	2b30      	cmp	r3, #48	; 0x30
 8004a16:	f040 80ac 	bne.w	8004b72 <_strtod_l+0x1a2>
 8004a1a:	786b      	ldrb	r3, [r5, #1]
 8004a1c:	2b58      	cmp	r3, #88	; 0x58
 8004a1e:	d001      	beq.n	8004a24 <_strtod_l+0x54>
 8004a20:	2b78      	cmp	r3, #120	; 0x78
 8004a22:	d167      	bne.n	8004af4 <_strtod_l+0x124>
 8004a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a26:	9702      	str	r7, [sp, #8]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	ab1c      	add	r3, sp, #112	; 0x70
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4a89      	ldr	r2, [pc, #548]	; (8004c54 <_strtod_l+0x284>)
 8004a30:	ab1d      	add	r3, sp, #116	; 0x74
 8004a32:	a91b      	add	r1, sp, #108	; 0x6c
 8004a34:	4658      	mov	r0, fp
 8004a36:	f001 fdc5 	bl	80065c4 <__gethex>
 8004a3a:	f010 0407 	ands.w	r4, r0, #7
 8004a3e:	4606      	mov	r6, r0
 8004a40:	d005      	beq.n	8004a4e <_strtod_l+0x7e>
 8004a42:	2c06      	cmp	r4, #6
 8004a44:	d12b      	bne.n	8004a9e <_strtod_l+0xce>
 8004a46:	2300      	movs	r3, #0
 8004a48:	3501      	adds	r5, #1
 8004a4a:	951b      	str	r5, [sp, #108]	; 0x6c
 8004a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8004a4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 85a6 	bne.w	80055a2 <_strtod_l+0xbd2>
 8004a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a58:	b1e3      	cbz	r3, 8004a94 <_strtod_l+0xc4>
 8004a5a:	464a      	mov	r2, r9
 8004a5c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	b021      	add	sp, #132	; 0x84
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	2a2b      	cmp	r2, #43	; 0x2b
 8004a6c:	d015      	beq.n	8004a9a <_strtod_l+0xca>
 8004a6e:	2a2d      	cmp	r2, #45	; 0x2d
 8004a70:	d004      	beq.n	8004a7c <_strtod_l+0xac>
 8004a72:	2a20      	cmp	r2, #32
 8004a74:	d1ca      	bne.n	8004a0c <_strtod_l+0x3c>
 8004a76:	3301      	adds	r3, #1
 8004a78:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a7a:	e7bf      	b.n	80049fc <_strtod_l+0x2c>
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	920d      	str	r2, [sp, #52]	; 0x34
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1c2      	bne.n	8004a10 <_strtod_l+0x40>
 8004a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 8585 	bne.w	800559e <_strtod_l+0xbce>
 8004a94:	464a      	mov	r2, r9
 8004a96:	4653      	mov	r3, sl
 8004a98:	e7e2      	b.n	8004a60 <_strtod_l+0x90>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	e7ef      	b.n	8004a7e <_strtod_l+0xae>
 8004a9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004aa0:	b13a      	cbz	r2, 8004ab2 <_strtod_l+0xe2>
 8004aa2:	2135      	movs	r1, #53	; 0x35
 8004aa4:	a81e      	add	r0, sp, #120	; 0x78
 8004aa6:	f002 fc6a 	bl	800737e <__copybits>
 8004aaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004aac:	4658      	mov	r0, fp
 8004aae:	f002 f8dc 	bl	8006c6a <_Bfree>
 8004ab2:	3c01      	subs	r4, #1
 8004ab4:	2c04      	cmp	r4, #4
 8004ab6:	d806      	bhi.n	8004ac6 <_strtod_l+0xf6>
 8004ab8:	e8df f004 	tbb	[pc, r4]
 8004abc:	1714030a 	.word	0x1714030a
 8004ac0:	0a          	.byte	0x0a
 8004ac1:	00          	.byte	0x00
 8004ac2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004ac6:	0731      	lsls	r1, r6, #28
 8004ac8:	d5c1      	bpl.n	8004a4e <_strtod_l+0x7e>
 8004aca:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004ace:	e7be      	b.n	8004a4e <_strtod_l+0x7e>
 8004ad0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004ad2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004ad6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ade:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004ae2:	e7f0      	b.n	8004ac6 <_strtod_l+0xf6>
 8004ae4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004c58 <_strtod_l+0x288>
 8004ae8:	e7ed      	b.n	8004ac6 <_strtod_l+0xf6>
 8004aea:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004aee:	f04f 39ff 	mov.w	r9, #4294967295
 8004af2:	e7e8      	b.n	8004ac6 <_strtod_l+0xf6>
 8004af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b30      	cmp	r3, #48	; 0x30
 8004afe:	d0f9      	beq.n	8004af4 <_strtod_l+0x124>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0a4      	beq.n	8004a4e <_strtod_l+0x7e>
 8004b04:	2301      	movs	r3, #1
 8004b06:	2500      	movs	r5, #0
 8004b08:	220a      	movs	r2, #10
 8004b0a:	9307      	str	r3, [sp, #28]
 8004b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b0e:	9506      	str	r5, [sp, #24]
 8004b10:	9308      	str	r3, [sp, #32]
 8004b12:	9504      	str	r5, [sp, #16]
 8004b14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004b16:	7807      	ldrb	r7, [r0, #0]
 8004b18:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004b1c:	b2d9      	uxtb	r1, r3
 8004b1e:	2909      	cmp	r1, #9
 8004b20:	d929      	bls.n	8004b76 <_strtod_l+0x1a6>
 8004b22:	4622      	mov	r2, r4
 8004b24:	f8d8 1000 	ldr.w	r1, [r8]
 8004b28:	f002 fffb 	bl	8007b22 <strncmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d031      	beq.n	8004b94 <_strtod_l+0x1c4>
 8004b30:	2000      	movs	r0, #0
 8004b32:	463b      	mov	r3, r7
 8004b34:	4602      	mov	r2, r0
 8004b36:	9c04      	ldr	r4, [sp, #16]
 8004b38:	9005      	str	r0, [sp, #20]
 8004b3a:	2b65      	cmp	r3, #101	; 0x65
 8004b3c:	d001      	beq.n	8004b42 <_strtod_l+0x172>
 8004b3e:	2b45      	cmp	r3, #69	; 0x45
 8004b40:	d114      	bne.n	8004b6c <_strtod_l+0x19c>
 8004b42:	b924      	cbnz	r4, 8004b4e <_strtod_l+0x17e>
 8004b44:	b910      	cbnz	r0, 8004b4c <_strtod_l+0x17c>
 8004b46:	9b07      	ldr	r3, [sp, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d09e      	beq.n	8004a8a <_strtod_l+0xba>
 8004b4c:	2400      	movs	r4, #0
 8004b4e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004b50:	1c73      	adds	r3, r6, #1
 8004b52:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b54:	7873      	ldrb	r3, [r6, #1]
 8004b56:	2b2b      	cmp	r3, #43	; 0x2b
 8004b58:	d078      	beq.n	8004c4c <_strtod_l+0x27c>
 8004b5a:	2b2d      	cmp	r3, #45	; 0x2d
 8004b5c:	d070      	beq.n	8004c40 <_strtod_l+0x270>
 8004b5e:	f04f 0c00 	mov.w	ip, #0
 8004b62:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004b66:	2f09      	cmp	r7, #9
 8004b68:	d97c      	bls.n	8004c64 <_strtod_l+0x294>
 8004b6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b6c:	f04f 0e00 	mov.w	lr, #0
 8004b70:	e09a      	b.n	8004ca8 <_strtod_l+0x2d8>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e7c7      	b.n	8004b06 <_strtod_l+0x136>
 8004b76:	9904      	ldr	r1, [sp, #16]
 8004b78:	3001      	adds	r0, #1
 8004b7a:	2908      	cmp	r1, #8
 8004b7c:	bfd7      	itett	le
 8004b7e:	9906      	ldrle	r1, [sp, #24]
 8004b80:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004b84:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b88:	9306      	strle	r3, [sp, #24]
 8004b8a:	9b04      	ldr	r3, [sp, #16]
 8004b8c:	901b      	str	r0, [sp, #108]	; 0x6c
 8004b8e:	3301      	adds	r3, #1
 8004b90:	9304      	str	r3, [sp, #16]
 8004b92:	e7bf      	b.n	8004b14 <_strtod_l+0x144>
 8004b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b96:	191a      	adds	r2, r3, r4
 8004b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b9a:	9a04      	ldr	r2, [sp, #16]
 8004b9c:	5d1b      	ldrb	r3, [r3, r4]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	d037      	beq.n	8004c12 <_strtod_l+0x242>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	9c04      	ldr	r4, [sp, #16]
 8004ba6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004baa:	2909      	cmp	r1, #9
 8004bac:	d913      	bls.n	8004bd6 <_strtod_l+0x206>
 8004bae:	2101      	movs	r1, #1
 8004bb0:	9105      	str	r1, [sp, #20]
 8004bb2:	e7c2      	b.n	8004b3a <_strtod_l+0x16a>
 8004bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	921b      	str	r2, [sp, #108]	; 0x6c
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d0f8      	beq.n	8004bb4 <_strtod_l+0x1e4>
 8004bc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004bc6:	2a08      	cmp	r2, #8
 8004bc8:	f200 84f0 	bhi.w	80055ac <_strtod_l+0xbdc>
 8004bcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004bce:	9208      	str	r2, [sp, #32]
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004bda:	f100 0101 	add.w	r1, r0, #1
 8004bde:	d012      	beq.n	8004c06 <_strtod_l+0x236>
 8004be0:	440a      	add	r2, r1
 8004be2:	270a      	movs	r7, #10
 8004be4:	4621      	mov	r1, r4
 8004be6:	eb00 0c04 	add.w	ip, r0, r4
 8004bea:	458c      	cmp	ip, r1
 8004bec:	d113      	bne.n	8004c16 <_strtod_l+0x246>
 8004bee:	1821      	adds	r1, r4, r0
 8004bf0:	2908      	cmp	r1, #8
 8004bf2:	f104 0401 	add.w	r4, r4, #1
 8004bf6:	4404      	add	r4, r0
 8004bf8:	dc19      	bgt.n	8004c2e <_strtod_l+0x25e>
 8004bfa:	210a      	movs	r1, #10
 8004bfc:	9b06      	ldr	r3, [sp, #24]
 8004bfe:	fb01 e303 	mla	r3, r1, r3, lr
 8004c02:	9306      	str	r3, [sp, #24]
 8004c04:	2100      	movs	r1, #0
 8004c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c08:	1c58      	adds	r0, r3, #1
 8004c0a:	901b      	str	r0, [sp, #108]	; 0x6c
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	4608      	mov	r0, r1
 8004c10:	e7c9      	b.n	8004ba6 <_strtod_l+0x1d6>
 8004c12:	9804      	ldr	r0, [sp, #16]
 8004c14:	e7d3      	b.n	8004bbe <_strtod_l+0x1ee>
 8004c16:	2908      	cmp	r1, #8
 8004c18:	f101 0101 	add.w	r1, r1, #1
 8004c1c:	dc03      	bgt.n	8004c26 <_strtod_l+0x256>
 8004c1e:	9b06      	ldr	r3, [sp, #24]
 8004c20:	437b      	muls	r3, r7
 8004c22:	9306      	str	r3, [sp, #24]
 8004c24:	e7e1      	b.n	8004bea <_strtod_l+0x21a>
 8004c26:	2910      	cmp	r1, #16
 8004c28:	bfd8      	it	le
 8004c2a:	437d      	mulle	r5, r7
 8004c2c:	e7dd      	b.n	8004bea <_strtod_l+0x21a>
 8004c2e:	2c10      	cmp	r4, #16
 8004c30:	bfdc      	itt	le
 8004c32:	210a      	movle	r1, #10
 8004c34:	fb01 e505 	mlale	r5, r1, r5, lr
 8004c38:	e7e4      	b.n	8004c04 <_strtod_l+0x234>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	9305      	str	r3, [sp, #20]
 8004c3e:	e781      	b.n	8004b44 <_strtod_l+0x174>
 8004c40:	f04f 0c01 	mov.w	ip, #1
 8004c44:	1cb3      	adds	r3, r6, #2
 8004c46:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c48:	78b3      	ldrb	r3, [r6, #2]
 8004c4a:	e78a      	b.n	8004b62 <_strtod_l+0x192>
 8004c4c:	f04f 0c00 	mov.w	ip, #0
 8004c50:	e7f8      	b.n	8004c44 <_strtod_l+0x274>
 8004c52:	bf00      	nop
 8004c54:	0800812c 	.word	0x0800812c
 8004c58:	7ff00000 	.word	0x7ff00000
 8004c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c5e:	1c5f      	adds	r7, r3, #1
 8004c60:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b30      	cmp	r3, #48	; 0x30
 8004c66:	d0f9      	beq.n	8004c5c <_strtod_l+0x28c>
 8004c68:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004c6c:	2f08      	cmp	r7, #8
 8004c6e:	f63f af7d 	bhi.w	8004b6c <_strtod_l+0x19c>
 8004c72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004c76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c7c:	1c5f      	adds	r7, r3, #1
 8004c7e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004c86:	f1b8 0f09 	cmp.w	r8, #9
 8004c8a:	d937      	bls.n	8004cfc <_strtod_l+0x32c>
 8004c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c8e:	1a7f      	subs	r7, r7, r1
 8004c90:	2f08      	cmp	r7, #8
 8004c92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004c96:	dc37      	bgt.n	8004d08 <_strtod_l+0x338>
 8004c98:	45be      	cmp	lr, r7
 8004c9a:	bfa8      	it	ge
 8004c9c:	46be      	movge	lr, r7
 8004c9e:	f1bc 0f00 	cmp.w	ip, #0
 8004ca2:	d001      	beq.n	8004ca8 <_strtod_l+0x2d8>
 8004ca4:	f1ce 0e00 	rsb	lr, lr, #0
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	d151      	bne.n	8004d50 <_strtod_l+0x380>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f47f aece 	bne.w	8004a4e <_strtod_l+0x7e>
 8004cb2:	9a07      	ldr	r2, [sp, #28]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	f47f aeca 	bne.w	8004a4e <_strtod_l+0x7e>
 8004cba:	9a05      	ldr	r2, [sp, #20]
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	f47f aee4 	bne.w	8004a8a <_strtod_l+0xba>
 8004cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8004cc4:	d027      	beq.n	8004d16 <_strtod_l+0x346>
 8004cc6:	dc21      	bgt.n	8004d0c <_strtod_l+0x33c>
 8004cc8:	2b49      	cmp	r3, #73	; 0x49
 8004cca:	f47f aede 	bne.w	8004a8a <_strtod_l+0xba>
 8004cce:	49a4      	ldr	r1, [pc, #656]	; (8004f60 <_strtod_l+0x590>)
 8004cd0:	a81b      	add	r0, sp, #108	; 0x6c
 8004cd2:	f001 feab 	bl	8006a2c <__match>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f43f aed7 	beq.w	8004a8a <_strtod_l+0xba>
 8004cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cde:	49a1      	ldr	r1, [pc, #644]	; (8004f64 <_strtod_l+0x594>)
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	a81b      	add	r0, sp, #108	; 0x6c
 8004ce4:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ce6:	f001 fea1 	bl	8006a2c <__match>
 8004cea:	b910      	cbnz	r0, 8004cf2 <_strtod_l+0x322>
 8004cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cf2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004f78 <_strtod_l+0x5a8>
 8004cf6:	f04f 0900 	mov.w	r9, #0
 8004cfa:	e6a8      	b.n	8004a4e <_strtod_l+0x7e>
 8004cfc:	210a      	movs	r1, #10
 8004cfe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004d02:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004d06:	e7b8      	b.n	8004c7a <_strtod_l+0x2aa>
 8004d08:	46be      	mov	lr, r7
 8004d0a:	e7c8      	b.n	8004c9e <_strtod_l+0x2ce>
 8004d0c:	2b69      	cmp	r3, #105	; 0x69
 8004d0e:	d0de      	beq.n	8004cce <_strtod_l+0x2fe>
 8004d10:	2b6e      	cmp	r3, #110	; 0x6e
 8004d12:	f47f aeba 	bne.w	8004a8a <_strtod_l+0xba>
 8004d16:	4994      	ldr	r1, [pc, #592]	; (8004f68 <_strtod_l+0x598>)
 8004d18:	a81b      	add	r0, sp, #108	; 0x6c
 8004d1a:	f001 fe87 	bl	8006a2c <__match>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f aeb3 	beq.w	8004a8a <_strtod_l+0xba>
 8004d24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b28      	cmp	r3, #40	; 0x28
 8004d2a:	d10e      	bne.n	8004d4a <_strtod_l+0x37a>
 8004d2c:	aa1e      	add	r2, sp, #120	; 0x78
 8004d2e:	498f      	ldr	r1, [pc, #572]	; (8004f6c <_strtod_l+0x59c>)
 8004d30:	a81b      	add	r0, sp, #108	; 0x6c
 8004d32:	f001 fe8f 	bl	8006a54 <__hexnan>
 8004d36:	2805      	cmp	r0, #5
 8004d38:	d107      	bne.n	8004d4a <_strtod_l+0x37a>
 8004d3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d3c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004d40:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004d44:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004d48:	e681      	b.n	8004a4e <_strtod_l+0x7e>
 8004d4a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004f80 <_strtod_l+0x5b0>
 8004d4e:	e7d2      	b.n	8004cf6 <_strtod_l+0x326>
 8004d50:	ebae 0302 	sub.w	r3, lr, r2
 8004d54:	9307      	str	r3, [sp, #28]
 8004d56:	9b04      	ldr	r3, [sp, #16]
 8004d58:	9806      	ldr	r0, [sp, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf08      	it	eq
 8004d5e:	4623      	moveq	r3, r4
 8004d60:	2c10      	cmp	r4, #16
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	46a0      	mov	r8, r4
 8004d66:	bfa8      	it	ge
 8004d68:	f04f 0810 	movge.w	r8, #16
 8004d6c:	f7fb fb3a 	bl	80003e4 <__aeabi_ui2d>
 8004d70:	2c09      	cmp	r4, #9
 8004d72:	4681      	mov	r9, r0
 8004d74:	468a      	mov	sl, r1
 8004d76:	dc13      	bgt.n	8004da0 <_strtod_l+0x3d0>
 8004d78:	9b07      	ldr	r3, [sp, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f43f ae67 	beq.w	8004a4e <_strtod_l+0x7e>
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	dd7e      	ble.n	8004e82 <_strtod_l+0x4b2>
 8004d84:	2b16      	cmp	r3, #22
 8004d86:	dc65      	bgt.n	8004e54 <_strtod_l+0x484>
 8004d88:	4a79      	ldr	r2, [pc, #484]	; (8004f70 <_strtod_l+0x5a0>)
 8004d8a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004d8e:	464a      	mov	r2, r9
 8004d90:	e9de 0100 	ldrd	r0, r1, [lr]
 8004d94:	4653      	mov	r3, sl
 8004d96:	f7fb fb9f 	bl	80004d8 <__aeabi_dmul>
 8004d9a:	4681      	mov	r9, r0
 8004d9c:	468a      	mov	sl, r1
 8004d9e:	e656      	b.n	8004a4e <_strtod_l+0x7e>
 8004da0:	4b73      	ldr	r3, [pc, #460]	; (8004f70 <_strtod_l+0x5a0>)
 8004da2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004da6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004daa:	f7fb fb95 	bl	80004d8 <__aeabi_dmul>
 8004dae:	4606      	mov	r6, r0
 8004db0:	4628      	mov	r0, r5
 8004db2:	460f      	mov	r7, r1
 8004db4:	f7fb fb16 	bl	80003e4 <__aeabi_ui2d>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb f9d4 	bl	800016c <__adddf3>
 8004dc4:	2c0f      	cmp	r4, #15
 8004dc6:	4681      	mov	r9, r0
 8004dc8:	468a      	mov	sl, r1
 8004dca:	ddd5      	ble.n	8004d78 <_strtod_l+0x3a8>
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	eba4 0808 	sub.w	r8, r4, r8
 8004dd2:	4498      	add	r8, r3
 8004dd4:	f1b8 0f00 	cmp.w	r8, #0
 8004dd8:	f340 809a 	ble.w	8004f10 <_strtod_l+0x540>
 8004ddc:	f018 030f 	ands.w	r3, r8, #15
 8004de0:	d00a      	beq.n	8004df8 <_strtod_l+0x428>
 8004de2:	4963      	ldr	r1, [pc, #396]	; (8004f70 <_strtod_l+0x5a0>)
 8004de4:	464a      	mov	r2, r9
 8004de6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dee:	4653      	mov	r3, sl
 8004df0:	f7fb fb72 	bl	80004d8 <__aeabi_dmul>
 8004df4:	4681      	mov	r9, r0
 8004df6:	468a      	mov	sl, r1
 8004df8:	f038 080f 	bics.w	r8, r8, #15
 8004dfc:	d077      	beq.n	8004eee <_strtod_l+0x51e>
 8004dfe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004e02:	dd4b      	ble.n	8004e9c <_strtod_l+0x4cc>
 8004e04:	f04f 0800 	mov.w	r8, #0
 8004e08:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e0c:	f8cd 8020 	str.w	r8, [sp, #32]
 8004e10:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e14:	2322      	movs	r3, #34	; 0x22
 8004e16:	f04f 0900 	mov.w	r9, #0
 8004e1a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004f78 <_strtod_l+0x5a8>
 8004e1e:	f8cb 3000 	str.w	r3, [fp]
 8004e22:	9b08      	ldr	r3, [sp, #32]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f43f ae12 	beq.w	8004a4e <_strtod_l+0x7e>
 8004e2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e2c:	4658      	mov	r0, fp
 8004e2e:	f001 ff1c 	bl	8006c6a <_Bfree>
 8004e32:	9906      	ldr	r1, [sp, #24]
 8004e34:	4658      	mov	r0, fp
 8004e36:	f001 ff18 	bl	8006c6a <_Bfree>
 8004e3a:	9904      	ldr	r1, [sp, #16]
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	f001 ff14 	bl	8006c6a <_Bfree>
 8004e42:	9908      	ldr	r1, [sp, #32]
 8004e44:	4658      	mov	r0, fp
 8004e46:	f001 ff10 	bl	8006c6a <_Bfree>
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f001 ff0c 	bl	8006c6a <_Bfree>
 8004e52:	e5fc      	b.n	8004a4e <_strtod_l+0x7e>
 8004e54:	9a07      	ldr	r2, [sp, #28]
 8004e56:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	dbb6      	blt.n	8004dcc <_strtod_l+0x3fc>
 8004e5e:	4d44      	ldr	r5, [pc, #272]	; (8004f70 <_strtod_l+0x5a0>)
 8004e60:	f1c4 040f 	rsb	r4, r4, #15
 8004e64:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004e68:	464a      	mov	r2, r9
 8004e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e6e:	4653      	mov	r3, sl
 8004e70:	f7fb fb32 	bl	80004d8 <__aeabi_dmul>
 8004e74:	9b07      	ldr	r3, [sp, #28]
 8004e76:	1b1c      	subs	r4, r3, r4
 8004e78:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004e7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e80:	e789      	b.n	8004d96 <_strtod_l+0x3c6>
 8004e82:	f113 0f16 	cmn.w	r3, #22
 8004e86:	dba1      	blt.n	8004dcc <_strtod_l+0x3fc>
 8004e88:	4a39      	ldr	r2, [pc, #228]	; (8004f70 <_strtod_l+0x5a0>)
 8004e8a:	4648      	mov	r0, r9
 8004e8c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004e90:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004e94:	4651      	mov	r1, sl
 8004e96:	f7fb fc49 	bl	800072c <__aeabi_ddiv>
 8004e9a:	e77e      	b.n	8004d9a <_strtod_l+0x3ca>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4648      	mov	r0, r9
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	4e33      	ldr	r6, [pc, #204]	; (8004f74 <_strtod_l+0x5a4>)
 8004ea6:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004eaa:	f1b8 0f01 	cmp.w	r8, #1
 8004eae:	dc21      	bgt.n	8004ef4 <_strtod_l+0x524>
 8004eb0:	b10b      	cbz	r3, 8004eb6 <_strtod_l+0x4e6>
 8004eb2:	4681      	mov	r9, r0
 8004eb4:	468a      	mov	sl, r1
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <_strtod_l+0x5a4>)
 8004eb8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004ebc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004ec0:	464a      	mov	r2, r9
 8004ec2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ec6:	4653      	mov	r3, sl
 8004ec8:	f7fb fb06 	bl	80004d8 <__aeabi_dmul>
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <_strtod_l+0x5a8>)
 8004ece:	460a      	mov	r2, r1
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	492a      	ldr	r1, [pc, #168]	; (8004f7c <_strtod_l+0x5ac>)
 8004ed4:	4681      	mov	r9, r0
 8004ed6:	428b      	cmp	r3, r1
 8004ed8:	d894      	bhi.n	8004e04 <_strtod_l+0x434>
 8004eda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ede:	428b      	cmp	r3, r1
 8004ee0:	bf86      	itte	hi
 8004ee2:	f04f 39ff 	movhi.w	r9, #4294967295
 8004ee6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004f84 <_strtod_l+0x5b4>
 8004eea:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9305      	str	r3, [sp, #20]
 8004ef2:	e07b      	b.n	8004fec <_strtod_l+0x61c>
 8004ef4:	f018 0f01 	tst.w	r8, #1
 8004ef8:	d006      	beq.n	8004f08 <_strtod_l+0x538>
 8004efa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb fae9 	bl	80004d8 <__aeabi_dmul>
 8004f06:	2301      	movs	r3, #1
 8004f08:	3501      	adds	r5, #1
 8004f0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f0e:	e7cc      	b.n	8004eaa <_strtod_l+0x4da>
 8004f10:	d0ed      	beq.n	8004eee <_strtod_l+0x51e>
 8004f12:	f1c8 0800 	rsb	r8, r8, #0
 8004f16:	f018 020f 	ands.w	r2, r8, #15
 8004f1a:	d00a      	beq.n	8004f32 <_strtod_l+0x562>
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <_strtod_l+0x5a0>)
 8004f1e:	4648      	mov	r0, r9
 8004f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb fbff 	bl	800072c <__aeabi_ddiv>
 8004f2e:	4681      	mov	r9, r0
 8004f30:	468a      	mov	sl, r1
 8004f32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004f36:	d0da      	beq.n	8004eee <_strtod_l+0x51e>
 8004f38:	f1b8 0f1f 	cmp.w	r8, #31
 8004f3c:	dd24      	ble.n	8004f88 <_strtod_l+0x5b8>
 8004f3e:	f04f 0800 	mov.w	r8, #0
 8004f42:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f46:	f8cd 8020 	str.w	r8, [sp, #32]
 8004f4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f4e:	2322      	movs	r3, #34	; 0x22
 8004f50:	f04f 0900 	mov.w	r9, #0
 8004f54:	f04f 0a00 	mov.w	sl, #0
 8004f58:	f8cb 3000 	str.w	r3, [fp]
 8004f5c:	e761      	b.n	8004e22 <_strtod_l+0x452>
 8004f5e:	bf00      	nop
 8004f60:	080080f5 	.word	0x080080f5
 8004f64:	08008183 	.word	0x08008183
 8004f68:	080080fd 	.word	0x080080fd
 8004f6c:	08008140 	.word	0x08008140
 8004f70:	08008228 	.word	0x08008228
 8004f74:	08008200 	.word	0x08008200
 8004f78:	7ff00000 	.word	0x7ff00000
 8004f7c:	7ca00000 	.word	0x7ca00000
 8004f80:	fff80000 	.word	0xfff80000
 8004f84:	7fefffff 	.word	0x7fefffff
 8004f88:	f018 0310 	ands.w	r3, r8, #16
 8004f8c:	bf18      	it	ne
 8004f8e:	236a      	movne	r3, #106	; 0x6a
 8004f90:	4648      	mov	r0, r9
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	4651      	mov	r1, sl
 8004f96:	2300      	movs	r3, #0
 8004f98:	4da1      	ldr	r5, [pc, #644]	; (8005220 <_strtod_l+0x850>)
 8004f9a:	f1b8 0f00 	cmp.w	r8, #0
 8004f9e:	f300 8113 	bgt.w	80051c8 <_strtod_l+0x7f8>
 8004fa2:	b10b      	cbz	r3, 8004fa8 <_strtod_l+0x5d8>
 8004fa4:	4681      	mov	r9, r0
 8004fa6:	468a      	mov	sl, r1
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	b1bb      	cbz	r3, 8004fdc <_strtod_l+0x60c>
 8004fac:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004fb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	dd10      	ble.n	8004fdc <_strtod_l+0x60c>
 8004fba:	2b1f      	cmp	r3, #31
 8004fbc:	f340 8110 	ble.w	80051e0 <_strtod_l+0x810>
 8004fc0:	2b34      	cmp	r3, #52	; 0x34
 8004fc2:	bfd8      	it	le
 8004fc4:	f04f 32ff 	movle.w	r2, #4294967295
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	bfcf      	iteee	gt
 8004fce:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004fd2:	3b20      	suble	r3, #32
 8004fd4:	fa02 f303 	lslle.w	r3, r2, r3
 8004fd8:	ea03 0a01 	andle.w	sl, r3, r1
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4648      	mov	r0, r9
 8004fe2:	4651      	mov	r1, sl
 8004fe4:	f7fb fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d1a8      	bne.n	8004f3e <_strtod_l+0x56e>
 8004fec:	9b06      	ldr	r3, [sp, #24]
 8004fee:	9a04      	ldr	r2, [sp, #16]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	9908      	ldr	r1, [sp, #32]
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	4658      	mov	r0, fp
 8004ff8:	f001 fe89 	bl	8006d0e <__s2b>
 8004ffc:	9008      	str	r0, [sp, #32]
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f43f af00 	beq.w	8004e04 <_strtod_l+0x434>
 8005004:	9a07      	ldr	r2, [sp, #28]
 8005006:	9b07      	ldr	r3, [sp, #28]
 8005008:	2a00      	cmp	r2, #0
 800500a:	f1c3 0300 	rsb	r3, r3, #0
 800500e:	bfa8      	it	ge
 8005010:	2300      	movge	r3, #0
 8005012:	f04f 0800 	mov.w	r8, #0
 8005016:	930e      	str	r3, [sp, #56]	; 0x38
 8005018:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800501c:	9316      	str	r3, [sp, #88]	; 0x58
 800501e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005022:	9b08      	ldr	r3, [sp, #32]
 8005024:	4658      	mov	r0, fp
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	f001 fdeb 	bl	8006c02 <_Balloc>
 800502c:	9006      	str	r0, [sp, #24]
 800502e:	2800      	cmp	r0, #0
 8005030:	f43f aef0 	beq.w	8004e14 <_strtod_l+0x444>
 8005034:	9b08      	ldr	r3, [sp, #32]
 8005036:	300c      	adds	r0, #12
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	f103 010c 	add.w	r1, r3, #12
 800503e:	3202      	adds	r2, #2
 8005040:	0092      	lsls	r2, r2, #2
 8005042:	f001 fdd3 	bl	8006bec <memcpy>
 8005046:	ab1e      	add	r3, sp, #120	; 0x78
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	ab1d      	add	r3, sp, #116	; 0x74
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	464a      	mov	r2, r9
 8005050:	4653      	mov	r3, sl
 8005052:	4658      	mov	r0, fp
 8005054:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005058:	f002 f914 	bl	8007284 <__d2b>
 800505c:	901c      	str	r0, [sp, #112]	; 0x70
 800505e:	2800      	cmp	r0, #0
 8005060:	f43f aed8 	beq.w	8004e14 <_strtod_l+0x444>
 8005064:	2101      	movs	r1, #1
 8005066:	4658      	mov	r0, fp
 8005068:	f001 fedd 	bl	8006e26 <__i2b>
 800506c:	9004      	str	r0, [sp, #16]
 800506e:	4603      	mov	r3, r0
 8005070:	2800      	cmp	r0, #0
 8005072:	f43f aecf 	beq.w	8004e14 <_strtod_l+0x444>
 8005076:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005078:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800507a:	2d00      	cmp	r5, #0
 800507c:	bfab      	itete	ge
 800507e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005080:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005082:	18ee      	addge	r6, r5, r3
 8005084:	1b5c      	sublt	r4, r3, r5
 8005086:	9b05      	ldr	r3, [sp, #20]
 8005088:	bfa8      	it	ge
 800508a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800508c:	eba5 0503 	sub.w	r5, r5, r3
 8005090:	4415      	add	r5, r2
 8005092:	4b64      	ldr	r3, [pc, #400]	; (8005224 <_strtod_l+0x854>)
 8005094:	f105 35ff 	add.w	r5, r5, #4294967295
 8005098:	bfb8      	it	lt
 800509a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800509c:	429d      	cmp	r5, r3
 800509e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80050a2:	f280 80af 	bge.w	8005204 <_strtod_l+0x834>
 80050a6:	1b5b      	subs	r3, r3, r5
 80050a8:	2b1f      	cmp	r3, #31
 80050aa:	eba2 0203 	sub.w	r2, r2, r3
 80050ae:	f04f 0701 	mov.w	r7, #1
 80050b2:	f300 809c 	bgt.w	80051ee <_strtod_l+0x81e>
 80050b6:	2500      	movs	r5, #0
 80050b8:	fa07 f303 	lsl.w	r3, r7, r3
 80050bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80050be:	18b7      	adds	r7, r6, r2
 80050c0:	9b05      	ldr	r3, [sp, #20]
 80050c2:	42be      	cmp	r6, r7
 80050c4:	4414      	add	r4, r2
 80050c6:	441c      	add	r4, r3
 80050c8:	4633      	mov	r3, r6
 80050ca:	bfa8      	it	ge
 80050cc:	463b      	movge	r3, r7
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	bfa8      	it	ge
 80050d2:	4623      	movge	r3, r4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfc2      	ittt	gt
 80050d8:	1aff      	subgt	r7, r7, r3
 80050da:	1ae4      	subgt	r4, r4, r3
 80050dc:	1af6      	subgt	r6, r6, r3
 80050de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050e0:	b1bb      	cbz	r3, 8005112 <_strtod_l+0x742>
 80050e2:	461a      	mov	r2, r3
 80050e4:	9904      	ldr	r1, [sp, #16]
 80050e6:	4658      	mov	r0, fp
 80050e8:	f001 ff3c 	bl	8006f64 <__pow5mult>
 80050ec:	9004      	str	r0, [sp, #16]
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f43f ae90 	beq.w	8004e14 <_strtod_l+0x444>
 80050f4:	4601      	mov	r1, r0
 80050f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050f8:	4658      	mov	r0, fp
 80050fa:	f001 fe9d 	bl	8006e38 <__multiply>
 80050fe:	9009      	str	r0, [sp, #36]	; 0x24
 8005100:	2800      	cmp	r0, #0
 8005102:	f43f ae87 	beq.w	8004e14 <_strtod_l+0x444>
 8005106:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005108:	4658      	mov	r0, fp
 800510a:	f001 fdae 	bl	8006c6a <_Bfree>
 800510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005110:	931c      	str	r3, [sp, #112]	; 0x70
 8005112:	2f00      	cmp	r7, #0
 8005114:	dc7a      	bgt.n	800520c <_strtod_l+0x83c>
 8005116:	9b07      	ldr	r3, [sp, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	dd08      	ble.n	800512e <_strtod_l+0x75e>
 800511c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800511e:	9906      	ldr	r1, [sp, #24]
 8005120:	4658      	mov	r0, fp
 8005122:	f001 ff1f 	bl	8006f64 <__pow5mult>
 8005126:	9006      	str	r0, [sp, #24]
 8005128:	2800      	cmp	r0, #0
 800512a:	f43f ae73 	beq.w	8004e14 <_strtod_l+0x444>
 800512e:	2c00      	cmp	r4, #0
 8005130:	dd08      	ble.n	8005144 <_strtod_l+0x774>
 8005132:	4622      	mov	r2, r4
 8005134:	9906      	ldr	r1, [sp, #24]
 8005136:	4658      	mov	r0, fp
 8005138:	f001 ff62 	bl	8007000 <__lshift>
 800513c:	9006      	str	r0, [sp, #24]
 800513e:	2800      	cmp	r0, #0
 8005140:	f43f ae68 	beq.w	8004e14 <_strtod_l+0x444>
 8005144:	2e00      	cmp	r6, #0
 8005146:	dd08      	ble.n	800515a <_strtod_l+0x78a>
 8005148:	4632      	mov	r2, r6
 800514a:	9904      	ldr	r1, [sp, #16]
 800514c:	4658      	mov	r0, fp
 800514e:	f001 ff57 	bl	8007000 <__lshift>
 8005152:	9004      	str	r0, [sp, #16]
 8005154:	2800      	cmp	r0, #0
 8005156:	f43f ae5d 	beq.w	8004e14 <_strtod_l+0x444>
 800515a:	9a06      	ldr	r2, [sp, #24]
 800515c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800515e:	4658      	mov	r0, fp
 8005160:	f001 ffbc 	bl	80070dc <__mdiff>
 8005164:	4680      	mov	r8, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	f43f ae54 	beq.w	8004e14 <_strtod_l+0x444>
 800516c:	2400      	movs	r4, #0
 800516e:	68c3      	ldr	r3, [r0, #12]
 8005170:	9904      	ldr	r1, [sp, #16]
 8005172:	60c4      	str	r4, [r0, #12]
 8005174:	930c      	str	r3, [sp, #48]	; 0x30
 8005176:	f001 ff97 	bl	80070a8 <__mcmp>
 800517a:	42a0      	cmp	r0, r4
 800517c:	da54      	bge.n	8005228 <_strtod_l+0x858>
 800517e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005180:	b9f3      	cbnz	r3, 80051c0 <_strtod_l+0x7f0>
 8005182:	f1b9 0f00 	cmp.w	r9, #0
 8005186:	d11b      	bne.n	80051c0 <_strtod_l+0x7f0>
 8005188:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800518c:	b9c3      	cbnz	r3, 80051c0 <_strtod_l+0x7f0>
 800518e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005192:	0d1b      	lsrs	r3, r3, #20
 8005194:	051b      	lsls	r3, r3, #20
 8005196:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800519a:	d911      	bls.n	80051c0 <_strtod_l+0x7f0>
 800519c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80051a0:	b91b      	cbnz	r3, 80051aa <_strtod_l+0x7da>
 80051a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	dd0a      	ble.n	80051c0 <_strtod_l+0x7f0>
 80051aa:	4641      	mov	r1, r8
 80051ac:	2201      	movs	r2, #1
 80051ae:	4658      	mov	r0, fp
 80051b0:	f001 ff26 	bl	8007000 <__lshift>
 80051b4:	9904      	ldr	r1, [sp, #16]
 80051b6:	4680      	mov	r8, r0
 80051b8:	f001 ff76 	bl	80070a8 <__mcmp>
 80051bc:	2800      	cmp	r0, #0
 80051be:	dc68      	bgt.n	8005292 <_strtod_l+0x8c2>
 80051c0:	9b05      	ldr	r3, [sp, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d172      	bne.n	80052ac <_strtod_l+0x8dc>
 80051c6:	e630      	b.n	8004e2a <_strtod_l+0x45a>
 80051c8:	f018 0f01 	tst.w	r8, #1
 80051cc:	d004      	beq.n	80051d8 <_strtod_l+0x808>
 80051ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051d2:	f7fb f981 	bl	80004d8 <__aeabi_dmul>
 80051d6:	2301      	movs	r3, #1
 80051d8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051dc:	3508      	adds	r5, #8
 80051de:	e6dc      	b.n	8004f9a <_strtod_l+0x5ca>
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	ea03 0909 	and.w	r9, r3, r9
 80051ec:	e6f6      	b.n	8004fdc <_strtod_l+0x60c>
 80051ee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80051f2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80051f6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80051fa:	35e2      	adds	r5, #226	; 0xe2
 80051fc:	fa07 f505 	lsl.w	r5, r7, r5
 8005200:	970f      	str	r7, [sp, #60]	; 0x3c
 8005202:	e75c      	b.n	80050be <_strtod_l+0x6ee>
 8005204:	2301      	movs	r3, #1
 8005206:	2500      	movs	r5, #0
 8005208:	930f      	str	r3, [sp, #60]	; 0x3c
 800520a:	e758      	b.n	80050be <_strtod_l+0x6ee>
 800520c:	463a      	mov	r2, r7
 800520e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005210:	4658      	mov	r0, fp
 8005212:	f001 fef5 	bl	8007000 <__lshift>
 8005216:	901c      	str	r0, [sp, #112]	; 0x70
 8005218:	2800      	cmp	r0, #0
 800521a:	f47f af7c 	bne.w	8005116 <_strtod_l+0x746>
 800521e:	e5f9      	b.n	8004e14 <_strtod_l+0x444>
 8005220:	08008158 	.word	0x08008158
 8005224:	fffffc02 	.word	0xfffffc02
 8005228:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800522c:	f040 8089 	bne.w	8005342 <_strtod_l+0x972>
 8005230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005232:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005236:	b342      	cbz	r2, 800528a <_strtod_l+0x8ba>
 8005238:	4aaf      	ldr	r2, [pc, #700]	; (80054f8 <_strtod_l+0xb28>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d156      	bne.n	80052ec <_strtod_l+0x91c>
 800523e:	9b05      	ldr	r3, [sp, #20]
 8005240:	4648      	mov	r0, r9
 8005242:	b1eb      	cbz	r3, 8005280 <_strtod_l+0x8b0>
 8005244:	4653      	mov	r3, sl
 8005246:	4aad      	ldr	r2, [pc, #692]	; (80054fc <_strtod_l+0xb2c>)
 8005248:	f04f 31ff 	mov.w	r1, #4294967295
 800524c:	401a      	ands	r2, r3
 800524e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005252:	d818      	bhi.n	8005286 <_strtod_l+0x8b6>
 8005254:	0d12      	lsrs	r2, r2, #20
 8005256:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	4298      	cmp	r0, r3
 8005260:	d144      	bne.n	80052ec <_strtod_l+0x91c>
 8005262:	4ba7      	ldr	r3, [pc, #668]	; (8005500 <_strtod_l+0xb30>)
 8005264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005266:	429a      	cmp	r2, r3
 8005268:	d102      	bne.n	8005270 <_strtod_l+0x8a0>
 800526a:	3001      	adds	r0, #1
 800526c:	f43f add2 	beq.w	8004e14 <_strtod_l+0x444>
 8005270:	4ba2      	ldr	r3, [pc, #648]	; (80054fc <_strtod_l+0xb2c>)
 8005272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005274:	f04f 0900 	mov.w	r9, #0
 8005278:	401a      	ands	r2, r3
 800527a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800527e:	e79f      	b.n	80051c0 <_strtod_l+0x7f0>
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	e7eb      	b.n	800525e <_strtod_l+0x88e>
 8005286:	460b      	mov	r3, r1
 8005288:	e7e9      	b.n	800525e <_strtod_l+0x88e>
 800528a:	bb7b      	cbnz	r3, 80052ec <_strtod_l+0x91c>
 800528c:	f1b9 0f00 	cmp.w	r9, #0
 8005290:	d12c      	bne.n	80052ec <_strtod_l+0x91c>
 8005292:	9905      	ldr	r1, [sp, #20]
 8005294:	4653      	mov	r3, sl
 8005296:	4a99      	ldr	r2, [pc, #612]	; (80054fc <_strtod_l+0xb2c>)
 8005298:	b1f1      	cbz	r1, 80052d8 <_strtod_l+0x908>
 800529a:	ea02 010a 	and.w	r1, r2, sl
 800529e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80052a2:	dc19      	bgt.n	80052d8 <_strtod_l+0x908>
 80052a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80052a8:	f77f ae51 	ble.w	8004f4e <_strtod_l+0x57e>
 80052ac:	2300      	movs	r3, #0
 80052ae:	4a95      	ldr	r2, [pc, #596]	; (8005504 <_strtod_l+0xb34>)
 80052b0:	4648      	mov	r0, r9
 80052b2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80052b6:	4651      	mov	r1, sl
 80052b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80052bc:	f7fb f90c 	bl	80004d8 <__aeabi_dmul>
 80052c0:	4681      	mov	r9, r0
 80052c2:	468a      	mov	sl, r1
 80052c4:	2900      	cmp	r1, #0
 80052c6:	f47f adb0 	bne.w	8004e2a <_strtod_l+0x45a>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f47f adad 	bne.w	8004e2a <_strtod_l+0x45a>
 80052d0:	2322      	movs	r3, #34	; 0x22
 80052d2:	f8cb 3000 	str.w	r3, [fp]
 80052d6:	e5a8      	b.n	8004e2a <_strtod_l+0x45a>
 80052d8:	4013      	ands	r3, r2
 80052da:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80052de:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80052e2:	f04f 39ff 	mov.w	r9, #4294967295
 80052e6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80052ea:	e769      	b.n	80051c0 <_strtod_l+0x7f0>
 80052ec:	b19d      	cbz	r5, 8005316 <_strtod_l+0x946>
 80052ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f0:	421d      	tst	r5, r3
 80052f2:	f43f af65 	beq.w	80051c0 <_strtod_l+0x7f0>
 80052f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f8:	9a05      	ldr	r2, [sp, #20]
 80052fa:	4648      	mov	r0, r9
 80052fc:	4651      	mov	r1, sl
 80052fe:	b173      	cbz	r3, 800531e <_strtod_l+0x94e>
 8005300:	f7ff fb44 	bl	800498c <sulp>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800530c:	f7fa ff2e 	bl	800016c <__adddf3>
 8005310:	4681      	mov	r9, r0
 8005312:	468a      	mov	sl, r1
 8005314:	e754      	b.n	80051c0 <_strtod_l+0x7f0>
 8005316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005318:	ea13 0f09 	tst.w	r3, r9
 800531c:	e7e9      	b.n	80052f2 <_strtod_l+0x922>
 800531e:	f7ff fb35 	bl	800498c <sulp>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800532a:	f7fa ff1d 	bl	8000168 <__aeabi_dsub>
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	4681      	mov	r9, r0
 8005334:	468a      	mov	sl, r1
 8005336:	f7fb fb37 	bl	80009a8 <__aeabi_dcmpeq>
 800533a:	2800      	cmp	r0, #0
 800533c:	f47f ae07 	bne.w	8004f4e <_strtod_l+0x57e>
 8005340:	e73e      	b.n	80051c0 <_strtod_l+0x7f0>
 8005342:	9904      	ldr	r1, [sp, #16]
 8005344:	4640      	mov	r0, r8
 8005346:	f001 ffec 	bl	8007322 <__ratio>
 800534a:	2200      	movs	r2, #0
 800534c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005350:	4606      	mov	r6, r0
 8005352:	460f      	mov	r7, r1
 8005354:	f7fb fb3c 	bl	80009d0 <__aeabi_dcmple>
 8005358:	2800      	cmp	r0, #0
 800535a:	d075      	beq.n	8005448 <_strtod_l+0xa78>
 800535c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800535e:	2b00      	cmp	r3, #0
 8005360:	d047      	beq.n	80053f2 <_strtod_l+0xa22>
 8005362:	2600      	movs	r6, #0
 8005364:	4f68      	ldr	r7, [pc, #416]	; (8005508 <_strtod_l+0xb38>)
 8005366:	4d68      	ldr	r5, [pc, #416]	; (8005508 <_strtod_l+0xb38>)
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536e:	0d1b      	lsrs	r3, r3, #20
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	930f      	str	r3, [sp, #60]	; 0x3c
 8005374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005376:	4b65      	ldr	r3, [pc, #404]	; (800550c <_strtod_l+0xb3c>)
 8005378:	429a      	cmp	r2, r3
 800537a:	f040 80cf 	bne.w	800551c <_strtod_l+0xb4c>
 800537e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005382:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005388:	4648      	mov	r0, r9
 800538a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800538e:	4651      	mov	r1, sl
 8005390:	f001 ff02 	bl	8007198 <__ulp>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb f89c 	bl	80004d8 <__aeabi_dmul>
 80053a0:	464a      	mov	r2, r9
 80053a2:	4653      	mov	r3, sl
 80053a4:	f7fa fee2 	bl	800016c <__adddf3>
 80053a8:	460b      	mov	r3, r1
 80053aa:	4954      	ldr	r1, [pc, #336]	; (80054fc <_strtod_l+0xb2c>)
 80053ac:	4a58      	ldr	r2, [pc, #352]	; (8005510 <_strtod_l+0xb40>)
 80053ae:	4019      	ands	r1, r3
 80053b0:	4291      	cmp	r1, r2
 80053b2:	4681      	mov	r9, r0
 80053b4:	d95e      	bls.n	8005474 <_strtod_l+0xaa4>
 80053b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80053bc:	4293      	cmp	r3, r2
 80053be:	d103      	bne.n	80053c8 <_strtod_l+0x9f8>
 80053c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c2:	3301      	adds	r3, #1
 80053c4:	f43f ad26 	beq.w	8004e14 <_strtod_l+0x444>
 80053c8:	f04f 39ff 	mov.w	r9, #4294967295
 80053cc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005500 <_strtod_l+0xb30>
 80053d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053d2:	4658      	mov	r0, fp
 80053d4:	f001 fc49 	bl	8006c6a <_Bfree>
 80053d8:	9906      	ldr	r1, [sp, #24]
 80053da:	4658      	mov	r0, fp
 80053dc:	f001 fc45 	bl	8006c6a <_Bfree>
 80053e0:	9904      	ldr	r1, [sp, #16]
 80053e2:	4658      	mov	r0, fp
 80053e4:	f001 fc41 	bl	8006c6a <_Bfree>
 80053e8:	4641      	mov	r1, r8
 80053ea:	4658      	mov	r0, fp
 80053ec:	f001 fc3d 	bl	8006c6a <_Bfree>
 80053f0:	e617      	b.n	8005022 <_strtod_l+0x652>
 80053f2:	f1b9 0f00 	cmp.w	r9, #0
 80053f6:	d119      	bne.n	800542c <_strtod_l+0xa5c>
 80053f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053fe:	b9e3      	cbnz	r3, 800543a <_strtod_l+0xa6a>
 8005400:	2200      	movs	r2, #0
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <_strtod_l+0xb38>)
 8005404:	4630      	mov	r0, r6
 8005406:	4639      	mov	r1, r7
 8005408:	f7fb fad8 	bl	80009bc <__aeabi_dcmplt>
 800540c:	b9c8      	cbnz	r0, 8005442 <_strtod_l+0xa72>
 800540e:	2200      	movs	r2, #0
 8005410:	4b40      	ldr	r3, [pc, #256]	; (8005514 <_strtod_l+0xb44>)
 8005412:	4630      	mov	r0, r6
 8005414:	4639      	mov	r1, r7
 8005416:	f7fb f85f 	bl	80004d8 <__aeabi_dmul>
 800541a:	4604      	mov	r4, r0
 800541c:	460d      	mov	r5, r1
 800541e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005422:	9418      	str	r4, [sp, #96]	; 0x60
 8005424:	9319      	str	r3, [sp, #100]	; 0x64
 8005426:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800542a:	e79d      	b.n	8005368 <_strtod_l+0x998>
 800542c:	f1b9 0f01 	cmp.w	r9, #1
 8005430:	d103      	bne.n	800543a <_strtod_l+0xa6a>
 8005432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	f43f ad8a 	beq.w	8004f4e <_strtod_l+0x57e>
 800543a:	2600      	movs	r6, #0
 800543c:	4f36      	ldr	r7, [pc, #216]	; (8005518 <_strtod_l+0xb48>)
 800543e:	2400      	movs	r4, #0
 8005440:	e791      	b.n	8005366 <_strtod_l+0x996>
 8005442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005444:	4d33      	ldr	r5, [pc, #204]	; (8005514 <_strtod_l+0xb44>)
 8005446:	e7ea      	b.n	800541e <_strtod_l+0xa4e>
 8005448:	4b32      	ldr	r3, [pc, #200]	; (8005514 <_strtod_l+0xb44>)
 800544a:	2200      	movs	r2, #0
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb f842 	bl	80004d8 <__aeabi_dmul>
 8005454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005456:	4604      	mov	r4, r0
 8005458:	460d      	mov	r5, r1
 800545a:	b933      	cbnz	r3, 800546a <_strtod_l+0xa9a>
 800545c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005460:	9010      	str	r0, [sp, #64]	; 0x40
 8005462:	9311      	str	r3, [sp, #68]	; 0x44
 8005464:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005468:	e77e      	b.n	8005368 <_strtod_l+0x998>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005472:	e7f7      	b.n	8005464 <_strtod_l+0xa94>
 8005474:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005478:	9b05      	ldr	r3, [sp, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1a8      	bne.n	80053d0 <_strtod_l+0xa00>
 800547e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005482:	0d1b      	lsrs	r3, r3, #20
 8005484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005486:	051b      	lsls	r3, r3, #20
 8005488:	429a      	cmp	r2, r3
 800548a:	4656      	mov	r6, sl
 800548c:	d1a0      	bne.n	80053d0 <_strtod_l+0xa00>
 800548e:	4629      	mov	r1, r5
 8005490:	4620      	mov	r0, r4
 8005492:	f7fb fad1 	bl	8000a38 <__aeabi_d2iz>
 8005496:	f7fa ffb5 	bl	8000404 <__aeabi_i2d>
 800549a:	460b      	mov	r3, r1
 800549c:	4602      	mov	r2, r0
 800549e:	4629      	mov	r1, r5
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7fa fe61 	bl	8000168 <__aeabi_dsub>
 80054a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054a8:	4604      	mov	r4, r0
 80054aa:	460d      	mov	r5, r1
 80054ac:	b933      	cbnz	r3, 80054bc <_strtod_l+0xaec>
 80054ae:	f1b9 0f00 	cmp.w	r9, #0
 80054b2:	d103      	bne.n	80054bc <_strtod_l+0xaec>
 80054b4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	d06a      	beq.n	8005592 <_strtod_l+0xbc2>
 80054bc:	a30a      	add	r3, pc, #40	; (adr r3, 80054e8 <_strtod_l+0xb18>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	4620      	mov	r0, r4
 80054c4:	4629      	mov	r1, r5
 80054c6:	f7fb fa79 	bl	80009bc <__aeabi_dcmplt>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	f47f acad 	bne.w	8004e2a <_strtod_l+0x45a>
 80054d0:	a307      	add	r3, pc, #28	; (adr r3, 80054f0 <_strtod_l+0xb20>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	f7fb fa8d 	bl	80009f8 <__aeabi_dcmpgt>
 80054de:	2800      	cmp	r0, #0
 80054e0:	f43f af76 	beq.w	80053d0 <_strtod_l+0xa00>
 80054e4:	e4a1      	b.n	8004e2a <_strtod_l+0x45a>
 80054e6:	bf00      	nop
 80054e8:	94a03595 	.word	0x94a03595
 80054ec:	3fdfffff 	.word	0x3fdfffff
 80054f0:	35afe535 	.word	0x35afe535
 80054f4:	3fe00000 	.word	0x3fe00000
 80054f8:	000fffff 	.word	0x000fffff
 80054fc:	7ff00000 	.word	0x7ff00000
 8005500:	7fefffff 	.word	0x7fefffff
 8005504:	39500000 	.word	0x39500000
 8005508:	3ff00000 	.word	0x3ff00000
 800550c:	7fe00000 	.word	0x7fe00000
 8005510:	7c9fffff 	.word	0x7c9fffff
 8005514:	3fe00000 	.word	0x3fe00000
 8005518:	bff00000 	.word	0xbff00000
 800551c:	9b05      	ldr	r3, [sp, #20]
 800551e:	b313      	cbz	r3, 8005566 <_strtod_l+0xb96>
 8005520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005522:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005526:	d81e      	bhi.n	8005566 <_strtod_l+0xb96>
 8005528:	a325      	add	r3, pc, #148	; (adr r3, 80055c0 <_strtod_l+0xbf0>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fb fa4d 	bl	80009d0 <__aeabi_dcmple>
 8005536:	b190      	cbz	r0, 800555e <_strtod_l+0xb8e>
 8005538:	4629      	mov	r1, r5
 800553a:	4620      	mov	r0, r4
 800553c:	f7fb faa4 	bl	8000a88 <__aeabi_d2uiz>
 8005540:	2800      	cmp	r0, #0
 8005542:	bf08      	it	eq
 8005544:	2001      	moveq	r0, #1
 8005546:	f7fa ff4d 	bl	80003e4 <__aeabi_ui2d>
 800554a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800554c:	4604      	mov	r4, r0
 800554e:	460d      	mov	r5, r1
 8005550:	b9d3      	cbnz	r3, 8005588 <_strtod_l+0xbb8>
 8005552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005556:	9012      	str	r0, [sp, #72]	; 0x48
 8005558:	9313      	str	r3, [sp, #76]	; 0x4c
 800555a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800555e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005560:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005564:	1a9f      	subs	r7, r3, r2
 8005566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800556a:	f001 fe15 	bl	8007198 <__ulp>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4630      	mov	r0, r6
 8005574:	4639      	mov	r1, r7
 8005576:	f7fa ffaf 	bl	80004d8 <__aeabi_dmul>
 800557a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800557e:	f7fa fdf5 	bl	800016c <__adddf3>
 8005582:	4681      	mov	r9, r0
 8005584:	468a      	mov	sl, r1
 8005586:	e777      	b.n	8005478 <_strtod_l+0xaa8>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005590:	e7e3      	b.n	800555a <_strtod_l+0xb8a>
 8005592:	a30d      	add	r3, pc, #52	; (adr r3, 80055c8 <_strtod_l+0xbf8>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fb fa10 	bl	80009bc <__aeabi_dcmplt>
 800559c:	e79f      	b.n	80054de <_strtod_l+0xb0e>
 800559e:	2300      	movs	r3, #0
 80055a0:	930d      	str	r3, [sp, #52]	; 0x34
 80055a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	f7ff ba55 	b.w	8004a56 <_strtod_l+0x86>
 80055ac:	2b65      	cmp	r3, #101	; 0x65
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f43f ab42 	beq.w	8004c3a <_strtod_l+0x26a>
 80055b6:	2101      	movs	r1, #1
 80055b8:	4614      	mov	r4, r2
 80055ba:	9105      	str	r1, [sp, #20]
 80055bc:	f7ff babf 	b.w	8004b3e <_strtod_l+0x16e>
 80055c0:	ffc00000 	.word	0xffc00000
 80055c4:	41dfffff 	.word	0x41dfffff
 80055c8:	94a03595 	.word	0x94a03595
 80055cc:	3fcfffff 	.word	0x3fcfffff

080055d0 <_strtod_r>:
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <_strtod_r+0x18>)
 80055d2:	b410      	push	{r4}
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4c05      	ldr	r4, [pc, #20]	; (80055ec <_strtod_r+0x1c>)
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf08      	it	eq
 80055de:	4623      	moveq	r3, r4
 80055e0:	bc10      	pop	{r4}
 80055e2:	f7ff b9f5 	b.w	80049d0 <_strtod_l>
 80055e6:	bf00      	nop
 80055e8:	2000000c 	.word	0x2000000c
 80055ec:	20000070 	.word	0x20000070

080055f0 <_strtol_l.isra.0>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	4680      	mov	r8, r0
 80055f6:	4689      	mov	r9, r1
 80055f8:	4692      	mov	sl, r2
 80055fa:	461e      	mov	r6, r3
 80055fc:	460f      	mov	r7, r1
 80055fe:	463d      	mov	r5, r7
 8005600:	9808      	ldr	r0, [sp, #32]
 8005602:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005606:	f001 fab5 	bl	8006b74 <__locale_ctype_ptr_l>
 800560a:	4420      	add	r0, r4
 800560c:	7843      	ldrb	r3, [r0, #1]
 800560e:	f013 0308 	ands.w	r3, r3, #8
 8005612:	d132      	bne.n	800567a <_strtol_l.isra.0+0x8a>
 8005614:	2c2d      	cmp	r4, #45	; 0x2d
 8005616:	d132      	bne.n	800567e <_strtol_l.isra.0+0x8e>
 8005618:	2201      	movs	r2, #1
 800561a:	787c      	ldrb	r4, [r7, #1]
 800561c:	1cbd      	adds	r5, r7, #2
 800561e:	2e00      	cmp	r6, #0
 8005620:	d05d      	beq.n	80056de <_strtol_l.isra.0+0xee>
 8005622:	2e10      	cmp	r6, #16
 8005624:	d109      	bne.n	800563a <_strtol_l.isra.0+0x4a>
 8005626:	2c30      	cmp	r4, #48	; 0x30
 8005628:	d107      	bne.n	800563a <_strtol_l.isra.0+0x4a>
 800562a:	782b      	ldrb	r3, [r5, #0]
 800562c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005630:	2b58      	cmp	r3, #88	; 0x58
 8005632:	d14f      	bne.n	80056d4 <_strtol_l.isra.0+0xe4>
 8005634:	2610      	movs	r6, #16
 8005636:	786c      	ldrb	r4, [r5, #1]
 8005638:	3502      	adds	r5, #2
 800563a:	2a00      	cmp	r2, #0
 800563c:	bf14      	ite	ne
 800563e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005642:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005646:	2700      	movs	r7, #0
 8005648:	fbb1 fcf6 	udiv	ip, r1, r6
 800564c:	4638      	mov	r0, r7
 800564e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005652:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005656:	2b09      	cmp	r3, #9
 8005658:	d817      	bhi.n	800568a <_strtol_l.isra.0+0x9a>
 800565a:	461c      	mov	r4, r3
 800565c:	42a6      	cmp	r6, r4
 800565e:	dd23      	ble.n	80056a8 <_strtol_l.isra.0+0xb8>
 8005660:	1c7b      	adds	r3, r7, #1
 8005662:	d007      	beq.n	8005674 <_strtol_l.isra.0+0x84>
 8005664:	4584      	cmp	ip, r0
 8005666:	d31c      	bcc.n	80056a2 <_strtol_l.isra.0+0xb2>
 8005668:	d101      	bne.n	800566e <_strtol_l.isra.0+0x7e>
 800566a:	45a6      	cmp	lr, r4
 800566c:	db19      	blt.n	80056a2 <_strtol_l.isra.0+0xb2>
 800566e:	2701      	movs	r7, #1
 8005670:	fb00 4006 	mla	r0, r0, r6, r4
 8005674:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005678:	e7eb      	b.n	8005652 <_strtol_l.isra.0+0x62>
 800567a:	462f      	mov	r7, r5
 800567c:	e7bf      	b.n	80055fe <_strtol_l.isra.0+0xe>
 800567e:	2c2b      	cmp	r4, #43	; 0x2b
 8005680:	bf04      	itt	eq
 8005682:	1cbd      	addeq	r5, r7, #2
 8005684:	787c      	ldrbeq	r4, [r7, #1]
 8005686:	461a      	mov	r2, r3
 8005688:	e7c9      	b.n	800561e <_strtol_l.isra.0+0x2e>
 800568a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800568e:	2b19      	cmp	r3, #25
 8005690:	d801      	bhi.n	8005696 <_strtol_l.isra.0+0xa6>
 8005692:	3c37      	subs	r4, #55	; 0x37
 8005694:	e7e2      	b.n	800565c <_strtol_l.isra.0+0x6c>
 8005696:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800569a:	2b19      	cmp	r3, #25
 800569c:	d804      	bhi.n	80056a8 <_strtol_l.isra.0+0xb8>
 800569e:	3c57      	subs	r4, #87	; 0x57
 80056a0:	e7dc      	b.n	800565c <_strtol_l.isra.0+0x6c>
 80056a2:	f04f 37ff 	mov.w	r7, #4294967295
 80056a6:	e7e5      	b.n	8005674 <_strtol_l.isra.0+0x84>
 80056a8:	1c7b      	adds	r3, r7, #1
 80056aa:	d108      	bne.n	80056be <_strtol_l.isra.0+0xce>
 80056ac:	2322      	movs	r3, #34	; 0x22
 80056ae:	4608      	mov	r0, r1
 80056b0:	f8c8 3000 	str.w	r3, [r8]
 80056b4:	f1ba 0f00 	cmp.w	sl, #0
 80056b8:	d107      	bne.n	80056ca <_strtol_l.isra.0+0xda>
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	b102      	cbz	r2, 80056c2 <_strtol_l.isra.0+0xd2>
 80056c0:	4240      	negs	r0, r0
 80056c2:	f1ba 0f00 	cmp.w	sl, #0
 80056c6:	d0f8      	beq.n	80056ba <_strtol_l.isra.0+0xca>
 80056c8:	b10f      	cbz	r7, 80056ce <_strtol_l.isra.0+0xde>
 80056ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80056ce:	f8ca 9000 	str.w	r9, [sl]
 80056d2:	e7f2      	b.n	80056ba <_strtol_l.isra.0+0xca>
 80056d4:	2430      	movs	r4, #48	; 0x30
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	d1af      	bne.n	800563a <_strtol_l.isra.0+0x4a>
 80056da:	2608      	movs	r6, #8
 80056dc:	e7ad      	b.n	800563a <_strtol_l.isra.0+0x4a>
 80056de:	2c30      	cmp	r4, #48	; 0x30
 80056e0:	d0a3      	beq.n	800562a <_strtol_l.isra.0+0x3a>
 80056e2:	260a      	movs	r6, #10
 80056e4:	e7a9      	b.n	800563a <_strtol_l.isra.0+0x4a>
	...

080056e8 <_strtol_r>:
 80056e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ea:	4c06      	ldr	r4, [pc, #24]	; (8005704 <_strtol_r+0x1c>)
 80056ec:	4d06      	ldr	r5, [pc, #24]	; (8005708 <_strtol_r+0x20>)
 80056ee:	6824      	ldr	r4, [r4, #0]
 80056f0:	6a24      	ldr	r4, [r4, #32]
 80056f2:	2c00      	cmp	r4, #0
 80056f4:	bf08      	it	eq
 80056f6:	462c      	moveq	r4, r5
 80056f8:	9400      	str	r4, [sp, #0]
 80056fa:	f7ff ff79 	bl	80055f0 <_strtol_l.isra.0>
 80056fe:	b003      	add	sp, #12
 8005700:	bd30      	pop	{r4, r5, pc}
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c
 8005708:	20000070 	.word	0x20000070

0800570c <quorem>:
 800570c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005710:	6903      	ldr	r3, [r0, #16]
 8005712:	690c      	ldr	r4, [r1, #16]
 8005714:	4680      	mov	r8, r0
 8005716:	42a3      	cmp	r3, r4
 8005718:	f2c0 8084 	blt.w	8005824 <quorem+0x118>
 800571c:	3c01      	subs	r4, #1
 800571e:	f101 0714 	add.w	r7, r1, #20
 8005722:	f100 0614 	add.w	r6, r0, #20
 8005726:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800572a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800572e:	3501      	adds	r5, #1
 8005730:	fbb0 f5f5 	udiv	r5, r0, r5
 8005734:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005738:	eb06 030c 	add.w	r3, r6, ip
 800573c:	eb07 090c 	add.w	r9, r7, ip
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	b39d      	cbz	r5, 80057ac <quorem+0xa0>
 8005744:	f04f 0a00 	mov.w	sl, #0
 8005748:	4638      	mov	r0, r7
 800574a:	46b6      	mov	lr, r6
 800574c:	46d3      	mov	fp, sl
 800574e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005752:	b293      	uxth	r3, r2
 8005754:	fb05 a303 	mla	r3, r5, r3, sl
 8005758:	0c12      	lsrs	r2, r2, #16
 800575a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800575e:	fb05 a202 	mla	r2, r5, r2, sl
 8005762:	b29b      	uxth	r3, r3
 8005764:	ebab 0303 	sub.w	r3, fp, r3
 8005768:	f8de b000 	ldr.w	fp, [lr]
 800576c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005770:	fa1f fb8b 	uxth.w	fp, fp
 8005774:	445b      	add	r3, fp
 8005776:	fa1f fb82 	uxth.w	fp, r2
 800577a:	f8de 2000 	ldr.w	r2, [lr]
 800577e:	4581      	cmp	r9, r0
 8005780:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800578e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005792:	f84e 3b04 	str.w	r3, [lr], #4
 8005796:	d2da      	bcs.n	800574e <quorem+0x42>
 8005798:	f856 300c 	ldr.w	r3, [r6, ip]
 800579c:	b933      	cbnz	r3, 80057ac <quorem+0xa0>
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	429e      	cmp	r6, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	d331      	bcc.n	800580c <quorem+0x100>
 80057a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80057ac:	4640      	mov	r0, r8
 80057ae:	f001 fc7b 	bl	80070a8 <__mcmp>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	db26      	blt.n	8005804 <quorem+0xf8>
 80057b6:	4630      	mov	r0, r6
 80057b8:	f04f 0c00 	mov.w	ip, #0
 80057bc:	3501      	adds	r5, #1
 80057be:	f857 1b04 	ldr.w	r1, [r7], #4
 80057c2:	f8d0 e000 	ldr.w	lr, [r0]
 80057c6:	b28b      	uxth	r3, r1
 80057c8:	ebac 0303 	sub.w	r3, ip, r3
 80057cc:	fa1f f28e 	uxth.w	r2, lr
 80057d0:	4413      	add	r3, r2
 80057d2:	0c0a      	lsrs	r2, r1, #16
 80057d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057e2:	45b9      	cmp	r9, r7
 80057e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057e8:	f840 3b04 	str.w	r3, [r0], #4
 80057ec:	d2e7      	bcs.n	80057be <quorem+0xb2>
 80057ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80057f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80057f6:	b92a      	cbnz	r2, 8005804 <quorem+0xf8>
 80057f8:	3b04      	subs	r3, #4
 80057fa:	429e      	cmp	r6, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	d30b      	bcc.n	8005818 <quorem+0x10c>
 8005800:	f8c8 4010 	str.w	r4, [r8, #16]
 8005804:	4628      	mov	r0, r5
 8005806:	b003      	add	sp, #12
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	3b04      	subs	r3, #4
 8005810:	2a00      	cmp	r2, #0
 8005812:	d1c9      	bne.n	80057a8 <quorem+0x9c>
 8005814:	3c01      	subs	r4, #1
 8005816:	e7c4      	b.n	80057a2 <quorem+0x96>
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	3b04      	subs	r3, #4
 800581c:	2a00      	cmp	r2, #0
 800581e:	d1ef      	bne.n	8005800 <quorem+0xf4>
 8005820:	3c01      	subs	r4, #1
 8005822:	e7ea      	b.n	80057fa <quorem+0xee>
 8005824:	2000      	movs	r0, #0
 8005826:	e7ee      	b.n	8005806 <quorem+0xfa>

08005828 <_dtoa_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	4616      	mov	r6, r2
 800582e:	461f      	mov	r7, r3
 8005830:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005832:	b095      	sub	sp, #84	; 0x54
 8005834:	4604      	mov	r4, r0
 8005836:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800583a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800583e:	b93d      	cbnz	r5, 8005850 <_dtoa_r+0x28>
 8005840:	2010      	movs	r0, #16
 8005842:	f001 f9ab 	bl	8006b9c <malloc>
 8005846:	6260      	str	r0, [r4, #36]	; 0x24
 8005848:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800584c:	6005      	str	r5, [r0, #0]
 800584e:	60c5      	str	r5, [r0, #12]
 8005850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	b151      	cbz	r1, 800586c <_dtoa_r+0x44>
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	2301      	movs	r3, #1
 800585a:	4093      	lsls	r3, r2
 800585c:	604a      	str	r2, [r1, #4]
 800585e:	608b      	str	r3, [r1, #8]
 8005860:	4620      	mov	r0, r4
 8005862:	f001 fa02 	bl	8006c6a <_Bfree>
 8005866:	2200      	movs	r2, #0
 8005868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	1e3b      	subs	r3, r7, #0
 800586e:	bfaf      	iteee	ge
 8005870:	2300      	movge	r3, #0
 8005872:	2201      	movlt	r2, #1
 8005874:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005878:	9303      	strlt	r3, [sp, #12]
 800587a:	bfac      	ite	ge
 800587c:	f8c8 3000 	strge.w	r3, [r8]
 8005880:	f8c8 2000 	strlt.w	r2, [r8]
 8005884:	4bae      	ldr	r3, [pc, #696]	; (8005b40 <_dtoa_r+0x318>)
 8005886:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800588a:	ea33 0308 	bics.w	r3, r3, r8
 800588e:	d11b      	bne.n	80058c8 <_dtoa_r+0xa0>
 8005890:	f242 730f 	movw	r3, #9999	; 0x270f
 8005894:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	9b02      	ldr	r3, [sp, #8]
 800589a:	b923      	cbnz	r3, 80058a6 <_dtoa_r+0x7e>
 800589c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f000 8545 	beq.w	8006330 <_dtoa_r+0xb08>
 80058a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058a8:	b953      	cbnz	r3, 80058c0 <_dtoa_r+0x98>
 80058aa:	4ba6      	ldr	r3, [pc, #664]	; (8005b44 <_dtoa_r+0x31c>)
 80058ac:	e021      	b.n	80058f2 <_dtoa_r+0xca>
 80058ae:	4ba6      	ldr	r3, [pc, #664]	; (8005b48 <_dtoa_r+0x320>)
 80058b0:	9306      	str	r3, [sp, #24]
 80058b2:	3308      	adds	r3, #8
 80058b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	9806      	ldr	r0, [sp, #24]
 80058ba:	b015      	add	sp, #84	; 0x54
 80058bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c0:	4ba0      	ldr	r3, [pc, #640]	; (8005b44 <_dtoa_r+0x31c>)
 80058c2:	9306      	str	r3, [sp, #24]
 80058c4:	3303      	adds	r3, #3
 80058c6:	e7f5      	b.n	80058b4 <_dtoa_r+0x8c>
 80058c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2300      	movs	r3, #0
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fb f868 	bl	80009a8 <__aeabi_dcmpeq>
 80058d8:	4682      	mov	sl, r0
 80058da:	b160      	cbz	r0, 80058f6 <_dtoa_r+0xce>
 80058dc:	2301      	movs	r3, #1
 80058de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8520 	beq.w	800632a <_dtoa_r+0xb02>
 80058ea:	4b98      	ldr	r3, [pc, #608]	; (8005b4c <_dtoa_r+0x324>)
 80058ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	9306      	str	r3, [sp, #24]
 80058f4:	e7e0      	b.n	80058b8 <_dtoa_r+0x90>
 80058f6:	ab12      	add	r3, sp, #72	; 0x48
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	ab13      	add	r3, sp, #76	; 0x4c
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	4632      	mov	r2, r6
 8005900:	463b      	mov	r3, r7
 8005902:	4620      	mov	r0, r4
 8005904:	f001 fcbe 	bl	8007284 <__d2b>
 8005908:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800590c:	4683      	mov	fp, r0
 800590e:	2d00      	cmp	r5, #0
 8005910:	d07d      	beq.n	8005a0e <_dtoa_r+0x1e6>
 8005912:	46b0      	mov	r8, r6
 8005914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005918:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800591c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005920:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005924:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005928:	2200      	movs	r2, #0
 800592a:	4b89      	ldr	r3, [pc, #548]	; (8005b50 <_dtoa_r+0x328>)
 800592c:	4640      	mov	r0, r8
 800592e:	4649      	mov	r1, r9
 8005930:	f7fa fc1a 	bl	8000168 <__aeabi_dsub>
 8005934:	a37c      	add	r3, pc, #496	; (adr r3, 8005b28 <_dtoa_r+0x300>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f7fa fdcd 	bl	80004d8 <__aeabi_dmul>
 800593e:	a37c      	add	r3, pc, #496	; (adr r3, 8005b30 <_dtoa_r+0x308>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f7fa fc12 	bl	800016c <__adddf3>
 8005948:	4606      	mov	r6, r0
 800594a:	4628      	mov	r0, r5
 800594c:	460f      	mov	r7, r1
 800594e:	f7fa fd59 	bl	8000404 <__aeabi_i2d>
 8005952:	a379      	add	r3, pc, #484	; (adr r3, 8005b38 <_dtoa_r+0x310>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fdbe 	bl	80004d8 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	f7fa fc02 	bl	800016c <__adddf3>
 8005968:	4606      	mov	r6, r0
 800596a:	460f      	mov	r7, r1
 800596c:	f7fb f864 	bl	8000a38 <__aeabi_d2iz>
 8005970:	2200      	movs	r2, #0
 8005972:	4682      	mov	sl, r0
 8005974:	2300      	movs	r3, #0
 8005976:	4630      	mov	r0, r6
 8005978:	4639      	mov	r1, r7
 800597a:	f7fb f81f 	bl	80009bc <__aeabi_dcmplt>
 800597e:	b148      	cbz	r0, 8005994 <_dtoa_r+0x16c>
 8005980:	4650      	mov	r0, sl
 8005982:	f7fa fd3f 	bl	8000404 <__aeabi_i2d>
 8005986:	4632      	mov	r2, r6
 8005988:	463b      	mov	r3, r7
 800598a:	f7fb f80d 	bl	80009a8 <__aeabi_dcmpeq>
 800598e:	b908      	cbnz	r0, 8005994 <_dtoa_r+0x16c>
 8005990:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005994:	f1ba 0f16 	cmp.w	sl, #22
 8005998:	d85a      	bhi.n	8005a50 <_dtoa_r+0x228>
 800599a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800599e:	496d      	ldr	r1, [pc, #436]	; (8005b54 <_dtoa_r+0x32c>)
 80059a0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80059a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059a8:	f7fb f826 	bl	80009f8 <__aeabi_dcmpgt>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d051      	beq.n	8005a54 <_dtoa_r+0x22c>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059b6:	930d      	str	r3, [sp, #52]	; 0x34
 80059b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ba:	1b5d      	subs	r5, r3, r5
 80059bc:	1e6b      	subs	r3, r5, #1
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	bf43      	ittte	mi
 80059c2:	2300      	movmi	r3, #0
 80059c4:	f1c5 0901 	rsbmi	r9, r5, #1
 80059c8:	9307      	strmi	r3, [sp, #28]
 80059ca:	f04f 0900 	movpl.w	r9, #0
 80059ce:	f1ba 0f00 	cmp.w	sl, #0
 80059d2:	db41      	blt.n	8005a58 <_dtoa_r+0x230>
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80059da:	4453      	add	r3, sl
 80059dc:	9307      	str	r3, [sp, #28]
 80059de:	2300      	movs	r3, #0
 80059e0:	9308      	str	r3, [sp, #32]
 80059e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059e4:	2b09      	cmp	r3, #9
 80059e6:	f200 808f 	bhi.w	8005b08 <_dtoa_r+0x2e0>
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	bfc4      	itt	gt
 80059ee:	3b04      	subgt	r3, #4
 80059f0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80059f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059f4:	bfc8      	it	gt
 80059f6:	2500      	movgt	r5, #0
 80059f8:	f1a3 0302 	sub.w	r3, r3, #2
 80059fc:	bfd8      	it	le
 80059fe:	2501      	movle	r5, #1
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	f200 808d 	bhi.w	8005b20 <_dtoa_r+0x2f8>
 8005a06:	e8df f003 	tbb	[pc, r3]
 8005a0a:	7d7b      	.short	0x7d7b
 8005a0c:	6f2f      	.short	0x6f2f
 8005a0e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005a12:	441d      	add	r5, r3
 8005a14:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005a18:	2820      	cmp	r0, #32
 8005a1a:	dd13      	ble.n	8005a44 <_dtoa_r+0x21c>
 8005a1c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005a20:	9b02      	ldr	r3, [sp, #8]
 8005a22:	fa08 f800 	lsl.w	r8, r8, r0
 8005a26:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005a2a:	fa23 f000 	lsr.w	r0, r3, r0
 8005a2e:	ea48 0000 	orr.w	r0, r8, r0
 8005a32:	f7fa fcd7 	bl	80003e4 <__aeabi_ui2d>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4680      	mov	r8, r0
 8005a3a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005a3e:	3d01      	subs	r5, #1
 8005a40:	9310      	str	r3, [sp, #64]	; 0x40
 8005a42:	e771      	b.n	8005928 <_dtoa_r+0x100>
 8005a44:	9b02      	ldr	r3, [sp, #8]
 8005a46:	f1c0 0020 	rsb	r0, r0, #32
 8005a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a4e:	e7f0      	b.n	8005a32 <_dtoa_r+0x20a>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e7b0      	b.n	80059b6 <_dtoa_r+0x18e>
 8005a54:	900d      	str	r0, [sp, #52]	; 0x34
 8005a56:	e7af      	b.n	80059b8 <_dtoa_r+0x190>
 8005a58:	f1ca 0300 	rsb	r3, sl, #0
 8005a5c:	9308      	str	r3, [sp, #32]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	eba9 090a 	sub.w	r9, r9, sl
 8005a64:	930c      	str	r3, [sp, #48]	; 0x30
 8005a66:	e7bc      	b.n	80059e2 <_dtoa_r+0x1ba>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd74      	ble.n	8005b5c <_dtoa_r+0x334>
 8005a72:	4698      	mov	r8, r3
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	2200      	movs	r2, #0
 8005a78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a7a:	6072      	str	r2, [r6, #4]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	f102 0014 	add.w	r0, r2, #20
 8005a82:	4298      	cmp	r0, r3
 8005a84:	6871      	ldr	r1, [r6, #4]
 8005a86:	d96e      	bls.n	8005b66 <_dtoa_r+0x33e>
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 f8ba 	bl	8006c02 <_Balloc>
 8005a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a90:	6030      	str	r0, [r6, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f1b8 0f0e 	cmp.w	r8, #14
 8005a98:	9306      	str	r3, [sp, #24]
 8005a9a:	f200 80ed 	bhi.w	8005c78 <_dtoa_r+0x450>
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	f000 80ea 	beq.w	8005c78 <_dtoa_r+0x450>
 8005aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aa8:	f1ba 0f00 	cmp.w	sl, #0
 8005aac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005ab0:	dd77      	ble.n	8005ba2 <_dtoa_r+0x37a>
 8005ab2:	4a28      	ldr	r2, [pc, #160]	; (8005b54 <_dtoa_r+0x32c>)
 8005ab4:	f00a 030f 	and.w	r3, sl, #15
 8005ab8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ac0:	06f0      	lsls	r0, r6, #27
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005aca:	d568      	bpl.n	8005b9e <_dtoa_r+0x376>
 8005acc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ad0:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <_dtoa_r+0x330>)
 8005ad2:	2503      	movs	r5, #3
 8005ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ad8:	f7fa fe28 	bl	800072c <__aeabi_ddiv>
 8005adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae0:	f006 060f 	and.w	r6, r6, #15
 8005ae4:	4f1c      	ldr	r7, [pc, #112]	; (8005b58 <_dtoa_r+0x330>)
 8005ae6:	e04f      	b.n	8005b88 <_dtoa_r+0x360>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aee:	4453      	add	r3, sl
 8005af0:	f103 0801 	add.w	r8, r3, #1
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	4643      	mov	r3, r8
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bfb8      	it	lt
 8005afc:	2301      	movlt	r3, #1
 8005afe:	e7ba      	b.n	8005a76 <_dtoa_r+0x24e>
 8005b00:	2300      	movs	r3, #0
 8005b02:	e7b2      	b.n	8005a6a <_dtoa_r+0x242>
 8005b04:	2300      	movs	r3, #0
 8005b06:	e7f0      	b.n	8005aea <_dtoa_r+0x2c2>
 8005b08:	2501      	movs	r5, #1
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9509      	str	r5, [sp, #36]	; 0x24
 8005b0e:	931e      	str	r3, [sp, #120]	; 0x78
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	2200      	movs	r2, #0
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	4698      	mov	r8, r3
 8005b1a:	2312      	movs	r3, #18
 8005b1c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005b1e:	e7aa      	b.n	8005a76 <_dtoa_r+0x24e>
 8005b20:	2301      	movs	r3, #1
 8005b22:	9309      	str	r3, [sp, #36]	; 0x24
 8005b24:	e7f4      	b.n	8005b10 <_dtoa_r+0x2e8>
 8005b26:	bf00      	nop
 8005b28:	636f4361 	.word	0x636f4361
 8005b2c:	3fd287a7 	.word	0x3fd287a7
 8005b30:	8b60c8b3 	.word	0x8b60c8b3
 8005b34:	3fc68a28 	.word	0x3fc68a28
 8005b38:	509f79fb 	.word	0x509f79fb
 8005b3c:	3fd34413 	.word	0x3fd34413
 8005b40:	7ff00000 	.word	0x7ff00000
 8005b44:	08008189 	.word	0x08008189
 8005b48:	08008180 	.word	0x08008180
 8005b4c:	08008101 	.word	0x08008101
 8005b50:	3ff80000 	.word	0x3ff80000
 8005b54:	08008228 	.word	0x08008228
 8005b58:	08008200 	.word	0x08008200
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	4698      	mov	r8, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	e7da      	b.n	8005b1c <_dtoa_r+0x2f4>
 8005b66:	3101      	adds	r1, #1
 8005b68:	6071      	str	r1, [r6, #4]
 8005b6a:	0052      	lsls	r2, r2, #1
 8005b6c:	e787      	b.n	8005a7e <_dtoa_r+0x256>
 8005b6e:	07f1      	lsls	r1, r6, #31
 8005b70:	d508      	bpl.n	8005b84 <_dtoa_r+0x35c>
 8005b72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7a:	f7fa fcad 	bl	80004d8 <__aeabi_dmul>
 8005b7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b82:	3501      	adds	r5, #1
 8005b84:	1076      	asrs	r6, r6, #1
 8005b86:	3708      	adds	r7, #8
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	d1f0      	bne.n	8005b6e <_dtoa_r+0x346>
 8005b8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b94:	f7fa fdca 	bl	800072c <__aeabi_ddiv>
 8005b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b9c:	e01b      	b.n	8005bd6 <_dtoa_r+0x3ae>
 8005b9e:	2502      	movs	r5, #2
 8005ba0:	e7a0      	b.n	8005ae4 <_dtoa_r+0x2bc>
 8005ba2:	f000 80a4 	beq.w	8005cee <_dtoa_r+0x4c6>
 8005ba6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005baa:	f1ca 0600 	rsb	r6, sl, #0
 8005bae:	4ba0      	ldr	r3, [pc, #640]	; (8005e30 <_dtoa_r+0x608>)
 8005bb0:	f006 020f 	and.w	r2, r6, #15
 8005bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fc8c 	bl	80004d8 <__aeabi_dmul>
 8005bc0:	2502      	movs	r5, #2
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc8:	4f9a      	ldr	r7, [pc, #616]	; (8005e34 <_dtoa_r+0x60c>)
 8005bca:	1136      	asrs	r6, r6, #4
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	f040 8083 	bne.w	8005cd8 <_dtoa_r+0x4b0>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e0      	bne.n	8005b98 <_dtoa_r+0x370>
 8005bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 808a 	beq.w	8005cf2 <_dtoa_r+0x4ca>
 8005bde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bea:	2200      	movs	r2, #0
 8005bec:	4b92      	ldr	r3, [pc, #584]	; (8005e38 <_dtoa_r+0x610>)
 8005bee:	f7fa fee5 	bl	80009bc <__aeabi_dcmplt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d07d      	beq.n	8005cf2 <_dtoa_r+0x4ca>
 8005bf6:	f1b8 0f00 	cmp.w	r8, #0
 8005bfa:	d07a      	beq.n	8005cf2 <_dtoa_r+0x4ca>
 8005bfc:	9b04      	ldr	r3, [sp, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	dd36      	ble.n	8005c70 <_dtoa_r+0x448>
 8005c02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c06:	2200      	movs	r2, #0
 8005c08:	4b8c      	ldr	r3, [pc, #560]	; (8005e3c <_dtoa_r+0x614>)
 8005c0a:	f7fa fc65 	bl	80004d8 <__aeabi_dmul>
 8005c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c12:	9e04      	ldr	r6, [sp, #16]
 8005c14:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005c18:	3501      	adds	r5, #1
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f7fa fbf2 	bl	8000404 <__aeabi_i2d>
 8005c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c24:	f7fa fc58 	bl	80004d8 <__aeabi_dmul>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4b85      	ldr	r3, [pc, #532]	; (8005e40 <_dtoa_r+0x618>)
 8005c2c:	f7fa fa9e 	bl	800016c <__adddf3>
 8005c30:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005c34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c38:	950b      	str	r5, [sp, #44]	; 0x2c
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	d15c      	bne.n	8005cf8 <_dtoa_r+0x4d0>
 8005c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	4b7f      	ldr	r3, [pc, #508]	; (8005e44 <_dtoa_r+0x61c>)
 8005c46:	f7fa fa8f 	bl	8000168 <__aeabi_dsub>
 8005c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c52:	f7fa fed1 	bl	80009f8 <__aeabi_dcmpgt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f040 8281 	bne.w	800615e <_dtoa_r+0x936>
 8005c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c62:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c66:	f7fa fea9 	bl	80009bc <__aeabi_dcmplt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f040 8275 	bne.w	800615a <_dtoa_r+0x932>
 8005c70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f2c0 814b 	blt.w	8005f16 <_dtoa_r+0x6ee>
 8005c80:	f1ba 0f0e 	cmp.w	sl, #14
 8005c84:	f300 8147 	bgt.w	8005f16 <_dtoa_r+0x6ee>
 8005c88:	4b69      	ldr	r3, [pc, #420]	; (8005e30 <_dtoa_r+0x608>)
 8005c8a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f280 80d7 	bge.w	8005e4c <_dtoa_r+0x624>
 8005c9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ca2:	f300 80d3 	bgt.w	8005e4c <_dtoa_r+0x624>
 8005ca6:	f040 8257 	bne.w	8006158 <_dtoa_r+0x930>
 8005caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <_dtoa_r+0x61c>)
 8005cb2:	f7fa fc11 	bl	80004d8 <__aeabi_dmul>
 8005cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cba:	f7fa fe93 	bl	80009e4 <__aeabi_dcmpge>
 8005cbe:	4646      	mov	r6, r8
 8005cc0:	4647      	mov	r7, r8
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 822d 	bne.w	8006122 <_dtoa_r+0x8fa>
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	9a06      	ldr	r2, [sp, #24]
 8005ccc:	1c5d      	adds	r5, r3, #1
 8005cce:	2331      	movs	r3, #49	; 0x31
 8005cd0:	f10a 0a01 	add.w	sl, sl, #1
 8005cd4:	7013      	strb	r3, [r2, #0]
 8005cd6:	e228      	b.n	800612a <_dtoa_r+0x902>
 8005cd8:	07f2      	lsls	r2, r6, #31
 8005cda:	d505      	bpl.n	8005ce8 <_dtoa_r+0x4c0>
 8005cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce0:	f7fa fbfa 	bl	80004d8 <__aeabi_dmul>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	1076      	asrs	r6, r6, #1
 8005cea:	3708      	adds	r7, #8
 8005cec:	e76e      	b.n	8005bcc <_dtoa_r+0x3a4>
 8005cee:	2502      	movs	r5, #2
 8005cf0:	e771      	b.n	8005bd6 <_dtoa_r+0x3ae>
 8005cf2:	4657      	mov	r7, sl
 8005cf4:	4646      	mov	r6, r8
 8005cf6:	e790      	b.n	8005c1a <_dtoa_r+0x3f2>
 8005cf8:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <_dtoa_r+0x608>)
 8005cfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005cfe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d048      	beq.n	8005d9a <_dtoa_r+0x572>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	494e      	ldr	r1, [pc, #312]	; (8005e48 <_dtoa_r+0x620>)
 8005d10:	f7fa fd0c 	bl	800072c <__aeabi_ddiv>
 8005d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d18:	f7fa fa26 	bl	8000168 <__aeabi_dsub>
 8005d1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d20:	9d06      	ldr	r5, [sp, #24]
 8005d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d26:	f7fa fe87 	bl	8000a38 <__aeabi_d2iz>
 8005d2a:	9011      	str	r0, [sp, #68]	; 0x44
 8005d2c:	f7fa fb6a 	bl	8000404 <__aeabi_i2d>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d38:	f7fa fa16 	bl	8000168 <__aeabi_dsub>
 8005d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d42:	3330      	adds	r3, #48	; 0x30
 8005d44:	f805 3b01 	strb.w	r3, [r5], #1
 8005d48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d4c:	f7fa fe36 	bl	80009bc <__aeabi_dcmplt>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d163      	bne.n	8005e1c <_dtoa_r+0x5f4>
 8005d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d58:	2000      	movs	r0, #0
 8005d5a:	4937      	ldr	r1, [pc, #220]	; (8005e38 <_dtoa_r+0x610>)
 8005d5c:	f7fa fa04 	bl	8000168 <__aeabi_dsub>
 8005d60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d64:	f7fa fe2a 	bl	80009bc <__aeabi_dcmplt>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	f040 80b5 	bne.w	8005ed8 <_dtoa_r+0x6b0>
 8005d6e:	9b06      	ldr	r3, [sp, #24]
 8005d70:	1aeb      	subs	r3, r5, r3
 8005d72:	429e      	cmp	r6, r3
 8005d74:	f77f af7c 	ble.w	8005c70 <_dtoa_r+0x448>
 8005d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <_dtoa_r+0x614>)
 8005d80:	f7fa fbaa 	bl	80004d8 <__aeabi_dmul>
 8005d84:	2200      	movs	r2, #0
 8005d86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <_dtoa_r+0x614>)
 8005d90:	f7fa fba2 	bl	80004d8 <__aeabi_dmul>
 8005d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d98:	e7c3      	b.n	8005d22 <_dtoa_r+0x4fa>
 8005d9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d9e:	f7fa fb9b 	bl	80004d8 <__aeabi_dmul>
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005da8:	199d      	adds	r5, r3, r6
 8005daa:	461e      	mov	r6, r3
 8005dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db0:	f7fa fe42 	bl	8000a38 <__aeabi_d2iz>
 8005db4:	9011      	str	r0, [sp, #68]	; 0x44
 8005db6:	f7fa fb25 	bl	8000404 <__aeabi_i2d>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dc2:	f7fa f9d1 	bl	8000168 <__aeabi_dsub>
 8005dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dcc:	3330      	adds	r3, #48	; 0x30
 8005dce:	f806 3b01 	strb.w	r3, [r6], #1
 8005dd2:	42ae      	cmp	r6, r5
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	d124      	bne.n	8005e24 <_dtoa_r+0x5fc>
 8005dda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dde:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <_dtoa_r+0x620>)
 8005de0:	f7fa f9c4 	bl	800016c <__adddf3>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dec:	f7fa fe04 	bl	80009f8 <__aeabi_dcmpgt>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d171      	bne.n	8005ed8 <_dtoa_r+0x6b0>
 8005df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005df8:	2000      	movs	r0, #0
 8005dfa:	4913      	ldr	r1, [pc, #76]	; (8005e48 <_dtoa_r+0x620>)
 8005dfc:	f7fa f9b4 	bl	8000168 <__aeabi_dsub>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e08:	f7fa fdd8 	bl	80009bc <__aeabi_dcmplt>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f43f af2f 	beq.w	8005c70 <_dtoa_r+0x448>
 8005e12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e16:	1e6a      	subs	r2, r5, #1
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d001      	beq.n	8005e20 <_dtoa_r+0x5f8>
 8005e1c:	46ba      	mov	sl, r7
 8005e1e:	e04a      	b.n	8005eb6 <_dtoa_r+0x68e>
 8005e20:	4615      	mov	r5, r2
 8005e22:	e7f6      	b.n	8005e12 <_dtoa_r+0x5ea>
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <_dtoa_r+0x614>)
 8005e26:	f7fa fb57 	bl	80004d8 <__aeabi_dmul>
 8005e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e2e:	e7bd      	b.n	8005dac <_dtoa_r+0x584>
 8005e30:	08008228 	.word	0x08008228
 8005e34:	08008200 	.word	0x08008200
 8005e38:	3ff00000 	.word	0x3ff00000
 8005e3c:	40240000 	.word	0x40240000
 8005e40:	401c0000 	.word	0x401c0000
 8005e44:	40140000 	.word	0x40140000
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	9d06      	ldr	r5, [sp, #24]
 8005e4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e56:	4630      	mov	r0, r6
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa fc67 	bl	800072c <__aeabi_ddiv>
 8005e5e:	f7fa fdeb 	bl	8000a38 <__aeabi_d2iz>
 8005e62:	4681      	mov	r9, r0
 8005e64:	f7fa face 	bl	8000404 <__aeabi_i2d>
 8005e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e6c:	f7fa fb34 	bl	80004d8 <__aeabi_dmul>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4630      	mov	r0, r6
 8005e76:	4639      	mov	r1, r7
 8005e78:	f7fa f976 	bl	8000168 <__aeabi_dsub>
 8005e7c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005e80:	f805 6b01 	strb.w	r6, [r5], #1
 8005e84:	9e06      	ldr	r6, [sp, #24]
 8005e86:	4602      	mov	r2, r0
 8005e88:	1bae      	subs	r6, r5, r6
 8005e8a:	45b0      	cmp	r8, r6
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	d135      	bne.n	8005efc <_dtoa_r+0x6d4>
 8005e90:	f7fa f96c 	bl	800016c <__adddf3>
 8005e94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e98:	4606      	mov	r6, r0
 8005e9a:	460f      	mov	r7, r1
 8005e9c:	f7fa fdac 	bl	80009f8 <__aeabi_dcmpgt>
 8005ea0:	b9c8      	cbnz	r0, 8005ed6 <_dtoa_r+0x6ae>
 8005ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	f7fa fd7d 	bl	80009a8 <__aeabi_dcmpeq>
 8005eae:	b110      	cbz	r0, 8005eb6 <_dtoa_r+0x68e>
 8005eb0:	f019 0f01 	tst.w	r9, #1
 8005eb4:	d10f      	bne.n	8005ed6 <_dtoa_r+0x6ae>
 8005eb6:	4659      	mov	r1, fp
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 fed6 	bl	8006c6a <_Bfree>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ec2:	702b      	strb	r3, [r5, #0]
 8005ec4:	f10a 0301 	add.w	r3, sl, #1
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f43f acf3 	beq.w	80058b8 <_dtoa_r+0x90>
 8005ed2:	601d      	str	r5, [r3, #0]
 8005ed4:	e4f0      	b.n	80058b8 <_dtoa_r+0x90>
 8005ed6:	4657      	mov	r7, sl
 8005ed8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005edc:	1e6b      	subs	r3, r5, #1
 8005ede:	2a39      	cmp	r2, #57	; 0x39
 8005ee0:	d106      	bne.n	8005ef0 <_dtoa_r+0x6c8>
 8005ee2:	9a06      	ldr	r2, [sp, #24]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d107      	bne.n	8005ef8 <_dtoa_r+0x6d0>
 8005ee8:	2330      	movs	r3, #48	; 0x30
 8005eea:	7013      	strb	r3, [r2, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	3701      	adds	r7, #1
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	3201      	adds	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e791      	b.n	8005e1c <_dtoa_r+0x5f4>
 8005ef8:	461d      	mov	r5, r3
 8005efa:	e7ed      	b.n	8005ed8 <_dtoa_r+0x6b0>
 8005efc:	2200      	movs	r2, #0
 8005efe:	4b99      	ldr	r3, [pc, #612]	; (8006164 <_dtoa_r+0x93c>)
 8005f00:	f7fa faea 	bl	80004d8 <__aeabi_dmul>
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	f7fa fd4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d09e      	beq.n	8005e52 <_dtoa_r+0x62a>
 8005f14:	e7cf      	b.n	8005eb6 <_dtoa_r+0x68e>
 8005f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	f000 8088 	beq.w	800602e <_dtoa_r+0x806>
 8005f1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f20:	2a01      	cmp	r2, #1
 8005f22:	dc6d      	bgt.n	8006000 <_dtoa_r+0x7d8>
 8005f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	d066      	beq.n	8005ff8 <_dtoa_r+0x7d0>
 8005f2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f2e:	464d      	mov	r5, r9
 8005f30:	9e08      	ldr	r6, [sp, #32]
 8005f32:	9a07      	ldr	r2, [sp, #28]
 8005f34:	2101      	movs	r1, #1
 8005f36:	441a      	add	r2, r3
 8005f38:	4620      	mov	r0, r4
 8005f3a:	4499      	add	r9, r3
 8005f3c:	9207      	str	r2, [sp, #28]
 8005f3e:	f000 ff72 	bl	8006e26 <__i2b>
 8005f42:	4607      	mov	r7, r0
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	dd0b      	ble.n	8005f60 <_dtoa_r+0x738>
 8005f48:	9b07      	ldr	r3, [sp, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd08      	ble.n	8005f60 <_dtoa_r+0x738>
 8005f4e:	42ab      	cmp	r3, r5
 8005f50:	bfa8      	it	ge
 8005f52:	462b      	movge	r3, r5
 8005f54:	9a07      	ldr	r2, [sp, #28]
 8005f56:	eba9 0903 	sub.w	r9, r9, r3
 8005f5a:	1aed      	subs	r5, r5, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	9307      	str	r3, [sp, #28]
 8005f60:	9b08      	ldr	r3, [sp, #32]
 8005f62:	b1eb      	cbz	r3, 8005fa0 <_dtoa_r+0x778>
 8005f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d065      	beq.n	8006036 <_dtoa_r+0x80e>
 8005f6a:	b18e      	cbz	r6, 8005f90 <_dtoa_r+0x768>
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	4632      	mov	r2, r6
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 fff7 	bl	8006f64 <__pow5mult>
 8005f76:	465a      	mov	r2, fp
 8005f78:	4601      	mov	r1, r0
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 ff5b 	bl	8006e38 <__multiply>
 8005f82:	4659      	mov	r1, fp
 8005f84:	900a      	str	r0, [sp, #40]	; 0x28
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 fe6f 	bl	8006c6a <_Bfree>
 8005f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8e:	469b      	mov	fp, r3
 8005f90:	9b08      	ldr	r3, [sp, #32]
 8005f92:	1b9a      	subs	r2, r3, r6
 8005f94:	d004      	beq.n	8005fa0 <_dtoa_r+0x778>
 8005f96:	4659      	mov	r1, fp
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 ffe3 	bl	8006f64 <__pow5mult>
 8005f9e:	4683      	mov	fp, r0
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 ff3f 	bl	8006e26 <__i2b>
 8005fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005faa:	4606      	mov	r6, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 81c6 	beq.w	800633e <_dtoa_r+0xb16>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 ffd4 	bl	8006f64 <__pow5mult>
 8005fbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	dc3e      	bgt.n	8006042 <_dtoa_r+0x81a>
 8005fc4:	9b02      	ldr	r3, [sp, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d137      	bne.n	800603a <_dtoa_r+0x812>
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d134      	bne.n	800603e <_dtoa_r+0x816>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fda:	0d1b      	lsrs	r3, r3, #20
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	b12b      	cbz	r3, 8005fec <_dtoa_r+0x7c4>
 8005fe0:	9b07      	ldr	r3, [sp, #28]
 8005fe2:	f109 0901 	add.w	r9, r9, #1
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	9307      	str	r3, [sp, #28]
 8005fea:	2301      	movs	r3, #1
 8005fec:	9308      	str	r3, [sp, #32]
 8005fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d128      	bne.n	8006046 <_dtoa_r+0x81e>
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e02e      	b.n	8006056 <_dtoa_r+0x82e>
 8005ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ffa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ffe:	e796      	b.n	8005f2e <_dtoa_r+0x706>
 8006000:	9b08      	ldr	r3, [sp, #32]
 8006002:	f108 36ff 	add.w	r6, r8, #4294967295
 8006006:	42b3      	cmp	r3, r6
 8006008:	bfb7      	itett	lt
 800600a:	9b08      	ldrlt	r3, [sp, #32]
 800600c:	1b9e      	subge	r6, r3, r6
 800600e:	1af2      	sublt	r2, r6, r3
 8006010:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006012:	bfbf      	itttt	lt
 8006014:	9608      	strlt	r6, [sp, #32]
 8006016:	189b      	addlt	r3, r3, r2
 8006018:	930c      	strlt	r3, [sp, #48]	; 0x30
 800601a:	2600      	movlt	r6, #0
 800601c:	f1b8 0f00 	cmp.w	r8, #0
 8006020:	bfb9      	ittee	lt
 8006022:	eba9 0508 	sublt.w	r5, r9, r8
 8006026:	2300      	movlt	r3, #0
 8006028:	464d      	movge	r5, r9
 800602a:	4643      	movge	r3, r8
 800602c:	e781      	b.n	8005f32 <_dtoa_r+0x70a>
 800602e:	9e08      	ldr	r6, [sp, #32]
 8006030:	464d      	mov	r5, r9
 8006032:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006034:	e786      	b.n	8005f44 <_dtoa_r+0x71c>
 8006036:	9a08      	ldr	r2, [sp, #32]
 8006038:	e7ad      	b.n	8005f96 <_dtoa_r+0x76e>
 800603a:	2300      	movs	r3, #0
 800603c:	e7d6      	b.n	8005fec <_dtoa_r+0x7c4>
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	e7d4      	b.n	8005fec <_dtoa_r+0x7c4>
 8006042:	2300      	movs	r3, #0
 8006044:	9308      	str	r3, [sp, #32]
 8006046:	6933      	ldr	r3, [r6, #16]
 8006048:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800604c:	6918      	ldr	r0, [r3, #16]
 800604e:	f000 fe9c 	bl	8006d8a <__hi0bits>
 8006052:	f1c0 0020 	rsb	r0, r0, #32
 8006056:	9b07      	ldr	r3, [sp, #28]
 8006058:	4418      	add	r0, r3
 800605a:	f010 001f 	ands.w	r0, r0, #31
 800605e:	d047      	beq.n	80060f0 <_dtoa_r+0x8c8>
 8006060:	f1c0 0320 	rsb	r3, r0, #32
 8006064:	2b04      	cmp	r3, #4
 8006066:	dd3b      	ble.n	80060e0 <_dtoa_r+0x8b8>
 8006068:	9b07      	ldr	r3, [sp, #28]
 800606a:	f1c0 001c 	rsb	r0, r0, #28
 800606e:	4481      	add	r9, r0
 8006070:	4405      	add	r5, r0
 8006072:	4403      	add	r3, r0
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	f1b9 0f00 	cmp.w	r9, #0
 800607a:	dd05      	ble.n	8006088 <_dtoa_r+0x860>
 800607c:	4659      	mov	r1, fp
 800607e:	464a      	mov	r2, r9
 8006080:	4620      	mov	r0, r4
 8006082:	f000 ffbd 	bl	8007000 <__lshift>
 8006086:	4683      	mov	fp, r0
 8006088:	9b07      	ldr	r3, [sp, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd05      	ble.n	800609a <_dtoa_r+0x872>
 800608e:	4631      	mov	r1, r6
 8006090:	461a      	mov	r2, r3
 8006092:	4620      	mov	r0, r4
 8006094:	f000 ffb4 	bl	8007000 <__lshift>
 8006098:	4606      	mov	r6, r0
 800609a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800609c:	b353      	cbz	r3, 80060f4 <_dtoa_r+0x8cc>
 800609e:	4631      	mov	r1, r6
 80060a0:	4658      	mov	r0, fp
 80060a2:	f001 f801 	bl	80070a8 <__mcmp>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	da24      	bge.n	80060f4 <_dtoa_r+0x8cc>
 80060aa:	2300      	movs	r3, #0
 80060ac:	4659      	mov	r1, fp
 80060ae:	220a      	movs	r2, #10
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 fdf1 	bl	8006c98 <__multadd>
 80060b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060bc:	4683      	mov	fp, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8144 	beq.w	800634c <_dtoa_r+0xb24>
 80060c4:	2300      	movs	r3, #0
 80060c6:	4639      	mov	r1, r7
 80060c8:	220a      	movs	r2, #10
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fde4 	bl	8006c98 <__multadd>
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	4607      	mov	r7, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dc4d      	bgt.n	8006174 <_dtoa_r+0x94c>
 80060d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060da:	2b02      	cmp	r3, #2
 80060dc:	dd4a      	ble.n	8006174 <_dtoa_r+0x94c>
 80060de:	e011      	b.n	8006104 <_dtoa_r+0x8dc>
 80060e0:	d0c9      	beq.n	8006076 <_dtoa_r+0x84e>
 80060e2:	9a07      	ldr	r2, [sp, #28]
 80060e4:	331c      	adds	r3, #28
 80060e6:	441a      	add	r2, r3
 80060e8:	4499      	add	r9, r3
 80060ea:	441d      	add	r5, r3
 80060ec:	4613      	mov	r3, r2
 80060ee:	e7c1      	b.n	8006074 <_dtoa_r+0x84c>
 80060f0:	4603      	mov	r3, r0
 80060f2:	e7f6      	b.n	80060e2 <_dtoa_r+0x8ba>
 80060f4:	f1b8 0f00 	cmp.w	r8, #0
 80060f8:	dc36      	bgt.n	8006168 <_dtoa_r+0x940>
 80060fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	dd33      	ble.n	8006168 <_dtoa_r+0x940>
 8006100:	f8cd 8010 	str.w	r8, [sp, #16]
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	b963      	cbnz	r3, 8006122 <_dtoa_r+0x8fa>
 8006108:	4631      	mov	r1, r6
 800610a:	2205      	movs	r2, #5
 800610c:	4620      	mov	r0, r4
 800610e:	f000 fdc3 	bl	8006c98 <__multadd>
 8006112:	4601      	mov	r1, r0
 8006114:	4606      	mov	r6, r0
 8006116:	4658      	mov	r0, fp
 8006118:	f000 ffc6 	bl	80070a8 <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	f73f add3 	bgt.w	8005cc8 <_dtoa_r+0x4a0>
 8006122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006124:	9d06      	ldr	r5, [sp, #24]
 8006126:	ea6f 0a03 	mvn.w	sl, r3
 800612a:	f04f 0900 	mov.w	r9, #0
 800612e:	4631      	mov	r1, r6
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fd9a 	bl	8006c6a <_Bfree>
 8006136:	2f00      	cmp	r7, #0
 8006138:	f43f aebd 	beq.w	8005eb6 <_dtoa_r+0x68e>
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	d005      	beq.n	800614e <_dtoa_r+0x926>
 8006142:	45b9      	cmp	r9, r7
 8006144:	d003      	beq.n	800614e <_dtoa_r+0x926>
 8006146:	4649      	mov	r1, r9
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fd8e 	bl	8006c6a <_Bfree>
 800614e:	4639      	mov	r1, r7
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fd8a 	bl	8006c6a <_Bfree>
 8006156:	e6ae      	b.n	8005eb6 <_dtoa_r+0x68e>
 8006158:	2600      	movs	r6, #0
 800615a:	4637      	mov	r7, r6
 800615c:	e7e1      	b.n	8006122 <_dtoa_r+0x8fa>
 800615e:	46ba      	mov	sl, r7
 8006160:	4637      	mov	r7, r6
 8006162:	e5b1      	b.n	8005cc8 <_dtoa_r+0x4a0>
 8006164:	40240000 	.word	0x40240000
 8006168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616a:	f8cd 8010 	str.w	r8, [sp, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80f3 	beq.w	800635a <_dtoa_r+0xb32>
 8006174:	2d00      	cmp	r5, #0
 8006176:	dd05      	ble.n	8006184 <_dtoa_r+0x95c>
 8006178:	4639      	mov	r1, r7
 800617a:	462a      	mov	r2, r5
 800617c:	4620      	mov	r0, r4
 800617e:	f000 ff3f 	bl	8007000 <__lshift>
 8006182:	4607      	mov	r7, r0
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d04c      	beq.n	8006224 <_dtoa_r+0x9fc>
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fd38 	bl	8006c02 <_Balloc>
 8006192:	4605      	mov	r5, r0
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	f107 010c 	add.w	r1, r7, #12
 800619a:	3202      	adds	r2, #2
 800619c:	0092      	lsls	r2, r2, #2
 800619e:	300c      	adds	r0, #12
 80061a0:	f000 fd24 	bl	8006bec <memcpy>
 80061a4:	2201      	movs	r2, #1
 80061a6:	4629      	mov	r1, r5
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 ff29 	bl	8007000 <__lshift>
 80061ae:	46b9      	mov	r9, r7
 80061b0:	4607      	mov	r7, r0
 80061b2:	9b06      	ldr	r3, [sp, #24]
 80061b4:	9307      	str	r3, [sp, #28]
 80061b6:	9b02      	ldr	r3, [sp, #8]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	9308      	str	r3, [sp, #32]
 80061be:	4631      	mov	r1, r6
 80061c0:	4658      	mov	r0, fp
 80061c2:	f7ff faa3 	bl	800570c <quorem>
 80061c6:	4649      	mov	r1, r9
 80061c8:	4605      	mov	r5, r0
 80061ca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80061ce:	4658      	mov	r0, fp
 80061d0:	f000 ff6a 	bl	80070a8 <__mcmp>
 80061d4:	463a      	mov	r2, r7
 80061d6:	9002      	str	r0, [sp, #8]
 80061d8:	4631      	mov	r1, r6
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 ff7e 	bl	80070dc <__mdiff>
 80061e0:	68c3      	ldr	r3, [r0, #12]
 80061e2:	4602      	mov	r2, r0
 80061e4:	bb03      	cbnz	r3, 8006228 <_dtoa_r+0xa00>
 80061e6:	4601      	mov	r1, r0
 80061e8:	9009      	str	r0, [sp, #36]	; 0x24
 80061ea:	4658      	mov	r0, fp
 80061ec:	f000 ff5c 	bl	80070a8 <__mcmp>
 80061f0:	4603      	mov	r3, r0
 80061f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f4:	4611      	mov	r1, r2
 80061f6:	4620      	mov	r0, r4
 80061f8:	9309      	str	r3, [sp, #36]	; 0x24
 80061fa:	f000 fd36 	bl	8006c6a <_Bfree>
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	b9a3      	cbnz	r3, 800622c <_dtoa_r+0xa04>
 8006202:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006204:	b992      	cbnz	r2, 800622c <_dtoa_r+0xa04>
 8006206:	9a08      	ldr	r2, [sp, #32]
 8006208:	b982      	cbnz	r2, 800622c <_dtoa_r+0xa04>
 800620a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800620e:	d029      	beq.n	8006264 <_dtoa_r+0xa3c>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	dd01      	ble.n	800621a <_dtoa_r+0x9f2>
 8006216:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800621a:	9b07      	ldr	r3, [sp, #28]
 800621c:	1c5d      	adds	r5, r3, #1
 800621e:	f883 8000 	strb.w	r8, [r3]
 8006222:	e784      	b.n	800612e <_dtoa_r+0x906>
 8006224:	4638      	mov	r0, r7
 8006226:	e7c2      	b.n	80061ae <_dtoa_r+0x986>
 8006228:	2301      	movs	r3, #1
 800622a:	e7e3      	b.n	80061f4 <_dtoa_r+0x9cc>
 800622c:	9a02      	ldr	r2, [sp, #8]
 800622e:	2a00      	cmp	r2, #0
 8006230:	db04      	blt.n	800623c <_dtoa_r+0xa14>
 8006232:	d123      	bne.n	800627c <_dtoa_r+0xa54>
 8006234:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006236:	bb0a      	cbnz	r2, 800627c <_dtoa_r+0xa54>
 8006238:	9a08      	ldr	r2, [sp, #32]
 800623a:	b9fa      	cbnz	r2, 800627c <_dtoa_r+0xa54>
 800623c:	2b00      	cmp	r3, #0
 800623e:	ddec      	ble.n	800621a <_dtoa_r+0x9f2>
 8006240:	4659      	mov	r1, fp
 8006242:	2201      	movs	r2, #1
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fedb 	bl	8007000 <__lshift>
 800624a:	4631      	mov	r1, r6
 800624c:	4683      	mov	fp, r0
 800624e:	f000 ff2b 	bl	80070a8 <__mcmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	dc03      	bgt.n	800625e <_dtoa_r+0xa36>
 8006256:	d1e0      	bne.n	800621a <_dtoa_r+0x9f2>
 8006258:	f018 0f01 	tst.w	r8, #1
 800625c:	d0dd      	beq.n	800621a <_dtoa_r+0x9f2>
 800625e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006262:	d1d8      	bne.n	8006216 <_dtoa_r+0x9ee>
 8006264:	9b07      	ldr	r3, [sp, #28]
 8006266:	9a07      	ldr	r2, [sp, #28]
 8006268:	1c5d      	adds	r5, r3, #1
 800626a:	2339      	movs	r3, #57	; 0x39
 800626c:	7013      	strb	r3, [r2, #0]
 800626e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006272:	1e6a      	subs	r2, r5, #1
 8006274:	2b39      	cmp	r3, #57	; 0x39
 8006276:	d04d      	beq.n	8006314 <_dtoa_r+0xaec>
 8006278:	3301      	adds	r3, #1
 800627a:	e052      	b.n	8006322 <_dtoa_r+0xafa>
 800627c:	9a07      	ldr	r2, [sp, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f102 0501 	add.w	r5, r2, #1
 8006284:	dd06      	ble.n	8006294 <_dtoa_r+0xa6c>
 8006286:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800628a:	d0eb      	beq.n	8006264 <_dtoa_r+0xa3c>
 800628c:	f108 0801 	add.w	r8, r8, #1
 8006290:	9b07      	ldr	r3, [sp, #28]
 8006292:	e7c4      	b.n	800621e <_dtoa_r+0x9f6>
 8006294:	9b06      	ldr	r3, [sp, #24]
 8006296:	9a04      	ldr	r2, [sp, #16]
 8006298:	1aeb      	subs	r3, r5, r3
 800629a:	4293      	cmp	r3, r2
 800629c:	f805 8c01 	strb.w	r8, [r5, #-1]
 80062a0:	d021      	beq.n	80062e6 <_dtoa_r+0xabe>
 80062a2:	4659      	mov	r1, fp
 80062a4:	2300      	movs	r3, #0
 80062a6:	220a      	movs	r2, #10
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fcf5 	bl	8006c98 <__multadd>
 80062ae:	45b9      	cmp	r9, r7
 80062b0:	4683      	mov	fp, r0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	f04f 020a 	mov.w	r2, #10
 80062ba:	4649      	mov	r1, r9
 80062bc:	4620      	mov	r0, r4
 80062be:	d105      	bne.n	80062cc <_dtoa_r+0xaa4>
 80062c0:	f000 fcea 	bl	8006c98 <__multadd>
 80062c4:	4681      	mov	r9, r0
 80062c6:	4607      	mov	r7, r0
 80062c8:	9507      	str	r5, [sp, #28]
 80062ca:	e778      	b.n	80061be <_dtoa_r+0x996>
 80062cc:	f000 fce4 	bl	8006c98 <__multadd>
 80062d0:	4639      	mov	r1, r7
 80062d2:	4681      	mov	r9, r0
 80062d4:	2300      	movs	r3, #0
 80062d6:	220a      	movs	r2, #10
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fcdd 	bl	8006c98 <__multadd>
 80062de:	4607      	mov	r7, r0
 80062e0:	e7f2      	b.n	80062c8 <_dtoa_r+0xaa0>
 80062e2:	f04f 0900 	mov.w	r9, #0
 80062e6:	4659      	mov	r1, fp
 80062e8:	2201      	movs	r2, #1
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fe88 	bl	8007000 <__lshift>
 80062f0:	4631      	mov	r1, r6
 80062f2:	4683      	mov	fp, r0
 80062f4:	f000 fed8 	bl	80070a8 <__mcmp>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	dcb8      	bgt.n	800626e <_dtoa_r+0xa46>
 80062fc:	d102      	bne.n	8006304 <_dtoa_r+0xadc>
 80062fe:	f018 0f01 	tst.w	r8, #1
 8006302:	d1b4      	bne.n	800626e <_dtoa_r+0xa46>
 8006304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006308:	1e6a      	subs	r2, r5, #1
 800630a:	2b30      	cmp	r3, #48	; 0x30
 800630c:	f47f af0f 	bne.w	800612e <_dtoa_r+0x906>
 8006310:	4615      	mov	r5, r2
 8006312:	e7f7      	b.n	8006304 <_dtoa_r+0xadc>
 8006314:	9b06      	ldr	r3, [sp, #24]
 8006316:	4293      	cmp	r3, r2
 8006318:	d105      	bne.n	8006326 <_dtoa_r+0xafe>
 800631a:	2331      	movs	r3, #49	; 0x31
 800631c:	9a06      	ldr	r2, [sp, #24]
 800631e:	f10a 0a01 	add.w	sl, sl, #1
 8006322:	7013      	strb	r3, [r2, #0]
 8006324:	e703      	b.n	800612e <_dtoa_r+0x906>
 8006326:	4615      	mov	r5, r2
 8006328:	e7a1      	b.n	800626e <_dtoa_r+0xa46>
 800632a:	4b17      	ldr	r3, [pc, #92]	; (8006388 <_dtoa_r+0xb60>)
 800632c:	f7ff bae1 	b.w	80058f2 <_dtoa_r+0xca>
 8006330:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006332:	2b00      	cmp	r3, #0
 8006334:	f47f aabb 	bne.w	80058ae <_dtoa_r+0x86>
 8006338:	4b14      	ldr	r3, [pc, #80]	; (800638c <_dtoa_r+0xb64>)
 800633a:	f7ff bada 	b.w	80058f2 <_dtoa_r+0xca>
 800633e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006340:	2b01      	cmp	r3, #1
 8006342:	f77f ae3f 	ble.w	8005fc4 <_dtoa_r+0x79c>
 8006346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006348:	9308      	str	r3, [sp, #32]
 800634a:	e653      	b.n	8005ff4 <_dtoa_r+0x7cc>
 800634c:	9b04      	ldr	r3, [sp, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	dc03      	bgt.n	800635a <_dtoa_r+0xb32>
 8006352:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006354:	2b02      	cmp	r3, #2
 8006356:	f73f aed5 	bgt.w	8006104 <_dtoa_r+0x8dc>
 800635a:	9d06      	ldr	r5, [sp, #24]
 800635c:	4631      	mov	r1, r6
 800635e:	4658      	mov	r0, fp
 8006360:	f7ff f9d4 	bl	800570c <quorem>
 8006364:	9b06      	ldr	r3, [sp, #24]
 8006366:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800636a:	f805 8b01 	strb.w	r8, [r5], #1
 800636e:	9a04      	ldr	r2, [sp, #16]
 8006370:	1aeb      	subs	r3, r5, r3
 8006372:	429a      	cmp	r2, r3
 8006374:	ddb5      	ble.n	80062e2 <_dtoa_r+0xaba>
 8006376:	4659      	mov	r1, fp
 8006378:	2300      	movs	r3, #0
 800637a:	220a      	movs	r2, #10
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fc8b 	bl	8006c98 <__multadd>
 8006382:	4683      	mov	fp, r0
 8006384:	e7ea      	b.n	800635c <_dtoa_r+0xb34>
 8006386:	bf00      	nop
 8006388:	08008100 	.word	0x08008100
 800638c:	08008180 	.word	0x08008180

08006390 <std>:
 8006390:	2300      	movs	r3, #0
 8006392:	b510      	push	{r4, lr}
 8006394:	4604      	mov	r4, r0
 8006396:	e9c0 3300 	strd	r3, r3, [r0]
 800639a:	6083      	str	r3, [r0, #8]
 800639c:	8181      	strh	r1, [r0, #12]
 800639e:	6643      	str	r3, [r0, #100]	; 0x64
 80063a0:	81c2      	strh	r2, [r0, #14]
 80063a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063a6:	6183      	str	r3, [r0, #24]
 80063a8:	4619      	mov	r1, r3
 80063aa:	2208      	movs	r2, #8
 80063ac:	305c      	adds	r0, #92	; 0x5c
 80063ae:	f7fd fc79 	bl	8003ca4 <memset>
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <std+0x38>)
 80063b4:	6224      	str	r4, [r4, #32]
 80063b6:	6263      	str	r3, [r4, #36]	; 0x24
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <std+0x3c>)
 80063ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80063bc:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <std+0x40>)
 80063be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <std+0x44>)
 80063c2:	6323      	str	r3, [r4, #48]	; 0x30
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	bf00      	nop
 80063c8:	08007a9d 	.word	0x08007a9d
 80063cc:	08007abf 	.word	0x08007abf
 80063d0:	08007af7 	.word	0x08007af7
 80063d4:	08007b1b 	.word	0x08007b1b

080063d8 <_cleanup_r>:
 80063d8:	4901      	ldr	r1, [pc, #4]	; (80063e0 <_cleanup_r+0x8>)
 80063da:	f000 b885 	b.w	80064e8 <_fwalk_reent>
 80063de:	bf00      	nop
 80063e0:	08007e35 	.word	0x08007e35

080063e4 <__sfmoreglue>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	2568      	movs	r5, #104	; 0x68
 80063e8:	1e4a      	subs	r2, r1, #1
 80063ea:	4355      	muls	r5, r2
 80063ec:	460e      	mov	r6, r1
 80063ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063f2:	f001 f859 	bl	80074a8 <_malloc_r>
 80063f6:	4604      	mov	r4, r0
 80063f8:	b140      	cbz	r0, 800640c <__sfmoreglue+0x28>
 80063fa:	2100      	movs	r1, #0
 80063fc:	e9c0 1600 	strd	r1, r6, [r0]
 8006400:	300c      	adds	r0, #12
 8006402:	60a0      	str	r0, [r4, #8]
 8006404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006408:	f7fd fc4c 	bl	8003ca4 <memset>
 800640c:	4620      	mov	r0, r4
 800640e:	bd70      	pop	{r4, r5, r6, pc}

08006410 <__sinit>:
 8006410:	6983      	ldr	r3, [r0, #24]
 8006412:	b510      	push	{r4, lr}
 8006414:	4604      	mov	r4, r0
 8006416:	bb33      	cbnz	r3, 8006466 <__sinit+0x56>
 8006418:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800641c:	6503      	str	r3, [r0, #80]	; 0x50
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <__sinit+0x58>)
 8006420:	4a12      	ldr	r2, [pc, #72]	; (800646c <__sinit+0x5c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6282      	str	r2, [r0, #40]	; 0x28
 8006426:	4298      	cmp	r0, r3
 8006428:	bf04      	itt	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	6183      	streq	r3, [r0, #24]
 800642e:	f000 f81f 	bl	8006470 <__sfp>
 8006432:	6060      	str	r0, [r4, #4]
 8006434:	4620      	mov	r0, r4
 8006436:	f000 f81b 	bl	8006470 <__sfp>
 800643a:	60a0      	str	r0, [r4, #8]
 800643c:	4620      	mov	r0, r4
 800643e:	f000 f817 	bl	8006470 <__sfp>
 8006442:	2200      	movs	r2, #0
 8006444:	60e0      	str	r0, [r4, #12]
 8006446:	2104      	movs	r1, #4
 8006448:	6860      	ldr	r0, [r4, #4]
 800644a:	f7ff ffa1 	bl	8006390 <std>
 800644e:	2201      	movs	r2, #1
 8006450:	2109      	movs	r1, #9
 8006452:	68a0      	ldr	r0, [r4, #8]
 8006454:	f7ff ff9c 	bl	8006390 <std>
 8006458:	2202      	movs	r2, #2
 800645a:	2112      	movs	r1, #18
 800645c:	68e0      	ldr	r0, [r4, #12]
 800645e:	f7ff ff97 	bl	8006390 <std>
 8006462:	2301      	movs	r3, #1
 8006464:	61a3      	str	r3, [r4, #24]
 8006466:	bd10      	pop	{r4, pc}
 8006468:	080080ec 	.word	0x080080ec
 800646c:	080063d9 	.word	0x080063d9

08006470 <__sfp>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <__sfp+0x70>)
 8006474:	4607      	mov	r7, r0
 8006476:	681e      	ldr	r6, [r3, #0]
 8006478:	69b3      	ldr	r3, [r6, #24]
 800647a:	b913      	cbnz	r3, 8006482 <__sfp+0x12>
 800647c:	4630      	mov	r0, r6
 800647e:	f7ff ffc7 	bl	8006410 <__sinit>
 8006482:	3648      	adds	r6, #72	; 0x48
 8006484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006488:	3b01      	subs	r3, #1
 800648a:	d503      	bpl.n	8006494 <__sfp+0x24>
 800648c:	6833      	ldr	r3, [r6, #0]
 800648e:	b133      	cbz	r3, 800649e <__sfp+0x2e>
 8006490:	6836      	ldr	r6, [r6, #0]
 8006492:	e7f7      	b.n	8006484 <__sfp+0x14>
 8006494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006498:	b16d      	cbz	r5, 80064b6 <__sfp+0x46>
 800649a:	3468      	adds	r4, #104	; 0x68
 800649c:	e7f4      	b.n	8006488 <__sfp+0x18>
 800649e:	2104      	movs	r1, #4
 80064a0:	4638      	mov	r0, r7
 80064a2:	f7ff ff9f 	bl	80063e4 <__sfmoreglue>
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d1f1      	bne.n	8006490 <__sfp+0x20>
 80064ac:	230c      	movs	r3, #12
 80064ae:	4604      	mov	r4, r0
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4620      	mov	r0, r4
 80064b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <__sfp+0x74>)
 80064b8:	6665      	str	r5, [r4, #100]	; 0x64
 80064ba:	e9c4 5500 	strd	r5, r5, [r4]
 80064be:	60a5      	str	r5, [r4, #8]
 80064c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80064c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80064c8:	2208      	movs	r2, #8
 80064ca:	4629      	mov	r1, r5
 80064cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064d0:	f7fd fbe8 	bl	8003ca4 <memset>
 80064d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064dc:	e7e9      	b.n	80064b2 <__sfp+0x42>
 80064de:	bf00      	nop
 80064e0:	080080ec 	.word	0x080080ec
 80064e4:	ffff0001 	.word	0xffff0001

080064e8 <_fwalk_reent>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	2600      	movs	r6, #0
 80064f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064f6:	b914      	cbnz	r4, 80064fe <_fwalk_reent+0x16>
 80064f8:	4630      	mov	r0, r6
 80064fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006502:	3f01      	subs	r7, #1
 8006504:	d501      	bpl.n	800650a <_fwalk_reent+0x22>
 8006506:	6824      	ldr	r4, [r4, #0]
 8006508:	e7f5      	b.n	80064f6 <_fwalk_reent+0xe>
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d907      	bls.n	8006520 <_fwalk_reent+0x38>
 8006510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006514:	3301      	adds	r3, #1
 8006516:	d003      	beq.n	8006520 <_fwalk_reent+0x38>
 8006518:	4629      	mov	r1, r5
 800651a:	4640      	mov	r0, r8
 800651c:	47c8      	blx	r9
 800651e:	4306      	orrs	r6, r0
 8006520:	3568      	adds	r5, #104	; 0x68
 8006522:	e7ee      	b.n	8006502 <_fwalk_reent+0x1a>

08006524 <rshift>:
 8006524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006526:	6906      	ldr	r6, [r0, #16]
 8006528:	114b      	asrs	r3, r1, #5
 800652a:	429e      	cmp	r6, r3
 800652c:	f100 0414 	add.w	r4, r0, #20
 8006530:	dd31      	ble.n	8006596 <rshift+0x72>
 8006532:	f011 011f 	ands.w	r1, r1, #31
 8006536:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800653a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800653e:	d108      	bne.n	8006552 <rshift+0x2e>
 8006540:	4621      	mov	r1, r4
 8006542:	42b2      	cmp	r2, r6
 8006544:	460b      	mov	r3, r1
 8006546:	d211      	bcs.n	800656c <rshift+0x48>
 8006548:	f852 3b04 	ldr.w	r3, [r2], #4
 800654c:	f841 3b04 	str.w	r3, [r1], #4
 8006550:	e7f7      	b.n	8006542 <rshift+0x1e>
 8006552:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006556:	4623      	mov	r3, r4
 8006558:	f1c1 0c20 	rsb	ip, r1, #32
 800655c:	40cd      	lsrs	r5, r1
 800655e:	3204      	adds	r2, #4
 8006560:	42b2      	cmp	r2, r6
 8006562:	4617      	mov	r7, r2
 8006564:	d30d      	bcc.n	8006582 <rshift+0x5e>
 8006566:	601d      	str	r5, [r3, #0]
 8006568:	b105      	cbz	r5, 800656c <rshift+0x48>
 800656a:	3304      	adds	r3, #4
 800656c:	42a3      	cmp	r3, r4
 800656e:	eba3 0204 	sub.w	r2, r3, r4
 8006572:	bf08      	it	eq
 8006574:	2300      	moveq	r3, #0
 8006576:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800657a:	6102      	str	r2, [r0, #16]
 800657c:	bf08      	it	eq
 800657e:	6143      	streq	r3, [r0, #20]
 8006580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006582:	683f      	ldr	r7, [r7, #0]
 8006584:	fa07 f70c 	lsl.w	r7, r7, ip
 8006588:	433d      	orrs	r5, r7
 800658a:	f843 5b04 	str.w	r5, [r3], #4
 800658e:	f852 5b04 	ldr.w	r5, [r2], #4
 8006592:	40cd      	lsrs	r5, r1
 8006594:	e7e4      	b.n	8006560 <rshift+0x3c>
 8006596:	4623      	mov	r3, r4
 8006598:	e7e8      	b.n	800656c <rshift+0x48>

0800659a <__hexdig_fun>:
 800659a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800659e:	2b09      	cmp	r3, #9
 80065a0:	d802      	bhi.n	80065a8 <__hexdig_fun+0xe>
 80065a2:	3820      	subs	r0, #32
 80065a4:	b2c0      	uxtb	r0, r0
 80065a6:	4770      	bx	lr
 80065a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d801      	bhi.n	80065b4 <__hexdig_fun+0x1a>
 80065b0:	3847      	subs	r0, #71	; 0x47
 80065b2:	e7f7      	b.n	80065a4 <__hexdig_fun+0xa>
 80065b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	d801      	bhi.n	80065c0 <__hexdig_fun+0x26>
 80065bc:	3827      	subs	r0, #39	; 0x27
 80065be:	e7f1      	b.n	80065a4 <__hexdig_fun+0xa>
 80065c0:	2000      	movs	r0, #0
 80065c2:	4770      	bx	lr

080065c4 <__gethex>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	b08b      	sub	sp, #44	; 0x2c
 80065ca:	9002      	str	r0, [sp, #8]
 80065cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80065ce:	468a      	mov	sl, r1
 80065d0:	4690      	mov	r8, r2
 80065d2:	9306      	str	r3, [sp, #24]
 80065d4:	f000 fad1 	bl	8006b7a <__localeconv_l>
 80065d8:	6803      	ldr	r3, [r0, #0]
 80065da:	f04f 0b00 	mov.w	fp, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	9303      	str	r3, [sp, #12]
 80065e2:	f7f9 fdb5 	bl	8000150 <strlen>
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	9001      	str	r0, [sp, #4]
 80065ea:	4403      	add	r3, r0
 80065ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	f8da 3000 	ldr.w	r3, [sl]
 80065f6:	3302      	adds	r3, #2
 80065f8:	461f      	mov	r7, r3
 80065fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80065fe:	2830      	cmp	r0, #48	; 0x30
 8006600:	d06c      	beq.n	80066dc <__gethex+0x118>
 8006602:	f7ff ffca 	bl	800659a <__hexdig_fun>
 8006606:	4604      	mov	r4, r0
 8006608:	2800      	cmp	r0, #0
 800660a:	d16a      	bne.n	80066e2 <__gethex+0x11e>
 800660c:	9a01      	ldr	r2, [sp, #4]
 800660e:	9903      	ldr	r1, [sp, #12]
 8006610:	4638      	mov	r0, r7
 8006612:	f001 fa86 	bl	8007b22 <strncmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	d166      	bne.n	80066e8 <__gethex+0x124>
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	5cf8      	ldrb	r0, [r7, r3]
 800661e:	18fe      	adds	r6, r7, r3
 8006620:	f7ff ffbb 	bl	800659a <__hexdig_fun>
 8006624:	2800      	cmp	r0, #0
 8006626:	d062      	beq.n	80066ee <__gethex+0x12a>
 8006628:	4633      	mov	r3, r6
 800662a:	7818      	ldrb	r0, [r3, #0]
 800662c:	461f      	mov	r7, r3
 800662e:	2830      	cmp	r0, #48	; 0x30
 8006630:	f103 0301 	add.w	r3, r3, #1
 8006634:	d0f9      	beq.n	800662a <__gethex+0x66>
 8006636:	f7ff ffb0 	bl	800659a <__hexdig_fun>
 800663a:	fab0 f580 	clz	r5, r0
 800663e:	4634      	mov	r4, r6
 8006640:	f04f 0b01 	mov.w	fp, #1
 8006644:	096d      	lsrs	r5, r5, #5
 8006646:	463a      	mov	r2, r7
 8006648:	4616      	mov	r6, r2
 800664a:	7830      	ldrb	r0, [r6, #0]
 800664c:	3201      	adds	r2, #1
 800664e:	f7ff ffa4 	bl	800659a <__hexdig_fun>
 8006652:	2800      	cmp	r0, #0
 8006654:	d1f8      	bne.n	8006648 <__gethex+0x84>
 8006656:	9a01      	ldr	r2, [sp, #4]
 8006658:	9903      	ldr	r1, [sp, #12]
 800665a:	4630      	mov	r0, r6
 800665c:	f001 fa61 	bl	8007b22 <strncmp>
 8006660:	b950      	cbnz	r0, 8006678 <__gethex+0xb4>
 8006662:	b954      	cbnz	r4, 800667a <__gethex+0xb6>
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	18f4      	adds	r4, r6, r3
 8006668:	4622      	mov	r2, r4
 800666a:	4616      	mov	r6, r2
 800666c:	7830      	ldrb	r0, [r6, #0]
 800666e:	3201      	adds	r2, #1
 8006670:	f7ff ff93 	bl	800659a <__hexdig_fun>
 8006674:	2800      	cmp	r0, #0
 8006676:	d1f8      	bne.n	800666a <__gethex+0xa6>
 8006678:	b10c      	cbz	r4, 800667e <__gethex+0xba>
 800667a:	1ba4      	subs	r4, r4, r6
 800667c:	00a4      	lsls	r4, r4, #2
 800667e:	7833      	ldrb	r3, [r6, #0]
 8006680:	2b50      	cmp	r3, #80	; 0x50
 8006682:	d001      	beq.n	8006688 <__gethex+0xc4>
 8006684:	2b70      	cmp	r3, #112	; 0x70
 8006686:	d140      	bne.n	800670a <__gethex+0x146>
 8006688:	7873      	ldrb	r3, [r6, #1]
 800668a:	2b2b      	cmp	r3, #43	; 0x2b
 800668c:	d031      	beq.n	80066f2 <__gethex+0x12e>
 800668e:	2b2d      	cmp	r3, #45	; 0x2d
 8006690:	d033      	beq.n	80066fa <__gethex+0x136>
 8006692:	f04f 0900 	mov.w	r9, #0
 8006696:	1c71      	adds	r1, r6, #1
 8006698:	7808      	ldrb	r0, [r1, #0]
 800669a:	f7ff ff7e 	bl	800659a <__hexdig_fun>
 800669e:	1e43      	subs	r3, r0, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b18      	cmp	r3, #24
 80066a4:	d831      	bhi.n	800670a <__gethex+0x146>
 80066a6:	f1a0 0210 	sub.w	r2, r0, #16
 80066aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066ae:	f7ff ff74 	bl	800659a <__hexdig_fun>
 80066b2:	1e43      	subs	r3, r0, #1
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b18      	cmp	r3, #24
 80066b8:	d922      	bls.n	8006700 <__gethex+0x13c>
 80066ba:	f1b9 0f00 	cmp.w	r9, #0
 80066be:	d000      	beq.n	80066c2 <__gethex+0xfe>
 80066c0:	4252      	negs	r2, r2
 80066c2:	4414      	add	r4, r2
 80066c4:	f8ca 1000 	str.w	r1, [sl]
 80066c8:	b30d      	cbz	r5, 800670e <__gethex+0x14a>
 80066ca:	f1bb 0f00 	cmp.w	fp, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2706      	moveq	r7, #6
 80066d2:	2700      	movne	r7, #0
 80066d4:	4638      	mov	r0, r7
 80066d6:	b00b      	add	sp, #44	; 0x2c
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	f10b 0b01 	add.w	fp, fp, #1
 80066e0:	e78a      	b.n	80065f8 <__gethex+0x34>
 80066e2:	2500      	movs	r5, #0
 80066e4:	462c      	mov	r4, r5
 80066e6:	e7ae      	b.n	8006646 <__gethex+0x82>
 80066e8:	463e      	mov	r6, r7
 80066ea:	2501      	movs	r5, #1
 80066ec:	e7c7      	b.n	800667e <__gethex+0xba>
 80066ee:	4604      	mov	r4, r0
 80066f0:	e7fb      	b.n	80066ea <__gethex+0x126>
 80066f2:	f04f 0900 	mov.w	r9, #0
 80066f6:	1cb1      	adds	r1, r6, #2
 80066f8:	e7ce      	b.n	8006698 <__gethex+0xd4>
 80066fa:	f04f 0901 	mov.w	r9, #1
 80066fe:	e7fa      	b.n	80066f6 <__gethex+0x132>
 8006700:	230a      	movs	r3, #10
 8006702:	fb03 0202 	mla	r2, r3, r2, r0
 8006706:	3a10      	subs	r2, #16
 8006708:	e7cf      	b.n	80066aa <__gethex+0xe6>
 800670a:	4631      	mov	r1, r6
 800670c:	e7da      	b.n	80066c4 <__gethex+0x100>
 800670e:	4629      	mov	r1, r5
 8006710:	1bf3      	subs	r3, r6, r7
 8006712:	3b01      	subs	r3, #1
 8006714:	2b07      	cmp	r3, #7
 8006716:	dc49      	bgt.n	80067ac <__gethex+0x1e8>
 8006718:	9802      	ldr	r0, [sp, #8]
 800671a:	f000 fa72 	bl	8006c02 <_Balloc>
 800671e:	f04f 0b00 	mov.w	fp, #0
 8006722:	4605      	mov	r5, r0
 8006724:	46da      	mov	sl, fp
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	f100 0914 	add.w	r9, r0, #20
 800672c:	f1c3 0301 	rsb	r3, r3, #1
 8006730:	f8cd 9010 	str.w	r9, [sp, #16]
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	42b7      	cmp	r7, r6
 8006738:	d33b      	bcc.n	80067b2 <__gethex+0x1ee>
 800673a:	9804      	ldr	r0, [sp, #16]
 800673c:	f840 ab04 	str.w	sl, [r0], #4
 8006740:	eba0 0009 	sub.w	r0, r0, r9
 8006744:	1080      	asrs	r0, r0, #2
 8006746:	6128      	str	r0, [r5, #16]
 8006748:	0147      	lsls	r7, r0, #5
 800674a:	4650      	mov	r0, sl
 800674c:	f000 fb1d 	bl	8006d8a <__hi0bits>
 8006750:	f8d8 6000 	ldr.w	r6, [r8]
 8006754:	1a3f      	subs	r7, r7, r0
 8006756:	42b7      	cmp	r7, r6
 8006758:	dd64      	ble.n	8006824 <__gethex+0x260>
 800675a:	1bbf      	subs	r7, r7, r6
 800675c:	4639      	mov	r1, r7
 800675e:	4628      	mov	r0, r5
 8006760:	f000 fe27 	bl	80073b2 <__any_on>
 8006764:	4682      	mov	sl, r0
 8006766:	b178      	cbz	r0, 8006788 <__gethex+0x1c4>
 8006768:	f04f 0a01 	mov.w	sl, #1
 800676c:	1e7b      	subs	r3, r7, #1
 800676e:	1159      	asrs	r1, r3, #5
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006778:	fa0a f202 	lsl.w	r2, sl, r2
 800677c:	420a      	tst	r2, r1
 800677e:	d003      	beq.n	8006788 <__gethex+0x1c4>
 8006780:	4553      	cmp	r3, sl
 8006782:	dc46      	bgt.n	8006812 <__gethex+0x24e>
 8006784:	f04f 0a02 	mov.w	sl, #2
 8006788:	4639      	mov	r1, r7
 800678a:	4628      	mov	r0, r5
 800678c:	f7ff feca 	bl	8006524 <rshift>
 8006790:	443c      	add	r4, r7
 8006792:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006796:	42a3      	cmp	r3, r4
 8006798:	da52      	bge.n	8006840 <__gethex+0x27c>
 800679a:	4629      	mov	r1, r5
 800679c:	9802      	ldr	r0, [sp, #8]
 800679e:	f000 fa64 	bl	8006c6a <_Bfree>
 80067a2:	2300      	movs	r3, #0
 80067a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067a6:	27a3      	movs	r7, #163	; 0xa3
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	e793      	b.n	80066d4 <__gethex+0x110>
 80067ac:	3101      	adds	r1, #1
 80067ae:	105b      	asrs	r3, r3, #1
 80067b0:	e7b0      	b.n	8006714 <__gethex+0x150>
 80067b2:	1e73      	subs	r3, r6, #1
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	9a07      	ldr	r2, [sp, #28]
 80067b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067bc:	4293      	cmp	r3, r2
 80067be:	d018      	beq.n	80067f2 <__gethex+0x22e>
 80067c0:	f1bb 0f20 	cmp.w	fp, #32
 80067c4:	d107      	bne.n	80067d6 <__gethex+0x212>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	f8c3 a000 	str.w	sl, [r3]
 80067cc:	f04f 0a00 	mov.w	sl, #0
 80067d0:	46d3      	mov	fp, sl
 80067d2:	3304      	adds	r3, #4
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80067da:	f7ff fede 	bl	800659a <__hexdig_fun>
 80067de:	f000 000f 	and.w	r0, r0, #15
 80067e2:	fa00 f00b 	lsl.w	r0, r0, fp
 80067e6:	ea4a 0a00 	orr.w	sl, sl, r0
 80067ea:	f10b 0b04 	add.w	fp, fp, #4
 80067ee:	9b05      	ldr	r3, [sp, #20]
 80067f0:	e00d      	b.n	800680e <__gethex+0x24a>
 80067f2:	9b05      	ldr	r3, [sp, #20]
 80067f4:	9a08      	ldr	r2, [sp, #32]
 80067f6:	4413      	add	r3, r2
 80067f8:	42bb      	cmp	r3, r7
 80067fa:	d3e1      	bcc.n	80067c0 <__gethex+0x1fc>
 80067fc:	4618      	mov	r0, r3
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	f001 f98d 	bl	8007b22 <strncmp>
 8006808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680a:	2800      	cmp	r0, #0
 800680c:	d1d8      	bne.n	80067c0 <__gethex+0x1fc>
 800680e:	461e      	mov	r6, r3
 8006810:	e791      	b.n	8006736 <__gethex+0x172>
 8006812:	1eb9      	subs	r1, r7, #2
 8006814:	4628      	mov	r0, r5
 8006816:	f000 fdcc 	bl	80073b2 <__any_on>
 800681a:	2800      	cmp	r0, #0
 800681c:	d0b2      	beq.n	8006784 <__gethex+0x1c0>
 800681e:	f04f 0a03 	mov.w	sl, #3
 8006822:	e7b1      	b.n	8006788 <__gethex+0x1c4>
 8006824:	da09      	bge.n	800683a <__gethex+0x276>
 8006826:	1bf7      	subs	r7, r6, r7
 8006828:	4629      	mov	r1, r5
 800682a:	463a      	mov	r2, r7
 800682c:	9802      	ldr	r0, [sp, #8]
 800682e:	f000 fbe7 	bl	8007000 <__lshift>
 8006832:	4605      	mov	r5, r0
 8006834:	1be4      	subs	r4, r4, r7
 8006836:	f100 0914 	add.w	r9, r0, #20
 800683a:	f04f 0a00 	mov.w	sl, #0
 800683e:	e7a8      	b.n	8006792 <__gethex+0x1ce>
 8006840:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006844:	42a0      	cmp	r0, r4
 8006846:	dd6b      	ble.n	8006920 <__gethex+0x35c>
 8006848:	1b04      	subs	r4, r0, r4
 800684a:	42a6      	cmp	r6, r4
 800684c:	dc2e      	bgt.n	80068ac <__gethex+0x2e8>
 800684e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006852:	2b02      	cmp	r3, #2
 8006854:	d022      	beq.n	800689c <__gethex+0x2d8>
 8006856:	2b03      	cmp	r3, #3
 8006858:	d024      	beq.n	80068a4 <__gethex+0x2e0>
 800685a:	2b01      	cmp	r3, #1
 800685c:	d115      	bne.n	800688a <__gethex+0x2c6>
 800685e:	42a6      	cmp	r6, r4
 8006860:	d113      	bne.n	800688a <__gethex+0x2c6>
 8006862:	2e01      	cmp	r6, #1
 8006864:	dc0b      	bgt.n	800687e <__gethex+0x2ba>
 8006866:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800686a:	9a06      	ldr	r2, [sp, #24]
 800686c:	2762      	movs	r7, #98	; 0x62
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	2301      	movs	r3, #1
 8006872:	612b      	str	r3, [r5, #16]
 8006874:	f8c9 3000 	str.w	r3, [r9]
 8006878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800687a:	601d      	str	r5, [r3, #0]
 800687c:	e72a      	b.n	80066d4 <__gethex+0x110>
 800687e:	1e71      	subs	r1, r6, #1
 8006880:	4628      	mov	r0, r5
 8006882:	f000 fd96 	bl	80073b2 <__any_on>
 8006886:	2800      	cmp	r0, #0
 8006888:	d1ed      	bne.n	8006866 <__gethex+0x2a2>
 800688a:	4629      	mov	r1, r5
 800688c:	9802      	ldr	r0, [sp, #8]
 800688e:	f000 f9ec 	bl	8006c6a <_Bfree>
 8006892:	2300      	movs	r3, #0
 8006894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006896:	2750      	movs	r7, #80	; 0x50
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e71b      	b.n	80066d4 <__gethex+0x110>
 800689c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0e1      	beq.n	8006866 <__gethex+0x2a2>
 80068a2:	e7f2      	b.n	800688a <__gethex+0x2c6>
 80068a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1dd      	bne.n	8006866 <__gethex+0x2a2>
 80068aa:	e7ee      	b.n	800688a <__gethex+0x2c6>
 80068ac:	1e67      	subs	r7, r4, #1
 80068ae:	f1ba 0f00 	cmp.w	sl, #0
 80068b2:	d132      	bne.n	800691a <__gethex+0x356>
 80068b4:	b127      	cbz	r7, 80068c0 <__gethex+0x2fc>
 80068b6:	4639      	mov	r1, r7
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fd7a 	bl	80073b2 <__any_on>
 80068be:	4682      	mov	sl, r0
 80068c0:	2301      	movs	r3, #1
 80068c2:	117a      	asrs	r2, r7, #5
 80068c4:	f007 071f 	and.w	r7, r7, #31
 80068c8:	fa03 f707 	lsl.w	r7, r3, r7
 80068cc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80068d0:	4621      	mov	r1, r4
 80068d2:	421f      	tst	r7, r3
 80068d4:	f04f 0702 	mov.w	r7, #2
 80068d8:	4628      	mov	r0, r5
 80068da:	bf18      	it	ne
 80068dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80068e0:	1b36      	subs	r6, r6, r4
 80068e2:	f7ff fe1f 	bl	8006524 <rshift>
 80068e6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	d048      	beq.n	8006982 <__gethex+0x3be>
 80068f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d015      	beq.n	8006924 <__gethex+0x360>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d017      	beq.n	800692c <__gethex+0x368>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d109      	bne.n	8006914 <__gethex+0x350>
 8006900:	f01a 0f02 	tst.w	sl, #2
 8006904:	d006      	beq.n	8006914 <__gethex+0x350>
 8006906:	f8d9 3000 	ldr.w	r3, [r9]
 800690a:	ea4a 0a03 	orr.w	sl, sl, r3
 800690e:	f01a 0f01 	tst.w	sl, #1
 8006912:	d10e      	bne.n	8006932 <__gethex+0x36e>
 8006914:	f047 0710 	orr.w	r7, r7, #16
 8006918:	e033      	b.n	8006982 <__gethex+0x3be>
 800691a:	f04f 0a01 	mov.w	sl, #1
 800691e:	e7cf      	b.n	80068c0 <__gethex+0x2fc>
 8006920:	2701      	movs	r7, #1
 8006922:	e7e2      	b.n	80068ea <__gethex+0x326>
 8006924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006926:	f1c3 0301 	rsb	r3, r3, #1
 800692a:	9315      	str	r3, [sp, #84]	; 0x54
 800692c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f0      	beq.n	8006914 <__gethex+0x350>
 8006932:	f04f 0c00 	mov.w	ip, #0
 8006936:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800693a:	f105 0314 	add.w	r3, r5, #20
 800693e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006942:	eb03 010a 	add.w	r1, r3, sl
 8006946:	4618      	mov	r0, r3
 8006948:	f853 2b04 	ldr.w	r2, [r3], #4
 800694c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006950:	d01c      	beq.n	800698c <__gethex+0x3c8>
 8006952:	3201      	adds	r2, #1
 8006954:	6002      	str	r2, [r0, #0]
 8006956:	2f02      	cmp	r7, #2
 8006958:	f105 0314 	add.w	r3, r5, #20
 800695c:	d138      	bne.n	80069d0 <__gethex+0x40c>
 800695e:	f8d8 2000 	ldr.w	r2, [r8]
 8006962:	3a01      	subs	r2, #1
 8006964:	42b2      	cmp	r2, r6
 8006966:	d10a      	bne.n	800697e <__gethex+0x3ba>
 8006968:	2201      	movs	r2, #1
 800696a:	1171      	asrs	r1, r6, #5
 800696c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006970:	f006 061f 	and.w	r6, r6, #31
 8006974:	fa02 f606 	lsl.w	r6, r2, r6
 8006978:	421e      	tst	r6, r3
 800697a:	bf18      	it	ne
 800697c:	4617      	movne	r7, r2
 800697e:	f047 0720 	orr.w	r7, r7, #32
 8006982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006984:	601d      	str	r5, [r3, #0]
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	601c      	str	r4, [r3, #0]
 800698a:	e6a3      	b.n	80066d4 <__gethex+0x110>
 800698c:	4299      	cmp	r1, r3
 800698e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006992:	d8d8      	bhi.n	8006946 <__gethex+0x382>
 8006994:	68ab      	ldr	r3, [r5, #8]
 8006996:	4599      	cmp	r9, r3
 8006998:	db12      	blt.n	80069c0 <__gethex+0x3fc>
 800699a:	6869      	ldr	r1, [r5, #4]
 800699c:	9802      	ldr	r0, [sp, #8]
 800699e:	3101      	adds	r1, #1
 80069a0:	f000 f92f 	bl	8006c02 <_Balloc>
 80069a4:	4683      	mov	fp, r0
 80069a6:	692a      	ldr	r2, [r5, #16]
 80069a8:	f105 010c 	add.w	r1, r5, #12
 80069ac:	3202      	adds	r2, #2
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	300c      	adds	r0, #12
 80069b2:	f000 f91b 	bl	8006bec <memcpy>
 80069b6:	4629      	mov	r1, r5
 80069b8:	9802      	ldr	r0, [sp, #8]
 80069ba:	f000 f956 	bl	8006c6a <_Bfree>
 80069be:	465d      	mov	r5, fp
 80069c0:	692b      	ldr	r3, [r5, #16]
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	612a      	str	r2, [r5, #16]
 80069c6:	2201      	movs	r2, #1
 80069c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80069cc:	615a      	str	r2, [r3, #20]
 80069ce:	e7c2      	b.n	8006956 <__gethex+0x392>
 80069d0:	692a      	ldr	r2, [r5, #16]
 80069d2:	454a      	cmp	r2, r9
 80069d4:	dd0b      	ble.n	80069ee <__gethex+0x42a>
 80069d6:	2101      	movs	r1, #1
 80069d8:	4628      	mov	r0, r5
 80069da:	f7ff fda3 	bl	8006524 <rshift>
 80069de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069e2:	3401      	adds	r4, #1
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	f6ff aed8 	blt.w	800679a <__gethex+0x1d6>
 80069ea:	2701      	movs	r7, #1
 80069ec:	e7c7      	b.n	800697e <__gethex+0x3ba>
 80069ee:	f016 061f 	ands.w	r6, r6, #31
 80069f2:	d0fa      	beq.n	80069ea <__gethex+0x426>
 80069f4:	449a      	add	sl, r3
 80069f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80069fa:	f000 f9c6 	bl	8006d8a <__hi0bits>
 80069fe:	f1c6 0620 	rsb	r6, r6, #32
 8006a02:	42b0      	cmp	r0, r6
 8006a04:	dbe7      	blt.n	80069d6 <__gethex+0x412>
 8006a06:	e7f0      	b.n	80069ea <__gethex+0x426>

08006a08 <L_shift>:
 8006a08:	f1c2 0208 	rsb	r2, r2, #8
 8006a0c:	0092      	lsls	r2, r2, #2
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	f1c2 0620 	rsb	r6, r2, #32
 8006a14:	6843      	ldr	r3, [r0, #4]
 8006a16:	6804      	ldr	r4, [r0, #0]
 8006a18:	fa03 f506 	lsl.w	r5, r3, r6
 8006a1c:	432c      	orrs	r4, r5
 8006a1e:	40d3      	lsrs	r3, r2
 8006a20:	6004      	str	r4, [r0, #0]
 8006a22:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a26:	4288      	cmp	r0, r1
 8006a28:	d3f4      	bcc.n	8006a14 <L_shift+0xc>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}

08006a2c <__match>:
 8006a2c:	b530      	push	{r4, r5, lr}
 8006a2e:	6803      	ldr	r3, [r0, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a36:	b914      	cbnz	r4, 8006a3e <__match+0x12>
 8006a38:	6003      	str	r3, [r0, #0]
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	bd30      	pop	{r4, r5, pc}
 8006a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a46:	2d19      	cmp	r5, #25
 8006a48:	bf98      	it	ls
 8006a4a:	3220      	addls	r2, #32
 8006a4c:	42a2      	cmp	r2, r4
 8006a4e:	d0f0      	beq.n	8006a32 <__match+0x6>
 8006a50:	2000      	movs	r0, #0
 8006a52:	e7f3      	b.n	8006a3c <__match+0x10>

08006a54 <__hexnan>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	2500      	movs	r5, #0
 8006a5a:	680b      	ldr	r3, [r1, #0]
 8006a5c:	4682      	mov	sl, r0
 8006a5e:	115f      	asrs	r7, r3, #5
 8006a60:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006a64:	f013 031f 	ands.w	r3, r3, #31
 8006a68:	bf18      	it	ne
 8006a6a:	3704      	addne	r7, #4
 8006a6c:	1f3e      	subs	r6, r7, #4
 8006a6e:	4690      	mov	r8, r2
 8006a70:	46b1      	mov	r9, r6
 8006a72:	4634      	mov	r4, r6
 8006a74:	46ab      	mov	fp, r5
 8006a76:	b087      	sub	sp, #28
 8006a78:	6801      	ldr	r1, [r0, #0]
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	f847 5c04 	str.w	r5, [r7, #-4]
 8006a80:	9502      	str	r5, [sp, #8]
 8006a82:	784a      	ldrb	r2, [r1, #1]
 8006a84:	1c4b      	adds	r3, r1, #1
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	b342      	cbz	r2, 8006adc <__hexnan+0x88>
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	9105      	str	r1, [sp, #20]
 8006a8e:	9204      	str	r2, [sp, #16]
 8006a90:	f7ff fd83 	bl	800659a <__hexdig_fun>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d143      	bne.n	8006b20 <__hexnan+0xcc>
 8006a98:	9a04      	ldr	r2, [sp, #16]
 8006a9a:	9905      	ldr	r1, [sp, #20]
 8006a9c:	2a20      	cmp	r2, #32
 8006a9e:	d818      	bhi.n	8006ad2 <__hexnan+0x7e>
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	459b      	cmp	fp, r3
 8006aa4:	dd13      	ble.n	8006ace <__hexnan+0x7a>
 8006aa6:	454c      	cmp	r4, r9
 8006aa8:	d206      	bcs.n	8006ab8 <__hexnan+0x64>
 8006aaa:	2d07      	cmp	r5, #7
 8006aac:	dc04      	bgt.n	8006ab8 <__hexnan+0x64>
 8006aae:	462a      	mov	r2, r5
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f7ff ffa8 	bl	8006a08 <L_shift>
 8006ab8:	4544      	cmp	r4, r8
 8006aba:	d944      	bls.n	8006b46 <__hexnan+0xf2>
 8006abc:	2300      	movs	r3, #0
 8006abe:	f1a4 0904 	sub.w	r9, r4, #4
 8006ac2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	464c      	mov	r4, r9
 8006aca:	f8cd b008 	str.w	fp, [sp, #8]
 8006ace:	9903      	ldr	r1, [sp, #12]
 8006ad0:	e7d7      	b.n	8006a82 <__hexnan+0x2e>
 8006ad2:	2a29      	cmp	r2, #41	; 0x29
 8006ad4:	d14a      	bne.n	8006b6c <__hexnan+0x118>
 8006ad6:	3102      	adds	r1, #2
 8006ad8:	f8ca 1000 	str.w	r1, [sl]
 8006adc:	f1bb 0f00 	cmp.w	fp, #0
 8006ae0:	d044      	beq.n	8006b6c <__hexnan+0x118>
 8006ae2:	454c      	cmp	r4, r9
 8006ae4:	d206      	bcs.n	8006af4 <__hexnan+0xa0>
 8006ae6:	2d07      	cmp	r5, #7
 8006ae8:	dc04      	bgt.n	8006af4 <__hexnan+0xa0>
 8006aea:	462a      	mov	r2, r5
 8006aec:	4649      	mov	r1, r9
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff ff8a 	bl	8006a08 <L_shift>
 8006af4:	4544      	cmp	r4, r8
 8006af6:	d928      	bls.n	8006b4a <__hexnan+0xf6>
 8006af8:	4643      	mov	r3, r8
 8006afa:	f854 2b04 	ldr.w	r2, [r4], #4
 8006afe:	42a6      	cmp	r6, r4
 8006b00:	f843 2b04 	str.w	r2, [r3], #4
 8006b04:	d2f9      	bcs.n	8006afa <__hexnan+0xa6>
 8006b06:	2200      	movs	r2, #0
 8006b08:	f843 2b04 	str.w	r2, [r3], #4
 8006b0c:	429e      	cmp	r6, r3
 8006b0e:	d2fb      	bcs.n	8006b08 <__hexnan+0xb4>
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	b91b      	cbnz	r3, 8006b1c <__hexnan+0xc8>
 8006b14:	4546      	cmp	r6, r8
 8006b16:	d127      	bne.n	8006b68 <__hexnan+0x114>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	6033      	str	r3, [r6, #0]
 8006b1c:	2005      	movs	r0, #5
 8006b1e:	e026      	b.n	8006b6e <__hexnan+0x11a>
 8006b20:	3501      	adds	r5, #1
 8006b22:	2d08      	cmp	r5, #8
 8006b24:	f10b 0b01 	add.w	fp, fp, #1
 8006b28:	dd06      	ble.n	8006b38 <__hexnan+0xe4>
 8006b2a:	4544      	cmp	r4, r8
 8006b2c:	d9cf      	bls.n	8006ace <__hexnan+0x7a>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2501      	movs	r5, #1
 8006b32:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b36:	3c04      	subs	r4, #4
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	f000 000f 	and.w	r0, r0, #15
 8006b3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006b42:	6020      	str	r0, [r4, #0]
 8006b44:	e7c3      	b.n	8006ace <__hexnan+0x7a>
 8006b46:	2508      	movs	r5, #8
 8006b48:	e7c1      	b.n	8006ace <__hexnan+0x7a>
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0df      	beq.n	8006b10 <__hexnan+0xbc>
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	f1c3 0320 	rsb	r3, r3, #32
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006b60:	401a      	ands	r2, r3
 8006b62:	f847 2c04 	str.w	r2, [r7, #-4]
 8006b66:	e7d3      	b.n	8006b10 <__hexnan+0xbc>
 8006b68:	3e04      	subs	r6, #4
 8006b6a:	e7d1      	b.n	8006b10 <__hexnan+0xbc>
 8006b6c:	2004      	movs	r0, #4
 8006b6e:	b007      	add	sp, #28
 8006b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b74 <__locale_ctype_ptr_l>:
 8006b74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006b78:	4770      	bx	lr

08006b7a <__localeconv_l>:
 8006b7a:	30f0      	adds	r0, #240	; 0xf0
 8006b7c:	4770      	bx	lr
	...

08006b80 <_localeconv_r>:
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <_localeconv_r+0x14>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a18      	ldr	r0, [r3, #32]
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <_localeconv_r+0x18>)
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bf08      	it	eq
 8006b8c:	4618      	moveq	r0, r3
 8006b8e:	30f0      	adds	r0, #240	; 0xf0
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000000c 	.word	0x2000000c
 8006b98:	20000070 	.word	0x20000070

08006b9c <malloc>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <malloc+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f000 bc81 	b.w	80074a8 <_malloc_r>
 8006ba6:	bf00      	nop
 8006ba8:	2000000c 	.word	0x2000000c

08006bac <__ascii_mbtowc>:
 8006bac:	b082      	sub	sp, #8
 8006bae:	b901      	cbnz	r1, 8006bb2 <__ascii_mbtowc+0x6>
 8006bb0:	a901      	add	r1, sp, #4
 8006bb2:	b142      	cbz	r2, 8006bc6 <__ascii_mbtowc+0x1a>
 8006bb4:	b14b      	cbz	r3, 8006bca <__ascii_mbtowc+0x1e>
 8006bb6:	7813      	ldrb	r3, [r2, #0]
 8006bb8:	600b      	str	r3, [r1, #0]
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	1c10      	adds	r0, r2, #0
 8006bbe:	bf18      	it	ne
 8006bc0:	2001      	movne	r0, #1
 8006bc2:	b002      	add	sp, #8
 8006bc4:	4770      	bx	lr
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	e7fb      	b.n	8006bc2 <__ascii_mbtowc+0x16>
 8006bca:	f06f 0001 	mvn.w	r0, #1
 8006bce:	e7f8      	b.n	8006bc2 <__ascii_mbtowc+0x16>

08006bd0 <memchr>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	b2c9      	uxtb	r1, r1
 8006bd4:	4402      	add	r2, r0
 8006bd6:	4290      	cmp	r0, r2
 8006bd8:	4603      	mov	r3, r0
 8006bda:	d101      	bne.n	8006be0 <memchr+0x10>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e003      	b.n	8006be8 <memchr+0x18>
 8006be0:	781c      	ldrb	r4, [r3, #0]
 8006be2:	3001      	adds	r0, #1
 8006be4:	428c      	cmp	r4, r1
 8006be6:	d1f6      	bne.n	8006bd6 <memchr+0x6>
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd10      	pop	{r4, pc}

08006bec <memcpy>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	1e43      	subs	r3, r0, #1
 8006bf0:	440a      	add	r2, r1
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	d100      	bne.n	8006bf8 <memcpy+0xc>
 8006bf6:	bd10      	pop	{r4, pc}
 8006bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c00:	e7f7      	b.n	8006bf2 <memcpy+0x6>

08006c02 <_Balloc>:
 8006c02:	b570      	push	{r4, r5, r6, lr}
 8006c04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c06:	4604      	mov	r4, r0
 8006c08:	460e      	mov	r6, r1
 8006c0a:	b93d      	cbnz	r5, 8006c1c <_Balloc+0x1a>
 8006c0c:	2010      	movs	r0, #16
 8006c0e:	f7ff ffc5 	bl	8006b9c <malloc>
 8006c12:	6260      	str	r0, [r4, #36]	; 0x24
 8006c14:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c18:	6005      	str	r5, [r0, #0]
 8006c1a:	60c5      	str	r5, [r0, #12]
 8006c1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c1e:	68eb      	ldr	r3, [r5, #12]
 8006c20:	b183      	cbz	r3, 8006c44 <_Balloc+0x42>
 8006c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c2a:	b9b8      	cbnz	r0, 8006c5c <_Balloc+0x5a>
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	fa01 f506 	lsl.w	r5, r1, r6
 8006c32:	1d6a      	adds	r2, r5, #5
 8006c34:	0092      	lsls	r2, r2, #2
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 fbdc 	bl	80073f4 <_calloc_r>
 8006c3c:	b160      	cbz	r0, 8006c58 <_Balloc+0x56>
 8006c3e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006c42:	e00e      	b.n	8006c62 <_Balloc+0x60>
 8006c44:	2221      	movs	r2, #33	; 0x21
 8006c46:	2104      	movs	r1, #4
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 fbd3 	bl	80073f4 <_calloc_r>
 8006c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c50:	60e8      	str	r0, [r5, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e4      	bne.n	8006c22 <_Balloc+0x20>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	6802      	ldr	r2, [r0, #0]
 8006c5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006c62:	2300      	movs	r3, #0
 8006c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c68:	e7f7      	b.n	8006c5a <_Balloc+0x58>

08006c6a <_Bfree>:
 8006c6a:	b570      	push	{r4, r5, r6, lr}
 8006c6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460d      	mov	r5, r1
 8006c72:	b93c      	cbnz	r4, 8006c84 <_Bfree+0x1a>
 8006c74:	2010      	movs	r0, #16
 8006c76:	f7ff ff91 	bl	8006b9c <malloc>
 8006c7a:	6270      	str	r0, [r6, #36]	; 0x24
 8006c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c80:	6004      	str	r4, [r0, #0]
 8006c82:	60c4      	str	r4, [r0, #12]
 8006c84:	b13d      	cbz	r5, 8006c96 <_Bfree+0x2c>
 8006c86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006c88:	686a      	ldr	r2, [r5, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c90:	6029      	str	r1, [r5, #0]
 8006c92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006c96:	bd70      	pop	{r4, r5, r6, pc}

08006c98 <__multadd>:
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9c:	461f      	mov	r7, r3
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	690d      	ldr	r5, [r1, #16]
 8006ca6:	f101 0c14 	add.w	ip, r1, #20
 8006caa:	f8dc 0000 	ldr.w	r0, [ip]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b281      	uxth	r1, r0
 8006cb2:	fb02 7101 	mla	r1, r2, r1, r7
 8006cb6:	0c00      	lsrs	r0, r0, #16
 8006cb8:	0c0f      	lsrs	r7, r1, #16
 8006cba:	fb02 7000 	mla	r0, r2, r0, r7
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006cc4:	429d      	cmp	r5, r3
 8006cc6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006cca:	f84c 1b04 	str.w	r1, [ip], #4
 8006cce:	dcec      	bgt.n	8006caa <__multadd+0x12>
 8006cd0:	b1d7      	cbz	r7, 8006d08 <__multadd+0x70>
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dc12      	bgt.n	8006cfe <__multadd+0x66>
 8006cd8:	6861      	ldr	r1, [r4, #4]
 8006cda:	4630      	mov	r0, r6
 8006cdc:	3101      	adds	r1, #1
 8006cde:	f7ff ff90 	bl	8006c02 <_Balloc>
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	6922      	ldr	r2, [r4, #16]
 8006ce6:	f104 010c 	add.w	r1, r4, #12
 8006cea:	3202      	adds	r2, #2
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	300c      	adds	r0, #12
 8006cf0:	f7ff ff7c 	bl	8006bec <memcpy>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ffb7 	bl	8006c6a <_Bfree>
 8006cfc:	4644      	mov	r4, r8
 8006cfe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d02:	3501      	adds	r5, #1
 8006d04:	615f      	str	r7, [r3, #20]
 8006d06:	6125      	str	r5, [r4, #16]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d0e <__s2b>:
 8006d0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d12:	4615      	mov	r5, r2
 8006d14:	2209      	movs	r2, #9
 8006d16:	461f      	mov	r7, r3
 8006d18:	3308      	adds	r3, #8
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d20:	4606      	mov	r6, r0
 8006d22:	2201      	movs	r2, #1
 8006d24:	2100      	movs	r1, #0
 8006d26:	429a      	cmp	r2, r3
 8006d28:	db20      	blt.n	8006d6c <__s2b+0x5e>
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ff69 	bl	8006c02 <_Balloc>
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	2d09      	cmp	r5, #9
 8006d34:	6143      	str	r3, [r0, #20]
 8006d36:	f04f 0301 	mov.w	r3, #1
 8006d3a:	6103      	str	r3, [r0, #16]
 8006d3c:	dd19      	ble.n	8006d72 <__s2b+0x64>
 8006d3e:	f104 0809 	add.w	r8, r4, #9
 8006d42:	46c1      	mov	r9, r8
 8006d44:	442c      	add	r4, r5
 8006d46:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	3b30      	subs	r3, #48	; 0x30
 8006d4e:	220a      	movs	r2, #10
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff ffa1 	bl	8006c98 <__multadd>
 8006d56:	45a1      	cmp	r9, r4
 8006d58:	d1f5      	bne.n	8006d46 <__s2b+0x38>
 8006d5a:	eb08 0405 	add.w	r4, r8, r5
 8006d5e:	3c08      	subs	r4, #8
 8006d60:	1b2d      	subs	r5, r5, r4
 8006d62:	1963      	adds	r3, r4, r5
 8006d64:	42bb      	cmp	r3, r7
 8006d66:	db07      	blt.n	8006d78 <__s2b+0x6a>
 8006d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6c:	0052      	lsls	r2, r2, #1
 8006d6e:	3101      	adds	r1, #1
 8006d70:	e7d9      	b.n	8006d26 <__s2b+0x18>
 8006d72:	340a      	adds	r4, #10
 8006d74:	2509      	movs	r5, #9
 8006d76:	e7f3      	b.n	8006d60 <__s2b+0x52>
 8006d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	3b30      	subs	r3, #48	; 0x30
 8006d80:	220a      	movs	r2, #10
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ff88 	bl	8006c98 <__multadd>
 8006d88:	e7eb      	b.n	8006d62 <__s2b+0x54>

08006d8a <__hi0bits>:
 8006d8a:	0c02      	lsrs	r2, r0, #16
 8006d8c:	0412      	lsls	r2, r2, #16
 8006d8e:	4603      	mov	r3, r0
 8006d90:	b9b2      	cbnz	r2, 8006dc0 <__hi0bits+0x36>
 8006d92:	0403      	lsls	r3, r0, #16
 8006d94:	2010      	movs	r0, #16
 8006d96:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d9a:	bf04      	itt	eq
 8006d9c:	021b      	lsleq	r3, r3, #8
 8006d9e:	3008      	addeq	r0, #8
 8006da0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006da4:	bf04      	itt	eq
 8006da6:	011b      	lsleq	r3, r3, #4
 8006da8:	3004      	addeq	r0, #4
 8006daa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006dae:	bf04      	itt	eq
 8006db0:	009b      	lsleq	r3, r3, #2
 8006db2:	3002      	addeq	r0, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	db06      	blt.n	8006dc6 <__hi0bits+0x3c>
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	d503      	bpl.n	8006dc4 <__hi0bits+0x3a>
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	4770      	bx	lr
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7e8      	b.n	8006d96 <__hi0bits+0xc>
 8006dc4:	2020      	movs	r0, #32
 8006dc6:	4770      	bx	lr

08006dc8 <__lo0bits>:
 8006dc8:	6803      	ldr	r3, [r0, #0]
 8006dca:	4601      	mov	r1, r0
 8006dcc:	f013 0207 	ands.w	r2, r3, #7
 8006dd0:	d00b      	beq.n	8006dea <__lo0bits+0x22>
 8006dd2:	07da      	lsls	r2, r3, #31
 8006dd4:	d423      	bmi.n	8006e1e <__lo0bits+0x56>
 8006dd6:	0798      	lsls	r0, r3, #30
 8006dd8:	bf49      	itett	mi
 8006dda:	085b      	lsrmi	r3, r3, #1
 8006ddc:	089b      	lsrpl	r3, r3, #2
 8006dde:	2001      	movmi	r0, #1
 8006de0:	600b      	strmi	r3, [r1, #0]
 8006de2:	bf5c      	itt	pl
 8006de4:	600b      	strpl	r3, [r1, #0]
 8006de6:	2002      	movpl	r0, #2
 8006de8:	4770      	bx	lr
 8006dea:	b298      	uxth	r0, r3
 8006dec:	b9a8      	cbnz	r0, 8006e1a <__lo0bits+0x52>
 8006dee:	2010      	movs	r0, #16
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006df6:	bf04      	itt	eq
 8006df8:	0a1b      	lsreq	r3, r3, #8
 8006dfa:	3008      	addeq	r0, #8
 8006dfc:	071a      	lsls	r2, r3, #28
 8006dfe:	bf04      	itt	eq
 8006e00:	091b      	lsreq	r3, r3, #4
 8006e02:	3004      	addeq	r0, #4
 8006e04:	079a      	lsls	r2, r3, #30
 8006e06:	bf04      	itt	eq
 8006e08:	089b      	lsreq	r3, r3, #2
 8006e0a:	3002      	addeq	r0, #2
 8006e0c:	07da      	lsls	r2, r3, #31
 8006e0e:	d402      	bmi.n	8006e16 <__lo0bits+0x4e>
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	d006      	beq.n	8006e22 <__lo0bits+0x5a>
 8006e14:	3001      	adds	r0, #1
 8006e16:	600b      	str	r3, [r1, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7e9      	b.n	8006df2 <__lo0bits+0x2a>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4770      	bx	lr
 8006e22:	2020      	movs	r0, #32
 8006e24:	4770      	bx	lr

08006e26 <__i2b>:
 8006e26:	b510      	push	{r4, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	f7ff fee9 	bl	8006c02 <_Balloc>
 8006e30:	2201      	movs	r2, #1
 8006e32:	6144      	str	r4, [r0, #20]
 8006e34:	6102      	str	r2, [r0, #16]
 8006e36:	bd10      	pop	{r4, pc}

08006e38 <__multiply>:
 8006e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	690a      	ldr	r2, [r1, #16]
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	4688      	mov	r8, r1
 8006e44:	429a      	cmp	r2, r3
 8006e46:	bfbe      	ittt	lt
 8006e48:	460b      	movlt	r3, r1
 8006e4a:	46a0      	movlt	r8, r4
 8006e4c:	461c      	movlt	r4, r3
 8006e4e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e5e:	eb07 0609 	add.w	r6, r7, r9
 8006e62:	42b3      	cmp	r3, r6
 8006e64:	bfb8      	it	lt
 8006e66:	3101      	addlt	r1, #1
 8006e68:	f7ff fecb 	bl	8006c02 <_Balloc>
 8006e6c:	f100 0514 	add.w	r5, r0, #20
 8006e70:	462b      	mov	r3, r5
 8006e72:	2200      	movs	r2, #0
 8006e74:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006e78:	4573      	cmp	r3, lr
 8006e7a:	d316      	bcc.n	8006eaa <__multiply+0x72>
 8006e7c:	f104 0214 	add.w	r2, r4, #20
 8006e80:	f108 0114 	add.w	r1, r8, #20
 8006e84:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e88:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	9b00      	ldr	r3, [sp, #0]
 8006e90:	9201      	str	r2, [sp, #4]
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d80c      	bhi.n	8006eb0 <__multiply+0x78>
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	dd03      	ble.n	8006ea2 <__multiply+0x6a>
 8006e9a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d05d      	beq.n	8006f5e <__multiply+0x126>
 8006ea2:	6106      	str	r6, [r0, #16]
 8006ea4:	b003      	add	sp, #12
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eaa:	f843 2b04 	str.w	r2, [r3], #4
 8006eae:	e7e3      	b.n	8006e78 <__multiply+0x40>
 8006eb0:	f8b2 b000 	ldrh.w	fp, [r2]
 8006eb4:	f1bb 0f00 	cmp.w	fp, #0
 8006eb8:	d023      	beq.n	8006f02 <__multiply+0xca>
 8006eba:	4689      	mov	r9, r1
 8006ebc:	46ac      	mov	ip, r5
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ec6:	f8dc a000 	ldr.w	sl, [ip]
 8006eca:	b2a3      	uxth	r3, r4
 8006ecc:	fa1f fa8a 	uxth.w	sl, sl
 8006ed0:	fb0b a303 	mla	r3, fp, r3, sl
 8006ed4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ed8:	f8dc 4000 	ldr.w	r4, [ip]
 8006edc:	4443      	add	r3, r8
 8006ede:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ee2:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ee6:	46e2      	mov	sl, ip
 8006ee8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ef2:	454f      	cmp	r7, r9
 8006ef4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ef8:	f84a 3b04 	str.w	r3, [sl], #4
 8006efc:	d82b      	bhi.n	8006f56 <__multiply+0x11e>
 8006efe:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	3204      	adds	r2, #4
 8006f06:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f0a:	f1ba 0f00 	cmp.w	sl, #0
 8006f0e:	d020      	beq.n	8006f52 <__multiply+0x11a>
 8006f10:	4689      	mov	r9, r1
 8006f12:	46a8      	mov	r8, r5
 8006f14:	f04f 0b00 	mov.w	fp, #0
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f1e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f28:	46c4      	mov	ip, r8
 8006f2a:	445c      	add	r4, fp
 8006f2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f30:	f84c 3b04 	str.w	r3, [ip], #4
 8006f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f38:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	fb0a b303 	mla	r3, sl, r3, fp
 8006f42:	454f      	cmp	r7, r9
 8006f44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f48:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f4c:	d805      	bhi.n	8006f5a <__multiply+0x122>
 8006f4e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f52:	3504      	adds	r5, #4
 8006f54:	e79b      	b.n	8006e8e <__multiply+0x56>
 8006f56:	46d4      	mov	ip, sl
 8006f58:	e7b3      	b.n	8006ec2 <__multiply+0x8a>
 8006f5a:	46e0      	mov	r8, ip
 8006f5c:	e7dd      	b.n	8006f1a <__multiply+0xe2>
 8006f5e:	3e01      	subs	r6, #1
 8006f60:	e799      	b.n	8006e96 <__multiply+0x5e>
	...

08006f64 <__pow5mult>:
 8006f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f68:	4615      	mov	r5, r2
 8006f6a:	f012 0203 	ands.w	r2, r2, #3
 8006f6e:	4606      	mov	r6, r0
 8006f70:	460f      	mov	r7, r1
 8006f72:	d007      	beq.n	8006f84 <__pow5mult+0x20>
 8006f74:	4c21      	ldr	r4, [pc, #132]	; (8006ffc <__pow5mult+0x98>)
 8006f76:	3a01      	subs	r2, #1
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f7e:	f7ff fe8b 	bl	8006c98 <__multadd>
 8006f82:	4607      	mov	r7, r0
 8006f84:	10ad      	asrs	r5, r5, #2
 8006f86:	d035      	beq.n	8006ff4 <__pow5mult+0x90>
 8006f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f8a:	b93c      	cbnz	r4, 8006f9c <__pow5mult+0x38>
 8006f8c:	2010      	movs	r0, #16
 8006f8e:	f7ff fe05 	bl	8006b9c <malloc>
 8006f92:	6270      	str	r0, [r6, #36]	; 0x24
 8006f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f98:	6004      	str	r4, [r0, #0]
 8006f9a:	60c4      	str	r4, [r0, #12]
 8006f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fa4:	b94c      	cbnz	r4, 8006fba <__pow5mult+0x56>
 8006fa6:	f240 2171 	movw	r1, #625	; 0x271
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ff3b 	bl	8006e26 <__i2b>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	f04f 0800 	mov.w	r8, #0
 8006fbe:	07eb      	lsls	r3, r5, #31
 8006fc0:	d50a      	bpl.n	8006fd8 <__pow5mult+0x74>
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7ff ff36 	bl	8006e38 <__multiply>
 8006fcc:	4681      	mov	r9, r0
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff fe4a 	bl	8006c6a <_Bfree>
 8006fd6:	464f      	mov	r7, r9
 8006fd8:	106d      	asrs	r5, r5, #1
 8006fda:	d00b      	beq.n	8006ff4 <__pow5mult+0x90>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	b938      	cbnz	r0, 8006ff0 <__pow5mult+0x8c>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff ff27 	bl	8006e38 <__multiply>
 8006fea:	6020      	str	r0, [r4, #0]
 8006fec:	f8c0 8000 	str.w	r8, [r0]
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	e7e4      	b.n	8006fbe <__pow5mult+0x5a>
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080082f0 	.word	0x080082f0

08007000 <__lshift>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	460c      	mov	r4, r1
 8007006:	4607      	mov	r7, r0
 8007008:	4616      	mov	r6, r2
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007010:	eb0a 0903 	add.w	r9, sl, r3
 8007014:	6849      	ldr	r1, [r1, #4]
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	f109 0501 	add.w	r5, r9, #1
 800701c:	42ab      	cmp	r3, r5
 800701e:	db32      	blt.n	8007086 <__lshift+0x86>
 8007020:	4638      	mov	r0, r7
 8007022:	f7ff fdee 	bl	8006c02 <_Balloc>
 8007026:	2300      	movs	r3, #0
 8007028:	4680      	mov	r8, r0
 800702a:	461a      	mov	r2, r3
 800702c:	f100 0114 	add.w	r1, r0, #20
 8007030:	4553      	cmp	r3, sl
 8007032:	db2b      	blt.n	800708c <__lshift+0x8c>
 8007034:	6920      	ldr	r0, [r4, #16]
 8007036:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800703a:	f104 0314 	add.w	r3, r4, #20
 800703e:	f016 021f 	ands.w	r2, r6, #31
 8007042:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007046:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800704a:	d025      	beq.n	8007098 <__lshift+0x98>
 800704c:	2000      	movs	r0, #0
 800704e:	f1c2 0e20 	rsb	lr, r2, #32
 8007052:	468a      	mov	sl, r1
 8007054:	681e      	ldr	r6, [r3, #0]
 8007056:	4096      	lsls	r6, r2
 8007058:	4330      	orrs	r0, r6
 800705a:	f84a 0b04 	str.w	r0, [sl], #4
 800705e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007062:	459c      	cmp	ip, r3
 8007064:	fa20 f00e 	lsr.w	r0, r0, lr
 8007068:	d814      	bhi.n	8007094 <__lshift+0x94>
 800706a:	6048      	str	r0, [r1, #4]
 800706c:	b108      	cbz	r0, 8007072 <__lshift+0x72>
 800706e:	f109 0502 	add.w	r5, r9, #2
 8007072:	3d01      	subs	r5, #1
 8007074:	4638      	mov	r0, r7
 8007076:	f8c8 5010 	str.w	r5, [r8, #16]
 800707a:	4621      	mov	r1, r4
 800707c:	f7ff fdf5 	bl	8006c6a <_Bfree>
 8007080:	4640      	mov	r0, r8
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	3101      	adds	r1, #1
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	e7c7      	b.n	800701c <__lshift+0x1c>
 800708c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007090:	3301      	adds	r3, #1
 8007092:	e7cd      	b.n	8007030 <__lshift+0x30>
 8007094:	4651      	mov	r1, sl
 8007096:	e7dc      	b.n	8007052 <__lshift+0x52>
 8007098:	3904      	subs	r1, #4
 800709a:	f853 2b04 	ldr.w	r2, [r3], #4
 800709e:	459c      	cmp	ip, r3
 80070a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80070a4:	d8f9      	bhi.n	800709a <__lshift+0x9a>
 80070a6:	e7e4      	b.n	8007072 <__lshift+0x72>

080070a8 <__mcmp>:
 80070a8:	6903      	ldr	r3, [r0, #16]
 80070aa:	690a      	ldr	r2, [r1, #16]
 80070ac:	b530      	push	{r4, r5, lr}
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	d10c      	bne.n	80070cc <__mcmp+0x24>
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	3014      	adds	r0, #20
 80070b6:	3114      	adds	r1, #20
 80070b8:	1884      	adds	r4, r0, r2
 80070ba:	4411      	add	r1, r2
 80070bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070c4:	4295      	cmp	r5, r2
 80070c6:	d003      	beq.n	80070d0 <__mcmp+0x28>
 80070c8:	d305      	bcc.n	80070d6 <__mcmp+0x2e>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd30      	pop	{r4, r5, pc}
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d3f3      	bcc.n	80070bc <__mcmp+0x14>
 80070d4:	e7fa      	b.n	80070cc <__mcmp+0x24>
 80070d6:	f04f 33ff 	mov.w	r3, #4294967295
 80070da:	e7f7      	b.n	80070cc <__mcmp+0x24>

080070dc <__mdiff>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	460d      	mov	r5, r1
 80070e2:	4607      	mov	r7, r0
 80070e4:	4611      	mov	r1, r2
 80070e6:	4628      	mov	r0, r5
 80070e8:	4614      	mov	r4, r2
 80070ea:	f7ff ffdd 	bl	80070a8 <__mcmp>
 80070ee:	1e06      	subs	r6, r0, #0
 80070f0:	d108      	bne.n	8007104 <__mdiff+0x28>
 80070f2:	4631      	mov	r1, r6
 80070f4:	4638      	mov	r0, r7
 80070f6:	f7ff fd84 	bl	8006c02 <_Balloc>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007104:	bfa4      	itt	ge
 8007106:	4623      	movge	r3, r4
 8007108:	462c      	movge	r4, r5
 800710a:	4638      	mov	r0, r7
 800710c:	6861      	ldr	r1, [r4, #4]
 800710e:	bfa6      	itte	ge
 8007110:	461d      	movge	r5, r3
 8007112:	2600      	movge	r6, #0
 8007114:	2601      	movlt	r6, #1
 8007116:	f7ff fd74 	bl	8006c02 <_Balloc>
 800711a:	f04f 0e00 	mov.w	lr, #0
 800711e:	60c6      	str	r6, [r0, #12]
 8007120:	692b      	ldr	r3, [r5, #16]
 8007122:	6926      	ldr	r6, [r4, #16]
 8007124:	f104 0214 	add.w	r2, r4, #20
 8007128:	f105 0914 	add.w	r9, r5, #20
 800712c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007130:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007134:	f100 0114 	add.w	r1, r0, #20
 8007138:	f852 ab04 	ldr.w	sl, [r2], #4
 800713c:	f859 5b04 	ldr.w	r5, [r9], #4
 8007140:	fa1f f38a 	uxth.w	r3, sl
 8007144:	4473      	add	r3, lr
 8007146:	b2ac      	uxth	r4, r5
 8007148:	1b1b      	subs	r3, r3, r4
 800714a:	0c2c      	lsrs	r4, r5, #16
 800714c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007150:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800715a:	45c8      	cmp	r8, r9
 800715c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007160:	4694      	mov	ip, r2
 8007162:	f841 4b04 	str.w	r4, [r1], #4
 8007166:	d8e7      	bhi.n	8007138 <__mdiff+0x5c>
 8007168:	45bc      	cmp	ip, r7
 800716a:	d304      	bcc.n	8007176 <__mdiff+0x9a>
 800716c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007170:	b183      	cbz	r3, 8007194 <__mdiff+0xb8>
 8007172:	6106      	str	r6, [r0, #16]
 8007174:	e7c4      	b.n	8007100 <__mdiff+0x24>
 8007176:	f85c 4b04 	ldr.w	r4, [ip], #4
 800717a:	b2a2      	uxth	r2, r4
 800717c:	4472      	add	r2, lr
 800717e:	1413      	asrs	r3, r2, #16
 8007180:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007184:	b292      	uxth	r2, r2
 8007186:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800718a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800718e:	f841 2b04 	str.w	r2, [r1], #4
 8007192:	e7e9      	b.n	8007168 <__mdiff+0x8c>
 8007194:	3e01      	subs	r6, #1
 8007196:	e7e9      	b.n	800716c <__mdiff+0x90>

08007198 <__ulp>:
 8007198:	4b10      	ldr	r3, [pc, #64]	; (80071dc <__ulp+0x44>)
 800719a:	400b      	ands	r3, r1
 800719c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dd02      	ble.n	80071aa <__ulp+0x12>
 80071a4:	2000      	movs	r0, #0
 80071a6:	4619      	mov	r1, r3
 80071a8:	4770      	bx	lr
 80071aa:	425b      	negs	r3, r3
 80071ac:	151b      	asrs	r3, r3, #20
 80071ae:	2b13      	cmp	r3, #19
 80071b0:	f04f 0000 	mov.w	r0, #0
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	dc04      	bgt.n	80071c4 <__ulp+0x2c>
 80071ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80071be:	fa42 f103 	asr.w	r1, r2, r3
 80071c2:	4770      	bx	lr
 80071c4:	2201      	movs	r2, #1
 80071c6:	3b14      	subs	r3, #20
 80071c8:	2b1e      	cmp	r3, #30
 80071ca:	bfce      	itee	gt
 80071cc:	4613      	movgt	r3, r2
 80071ce:	f1c3 031f 	rsble	r3, r3, #31
 80071d2:	fa02 f303 	lslle.w	r3, r2, r3
 80071d6:	4618      	mov	r0, r3
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	7ff00000 	.word	0x7ff00000

080071e0 <__b2d>:
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	6907      	ldr	r7, [r0, #16]
 80071e6:	f100 0914 	add.w	r9, r0, #20
 80071ea:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80071ee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80071f2:	f1a7 0804 	sub.w	r8, r7, #4
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7ff fdc7 	bl	8006d8a <__hi0bits>
 80071fc:	f1c0 0320 	rsb	r3, r0, #32
 8007200:	280a      	cmp	r0, #10
 8007202:	600b      	str	r3, [r1, #0]
 8007204:	491e      	ldr	r1, [pc, #120]	; (8007280 <__b2d+0xa0>)
 8007206:	dc17      	bgt.n	8007238 <__b2d+0x58>
 8007208:	45c1      	cmp	r9, r8
 800720a:	bf28      	it	cs
 800720c:	2200      	movcs	r2, #0
 800720e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007212:	fa26 f30c 	lsr.w	r3, r6, ip
 8007216:	bf38      	it	cc
 8007218:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800721c:	ea43 0501 	orr.w	r5, r3, r1
 8007220:	f100 0315 	add.w	r3, r0, #21
 8007224:	fa06 f303 	lsl.w	r3, r6, r3
 8007228:	fa22 f20c 	lsr.w	r2, r2, ip
 800722c:	ea43 0402 	orr.w	r4, r3, r2
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007238:	45c1      	cmp	r9, r8
 800723a:	bf3a      	itte	cc
 800723c:	f1a7 0808 	subcc.w	r8, r7, #8
 8007240:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007244:	2200      	movcs	r2, #0
 8007246:	f1b0 030b 	subs.w	r3, r0, #11
 800724a:	d015      	beq.n	8007278 <__b2d+0x98>
 800724c:	409e      	lsls	r6, r3
 800724e:	f1c3 0720 	rsb	r7, r3, #32
 8007252:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007256:	fa22 f107 	lsr.w	r1, r2, r7
 800725a:	45c8      	cmp	r8, r9
 800725c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007260:	ea46 0501 	orr.w	r5, r6, r1
 8007264:	bf94      	ite	ls
 8007266:	2100      	movls	r1, #0
 8007268:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800726c:	fa02 f003 	lsl.w	r0, r2, r3
 8007270:	40f9      	lsrs	r1, r7
 8007272:	ea40 0401 	orr.w	r4, r0, r1
 8007276:	e7db      	b.n	8007230 <__b2d+0x50>
 8007278:	ea46 0501 	orr.w	r5, r6, r1
 800727c:	4614      	mov	r4, r2
 800727e:	e7d7      	b.n	8007230 <__b2d+0x50>
 8007280:	3ff00000 	.word	0x3ff00000

08007284 <__d2b>:
 8007284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007288:	461c      	mov	r4, r3
 800728a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800728e:	2101      	movs	r1, #1
 8007290:	4690      	mov	r8, r2
 8007292:	f7ff fcb6 	bl	8006c02 <_Balloc>
 8007296:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800729a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800729e:	4607      	mov	r7, r0
 80072a0:	bb34      	cbnz	r4, 80072f0 <__d2b+0x6c>
 80072a2:	9201      	str	r2, [sp, #4]
 80072a4:	f1b8 0200 	subs.w	r2, r8, #0
 80072a8:	d027      	beq.n	80072fa <__d2b+0x76>
 80072aa:	a802      	add	r0, sp, #8
 80072ac:	f840 2d08 	str.w	r2, [r0, #-8]!
 80072b0:	f7ff fd8a 	bl	8006dc8 <__lo0bits>
 80072b4:	9900      	ldr	r1, [sp, #0]
 80072b6:	b1f0      	cbz	r0, 80072f6 <__d2b+0x72>
 80072b8:	9a01      	ldr	r2, [sp, #4]
 80072ba:	f1c0 0320 	rsb	r3, r0, #32
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	430b      	orrs	r3, r1
 80072c4:	40c2      	lsrs	r2, r0
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bf14      	ite	ne
 80072d0:	2102      	movne	r1, #2
 80072d2:	2101      	moveq	r1, #1
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	6139      	str	r1, [r7, #16]
 80072d8:	b1c4      	cbz	r4, 800730c <__d2b+0x88>
 80072da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072de:	4404      	add	r4, r0
 80072e0:	6034      	str	r4, [r6, #0]
 80072e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072e6:	6028      	str	r0, [r5, #0]
 80072e8:	4638      	mov	r0, r7
 80072ea:	b002      	add	sp, #8
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072f4:	e7d5      	b.n	80072a2 <__d2b+0x1e>
 80072f6:	6179      	str	r1, [r7, #20]
 80072f8:	e7e7      	b.n	80072ca <__d2b+0x46>
 80072fa:	a801      	add	r0, sp, #4
 80072fc:	f7ff fd64 	bl	8006dc8 <__lo0bits>
 8007300:	2101      	movs	r1, #1
 8007302:	9b01      	ldr	r3, [sp, #4]
 8007304:	6139      	str	r1, [r7, #16]
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	3020      	adds	r0, #32
 800730a:	e7e5      	b.n	80072d8 <__d2b+0x54>
 800730c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007310:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007314:	6030      	str	r0, [r6, #0]
 8007316:	6918      	ldr	r0, [r3, #16]
 8007318:	f7ff fd37 	bl	8006d8a <__hi0bits>
 800731c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007320:	e7e1      	b.n	80072e6 <__d2b+0x62>

08007322 <__ratio>:
 8007322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007326:	4688      	mov	r8, r1
 8007328:	4669      	mov	r1, sp
 800732a:	4681      	mov	r9, r0
 800732c:	f7ff ff58 	bl	80071e0 <__b2d>
 8007330:	468b      	mov	fp, r1
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	4640      	mov	r0, r8
 8007338:	a901      	add	r1, sp, #4
 800733a:	f7ff ff51 	bl	80071e0 <__b2d>
 800733e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007342:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007346:	460d      	mov	r5, r1
 8007348:	eba3 0c02 	sub.w	ip, r3, r2
 800734c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfd5      	itete	le
 800735a:	460a      	movle	r2, r1
 800735c:	463a      	movgt	r2, r7
 800735e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007362:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007366:	bfd8      	it	le
 8007368:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800736c:	462b      	mov	r3, r5
 800736e:	4602      	mov	r2, r0
 8007370:	4659      	mov	r1, fp
 8007372:	4630      	mov	r0, r6
 8007374:	f7f9 f9da 	bl	800072c <__aeabi_ddiv>
 8007378:	b003      	add	sp, #12
 800737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800737e <__copybits>:
 800737e:	3901      	subs	r1, #1
 8007380:	b510      	push	{r4, lr}
 8007382:	1149      	asrs	r1, r1, #5
 8007384:	6914      	ldr	r4, [r2, #16]
 8007386:	3101      	adds	r1, #1
 8007388:	f102 0314 	add.w	r3, r2, #20
 800738c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007390:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007394:	42a3      	cmp	r3, r4
 8007396:	4602      	mov	r2, r0
 8007398:	d303      	bcc.n	80073a2 <__copybits+0x24>
 800739a:	2300      	movs	r3, #0
 800739c:	428a      	cmp	r2, r1
 800739e:	d305      	bcc.n	80073ac <__copybits+0x2e>
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a6:	f840 2b04 	str.w	r2, [r0], #4
 80073aa:	e7f3      	b.n	8007394 <__copybits+0x16>
 80073ac:	f842 3b04 	str.w	r3, [r2], #4
 80073b0:	e7f4      	b.n	800739c <__copybits+0x1e>

080073b2 <__any_on>:
 80073b2:	f100 0214 	add.w	r2, r0, #20
 80073b6:	6900      	ldr	r0, [r0, #16]
 80073b8:	114b      	asrs	r3, r1, #5
 80073ba:	4298      	cmp	r0, r3
 80073bc:	b510      	push	{r4, lr}
 80073be:	db11      	blt.n	80073e4 <__any_on+0x32>
 80073c0:	dd0a      	ble.n	80073d8 <__any_on+0x26>
 80073c2:	f011 011f 	ands.w	r1, r1, #31
 80073c6:	d007      	beq.n	80073d8 <__any_on+0x26>
 80073c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073cc:	fa24 f001 	lsr.w	r0, r4, r1
 80073d0:	fa00 f101 	lsl.w	r1, r0, r1
 80073d4:	428c      	cmp	r4, r1
 80073d6:	d10b      	bne.n	80073f0 <__any_on+0x3e>
 80073d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073dc:	4293      	cmp	r3, r2
 80073de:	d803      	bhi.n	80073e8 <__any_on+0x36>
 80073e0:	2000      	movs	r0, #0
 80073e2:	bd10      	pop	{r4, pc}
 80073e4:	4603      	mov	r3, r0
 80073e6:	e7f7      	b.n	80073d8 <__any_on+0x26>
 80073e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d0f5      	beq.n	80073dc <__any_on+0x2a>
 80073f0:	2001      	movs	r0, #1
 80073f2:	e7f6      	b.n	80073e2 <__any_on+0x30>

080073f4 <_calloc_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	fb02 f401 	mul.w	r4, r2, r1
 80073fa:	4621      	mov	r1, r4
 80073fc:	f000 f854 	bl	80074a8 <_malloc_r>
 8007400:	4605      	mov	r5, r0
 8007402:	b118      	cbz	r0, 800740c <_calloc_r+0x18>
 8007404:	4622      	mov	r2, r4
 8007406:	2100      	movs	r1, #0
 8007408:	f7fc fc4c 	bl	8003ca4 <memset>
 800740c:	4628      	mov	r0, r5
 800740e:	bd38      	pop	{r3, r4, r5, pc}

08007410 <_free_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4605      	mov	r5, r0
 8007414:	2900      	cmp	r1, #0
 8007416:	d043      	beq.n	80074a0 <_free_r+0x90>
 8007418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800741c:	1f0c      	subs	r4, r1, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	bfb8      	it	lt
 8007422:	18e4      	addlt	r4, r4, r3
 8007424:	f000 fdbf 	bl	8007fa6 <__malloc_lock>
 8007428:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <_free_r+0x94>)
 800742a:	6813      	ldr	r3, [r2, #0]
 800742c:	4610      	mov	r0, r2
 800742e:	b933      	cbnz	r3, 800743e <_free_r+0x2e>
 8007430:	6063      	str	r3, [r4, #4]
 8007432:	6014      	str	r4, [r2, #0]
 8007434:	4628      	mov	r0, r5
 8007436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800743a:	f000 bdb5 	b.w	8007fa8 <__malloc_unlock>
 800743e:	42a3      	cmp	r3, r4
 8007440:	d90b      	bls.n	800745a <_free_r+0x4a>
 8007442:	6821      	ldr	r1, [r4, #0]
 8007444:	1862      	adds	r2, r4, r1
 8007446:	4293      	cmp	r3, r2
 8007448:	bf01      	itttt	eq
 800744a:	681a      	ldreq	r2, [r3, #0]
 800744c:	685b      	ldreq	r3, [r3, #4]
 800744e:	1852      	addeq	r2, r2, r1
 8007450:	6022      	streq	r2, [r4, #0]
 8007452:	6063      	str	r3, [r4, #4]
 8007454:	6004      	str	r4, [r0, #0]
 8007456:	e7ed      	b.n	8007434 <_free_r+0x24>
 8007458:	4613      	mov	r3, r2
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	b10a      	cbz	r2, 8007462 <_free_r+0x52>
 800745e:	42a2      	cmp	r2, r4
 8007460:	d9fa      	bls.n	8007458 <_free_r+0x48>
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	1858      	adds	r0, r3, r1
 8007466:	42a0      	cmp	r0, r4
 8007468:	d10b      	bne.n	8007482 <_free_r+0x72>
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	4401      	add	r1, r0
 800746e:	1858      	adds	r0, r3, r1
 8007470:	4282      	cmp	r2, r0
 8007472:	6019      	str	r1, [r3, #0]
 8007474:	d1de      	bne.n	8007434 <_free_r+0x24>
 8007476:	6810      	ldr	r0, [r2, #0]
 8007478:	6852      	ldr	r2, [r2, #4]
 800747a:	4401      	add	r1, r0
 800747c:	6019      	str	r1, [r3, #0]
 800747e:	605a      	str	r2, [r3, #4]
 8007480:	e7d8      	b.n	8007434 <_free_r+0x24>
 8007482:	d902      	bls.n	800748a <_free_r+0x7a>
 8007484:	230c      	movs	r3, #12
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	e7d4      	b.n	8007434 <_free_r+0x24>
 800748a:	6820      	ldr	r0, [r4, #0]
 800748c:	1821      	adds	r1, r4, r0
 800748e:	428a      	cmp	r2, r1
 8007490:	bf01      	itttt	eq
 8007492:	6811      	ldreq	r1, [r2, #0]
 8007494:	6852      	ldreq	r2, [r2, #4]
 8007496:	1809      	addeq	r1, r1, r0
 8007498:	6021      	streq	r1, [r4, #0]
 800749a:	6062      	str	r2, [r4, #4]
 800749c:	605c      	str	r4, [r3, #4]
 800749e:	e7c9      	b.n	8007434 <_free_r+0x24>
 80074a0:	bd38      	pop	{r3, r4, r5, pc}
 80074a2:	bf00      	nop
 80074a4:	200001fc 	.word	0x200001fc

080074a8 <_malloc_r>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	1ccd      	adds	r5, r1, #3
 80074ac:	f025 0503 	bic.w	r5, r5, #3
 80074b0:	3508      	adds	r5, #8
 80074b2:	2d0c      	cmp	r5, #12
 80074b4:	bf38      	it	cc
 80074b6:	250c      	movcc	r5, #12
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	4606      	mov	r6, r0
 80074bc:	db01      	blt.n	80074c2 <_malloc_r+0x1a>
 80074be:	42a9      	cmp	r1, r5
 80074c0:	d903      	bls.n	80074ca <_malloc_r+0x22>
 80074c2:	230c      	movs	r3, #12
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	2000      	movs	r0, #0
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	f000 fd6c 	bl	8007fa6 <__malloc_lock>
 80074ce:	4a21      	ldr	r2, [pc, #132]	; (8007554 <_malloc_r+0xac>)
 80074d0:	6814      	ldr	r4, [r2, #0]
 80074d2:	4621      	mov	r1, r4
 80074d4:	b991      	cbnz	r1, 80074fc <_malloc_r+0x54>
 80074d6:	4c20      	ldr	r4, [pc, #128]	; (8007558 <_malloc_r+0xb0>)
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	b91b      	cbnz	r3, 80074e4 <_malloc_r+0x3c>
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 facd 	bl	8007a7c <_sbrk_r>
 80074e2:	6020      	str	r0, [r4, #0]
 80074e4:	4629      	mov	r1, r5
 80074e6:	4630      	mov	r0, r6
 80074e8:	f000 fac8 	bl	8007a7c <_sbrk_r>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d124      	bne.n	800753a <_malloc_r+0x92>
 80074f0:	230c      	movs	r3, #12
 80074f2:	4630      	mov	r0, r6
 80074f4:	6033      	str	r3, [r6, #0]
 80074f6:	f000 fd57 	bl	8007fa8 <__malloc_unlock>
 80074fa:	e7e4      	b.n	80074c6 <_malloc_r+0x1e>
 80074fc:	680b      	ldr	r3, [r1, #0]
 80074fe:	1b5b      	subs	r3, r3, r5
 8007500:	d418      	bmi.n	8007534 <_malloc_r+0x8c>
 8007502:	2b0b      	cmp	r3, #11
 8007504:	d90f      	bls.n	8007526 <_malloc_r+0x7e>
 8007506:	600b      	str	r3, [r1, #0]
 8007508:	18cc      	adds	r4, r1, r3
 800750a:	50cd      	str	r5, [r1, r3]
 800750c:	4630      	mov	r0, r6
 800750e:	f000 fd4b 	bl	8007fa8 <__malloc_unlock>
 8007512:	f104 000b 	add.w	r0, r4, #11
 8007516:	1d23      	adds	r3, r4, #4
 8007518:	f020 0007 	bic.w	r0, r0, #7
 800751c:	1ac3      	subs	r3, r0, r3
 800751e:	d0d3      	beq.n	80074c8 <_malloc_r+0x20>
 8007520:	425a      	negs	r2, r3
 8007522:	50e2      	str	r2, [r4, r3]
 8007524:	e7d0      	b.n	80074c8 <_malloc_r+0x20>
 8007526:	684b      	ldr	r3, [r1, #4]
 8007528:	428c      	cmp	r4, r1
 800752a:	bf16      	itet	ne
 800752c:	6063      	strne	r3, [r4, #4]
 800752e:	6013      	streq	r3, [r2, #0]
 8007530:	460c      	movne	r4, r1
 8007532:	e7eb      	b.n	800750c <_malloc_r+0x64>
 8007534:	460c      	mov	r4, r1
 8007536:	6849      	ldr	r1, [r1, #4]
 8007538:	e7cc      	b.n	80074d4 <_malloc_r+0x2c>
 800753a:	1cc4      	adds	r4, r0, #3
 800753c:	f024 0403 	bic.w	r4, r4, #3
 8007540:	42a0      	cmp	r0, r4
 8007542:	d005      	beq.n	8007550 <_malloc_r+0xa8>
 8007544:	1a21      	subs	r1, r4, r0
 8007546:	4630      	mov	r0, r6
 8007548:	f000 fa98 	bl	8007a7c <_sbrk_r>
 800754c:	3001      	adds	r0, #1
 800754e:	d0cf      	beq.n	80074f0 <_malloc_r+0x48>
 8007550:	6025      	str	r5, [r4, #0]
 8007552:	e7db      	b.n	800750c <_malloc_r+0x64>
 8007554:	200001fc 	.word	0x200001fc
 8007558:	20000200 	.word	0x20000200

0800755c <__ssputs_r>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	688e      	ldr	r6, [r1, #8]
 8007562:	4682      	mov	sl, r0
 8007564:	429e      	cmp	r6, r3
 8007566:	460c      	mov	r4, r1
 8007568:	4690      	mov	r8, r2
 800756a:	4699      	mov	r9, r3
 800756c:	d837      	bhi.n	80075de <__ssputs_r+0x82>
 800756e:	898a      	ldrh	r2, [r1, #12]
 8007570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007574:	d031      	beq.n	80075da <__ssputs_r+0x7e>
 8007576:	2302      	movs	r3, #2
 8007578:	6825      	ldr	r5, [r4, #0]
 800757a:	6909      	ldr	r1, [r1, #16]
 800757c:	1a6f      	subs	r7, r5, r1
 800757e:	6965      	ldr	r5, [r4, #20]
 8007580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007584:	fb95 f5f3 	sdiv	r5, r5, r3
 8007588:	f109 0301 	add.w	r3, r9, #1
 800758c:	443b      	add	r3, r7
 800758e:	429d      	cmp	r5, r3
 8007590:	bf38      	it	cc
 8007592:	461d      	movcc	r5, r3
 8007594:	0553      	lsls	r3, r2, #21
 8007596:	d530      	bpl.n	80075fa <__ssputs_r+0x9e>
 8007598:	4629      	mov	r1, r5
 800759a:	f7ff ff85 	bl	80074a8 <_malloc_r>
 800759e:	4606      	mov	r6, r0
 80075a0:	b950      	cbnz	r0, 80075b8 <__ssputs_r+0x5c>
 80075a2:	230c      	movs	r3, #12
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	f8ca 3000 	str.w	r3, [sl]
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b2:	81a3      	strh	r3, [r4, #12]
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	463a      	mov	r2, r7
 80075ba:	6921      	ldr	r1, [r4, #16]
 80075bc:	f7ff fb16 	bl	8006bec <memcpy>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	6126      	str	r6, [r4, #16]
 80075ce:	443e      	add	r6, r7
 80075d0:	6026      	str	r6, [r4, #0]
 80075d2:	464e      	mov	r6, r9
 80075d4:	6165      	str	r5, [r4, #20]
 80075d6:	1bed      	subs	r5, r5, r7
 80075d8:	60a5      	str	r5, [r4, #8]
 80075da:	454e      	cmp	r6, r9
 80075dc:	d900      	bls.n	80075e0 <__ssputs_r+0x84>
 80075de:	464e      	mov	r6, r9
 80075e0:	4632      	mov	r2, r6
 80075e2:	4641      	mov	r1, r8
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	f000 fcc5 	bl	8007f74 <memmove>
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	2000      	movs	r0, #0
 80075ee:	1b9b      	subs	r3, r3, r6
 80075f0:	60a3      	str	r3, [r4, #8]
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	441e      	add	r6, r3
 80075f6:	6026      	str	r6, [r4, #0]
 80075f8:	e7dc      	b.n	80075b4 <__ssputs_r+0x58>
 80075fa:	462a      	mov	r2, r5
 80075fc:	f000 fcd5 	bl	8007faa <_realloc_r>
 8007600:	4606      	mov	r6, r0
 8007602:	2800      	cmp	r0, #0
 8007604:	d1e2      	bne.n	80075cc <__ssputs_r+0x70>
 8007606:	6921      	ldr	r1, [r4, #16]
 8007608:	4650      	mov	r0, sl
 800760a:	f7ff ff01 	bl	8007410 <_free_r>
 800760e:	e7c8      	b.n	80075a2 <__ssputs_r+0x46>

08007610 <_svfiprintf_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	461d      	mov	r5, r3
 8007616:	898b      	ldrh	r3, [r1, #12]
 8007618:	b09d      	sub	sp, #116	; 0x74
 800761a:	061f      	lsls	r7, r3, #24
 800761c:	4680      	mov	r8, r0
 800761e:	460c      	mov	r4, r1
 8007620:	4616      	mov	r6, r2
 8007622:	d50f      	bpl.n	8007644 <_svfiprintf_r+0x34>
 8007624:	690b      	ldr	r3, [r1, #16]
 8007626:	b96b      	cbnz	r3, 8007644 <_svfiprintf_r+0x34>
 8007628:	2140      	movs	r1, #64	; 0x40
 800762a:	f7ff ff3d 	bl	80074a8 <_malloc_r>
 800762e:	6020      	str	r0, [r4, #0]
 8007630:	6120      	str	r0, [r4, #16]
 8007632:	b928      	cbnz	r0, 8007640 <_svfiprintf_r+0x30>
 8007634:	230c      	movs	r3, #12
 8007636:	f8c8 3000 	str.w	r3, [r8]
 800763a:	f04f 30ff 	mov.w	r0, #4294967295
 800763e:	e0c8      	b.n	80077d2 <_svfiprintf_r+0x1c2>
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	6163      	str	r3, [r4, #20]
 8007644:	2300      	movs	r3, #0
 8007646:	9309      	str	r3, [sp, #36]	; 0x24
 8007648:	2320      	movs	r3, #32
 800764a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764e:	2330      	movs	r3, #48	; 0x30
 8007650:	f04f 0b01 	mov.w	fp, #1
 8007654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007658:	9503      	str	r5, [sp, #12]
 800765a:	4637      	mov	r7, r6
 800765c:	463d      	mov	r5, r7
 800765e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007662:	b10b      	cbz	r3, 8007668 <_svfiprintf_r+0x58>
 8007664:	2b25      	cmp	r3, #37	; 0x25
 8007666:	d13e      	bne.n	80076e6 <_svfiprintf_r+0xd6>
 8007668:	ebb7 0a06 	subs.w	sl, r7, r6
 800766c:	d00b      	beq.n	8007686 <_svfiprintf_r+0x76>
 800766e:	4653      	mov	r3, sl
 8007670:	4632      	mov	r2, r6
 8007672:	4621      	mov	r1, r4
 8007674:	4640      	mov	r0, r8
 8007676:	f7ff ff71 	bl	800755c <__ssputs_r>
 800767a:	3001      	adds	r0, #1
 800767c:	f000 80a4 	beq.w	80077c8 <_svfiprintf_r+0x1b8>
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	4453      	add	r3, sl
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	783b      	ldrb	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 809d 	beq.w	80077c8 <_svfiprintf_r+0x1b8>
 800768e:	2300      	movs	r3, #0
 8007690:	f04f 32ff 	mov.w	r2, #4294967295
 8007694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a0:	931a      	str	r3, [sp, #104]	; 0x68
 80076a2:	462f      	mov	r7, r5
 80076a4:	2205      	movs	r2, #5
 80076a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076aa:	4850      	ldr	r0, [pc, #320]	; (80077ec <_svfiprintf_r+0x1dc>)
 80076ac:	f7ff fa90 	bl	8006bd0 <memchr>
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	b9d0      	cbnz	r0, 80076ea <_svfiprintf_r+0xda>
 80076b4:	06d9      	lsls	r1, r3, #27
 80076b6:	bf44      	itt	mi
 80076b8:	2220      	movmi	r2, #32
 80076ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076be:	071a      	lsls	r2, r3, #28
 80076c0:	bf44      	itt	mi
 80076c2:	222b      	movmi	r2, #43	; 0x2b
 80076c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076c8:	782a      	ldrb	r2, [r5, #0]
 80076ca:	2a2a      	cmp	r2, #42	; 0x2a
 80076cc:	d015      	beq.n	80076fa <_svfiprintf_r+0xea>
 80076ce:	462f      	mov	r7, r5
 80076d0:	2000      	movs	r0, #0
 80076d2:	250a      	movs	r5, #10
 80076d4:	9a07      	ldr	r2, [sp, #28]
 80076d6:	4639      	mov	r1, r7
 80076d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076dc:	3b30      	subs	r3, #48	; 0x30
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d94d      	bls.n	800777e <_svfiprintf_r+0x16e>
 80076e2:	b1b8      	cbz	r0, 8007714 <_svfiprintf_r+0x104>
 80076e4:	e00f      	b.n	8007706 <_svfiprintf_r+0xf6>
 80076e6:	462f      	mov	r7, r5
 80076e8:	e7b8      	b.n	800765c <_svfiprintf_r+0x4c>
 80076ea:	4a40      	ldr	r2, [pc, #256]	; (80077ec <_svfiprintf_r+0x1dc>)
 80076ec:	463d      	mov	r5, r7
 80076ee:	1a80      	subs	r0, r0, r2
 80076f0:	fa0b f000 	lsl.w	r0, fp, r0
 80076f4:	4318      	orrs	r0, r3
 80076f6:	9004      	str	r0, [sp, #16]
 80076f8:	e7d3      	b.n	80076a2 <_svfiprintf_r+0x92>
 80076fa:	9a03      	ldr	r2, [sp, #12]
 80076fc:	1d11      	adds	r1, r2, #4
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	9103      	str	r1, [sp, #12]
 8007702:	2a00      	cmp	r2, #0
 8007704:	db01      	blt.n	800770a <_svfiprintf_r+0xfa>
 8007706:	9207      	str	r2, [sp, #28]
 8007708:	e004      	b.n	8007714 <_svfiprintf_r+0x104>
 800770a:	4252      	negs	r2, r2
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	9207      	str	r2, [sp, #28]
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	783b      	ldrb	r3, [r7, #0]
 8007716:	2b2e      	cmp	r3, #46	; 0x2e
 8007718:	d10c      	bne.n	8007734 <_svfiprintf_r+0x124>
 800771a:	787b      	ldrb	r3, [r7, #1]
 800771c:	2b2a      	cmp	r3, #42	; 0x2a
 800771e:	d133      	bne.n	8007788 <_svfiprintf_r+0x178>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	3702      	adds	r7, #2
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	9203      	str	r2, [sp, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	bfb8      	it	lt
 800772e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	4d2e      	ldr	r5, [pc, #184]	; (80077f0 <_svfiprintf_r+0x1e0>)
 8007736:	2203      	movs	r2, #3
 8007738:	7839      	ldrb	r1, [r7, #0]
 800773a:	4628      	mov	r0, r5
 800773c:	f7ff fa48 	bl	8006bd0 <memchr>
 8007740:	b138      	cbz	r0, 8007752 <_svfiprintf_r+0x142>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	1b40      	subs	r0, r0, r5
 8007746:	fa03 f000 	lsl.w	r0, r3, r0
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	3701      	adds	r7, #1
 800774e:	4303      	orrs	r3, r0
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	7839      	ldrb	r1, [r7, #0]
 8007754:	2206      	movs	r2, #6
 8007756:	4827      	ldr	r0, [pc, #156]	; (80077f4 <_svfiprintf_r+0x1e4>)
 8007758:	1c7e      	adds	r6, r7, #1
 800775a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775e:	f7ff fa37 	bl	8006bd0 <memchr>
 8007762:	2800      	cmp	r0, #0
 8007764:	d038      	beq.n	80077d8 <_svfiprintf_r+0x1c8>
 8007766:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <_svfiprintf_r+0x1e8>)
 8007768:	bb13      	cbnz	r3, 80077b0 <_svfiprintf_r+0x1a0>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	3307      	adds	r3, #7
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	3308      	adds	r3, #8
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007778:	444b      	add	r3, r9
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	e76d      	b.n	800765a <_svfiprintf_r+0x4a>
 800777e:	fb05 3202 	mla	r2, r5, r2, r3
 8007782:	2001      	movs	r0, #1
 8007784:	460f      	mov	r7, r1
 8007786:	e7a6      	b.n	80076d6 <_svfiprintf_r+0xc6>
 8007788:	2300      	movs	r3, #0
 800778a:	250a      	movs	r5, #10
 800778c:	4619      	mov	r1, r3
 800778e:	3701      	adds	r7, #1
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	4638      	mov	r0, r7
 8007794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007798:	3a30      	subs	r2, #48	; 0x30
 800779a:	2a09      	cmp	r2, #9
 800779c:	d903      	bls.n	80077a6 <_svfiprintf_r+0x196>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0c8      	beq.n	8007734 <_svfiprintf_r+0x124>
 80077a2:	9105      	str	r1, [sp, #20]
 80077a4:	e7c6      	b.n	8007734 <_svfiprintf_r+0x124>
 80077a6:	fb05 2101 	mla	r1, r5, r1, r2
 80077aa:	2301      	movs	r3, #1
 80077ac:	4607      	mov	r7, r0
 80077ae:	e7f0      	b.n	8007792 <_svfiprintf_r+0x182>
 80077b0:	ab03      	add	r3, sp, #12
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4622      	mov	r2, r4
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <_svfiprintf_r+0x1ec>)
 80077b8:	a904      	add	r1, sp, #16
 80077ba:	4640      	mov	r0, r8
 80077bc:	f7fc fb0c 	bl	8003dd8 <_printf_float>
 80077c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077c4:	4681      	mov	r9, r0
 80077c6:	d1d6      	bne.n	8007776 <_svfiprintf_r+0x166>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	065b      	lsls	r3, r3, #25
 80077cc:	f53f af35 	bmi.w	800763a <_svfiprintf_r+0x2a>
 80077d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d2:	b01d      	add	sp, #116	; 0x74
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4622      	mov	r2, r4
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <_svfiprintf_r+0x1ec>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7fc fda4 	bl	8004330 <_printf_i>
 80077e8:	e7ea      	b.n	80077c0 <_svfiprintf_r+0x1b0>
 80077ea:	bf00      	nop
 80077ec:	080082fc 	.word	0x080082fc
 80077f0:	08008302 	.word	0x08008302
 80077f4:	08008306 	.word	0x08008306
 80077f8:	08003dd9 	.word	0x08003dd9
 80077fc:	0800755d 	.word	0x0800755d

08007800 <__sfputc_r>:
 8007800:	6893      	ldr	r3, [r2, #8]
 8007802:	b410      	push	{r4}
 8007804:	3b01      	subs	r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	6093      	str	r3, [r2, #8]
 800780a:	da07      	bge.n	800781c <__sfputc_r+0x1c>
 800780c:	6994      	ldr	r4, [r2, #24]
 800780e:	42a3      	cmp	r3, r4
 8007810:	db01      	blt.n	8007816 <__sfputc_r+0x16>
 8007812:	290a      	cmp	r1, #10
 8007814:	d102      	bne.n	800781c <__sfputc_r+0x1c>
 8007816:	bc10      	pop	{r4}
 8007818:	f000 b996 	b.w	8007b48 <__swbuf_r>
 800781c:	6813      	ldr	r3, [r2, #0]
 800781e:	1c58      	adds	r0, r3, #1
 8007820:	6010      	str	r0, [r2, #0]
 8007822:	7019      	strb	r1, [r3, #0]
 8007824:	4608      	mov	r0, r1
 8007826:	bc10      	pop	{r4}
 8007828:	4770      	bx	lr

0800782a <__sfputs_r>:
 800782a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782c:	4606      	mov	r6, r0
 800782e:	460f      	mov	r7, r1
 8007830:	4614      	mov	r4, r2
 8007832:	18d5      	adds	r5, r2, r3
 8007834:	42ac      	cmp	r4, r5
 8007836:	d101      	bne.n	800783c <__sfputs_r+0x12>
 8007838:	2000      	movs	r0, #0
 800783a:	e007      	b.n	800784c <__sfputs_r+0x22>
 800783c:	463a      	mov	r2, r7
 800783e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007842:	4630      	mov	r0, r6
 8007844:	f7ff ffdc 	bl	8007800 <__sfputc_r>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d1f3      	bne.n	8007834 <__sfputs_r+0xa>
 800784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007850 <_vfiprintf_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	460c      	mov	r4, r1
 8007856:	b09d      	sub	sp, #116	; 0x74
 8007858:	4617      	mov	r7, r2
 800785a:	461d      	mov	r5, r3
 800785c:	4606      	mov	r6, r0
 800785e:	b118      	cbz	r0, 8007868 <_vfiprintf_r+0x18>
 8007860:	6983      	ldr	r3, [r0, #24]
 8007862:	b90b      	cbnz	r3, 8007868 <_vfiprintf_r+0x18>
 8007864:	f7fe fdd4 	bl	8006410 <__sinit>
 8007868:	4b7c      	ldr	r3, [pc, #496]	; (8007a5c <_vfiprintf_r+0x20c>)
 800786a:	429c      	cmp	r4, r3
 800786c:	d158      	bne.n	8007920 <_vfiprintf_r+0xd0>
 800786e:	6874      	ldr	r4, [r6, #4]
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	0718      	lsls	r0, r3, #28
 8007874:	d55e      	bpl.n	8007934 <_vfiprintf_r+0xe4>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d05b      	beq.n	8007934 <_vfiprintf_r+0xe4>
 800787c:	2300      	movs	r3, #0
 800787e:	9309      	str	r3, [sp, #36]	; 0x24
 8007880:	2320      	movs	r3, #32
 8007882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007886:	2330      	movs	r3, #48	; 0x30
 8007888:	f04f 0b01 	mov.w	fp, #1
 800788c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007890:	9503      	str	r5, [sp, #12]
 8007892:	46b8      	mov	r8, r7
 8007894:	4645      	mov	r5, r8
 8007896:	f815 3b01 	ldrb.w	r3, [r5], #1
 800789a:	b10b      	cbz	r3, 80078a0 <_vfiprintf_r+0x50>
 800789c:	2b25      	cmp	r3, #37	; 0x25
 800789e:	d154      	bne.n	800794a <_vfiprintf_r+0xfa>
 80078a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80078a4:	d00b      	beq.n	80078be <_vfiprintf_r+0x6e>
 80078a6:	4653      	mov	r3, sl
 80078a8:	463a      	mov	r2, r7
 80078aa:	4621      	mov	r1, r4
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ffbc 	bl	800782a <__sfputs_r>
 80078b2:	3001      	adds	r0, #1
 80078b4:	f000 80c2 	beq.w	8007a3c <_vfiprintf_r+0x1ec>
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	4453      	add	r3, sl
 80078bc:	9309      	str	r3, [sp, #36]	; 0x24
 80078be:	f898 3000 	ldrb.w	r3, [r8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80ba 	beq.w	8007a3c <_vfiprintf_r+0x1ec>
 80078c8:	2300      	movs	r3, #0
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	9307      	str	r3, [sp, #28]
 80078d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078da:	931a      	str	r3, [sp, #104]	; 0x68
 80078dc:	46a8      	mov	r8, r5
 80078de:	2205      	movs	r2, #5
 80078e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80078e4:	485e      	ldr	r0, [pc, #376]	; (8007a60 <_vfiprintf_r+0x210>)
 80078e6:	f7ff f973 	bl	8006bd0 <memchr>
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	bb78      	cbnz	r0, 800794e <_vfiprintf_r+0xfe>
 80078ee:	06d9      	lsls	r1, r3, #27
 80078f0:	bf44      	itt	mi
 80078f2:	2220      	movmi	r2, #32
 80078f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078f8:	071a      	lsls	r2, r3, #28
 80078fa:	bf44      	itt	mi
 80078fc:	222b      	movmi	r2, #43	; 0x2b
 80078fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007902:	782a      	ldrb	r2, [r5, #0]
 8007904:	2a2a      	cmp	r2, #42	; 0x2a
 8007906:	d02a      	beq.n	800795e <_vfiprintf_r+0x10e>
 8007908:	46a8      	mov	r8, r5
 800790a:	2000      	movs	r0, #0
 800790c:	250a      	movs	r5, #10
 800790e:	9a07      	ldr	r2, [sp, #28]
 8007910:	4641      	mov	r1, r8
 8007912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007916:	3b30      	subs	r3, #48	; 0x30
 8007918:	2b09      	cmp	r3, #9
 800791a:	d969      	bls.n	80079f0 <_vfiprintf_r+0x1a0>
 800791c:	b360      	cbz	r0, 8007978 <_vfiprintf_r+0x128>
 800791e:	e024      	b.n	800796a <_vfiprintf_r+0x11a>
 8007920:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <_vfiprintf_r+0x214>)
 8007922:	429c      	cmp	r4, r3
 8007924:	d101      	bne.n	800792a <_vfiprintf_r+0xda>
 8007926:	68b4      	ldr	r4, [r6, #8]
 8007928:	e7a2      	b.n	8007870 <_vfiprintf_r+0x20>
 800792a:	4b4f      	ldr	r3, [pc, #316]	; (8007a68 <_vfiprintf_r+0x218>)
 800792c:	429c      	cmp	r4, r3
 800792e:	bf08      	it	eq
 8007930:	68f4      	ldreq	r4, [r6, #12]
 8007932:	e79d      	b.n	8007870 <_vfiprintf_r+0x20>
 8007934:	4621      	mov	r1, r4
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f978 	bl	8007c2c <__swsetup_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	d09d      	beq.n	800787c <_vfiprintf_r+0x2c>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	b01d      	add	sp, #116	; 0x74
 8007946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	46a8      	mov	r8, r5
 800794c:	e7a2      	b.n	8007894 <_vfiprintf_r+0x44>
 800794e:	4a44      	ldr	r2, [pc, #272]	; (8007a60 <_vfiprintf_r+0x210>)
 8007950:	4645      	mov	r5, r8
 8007952:	1a80      	subs	r0, r0, r2
 8007954:	fa0b f000 	lsl.w	r0, fp, r0
 8007958:	4318      	orrs	r0, r3
 800795a:	9004      	str	r0, [sp, #16]
 800795c:	e7be      	b.n	80078dc <_vfiprintf_r+0x8c>
 800795e:	9a03      	ldr	r2, [sp, #12]
 8007960:	1d11      	adds	r1, r2, #4
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	2a00      	cmp	r2, #0
 8007968:	db01      	blt.n	800796e <_vfiprintf_r+0x11e>
 800796a:	9207      	str	r2, [sp, #28]
 800796c:	e004      	b.n	8007978 <_vfiprintf_r+0x128>
 800796e:	4252      	negs	r2, r2
 8007970:	f043 0302 	orr.w	r3, r3, #2
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	f898 3000 	ldrb.w	r3, [r8]
 800797c:	2b2e      	cmp	r3, #46	; 0x2e
 800797e:	d10e      	bne.n	800799e <_vfiprintf_r+0x14e>
 8007980:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007984:	2b2a      	cmp	r3, #42	; 0x2a
 8007986:	d138      	bne.n	80079fa <_vfiprintf_r+0x1aa>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	f108 0802 	add.w	r8, r8, #2
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	9203      	str	r2, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfb8      	it	lt
 8007998:	f04f 33ff 	movlt.w	r3, #4294967295
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	4d33      	ldr	r5, [pc, #204]	; (8007a6c <_vfiprintf_r+0x21c>)
 80079a0:	2203      	movs	r2, #3
 80079a2:	f898 1000 	ldrb.w	r1, [r8]
 80079a6:	4628      	mov	r0, r5
 80079a8:	f7ff f912 	bl	8006bd0 <memchr>
 80079ac:	b140      	cbz	r0, 80079c0 <_vfiprintf_r+0x170>
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	1b40      	subs	r0, r0, r5
 80079b2:	fa03 f000 	lsl.w	r0, r3, r0
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	f108 0801 	add.w	r8, r8, #1
 80079bc:	4303      	orrs	r3, r0
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	f898 1000 	ldrb.w	r1, [r8]
 80079c4:	2206      	movs	r2, #6
 80079c6:	482a      	ldr	r0, [pc, #168]	; (8007a70 <_vfiprintf_r+0x220>)
 80079c8:	f108 0701 	add.w	r7, r8, #1
 80079cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079d0:	f7ff f8fe 	bl	8006bd0 <memchr>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d037      	beq.n	8007a48 <_vfiprintf_r+0x1f8>
 80079d8:	4b26      	ldr	r3, [pc, #152]	; (8007a74 <_vfiprintf_r+0x224>)
 80079da:	bb1b      	cbnz	r3, 8007a24 <_vfiprintf_r+0x1d4>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	3307      	adds	r3, #7
 80079e0:	f023 0307 	bic.w	r3, r3, #7
 80079e4:	3308      	adds	r3, #8
 80079e6:	9303      	str	r3, [sp, #12]
 80079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ea:	444b      	add	r3, r9
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24
 80079ee:	e750      	b.n	8007892 <_vfiprintf_r+0x42>
 80079f0:	fb05 3202 	mla	r2, r5, r2, r3
 80079f4:	2001      	movs	r0, #1
 80079f6:	4688      	mov	r8, r1
 80079f8:	e78a      	b.n	8007910 <_vfiprintf_r+0xc0>
 80079fa:	2300      	movs	r3, #0
 80079fc:	250a      	movs	r5, #10
 80079fe:	4619      	mov	r1, r3
 8007a00:	f108 0801 	add.w	r8, r8, #1
 8007a04:	9305      	str	r3, [sp, #20]
 8007a06:	4640      	mov	r0, r8
 8007a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a0c:	3a30      	subs	r2, #48	; 0x30
 8007a0e:	2a09      	cmp	r2, #9
 8007a10:	d903      	bls.n	8007a1a <_vfiprintf_r+0x1ca>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0c3      	beq.n	800799e <_vfiprintf_r+0x14e>
 8007a16:	9105      	str	r1, [sp, #20]
 8007a18:	e7c1      	b.n	800799e <_vfiprintf_r+0x14e>
 8007a1a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4680      	mov	r8, r0
 8007a22:	e7f0      	b.n	8007a06 <_vfiprintf_r+0x1b6>
 8007a24:	ab03      	add	r3, sp, #12
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <_vfiprintf_r+0x228>)
 8007a2c:	a904      	add	r1, sp, #16
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7fc f9d2 	bl	8003dd8 <_printf_float>
 8007a34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a38:	4681      	mov	r9, r0
 8007a3a:	d1d5      	bne.n	80079e8 <_vfiprintf_r+0x198>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	065b      	lsls	r3, r3, #25
 8007a40:	f53f af7e 	bmi.w	8007940 <_vfiprintf_r+0xf0>
 8007a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a46:	e77d      	b.n	8007944 <_vfiprintf_r+0xf4>
 8007a48:	ab03      	add	r3, sp, #12
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <_vfiprintf_r+0x228>)
 8007a50:	a904      	add	r1, sp, #16
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7fc fc6c 	bl	8004330 <_printf_i>
 8007a58:	e7ec      	b.n	8007a34 <_vfiprintf_r+0x1e4>
 8007a5a:	bf00      	nop
 8007a5c:	080081b0 	.word	0x080081b0
 8007a60:	080082fc 	.word	0x080082fc
 8007a64:	080081d0 	.word	0x080081d0
 8007a68:	08008190 	.word	0x08008190
 8007a6c:	08008302 	.word	0x08008302
 8007a70:	08008306 	.word	0x08008306
 8007a74:	08003dd9 	.word	0x08003dd9
 8007a78:	0800782b 	.word	0x0800782b

08007a7c <_sbrk_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4c05      	ldr	r4, [pc, #20]	; (8007a98 <_sbrk_r+0x1c>)
 8007a82:	4605      	mov	r5, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	f7f9 fb6a 	bl	8001160 <_sbrk>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_sbrk_r+0x1a>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_sbrk_r+0x1a>
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	20000314 	.word	0x20000314

08007a9c <__sread>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	f000 faa8 	bl	8007ff8 <_read_r>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	bfab      	itete	ge
 8007aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007aae:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab0:	181b      	addge	r3, r3, r0
 8007ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ab6:	bfac      	ite	ge
 8007ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aba:	81a3      	strhlt	r3, [r4, #12]
 8007abc:	bd10      	pop	{r4, pc}

08007abe <__swrite>:
 8007abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	898b      	ldrh	r3, [r1, #12]
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	05db      	lsls	r3, r3, #23
 8007aca:	460c      	mov	r4, r1
 8007acc:	4616      	mov	r6, r2
 8007ace:	d505      	bpl.n	8007adc <__swrite+0x1e>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	f000 f9d6 	bl	8007e88 <_lseek_r>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	4632      	mov	r2, r6
 8007ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	463b      	mov	r3, r7
 8007aec:	4628      	mov	r0, r5
 8007aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	f000 b889 	b.w	8007c08 <_write_r>

08007af6 <__sseek>:
 8007af6:	b510      	push	{r4, lr}
 8007af8:	460c      	mov	r4, r1
 8007afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afe:	f000 f9c3 	bl	8007e88 <_lseek_r>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	bf15      	itete	ne
 8007b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b12:	81a3      	strheq	r3, [r4, #12]
 8007b14:	bf18      	it	ne
 8007b16:	81a3      	strhne	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__sclose>:
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f000 b8f3 	b.w	8007d08 <_close_r>

08007b22 <strncmp>:
 8007b22:	b510      	push	{r4, lr}
 8007b24:	b16a      	cbz	r2, 8007b42 <strncmp+0x20>
 8007b26:	3901      	subs	r1, #1
 8007b28:	1884      	adds	r4, r0, r2
 8007b2a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d103      	bne.n	8007b3e <strncmp+0x1c>
 8007b36:	42a0      	cmp	r0, r4
 8007b38:	d001      	beq.n	8007b3e <strncmp+0x1c>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f5      	bne.n	8007b2a <strncmp+0x8>
 8007b3e:	1a98      	subs	r0, r3, r2
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	4610      	mov	r0, r2
 8007b44:	e7fc      	b.n	8007b40 <strncmp+0x1e>
	...

08007b48 <__swbuf_r>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	460e      	mov	r6, r1
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b118      	cbz	r0, 8007b5a <__swbuf_r+0x12>
 8007b52:	6983      	ldr	r3, [r0, #24]
 8007b54:	b90b      	cbnz	r3, 8007b5a <__swbuf_r+0x12>
 8007b56:	f7fe fc5b 	bl	8006410 <__sinit>
 8007b5a:	4b21      	ldr	r3, [pc, #132]	; (8007be0 <__swbuf_r+0x98>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	d12a      	bne.n	8007bb6 <__swbuf_r+0x6e>
 8007b60:	686c      	ldr	r4, [r5, #4]
 8007b62:	69a3      	ldr	r3, [r4, #24]
 8007b64:	60a3      	str	r3, [r4, #8]
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	071a      	lsls	r2, r3, #28
 8007b6a:	d52e      	bpl.n	8007bca <__swbuf_r+0x82>
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	b363      	cbz	r3, 8007bca <__swbuf_r+0x82>
 8007b70:	6923      	ldr	r3, [r4, #16]
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	b2f6      	uxtb	r6, r6
 8007b76:	1ac0      	subs	r0, r0, r3
 8007b78:	6963      	ldr	r3, [r4, #20]
 8007b7a:	4637      	mov	r7, r6
 8007b7c:	4283      	cmp	r3, r0
 8007b7e:	dc04      	bgt.n	8007b8a <__swbuf_r+0x42>
 8007b80:	4621      	mov	r1, r4
 8007b82:	4628      	mov	r0, r5
 8007b84:	f000 f956 	bl	8007e34 <_fflush_r>
 8007b88:	bb28      	cbnz	r0, 8007bd6 <__swbuf_r+0x8e>
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	60a3      	str	r3, [r4, #8]
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	6022      	str	r2, [r4, #0]
 8007b98:	701e      	strb	r6, [r3, #0]
 8007b9a:	6963      	ldr	r3, [r4, #20]
 8007b9c:	4283      	cmp	r3, r0
 8007b9e:	d004      	beq.n	8007baa <__swbuf_r+0x62>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	07db      	lsls	r3, r3, #31
 8007ba4:	d519      	bpl.n	8007bda <__swbuf_r+0x92>
 8007ba6:	2e0a      	cmp	r6, #10
 8007ba8:	d117      	bne.n	8007bda <__swbuf_r+0x92>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 f941 	bl	8007e34 <_fflush_r>
 8007bb2:	b190      	cbz	r0, 8007bda <__swbuf_r+0x92>
 8007bb4:	e00f      	b.n	8007bd6 <__swbuf_r+0x8e>
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <__swbuf_r+0x9c>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	d101      	bne.n	8007bc0 <__swbuf_r+0x78>
 8007bbc:	68ac      	ldr	r4, [r5, #8]
 8007bbe:	e7d0      	b.n	8007b62 <__swbuf_r+0x1a>
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <__swbuf_r+0xa0>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	bf08      	it	eq
 8007bc6:	68ec      	ldreq	r4, [r5, #12]
 8007bc8:	e7cb      	b.n	8007b62 <__swbuf_r+0x1a>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 f82d 	bl	8007c2c <__swsetup_r>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d0cc      	beq.n	8007b70 <__swbuf_r+0x28>
 8007bd6:	f04f 37ff 	mov.w	r7, #4294967295
 8007bda:	4638      	mov	r0, r7
 8007bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bde:	bf00      	nop
 8007be0:	080081b0 	.word	0x080081b0
 8007be4:	080081d0 	.word	0x080081d0
 8007be8:	08008190 	.word	0x08008190

08007bec <__ascii_wctomb>:
 8007bec:	b149      	cbz	r1, 8007c02 <__ascii_wctomb+0x16>
 8007bee:	2aff      	cmp	r2, #255	; 0xff
 8007bf0:	bf8b      	itete	hi
 8007bf2:	238a      	movhi	r3, #138	; 0x8a
 8007bf4:	700a      	strbls	r2, [r1, #0]
 8007bf6:	6003      	strhi	r3, [r0, #0]
 8007bf8:	2001      	movls	r0, #1
 8007bfa:	bf88      	it	hi
 8007bfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c00:	4770      	bx	lr
 8007c02:	4608      	mov	r0, r1
 8007c04:	4770      	bx	lr
	...

08007c08 <_write_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	2200      	movs	r2, #0
 8007c12:	4c05      	ldr	r4, [pc, #20]	; (8007c28 <_write_r+0x20>)
 8007c14:	6022      	str	r2, [r4, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f7f9 fa55 	bl	80010c6 <_write>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_write_r+0x1e>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_write_r+0x1e>
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20000314 	.word	0x20000314

08007c2c <__swsetup_r>:
 8007c2c:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <__swsetup_r+0xcc>)
 8007c2e:	b570      	push	{r4, r5, r6, lr}
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	4606      	mov	r6, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	b125      	cbz	r5, 8007c42 <__swsetup_r+0x16>
 8007c38:	69ab      	ldr	r3, [r5, #24]
 8007c3a:	b913      	cbnz	r3, 8007c42 <__swsetup_r+0x16>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7fe fbe7 	bl	8006410 <__sinit>
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <__swsetup_r+0xd0>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d10f      	bne.n	8007c68 <__swsetup_r+0x3c>
 8007c48:	686c      	ldr	r4, [r5, #4]
 8007c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	0715      	lsls	r5, r2, #28
 8007c52:	d42c      	bmi.n	8007cae <__swsetup_r+0x82>
 8007c54:	06d0      	lsls	r0, r2, #27
 8007c56:	d411      	bmi.n	8007c7c <__swsetup_r+0x50>
 8007c58:	2209      	movs	r2, #9
 8007c5a:	6032      	str	r2, [r6, #0]
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	f04f 30ff 	mov.w	r0, #4294967295
 8007c66:	e03e      	b.n	8007ce6 <__swsetup_r+0xba>
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <__swsetup_r+0xd4>)
 8007c6a:	429c      	cmp	r4, r3
 8007c6c:	d101      	bne.n	8007c72 <__swsetup_r+0x46>
 8007c6e:	68ac      	ldr	r4, [r5, #8]
 8007c70:	e7eb      	b.n	8007c4a <__swsetup_r+0x1e>
 8007c72:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <__swsetup_r+0xd8>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	bf08      	it	eq
 8007c78:	68ec      	ldreq	r4, [r5, #12]
 8007c7a:	e7e6      	b.n	8007c4a <__swsetup_r+0x1e>
 8007c7c:	0751      	lsls	r1, r2, #29
 8007c7e:	d512      	bpl.n	8007ca6 <__swsetup_r+0x7a>
 8007c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c82:	b141      	cbz	r1, 8007c96 <__swsetup_r+0x6a>
 8007c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	d002      	beq.n	8007c92 <__swsetup_r+0x66>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff fbbf 	bl	8007410 <_free_r>
 8007c92:	2300      	movs	r3, #0
 8007c94:	6363      	str	r3, [r4, #52]	; 0x34
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f043 0308 	orr.w	r3, r3, #8
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	b94b      	cbnz	r3, 8007cc6 <__swsetup_r+0x9a>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cbc:	d003      	beq.n	8007cc6 <__swsetup_r+0x9a>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 f917 	bl	8007ef4 <__smakebuf_r>
 8007cc6:	89a2      	ldrh	r2, [r4, #12]
 8007cc8:	f012 0301 	ands.w	r3, r2, #1
 8007ccc:	d00c      	beq.n	8007ce8 <__swsetup_r+0xbc>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	6963      	ldr	r3, [r4, #20]
 8007cd4:	425b      	negs	r3, r3
 8007cd6:	61a3      	str	r3, [r4, #24]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	b953      	cbnz	r3, 8007cf2 <__swsetup_r+0xc6>
 8007cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ce4:	d1ba      	bne.n	8007c5c <__swsetup_r+0x30>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	0792      	lsls	r2, r2, #30
 8007cea:	bf58      	it	pl
 8007cec:	6963      	ldrpl	r3, [r4, #20]
 8007cee:	60a3      	str	r3, [r4, #8]
 8007cf0:	e7f2      	b.n	8007cd8 <__swsetup_r+0xac>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e7f7      	b.n	8007ce6 <__swsetup_r+0xba>
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c
 8007cfc:	080081b0 	.word	0x080081b0
 8007d00:	080081d0 	.word	0x080081d0
 8007d04:	08008190 	.word	0x08008190

08007d08 <_close_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4c05      	ldr	r4, [pc, #20]	; (8007d24 <_close_r+0x1c>)
 8007d0e:	4605      	mov	r5, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	f7f9 f9f3 	bl	80010fe <_close>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_close_r+0x1a>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_close_r+0x1a>
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	20000314 	.word	0x20000314

08007d28 <__sflush_r>:
 8007d28:	898a      	ldrh	r2, [r1, #12]
 8007d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	4605      	mov	r5, r0
 8007d30:	0710      	lsls	r0, r2, #28
 8007d32:	460c      	mov	r4, r1
 8007d34:	d458      	bmi.n	8007de8 <__sflush_r+0xc0>
 8007d36:	684b      	ldr	r3, [r1, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc05      	bgt.n	8007d48 <__sflush_r+0x20>
 8007d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dc02      	bgt.n	8007d48 <__sflush_r+0x20>
 8007d42:	2000      	movs	r0, #0
 8007d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d4a:	2e00      	cmp	r6, #0
 8007d4c:	d0f9      	beq.n	8007d42 <__sflush_r+0x1a>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d54:	682f      	ldr	r7, [r5, #0]
 8007d56:	6a21      	ldr	r1, [r4, #32]
 8007d58:	602b      	str	r3, [r5, #0]
 8007d5a:	d032      	beq.n	8007dc2 <__sflush_r+0x9a>
 8007d5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	075a      	lsls	r2, r3, #29
 8007d62:	d505      	bpl.n	8007d70 <__sflush_r+0x48>
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	1ac0      	subs	r0, r0, r3
 8007d68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d6a:	b10b      	cbz	r3, 8007d70 <__sflush_r+0x48>
 8007d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d6e:	1ac0      	subs	r0, r0, r3
 8007d70:	2300      	movs	r3, #0
 8007d72:	4602      	mov	r2, r0
 8007d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d76:	6a21      	ldr	r1, [r4, #32]
 8007d78:	4628      	mov	r0, r5
 8007d7a:	47b0      	blx	r6
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	d106      	bne.n	8007d90 <__sflush_r+0x68>
 8007d82:	6829      	ldr	r1, [r5, #0]
 8007d84:	291d      	cmp	r1, #29
 8007d86:	d848      	bhi.n	8007e1a <__sflush_r+0xf2>
 8007d88:	4a29      	ldr	r2, [pc, #164]	; (8007e30 <__sflush_r+0x108>)
 8007d8a:	40ca      	lsrs	r2, r1
 8007d8c:	07d6      	lsls	r6, r2, #31
 8007d8e:	d544      	bpl.n	8007e1a <__sflush_r+0xf2>
 8007d90:	2200      	movs	r2, #0
 8007d92:	6062      	str	r2, [r4, #4]
 8007d94:	6922      	ldr	r2, [r4, #16]
 8007d96:	04d9      	lsls	r1, r3, #19
 8007d98:	6022      	str	r2, [r4, #0]
 8007d9a:	d504      	bpl.n	8007da6 <__sflush_r+0x7e>
 8007d9c:	1c42      	adds	r2, r0, #1
 8007d9e:	d101      	bne.n	8007da4 <__sflush_r+0x7c>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b903      	cbnz	r3, 8007da6 <__sflush_r+0x7e>
 8007da4:	6560      	str	r0, [r4, #84]	; 0x54
 8007da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007da8:	602f      	str	r7, [r5, #0]
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d0c9      	beq.n	8007d42 <__sflush_r+0x1a>
 8007dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db2:	4299      	cmp	r1, r3
 8007db4:	d002      	beq.n	8007dbc <__sflush_r+0x94>
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7ff fb2a 	bl	8007410 <_free_r>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	6360      	str	r0, [r4, #52]	; 0x34
 8007dc0:	e7c0      	b.n	8007d44 <__sflush_r+0x1c>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b0      	blx	r6
 8007dc8:	1c41      	adds	r1, r0, #1
 8007dca:	d1c8      	bne.n	8007d5e <__sflush_r+0x36>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0c5      	beq.n	8007d5e <__sflush_r+0x36>
 8007dd2:	2b1d      	cmp	r3, #29
 8007dd4:	d001      	beq.n	8007dda <__sflush_r+0xb2>
 8007dd6:	2b16      	cmp	r3, #22
 8007dd8:	d101      	bne.n	8007dde <__sflush_r+0xb6>
 8007dda:	602f      	str	r7, [r5, #0]
 8007ddc:	e7b1      	b.n	8007d42 <__sflush_r+0x1a>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	e7ad      	b.n	8007d44 <__sflush_r+0x1c>
 8007de8:	690f      	ldr	r7, [r1, #16]
 8007dea:	2f00      	cmp	r7, #0
 8007dec:	d0a9      	beq.n	8007d42 <__sflush_r+0x1a>
 8007dee:	0793      	lsls	r3, r2, #30
 8007df0:	bf18      	it	ne
 8007df2:	2300      	movne	r3, #0
 8007df4:	680e      	ldr	r6, [r1, #0]
 8007df6:	bf08      	it	eq
 8007df8:	694b      	ldreq	r3, [r1, #20]
 8007dfa:	eba6 0807 	sub.w	r8, r6, r7
 8007dfe:	600f      	str	r7, [r1, #0]
 8007e00:	608b      	str	r3, [r1, #8]
 8007e02:	f1b8 0f00 	cmp.w	r8, #0
 8007e06:	dd9c      	ble.n	8007d42 <__sflush_r+0x1a>
 8007e08:	4643      	mov	r3, r8
 8007e0a:	463a      	mov	r2, r7
 8007e0c:	6a21      	ldr	r1, [r4, #32]
 8007e0e:	4628      	mov	r0, r5
 8007e10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e12:	47b0      	blx	r6
 8007e14:	2800      	cmp	r0, #0
 8007e16:	dc06      	bgt.n	8007e26 <__sflush_r+0xfe>
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e78e      	b.n	8007d44 <__sflush_r+0x1c>
 8007e26:	4407      	add	r7, r0
 8007e28:	eba8 0800 	sub.w	r8, r8, r0
 8007e2c:	e7e9      	b.n	8007e02 <__sflush_r+0xda>
 8007e2e:	bf00      	nop
 8007e30:	20400001 	.word	0x20400001

08007e34 <_fflush_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	4605      	mov	r5, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b1db      	cbz	r3, 8007e76 <_fflush_r+0x42>
 8007e3e:	b118      	cbz	r0, 8007e48 <_fflush_r+0x14>
 8007e40:	6983      	ldr	r3, [r0, #24]
 8007e42:	b90b      	cbnz	r3, 8007e48 <_fflush_r+0x14>
 8007e44:	f7fe fae4 	bl	8006410 <__sinit>
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <_fflush_r+0x48>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d109      	bne.n	8007e62 <_fflush_r+0x2e>
 8007e4e:	686c      	ldr	r4, [r5, #4]
 8007e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e54:	b17b      	cbz	r3, 8007e76 <_fflush_r+0x42>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e5e:	f7ff bf63 	b.w	8007d28 <__sflush_r>
 8007e62:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <_fflush_r+0x4c>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	d101      	bne.n	8007e6c <_fflush_r+0x38>
 8007e68:	68ac      	ldr	r4, [r5, #8]
 8007e6a:	e7f1      	b.n	8007e50 <_fflush_r+0x1c>
 8007e6c:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <_fflush_r+0x50>)
 8007e6e:	429c      	cmp	r4, r3
 8007e70:	bf08      	it	eq
 8007e72:	68ec      	ldreq	r4, [r5, #12]
 8007e74:	e7ec      	b.n	8007e50 <_fflush_r+0x1c>
 8007e76:	2000      	movs	r0, #0
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	080081b0 	.word	0x080081b0
 8007e80:	080081d0 	.word	0x080081d0
 8007e84:	08008190 	.word	0x08008190

08007e88 <_lseek_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	2200      	movs	r2, #0
 8007e92:	4c05      	ldr	r4, [pc, #20]	; (8007ea8 <_lseek_r+0x20>)
 8007e94:	6022      	str	r2, [r4, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7f9 f955 	bl	8001146 <_lseek>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_lseek_r+0x1e>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_lseek_r+0x1e>
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20000314 	.word	0x20000314

08007eac <__swhatbuf_r>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	460e      	mov	r6, r1
 8007eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb4:	b096      	sub	sp, #88	; 0x58
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	4614      	mov	r4, r2
 8007eba:	461d      	mov	r5, r3
 8007ebc:	da07      	bge.n	8007ece <__swhatbuf_r+0x22>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	89b3      	ldrh	r3, [r6, #12]
 8007ec4:	061a      	lsls	r2, r3, #24
 8007ec6:	d410      	bmi.n	8007eea <__swhatbuf_r+0x3e>
 8007ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ecc:	e00e      	b.n	8007eec <__swhatbuf_r+0x40>
 8007ece:	466a      	mov	r2, sp
 8007ed0:	f000 f8a4 	bl	800801c <_fstat_r>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	dbf2      	blt.n	8007ebe <__swhatbuf_r+0x12>
 8007ed8:	9a01      	ldr	r2, [sp, #4]
 8007eda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ee2:	425a      	negs	r2, r3
 8007ee4:	415a      	adcs	r2, r3
 8007ee6:	602a      	str	r2, [r5, #0]
 8007ee8:	e7ee      	b.n	8007ec8 <__swhatbuf_r+0x1c>
 8007eea:	2340      	movs	r3, #64	; 0x40
 8007eec:	2000      	movs	r0, #0
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	b016      	add	sp, #88	; 0x58
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}

08007ef4 <__smakebuf_r>:
 8007ef4:	898b      	ldrh	r3, [r1, #12]
 8007ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ef8:	079d      	lsls	r5, r3, #30
 8007efa:	4606      	mov	r6, r0
 8007efc:	460c      	mov	r4, r1
 8007efe:	d507      	bpl.n	8007f10 <__smakebuf_r+0x1c>
 8007f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	6123      	str	r3, [r4, #16]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	6163      	str	r3, [r4, #20]
 8007f0c:	b002      	add	sp, #8
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	ab01      	add	r3, sp, #4
 8007f12:	466a      	mov	r2, sp
 8007f14:	f7ff ffca 	bl	8007eac <__swhatbuf_r>
 8007f18:	9900      	ldr	r1, [sp, #0]
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fac3 	bl	80074a8 <_malloc_r>
 8007f22:	b948      	cbnz	r0, 8007f38 <__smakebuf_r+0x44>
 8007f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f28:	059a      	lsls	r2, r3, #22
 8007f2a:	d4ef      	bmi.n	8007f0c <__smakebuf_r+0x18>
 8007f2c:	f023 0303 	bic.w	r3, r3, #3
 8007f30:	f043 0302 	orr.w	r3, r3, #2
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e7e3      	b.n	8007f00 <__smakebuf_r+0xc>
 8007f38:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <__smakebuf_r+0x7c>)
 8007f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	6020      	str	r0, [r4, #0]
 8007f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	6120      	str	r0, [r4, #16]
 8007f4a:	6163      	str	r3, [r4, #20]
 8007f4c:	9b01      	ldr	r3, [sp, #4]
 8007f4e:	b15b      	cbz	r3, 8007f68 <__smakebuf_r+0x74>
 8007f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f54:	4630      	mov	r0, r6
 8007f56:	f000 f873 	bl	8008040 <_isatty_r>
 8007f5a:	b128      	cbz	r0, 8007f68 <__smakebuf_r+0x74>
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	f023 0303 	bic.w	r3, r3, #3
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	431d      	orrs	r5, r3
 8007f6c:	81a5      	strh	r5, [r4, #12]
 8007f6e:	e7cd      	b.n	8007f0c <__smakebuf_r+0x18>
 8007f70:	080063d9 	.word	0x080063d9

08007f74 <memmove>:
 8007f74:	4288      	cmp	r0, r1
 8007f76:	b510      	push	{r4, lr}
 8007f78:	eb01 0302 	add.w	r3, r1, r2
 8007f7c:	d807      	bhi.n	8007f8e <memmove+0x1a>
 8007f7e:	1e42      	subs	r2, r0, #1
 8007f80:	4299      	cmp	r1, r3
 8007f82:	d00a      	beq.n	8007f9a <memmove+0x26>
 8007f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f88:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f8c:	e7f8      	b.n	8007f80 <memmove+0xc>
 8007f8e:	4283      	cmp	r3, r0
 8007f90:	d9f5      	bls.n	8007f7e <memmove+0xa>
 8007f92:	1881      	adds	r1, r0, r2
 8007f94:	1ad2      	subs	r2, r2, r3
 8007f96:	42d3      	cmn	r3, r2
 8007f98:	d100      	bne.n	8007f9c <memmove+0x28>
 8007f9a:	bd10      	pop	{r4, pc}
 8007f9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fa0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fa4:	e7f7      	b.n	8007f96 <memmove+0x22>

08007fa6 <__malloc_lock>:
 8007fa6:	4770      	bx	lr

08007fa8 <__malloc_unlock>:
 8007fa8:	4770      	bx	lr

08007faa <_realloc_r>:
 8007faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fac:	4607      	mov	r7, r0
 8007fae:	4614      	mov	r4, r2
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	b921      	cbnz	r1, 8007fbe <_realloc_r+0x14>
 8007fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fb8:	4611      	mov	r1, r2
 8007fba:	f7ff ba75 	b.w	80074a8 <_malloc_r>
 8007fbe:	b922      	cbnz	r2, 8007fca <_realloc_r+0x20>
 8007fc0:	f7ff fa26 	bl	8007410 <_free_r>
 8007fc4:	4625      	mov	r5, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fca:	f000 f849 	bl	8008060 <_malloc_usable_size_r>
 8007fce:	42a0      	cmp	r0, r4
 8007fd0:	d20f      	bcs.n	8007ff2 <_realloc_r+0x48>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f7ff fa67 	bl	80074a8 <_malloc_r>
 8007fda:	4605      	mov	r5, r0
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0f2      	beq.n	8007fc6 <_realloc_r+0x1c>
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	f7fe fe02 	bl	8006bec <memcpy>
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4638      	mov	r0, r7
 8007fec:	f7ff fa10 	bl	8007410 <_free_r>
 8007ff0:	e7e9      	b.n	8007fc6 <_realloc_r+0x1c>
 8007ff2:	4635      	mov	r5, r6
 8007ff4:	e7e7      	b.n	8007fc6 <_realloc_r+0x1c>
	...

08007ff8 <_read_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	4611      	mov	r1, r2
 8008000:	2200      	movs	r2, #0
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <_read_r+0x20>)
 8008004:	6022      	str	r2, [r4, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f7f9 f840 	bl	800108c <_read>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_read_r+0x1e>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	b103      	cbz	r3, 8008016 <_read_r+0x1e>
 8008014:	602b      	str	r3, [r5, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	20000314 	.word	0x20000314

0800801c <_fstat_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	2300      	movs	r3, #0
 8008020:	4c06      	ldr	r4, [pc, #24]	; (800803c <_fstat_r+0x20>)
 8008022:	4605      	mov	r5, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	f7f9 f873 	bl	8001114 <_fstat>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d102      	bne.n	8008038 <_fstat_r+0x1c>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	b103      	cbz	r3, 8008038 <_fstat_r+0x1c>
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	20000314 	.word	0x20000314

08008040 <_isatty_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	2300      	movs	r3, #0
 8008044:	4c05      	ldr	r4, [pc, #20]	; (800805c <_isatty_r+0x1c>)
 8008046:	4605      	mov	r5, r0
 8008048:	4608      	mov	r0, r1
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	f7f9 f871 	bl	8001132 <_isatty>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_isatty_r+0x1a>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	b103      	cbz	r3, 800805a <_isatty_r+0x1a>
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	20000314 	.word	0x20000314

08008060 <_malloc_usable_size_r>:
 8008060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008064:	1f18      	subs	r0, r3, #4
 8008066:	2b00      	cmp	r3, #0
 8008068:	bfbc      	itt	lt
 800806a:	580b      	ldrlt	r3, [r1, r0]
 800806c:	18c0      	addlt	r0, r0, r3
 800806e:	4770      	bx	lr

08008070 <_init>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	bf00      	nop
 8008074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008076:	bc08      	pop	{r3}
 8008078:	469e      	mov	lr, r3
 800807a:	4770      	bx	lr

0800807c <_fini>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	bf00      	nop
 8008080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008082:	bc08      	pop	{r3}
 8008084:	469e      	mov	lr, r3
 8008086:	4770      	bx	lr
