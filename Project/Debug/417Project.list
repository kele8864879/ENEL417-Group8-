
417Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08008100  08008100  00018100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008480  08008480  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008480  08008480  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008480  08008480  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001dc  08008664  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08008664  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da4e  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002707  00000000  00000000  0002dc53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  00030360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  00030fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195f6  00000000  00000000  00031ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c860  00000000  00000000  0004b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a8c4  00000000  00000000  00057926  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e21ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  000e2268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080080e8 	.word	0x080080e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080080e8 	.word	0x080080e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b7a:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b94:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000ba8:	f000 fc6e 	bl	8001488 <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 fa2e 	bl	8001012 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000bc8:	f000 fefc 	bl	80019c4 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 fa1e 	bl	8001012 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000be4:	f000 feee 	bl	80019c4 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 fa10 	bl	8001012 <Error_Handler>
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000204 	.word	0x20000204
 8000c00:	40012400 	.word	0x40012400

08000c04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <HAL_ADC_MspInit+0xcc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d151      	bne.n	8000cc8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_ADC_MspInit+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c54:	2303      	movs	r3, #3
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	481d      	ldr	r0, [pc, #116]	; (8000cd8 <HAL_ADC_MspInit+0xd4>)
 8000c64:	f001 fb9e 	bl	80023a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c92:	2220      	movs	r2, #32
 8000c94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c9e:	f001 f993 	bl	8001fc8 <HAL_DMA_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ca8:	f000 f9b3 	bl	8001012 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000cb0:	621a      	str	r2, [r3, #32]
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2012      	movs	r0, #18
 8000cbe:	f001 f94c 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cc2:	2012      	movs	r0, #18
 8000cc4:	f001 f965 	bl	8001f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40012400 	.word	0x40012400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	20000234 	.word	0x20000234
 8000ce0:	40020008 	.word	0x40020008

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_DMA_Init+0x38>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <MX_DMA_Init+0x38>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_DMA_Init+0x38>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	200b      	movs	r0, #11
 8000d08:	f001 f927 	bl	8001f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d0c:	200b      	movs	r0, #11
 8000d0e:	f001 f940 	bl	8001f92 <HAL_NVIC_EnableIRQ>

}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MX_GPIO_Init+0x70>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000

08000d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <MX_I2C1_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_I2C1_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dd2:	f001 fc41 	bl	8002658 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 f919 	bl	8001012 <Error_Handler>
  }

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000278 	.word	0x20000278
 8000de8:	40005400 	.word	0x40005400
 8000dec:	000186a0 	.word	0x000186a0

08000df0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_I2C_MspInit+0x70>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d123      	bne.n	8000e58 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e28:	23c0      	movs	r3, #192	; 0xc0
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e3c:	f001 fab2 	bl	80023a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4a:	61d3      	str	r3, [r2, #28]
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40005400 	.word	0x40005400
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010c00 	.word	0x40010c00

08000e6c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
 8000e74:	1d39      	adds	r1, r7, #4
 8000e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <__io_putchar+0x20>)
 8000e7e:	f002 fd48 	bl	8003912 <HAL_UART_Transmit>
    return ch;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200002d8 	.word	0x200002d8

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f000 fa73 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f85f 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f7ff ff3f 	bl	8000d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea2:	f7ff ff1f 	bl	8000ce4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ea6:	f7ff fe5f 	bl	8000b68 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eaa:	f7ff ff73 	bl	8000d94 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eae:	f000 f9cd 	bl	800124c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000eb2:	f002 fec9 	bl	8003c48 <lcd_init>
  HAL_ADC_Start_DMA(&hadc1, adc_buf, 2);	//&hadc1, saved in adc_buf, length 2
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4923      	ldr	r1, [pc, #140]	; (8000f48 <main+0xb8>)
 8000eba:	4824      	ldr	r0, [pc, #144]	; (8000f4c <main+0xbc>)
 8000ebc:	f000 fbbc 	bl	8001638 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //printf("HELLO WORLD count = %d \r\n");
	  PA0_Vlotage = adc_buf[0]*(3.3/4096);
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <main+0xb8>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa9d 	bl	8000404 <__aeabi_i2d>
 8000eca:	a31d      	add	r3, pc, #116	; (adr r3, 8000f40 <main+0xb0>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb02 	bl	80004d8 <__aeabi_dmul>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4621      	mov	r1, r4
 8000edc:	f7ff fdf4 	bl	8000ac8 <__aeabi_d2f>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <main+0xc0>)
 8000ee4:	601a      	str	r2, [r3, #0]
	  PA1_Vlotage = adc_buf[1]*(3.3/4096);
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <main+0xb8>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa8a 	bl	8000404 <__aeabi_i2d>
 8000ef0:	a313      	add	r3, pc, #76	; (adr r3, 8000f40 <main+0xb0>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff faef 	bl	80004d8 <__aeabi_dmul>
 8000efa:	4603      	mov	r3, r0
 8000efc:	460c      	mov	r4, r1
 8000efe:	4618      	mov	r0, r3
 8000f00:	4621      	mov	r1, r4
 8000f02:	f7ff fde1 	bl	8000ac8 <__aeabi_d2f>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <main+0xc4>)
 8000f0a:	601a      	str	r2, [r3, #0]
	  printf("\n PA0 Voltage is %.2f v\t\r\n PA1 Voltage is %.2f v\r\n\t",PA0_Vlotage,PA1_Vlotage);
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <main+0xc0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa89 	bl	8000428 <__aeabi_f2d>
 8000f16:	4605      	mov	r5, r0
 8000f18:	460e      	mov	r6, r1
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <main+0xc4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa82 	bl	8000428 <__aeabi_f2d>
 8000f24:	4603      	mov	r3, r0
 8000f26:	460c      	mov	r4, r1
 8000f28:	e9cd 3400 	strd	r3, r4, [sp]
 8000f2c:	462a      	mov	r2, r5
 8000f2e:	4633      	mov	r3, r6
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <main+0xc8>)
 8000f32:	f003 fd29 	bl	8004988 <iprintf>


	  	HAL_Delay(1000);
 8000f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3a:	f000 fa83 	bl	8001444 <HAL_Delay>
	  PA0_Vlotage = adc_buf[0]*(3.3/4096);
 8000f3e:	e7bf      	b.n	8000ec0 <main+0x30>
 8000f40:	66666666 	.word	0x66666666
 8000f44:	3f4a6666 	.word	0x3f4a6666
 8000f48:	200002d0 	.word	0x200002d0
 8000f4c:	20000204 	.word	0x20000204
 8000f50:	200002d4 	.word	0x200002d4
 8000f54:	200002cc 	.word	0x200002cc
 8000f58:	08008100 	.word	0x08008100

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fed4 	bl	8003d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 ff8e 	bl	8002ed4 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fbe:	f000 f828 	bl	8001012 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 f9f8 	bl	80033d4 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fea:	f000 f812 	bl	8001012 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fb86 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001006:	f000 f804 	bl	8001012 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	; 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
	...

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_MspInit+0x5c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x5c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_MspInit+0x60>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_MspInit+0x60>)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <HardFault_Handler+0x4>

08001096 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <BusFault_Handler+0x4>

080010a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f99c 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA1_Channel1_IRQHandler+0x10>)
 80010de:	f001 f82d 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000234 	.word	0x20000234

080010ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <ADC1_2_IRQHandler+0x10>)
 80010f2:	f000 fb7f 	bl	80017f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000204 	.word	0x20000204

08001100 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
	}

return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe89 	bl	8000e6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
	}
	return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001198:	605a      	str	r2, [r3, #4]
	return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <_isatty>:

int _isatty(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
	return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f002 fd5e 	bl	8003cc4 <__errno>
 8001208:	4602      	mov	r2, r0
 800120a:	230c      	movs	r3, #12
 800120c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20005000 	.word	0x20005000
 8001234:	00000400 	.word	0x00000400
 8001238:	200001f8 	.word	0x200001f8
 800123c:	20000320 	.word	0x20000320

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_USART2_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001284:	f002 faf8 	bl	8003878 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f7ff fec0 	bl	8001012 <Error_Handler>
  }

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002d8 	.word	0x200002d8
 800129c:	40004400 	.word	0x40004400

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d12f      	bne.n	8001320 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_UART_MspInit+0x8c>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_UART_MspInit+0x8c>)
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0x8c>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_UART_MspInit+0x8c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f0:	2304      	movs	r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_UART_MspInit+0x90>)
 8001304:	f001 f84e 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001308:	2308      	movs	r3, #8
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_UART_MspInit+0x90>)
 800131c:	f001 f842 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40004400 	.word	0x40004400
 800132c:	40021000 	.word	0x40021000
 8001330:	40010800 	.word	0x40010800

08001334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001334:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001336:	e003      	b.n	8001340 <LoopCopyDataInit>

08001338 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800133a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800133c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800133e:	3104      	adds	r1, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001344:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001346:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001348:	d3f6      	bcc.n	8001338 <CopyDataInit>
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800134c:	e002      	b.n	8001354 <LoopFillZerobss>

0800134e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001350:	f842 3b04 	str.w	r3, [r2], #4

08001354 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001356:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001358:	d3f9      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800135a:	f7ff ff71 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 fcb7 	bl	8003cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001362:	f7ff fd95 	bl	8000e90 <main>
  bx lr
 8001366:	4770      	bx	lr
  ldr r3, =_sidata
 8001368:	08008488 	.word	0x08008488
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001370:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001374:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001378:	20000320 	.word	0x20000320

0800137c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800137c:	e7fe      	b.n	800137c <CAN1_RX1_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x28>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x28>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 fdd7 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fe40 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fdef 	bl	8001fae <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 fdb7 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x1c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_IncTick+0x20>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a03      	ldr	r2, [pc, #12]	; (800142c <HAL_IncTick+0x20>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000008 	.word	0x20000008
 800142c:	20000318 	.word	0x20000318

08001430 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <HAL_GetTick+0x10>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000318 	.word	0x20000318

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fff0 	bl	8001430 <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_Delay+0x40>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffe0 	bl	8001430 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000008 	.word	0x20000008

08001488 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0be      	b.n	8001628 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fb9c 	bl	8000c04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fbc3 	bl	8001c58 <ADC_ConversionStop_Disable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 8099 	bne.w	8001616 <HAL_ADC_Init+0x18e>
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 8095 	bne.w	8001616 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f4:	f023 0302 	bic.w	r3, r3, #2
 80014f8:	f043 0202 	orr.w	r2, r3, #2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001508:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7b1b      	ldrb	r3, [r3, #12]
 800150e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001510:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4313      	orrs	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001520:	d003      	beq.n	800152a <HAL_ADC_Init+0xa2>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <HAL_ADC_Init+0xa8>
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	e000      	b.n	8001532 <HAL_ADC_Init+0xaa>
 8001530:	2300      	movs	r3, #0
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7d1b      	ldrb	r3, [r3, #20]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d119      	bne.n	8001574 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7b1b      	ldrb	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	3b01      	subs	r3, #1
 800154e:	035a      	lsls	r2, r3, #13
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	e00b      	b.n	8001574 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f043 0220 	orr.w	r2, r3, #32
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_ADC_Init+0x1a8>)
 8001590:	4013      	ands	r3, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	430b      	orrs	r3, r1
 800159a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_Init+0x126>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d104      	bne.n	80015b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	051b      	lsls	r3, r3, #20
 80015b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_ADC_Init+0x1ac>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d10b      	bne.n	80015f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f2:	e018      	b.n	8001626 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f023 0312 	bic.w	r3, r3, #18
 80015fc:	f043 0210 	orr.w	r2, r3, #16
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001614:	e007      	b.n	8001626 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	f043 0210 	orr.w	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001626:	7dfb      	ldrb	r3, [r7, #23]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	ffe1f7fd 	.word	0xffe1f7fd
 8001634:	ff1f0efe 	.word	0xff1f0efe

08001638 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a64      	ldr	r2, [pc, #400]	; (80017e0 <HAL_ADC_Start_DMA+0x1a8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_ADC_Start_DMA+0x24>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a63      	ldr	r2, [pc, #396]	; (80017e4 <HAL_ADC_Start_DMA+0x1ac>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d106      	bne.n	800166a <HAL_ADC_Start_DMA+0x32>
 800165c:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_ADC_Start_DMA+0x1a8>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001664:	2b00      	cmp	r3, #0
 8001666:	f040 80b3 	bne.w	80017d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_Start_DMA+0x40>
 8001674:	2302      	movs	r3, #2
 8001676:	e0ae      	b.n	80017d6 <HAL_ADC_Start_DMA+0x19e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fa97 	bl	8001bb4 <ADC_Enable>
 8001686:	4603      	mov	r3, r0
 8001688:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 809a 	bne.w	80017c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_ADC_Start_DMA+0x1ac>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_Start_DMA+0x84>
 80016b0:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <HAL_ADC_Start_DMA+0x1a8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d115      	bne.n	80016e8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d026      	beq.n	8001724 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016e6:	e01d      	b.n	8001724 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <HAL_ADC_Start_DMA+0x1a8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_ADC_Start_DMA+0xd0>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <HAL_ADC_Start_DMA+0x1ac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10d      	bne.n	8001724 <HAL_ADC_Start_DMA+0xec>
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_ADC_Start_DMA+0x1a8>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800171c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f023 0206 	bic.w	r2, r3, #6
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
 800173c:	e002      	b.n	8001744 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_ADC_Start_DMA+0x1b0>)
 8001752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_ADC_Start_DMA+0x1b4>)
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_ADC_Start_DMA+0x1b8>)
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0202 	mvn.w	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800177c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a18      	ldr	r0, [r3, #32]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	334c      	adds	r3, #76	; 0x4c
 8001788:	4619      	mov	r1, r3
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f000 fc75 	bl	800207c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800179c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017a0:	d108      	bne.n	80017b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80017b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017b2:	e00f      	b.n	80017d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017c4:	e006      	b.n	80017d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017ce:	e001      	b.n	80017d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40012400 	.word	0x40012400
 80017e4:	40012800 	.word	0x40012800
 80017e8:	08001ccd 	.word	0x08001ccd
 80017ec:	08001d49 	.word	0x08001d49
 80017f0:	08001d65 	.word	0x08001d65

080017f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b20      	cmp	r3, #32
 8001808:	d140      	bne.n	800188c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b02      	cmp	r3, #2
 8001816:	d139      	bne.n	800188c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800183a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800183e:	d11d      	bne.n	800187c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001844:	2b00      	cmp	r3, #0
 8001846:	d119      	bne.n	800187c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0220 	bic.w	r2, r2, #32
 8001856:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f87c 	bl	800197a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f06f 0212 	mvn.w	r2, #18
 800188a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b80      	cmp	r3, #128	; 0x80
 8001898:	d14f      	bne.n	800193a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d148      	bne.n	800193a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80018ca:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80018ce:	d012      	beq.n	80018f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d125      	bne.n	800192a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018ec:	d11d      	bne.n	800192a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d119      	bne.n	800192a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001904:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fa34 	bl	8001d98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 020c 	mvn.w	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d114      	bne.n	8001972 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10d      	bne.n	8001972 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f81b 	bl	800199e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0201 	mvn.w	r2, #1
 8001970:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x20>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0dc      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1da>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d81c      	bhi.n	8001a2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	3b05      	subs	r3, #5
 8001a06:	221f      	movs	r2, #31
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4019      	ands	r1, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b05      	subs	r3, #5
 8001a20:	fa00 f203 	lsl.w	r2, r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2c:	e03c      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d81c      	bhi.n	8001a70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b23      	subs	r3, #35	; 0x23
 8001a48:	221f      	movs	r2, #31
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4019      	ands	r1, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b23      	subs	r3, #35	; 0x23
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	e01b      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b41      	subs	r3, #65	; 0x41
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4019      	ands	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b41      	subs	r3, #65	; 0x41
 8001a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	d91c      	bls.n	8001aea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68d9      	ldr	r1, [r3, #12]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6898      	ldr	r0, [r3, #8]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b1e      	subs	r3, #30
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	e019      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6919      	ldr	r1, [r3, #16]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	2207      	movs	r2, #7
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4019      	ands	r1, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6898      	ldr	r0, [r3, #8]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d003      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b2a:	2b11      	cmp	r3, #17
 8001b2c:	d132      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d125      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d126      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b54:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d11a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_ADC_ConfigChannel+0x1e8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9a      	lsrs	r2, r3, #18
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x1b2>
 8001b82:	e007      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40012400 	.word	0x40012400
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d039      	beq.n	8001c46 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <ADC_Enable+0x9c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <ADC_Enable+0xa0>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	0c9b      	lsrs	r3, r3, #18
 8001bee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bf0:	e002      	b.n	8001bf8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bfe:	f7ff fc17 	bl	8001430 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c04:	e018      	b.n	8001c38 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c06:	f7ff fc13 	bl	8001430 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d911      	bls.n	8001c38 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f043 0210 	orr.w	r2, r3, #16
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e007      	b.n	8001c48 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d1df      	bne.n	8001c06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000000 	.word	0x20000000
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d127      	bne.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c82:	f7ff fbd5 	bl	8001430 <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c88:	e014      	b.n	8001cb4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c8a:	f7ff fbd1 	bl	8001430 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d90d      	bls.n	8001cb4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f043 0210 	orr.w	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e007      	b.n	8001cc4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d0e3      	beq.n	8001c8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d127      	bne.n	8001d36 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cfc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d00:	d115      	bne.n	8001d2e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d111      	bne.n	8001d2e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff fe23 	bl	800197a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d34:	e004      	b.n	8001d40 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fe18 	bl	800198c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fe10 	bl	80019b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4906      	ldr	r1, [pc, #24]	; (8001e44 <__NVIC_EnableIRQ+0x34>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff90 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff2d 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff42 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff90 	bl	8001e9c <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5f 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff35 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa2 	bl	8001f00 <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e043      	b.n	8002066 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_DMA_Init+0xa8>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_DMA_Init+0xac>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <HAL_DMA_Init+0xb0>)
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	bffdfff8 	.word	0xbffdfff8
 8002074:	cccccccd 	.word	0xcccccccd
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_DMA_Start_IT+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e04a      	b.n	8002132 <HAL_DMA_Start_IT+0xb6>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d13a      	bne.n	8002124 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2202      	movs	r2, #2
 80020b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f938 	bl	8002348 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 020e 	orr.w	r2, r2, #14
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e00f      	b.n	8002112 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0204 	bic.w	r2, r2, #4
 8002100:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 020a 	orr.w	r2, r2, #10
 8002110:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e005      	b.n	8002130 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800212c:	2302      	movs	r3, #2
 800212e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002130:	7dfb      	ldrb	r3, [r7, #23]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2204      	movs	r2, #4
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d04f      	beq.n	8002204 <HAL_DMA_IRQHandler+0xc8>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04a      	beq.n	8002204 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_DMA_IRQHandler+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d029      	beq.n	80021ea <HAL_DMA_IRQHandler+0xae>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_DMA_IRQHandler+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xaa>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <HAL_DMA_IRQHandler+0x1f8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01a      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xa4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a62      	ldr	r2, [pc, #392]	; (8002338 <HAL_DMA_IRQHandler+0x1fc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMA_IRQHandler+0x9e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_DMA_IRQHandler+0x200>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x98>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <HAL_DMA_IRQHandler+0x204>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <HAL_DMA_IRQHandler+0x92>
 80021c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021cc:	e00e      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021d2:	e00b      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021d8:	e008      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021de:	e005      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e4:	e002      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a55      	ldr	r2, [pc, #340]	; (8002344 <HAL_DMA_IRQHandler+0x208>)
 80021ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8094 	beq.w	8002322 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002202:	e08e      	b.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2202      	movs	r2, #2
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d056      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x186>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d051      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020a 	bic.w	r2, r2, #10
 800223a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_DMA_IRQHandler+0x1f0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d029      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x166>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a37      	ldr	r2, [pc, #220]	; (8002330 <HAL_DMA_IRQHandler+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_IRQHandler+0x162>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a35      	ldr	r2, [pc, #212]	; (8002334 <HAL_DMA_IRQHandler+0x1f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01a      	beq.n	8002298 <HAL_DMA_IRQHandler+0x15c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_DMA_IRQHandler+0x1fc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d012      	beq.n	8002292 <HAL_DMA_IRQHandler+0x156>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_DMA_IRQHandler+0x200>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00a      	beq.n	800228c <HAL_DMA_IRQHandler+0x150>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_DMA_IRQHandler+0x204>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_DMA_IRQHandler+0x14a>
 8002280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002284:	e00e      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	e00b      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	e008      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	e005      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229c:	e002      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 800229e:	2320      	movs	r3, #32
 80022a0:	e000      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 80022a2:	2302      	movs	r3, #2
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_DMA_IRQHandler+0x208>)
 80022a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d034      	beq.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022c0:	e02f      	b.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 020e 	bic.w	r2, r2, #14
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
    }
  }
  return;
 8002322:	bf00      	nop
 8002324:	bf00      	nop
}
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40020008 	.word	0x40020008
 8002330:	4002001c 	.word	0x4002001c
 8002334:	40020030 	.word	0x40020030
 8002338:	40020044 	.word	0x40020044
 800233c:	40020058 	.word	0x40020058
 8002340:	4002006c 	.word	0x4002006c
 8002344:	40020000 	.word	0x40020000

08002348 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d108      	bne.n	8002388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002386:	e007      	b.n	8002398 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e127      	b.n	8002608 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b8:	2201      	movs	r2, #1
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8116 	bne.w	8002602 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d034      	beq.n	8002448 <HAL_GPIO_Init+0xa4>
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d80d      	bhi.n	80023fe <HAL_GPIO_Init+0x5a>
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d02b      	beq.n	800243e <HAL_GPIO_Init+0x9a>
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d804      	bhi.n	80023f4 <HAL_GPIO_Init+0x50>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d031      	beq.n	8002452 <HAL_GPIO_Init+0xae>
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d01c      	beq.n	800242c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023f2:	e048      	b.n	8002486 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d043      	beq.n	8002480 <HAL_GPIO_Init+0xdc>
 80023f8:	2b11      	cmp	r3, #17
 80023fa:	d01b      	beq.n	8002434 <HAL_GPIO_Init+0x90>
          break;
 80023fc:	e043      	b.n	8002486 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023fe:	4a89      	ldr	r2, [pc, #548]	; (8002624 <HAL_GPIO_Init+0x280>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d026      	beq.n	8002452 <HAL_GPIO_Init+0xae>
 8002404:	4a87      	ldr	r2, [pc, #540]	; (8002624 <HAL_GPIO_Init+0x280>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d806      	bhi.n	8002418 <HAL_GPIO_Init+0x74>
 800240a:	4a87      	ldr	r2, [pc, #540]	; (8002628 <HAL_GPIO_Init+0x284>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d020      	beq.n	8002452 <HAL_GPIO_Init+0xae>
 8002410:	4a86      	ldr	r2, [pc, #536]	; (800262c <HAL_GPIO_Init+0x288>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01d      	beq.n	8002452 <HAL_GPIO_Init+0xae>
          break;
 8002416:	e036      	b.n	8002486 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002418:	4a85      	ldr	r2, [pc, #532]	; (8002630 <HAL_GPIO_Init+0x28c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0xae>
 800241e:	4a85      	ldr	r2, [pc, #532]	; (8002634 <HAL_GPIO_Init+0x290>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d016      	beq.n	8002452 <HAL_GPIO_Init+0xae>
 8002424:	4a84      	ldr	r2, [pc, #528]	; (8002638 <HAL_GPIO_Init+0x294>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0xae>
          break;
 800242a:	e02c      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e028      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	3304      	adds	r3, #4
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e023      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	3308      	adds	r3, #8
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e01e      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	330c      	adds	r3, #12
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e019      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800245a:	2304      	movs	r3, #4
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e012      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002468:	2308      	movs	r3, #8
 800246a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	611a      	str	r2, [r3, #16]
          break;
 8002472:	e008      	b.n	8002486 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002474:	2308      	movs	r3, #8
 8002476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	615a      	str	r2, [r3, #20]
          break;
 800247e:	e002      	b.n	8002486 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2bff      	cmp	r3, #255	; 0xff
 800248a:	d801      	bhi.n	8002490 <HAL_GPIO_Init+0xec>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	e001      	b.n	8002494 <HAL_GPIO_Init+0xf0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2bff      	cmp	r3, #255	; 0xff
 800249a:	d802      	bhi.n	80024a2 <HAL_GPIO_Init+0xfe>
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x104>
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3b08      	subs	r3, #8
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	210f      	movs	r1, #15
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	401a      	ands	r2, r3
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8096 	beq.w	8002602 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024d6:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_GPIO_Init+0x298>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_GPIO_Init+0x298>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6193      	str	r3, [r2, #24]
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_GPIO_Init+0x298>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024ee:	4a54      	ldr	r2, [pc, #336]	; (8002640 <HAL_GPIO_Init+0x29c>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x19e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4a      	ldr	r2, [pc, #296]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x19a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a49      	ldr	r2, [pc, #292]	; (800264c <HAL_GPIO_Init+0x2a8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x196>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a48      	ldr	r2, [pc, #288]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x192>
 8002532:	2303      	movs	r3, #3
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x1a0>
 8002536:	2304      	movs	r3, #4
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x1a0>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x1a0>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x1a0>
 8002542:	2300      	movs	r3, #0
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002554:	493a      	ldr	r1, [pc, #232]	; (8002640 <HAL_GPIO_Init+0x29c>)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4938      	ldr	r1, [pc, #224]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
 800257a:	e006      	b.n	800258a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	43db      	mvns	r3, r3
 8002584:	4933      	ldr	r1, [pc, #204]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002586:	4013      	ands	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002596:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	492e      	ldr	r1, [pc, #184]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4929      	ldr	r1, [pc, #164]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4924      	ldr	r1, [pc, #144]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	491f      	ldr	r1, [pc, #124]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	491a      	ldr	r1, [pc, #104]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4915      	ldr	r1, [pc, #84]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	3301      	adds	r3, #1
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	f47f aed0 	bne.w	80023b8 <HAL_GPIO_Init+0x14>
  }
}
 8002618:	bf00      	nop
 800261a:	372c      	adds	r7, #44	; 0x2c
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	10210000 	.word	0x10210000
 8002628:	10110000 	.word	0x10110000
 800262c:	10120000 	.word	0x10120000
 8002630:	10310000 	.word	0x10310000
 8002634:	10320000 	.word	0x10320000
 8002638:	10220000 	.word	0x10220000
 800263c:	40021000 	.word	0x40021000
 8002640:	40010000 	.word	0x40010000
 8002644:	40010800 	.word	0x40010800
 8002648:	40010c00 	.word	0x40010c00
 800264c:	40011000 	.word	0x40011000
 8002650:	40011400 	.word	0x40011400
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e11f      	b.n	80028aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fbb6 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026bc:	f000 ffe0 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 80026c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a7b      	ldr	r2, [pc, #492]	; (80028b4 <HAL_I2C_Init+0x25c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d807      	bhi.n	80026dc <HAL_I2C_Init+0x84>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_I2C_Init+0x260>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	bf94      	ite	ls
 80026d4:	2301      	movls	r3, #1
 80026d6:	2300      	movhi	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e006      	b.n	80026ea <HAL_I2C_Init+0x92>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_I2C_Init+0x264>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	bf94      	ite	ls
 80026e4:	2301      	movls	r3, #1
 80026e6:	2300      	movhi	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0db      	b.n	80028aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a72      	ldr	r2, [pc, #456]	; (80028c0 <HAL_I2C_Init+0x268>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a64      	ldr	r2, [pc, #400]	; (80028b4 <HAL_I2C_Init+0x25c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d802      	bhi.n	800272c <HAL_I2C_Init+0xd4>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3301      	adds	r3, #1
 800272a:	e009      	b.n	8002740 <HAL_I2C_Init+0xe8>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_I2C_Init+0x26c>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	3301      	adds	r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	430b      	orrs	r3, r1
 8002746:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002752:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4956      	ldr	r1, [pc, #344]	; (80028b4 <HAL_I2C_Init+0x25c>)
 800275c:	428b      	cmp	r3, r1
 800275e:	d80d      	bhi.n	800277c <HAL_I2C_Init+0x124>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e59      	subs	r1, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fbb1 f3f3 	udiv	r3, r1, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b04      	cmp	r3, #4
 8002776:	bf38      	it	cc
 8002778:	2304      	movcc	r3, #4
 800277a:	e04f      	b.n	800281c <HAL_I2C_Init+0x1c4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_I2C_Init+0x150>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e012      	b.n	80027ce <HAL_I2C_Init+0x176>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x17e>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_I2C_Init+0x1c4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_I2C_Init+0x1a4>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e58      	subs	r0, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Init+0x1c4>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6809      	ldr	r1, [r1, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800284a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6911      	ldr	r1, [r2, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	000186a0 	.word	0x000186a0
 80028b8:	001e847f 	.word	0x001e847f
 80028bc:	003d08ff 	.word	0x003d08ff
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7fe fda8 	bl	8001430 <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 80e0 	bne.w	8002ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	4970      	ldr	r1, [pc, #448]	; (8002abc <HAL_I2C_Master_Transmit+0x1f4>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f964 	bl	8002bc8 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e0d3      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x50>
 8002914:	2302      	movs	r3, #2
 8002916:	e0cc      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	; 0x21
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a50      	ldr	r2, [pc, #320]	; (8002ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f89c 	bl	8002ac4 <I2C_MasterRequestWrite>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e08d      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029ac:	e066      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f9de 	bl	8002d74 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d107      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6a39      	ldr	r1, [r7, #32]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f9ce 	bl	8002df6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d107      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e01a      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d194      	bne.n	80029ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00100002 	.word	0x00100002
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d006      	beq.n	8002aee <I2C_MasterRequestWrite+0x2a>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d003      	beq.n	8002aee <I2C_MasterRequestWrite+0x2a>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e00b      	b.n	8002b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	2b12      	cmp	r3, #18
 8002b06:	d107      	bne.n	8002b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f84f 	bl	8002bc8 <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3e:	d103      	bne.n	8002b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e035      	b.n	8002bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b54:	d108      	bne.n	8002b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e01b      	b.n	8002ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	11db      	asrs	r3, r3, #7
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 0306 	and.w	r3, r3, #6
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f063 030f 	orn	r3, r3, #15
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <I2C_MasterRequestWrite+0xfc>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f875 	bl	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e010      	b.n	8002bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <I2C_MasterRequestWrite+0x100>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f865 	bl	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	00010008 	.word	0x00010008
 8002bc4:	00010002 	.word	0x00010002

08002bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd8:	e025      	b.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d021      	beq.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7fe fc25 	bl	8001430 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d302      	bcc.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e023      	b.n	8002c6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10d      	bne.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	e00c      	b.n	8002c66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d0b6      	beq.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c84:	e051      	b.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c94:	d123      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e046      	b.n	8002d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d021      	beq.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fba3 	bl	8001430 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e020      	b.n	8002d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10c      	bne.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e00b      	b.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	43da      	mvns	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d18d      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d80:	e02d      	b.n	8002dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f878 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e02d      	b.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d021      	beq.n	8002dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe fb49 	bl	8001430 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e007      	b.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d1ca      	bne.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e02:	e02d      	b.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f837 	bl	8002e78 <I2C_IsAcknowledgeFailed>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e02d      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d021      	beq.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7fe fb08 	bl	8001430 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e007      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d1ca      	bne.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d11b      	bne.n	8002ec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e26c      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef4:	4b92      	ldr	r3, [pc, #584]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d112      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5e>
 8002f0c:	4b8c      	ldr	r3, [pc, #560]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1a:	4b89      	ldr	r3, [pc, #548]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d06c      	beq.n	8003000 <HAL_RCC_OscConfig+0x12c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d168      	bne.n	8003000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e246      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x76>
 8002f3c:	4b80      	ldr	r3, [pc, #512]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7f      	ldr	r2, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	e02e      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x98>
 8002f52:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7a      	ldr	r2, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b78      	ldr	r3, [pc, #480]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a77      	ldr	r2, [pc, #476]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xbc>
 8002f76:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a71      	ldr	r2, [pc, #452]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b68      	ldr	r3, [pc, #416]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a67      	ldr	r2, [pc, #412]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fa3e 	bl	8001430 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fa3a 	bl	8001430 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1fa      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b5d      	ldr	r3, [pc, #372]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xe4>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fa2a 	bl	8001430 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fa26 	bl	8001430 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1e6      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x10c>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d063      	beq.n	80030d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300e:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x18c>
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x176>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1ba      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4939      	ldr	r1, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe f9df 	bl	8001430 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003076:	f7fe f9db 	bl	8001430 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e19b      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4927      	ldr	r1, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe f9be 	bl	8001430 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe f9ba 	bl	8001430 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e17a      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03a      	beq.n	8003158 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d019      	beq.n	800311e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7fe f99e 	bl	8001430 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fe f99a 	bl	8001430 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e15a      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003116:	2001      	movs	r0, #1
 8003118:	f000 fada 	bl	80036d0 <RCC_Delay>
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003124:	f7fe f984 	bl	8001430 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312a:	e00f      	b.n	800314c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe f980 	bl	8001430 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d908      	bls.n	800314c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e140      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	42420000 	.word	0x42420000
 8003148:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	4b9e      	ldr	r3, [pc, #632]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e9      	bne.n	800312c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a6 	beq.w	80032b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316a:	4b97      	ldr	r3, [pc, #604]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a93      	ldr	r2, [pc, #588]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003180:	61d3      	str	r3, [r2, #28]
 8003182:	4b91      	ldr	r3, [pc, #580]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b8e      	ldr	r3, [pc, #568]	; (80033cc <HAL_RCC_OscConfig+0x4f8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a8a      	ldr	r2, [pc, #552]	; (80033cc <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fe f941 	bl	8001430 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fe f93d 	bl	8001430 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0fd      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b81      	ldr	r3, [pc, #516]	; (80033cc <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a7a      	ldr	r2, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	e02d      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x334>
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6213      	str	r3, [r2, #32]
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a72      	ldr	r2, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	e01c      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x356>
 8003210:	4b6d      	ldr	r3, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a6c      	ldr	r2, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a66      	ldr	r2, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a63      	ldr	r2, [pc, #396]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe f8f1 	bl	8001430 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe f8ed 	bl	8001430 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0ab      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	4b57      	ldr	r3, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ee      	beq.n	8003252 <HAL_RCC_OscConfig+0x37e>
 8003274:	e014      	b.n	80032a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe f8db 	bl	8001430 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe f8d7 	bl	8001430 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e095      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a47      	ldr	r2, [pc, #284]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8081 	beq.w	80033be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032bc:	4b42      	ldr	r3, [pc, #264]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d061      	beq.n	800338c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d146      	bne.n	800335e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x4fc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe f8ab 	bl	8001430 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe f8a7 	bl	8001430 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e067      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f0:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d108      	bne.n	8003318 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	492d      	ldr	r1, [pc, #180]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a19      	ldr	r1, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	430b      	orrs	r3, r1
 800332a:	4927      	ldr	r1, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_RCC_OscConfig+0x4fc>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe f87b 	bl	8001430 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe f877 	bl	8001430 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e037      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x46a>
 800335c:	e02f      	b.n	80033be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_RCC_OscConfig+0x4fc>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe f864 	bl	8001430 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe f860 	bl	8001430 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e020      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x498>
 800338a:	e018      	b.n	80033be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e013      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42420060 	.word	0x42420060

080033d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d0      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4965      	ldr	r1, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d040      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e073      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06b      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4936      	ldr	r1, [pc, #216]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fd ffb4 	bl	8001430 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fd ffb0 	bl	8001430 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e053      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d210      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4922      	ldr	r1, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4601      	mov	r1, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	5cd3      	ldrb	r3, [r2, r3]
 8003576:	fa21 f303 	lsr.w	r3, r1, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1cc>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd ff12 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
 800359c:	08008148 	.word	0x08008148
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000004 	.word	0x20000004

080035a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	b490      	push	{r4, r7}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035b0:	1d3c      	adds	r4, r7, #4
 80035b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x40>
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x46>
 80035e6:	e02d      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ea:	623b      	str	r3, [r7, #32]
      break;
 80035ec:	e02d      	b.n	800364a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	0c9b      	lsrs	r3, r3, #18
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035fa:	4413      	add	r3, r2
 80035fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003600:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0c5b      	lsrs	r3, r3, #17
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800361a:	4413      	add	r3, r2
 800361c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003620:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003626:	fb02 f203 	mul.w	r2, r2, r3
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e004      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	623b      	str	r3, [r7, #32]
      break;
 8003642:	e002      	b.n	800364a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003646:	623b      	str	r3, [r7, #32]
      break;
 8003648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364a:	6a3b      	ldr	r3, [r7, #32]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bc90      	pop	{r4, r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	08008134 	.word	0x08008134
 800365c:	08008144 	.word	0x08008144
 8003660:	40021000 	.word	0x40021000
 8003664:	007a1200 	.word	0x007a1200
 8003668:	003d0900 	.word	0x003d0900

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b02      	ldr	r3, [pc, #8]	; (800367c <HAL_RCC_GetHCLKFreq+0x10>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003684:	f7ff fff2 	bl	800366c <HAL_RCC_GetHCLKFreq>
 8003688:	4601      	mov	r1, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08008158 	.word	0x08008158

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036ac:	f7ff ffde 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b0:	4601      	mov	r1, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	0adb      	lsrs	r3, r3, #11
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4a03      	ldr	r2, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036be:	5cd3      	ldrb	r3, [r2, r3]
 80036c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08008158 	.word	0x08008158

080036d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <RCC_Delay+0x34>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <RCC_Delay+0x38>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0a5b      	lsrs	r3, r3, #9
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036ec:	bf00      	nop
  }
  while (Delay --);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	60fa      	str	r2, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <RCC_Delay+0x1c>
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000000 	.word	0x20000000
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d07d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372c:	4b4f      	ldr	r3, [pc, #316]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a4b      	ldr	r2, [pc, #300]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
 8003744:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a42      	ldr	r2, [pc, #264]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376c:	f7fd fe60 	bl	8001430 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd fe5c 	bl	8001430 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e06d      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d027      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037c6:	4a29      	ldr	r2, [pc, #164]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d014      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fd fe2b 	bl	8001430 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd fe27 	bl	8001430 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e036      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4917      	ldr	r1, [pc, #92]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	4313      	orrs	r3, r2
 8003810:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4a13      	ldr	r2, [pc, #76]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	490b      	ldr	r1, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4904      	ldr	r1, [pc, #16]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420440 	.word	0x42420440

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e03f      	b.n	800390a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fcfe 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f905 	bl	8003acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d17c      	bne.n	8003a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_Transmit+0x2c>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e075      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Transmit+0x3e>
 800394c:	2302      	movs	r3, #2
 800394e:	e06e      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003966:	f7fd fd63 	bl	8001430 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d108      	bne.n	8003994 <HAL_UART_Transmit+0x82>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e003      	b.n	800399c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039a4:	e02a      	b.n	80039fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f840 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e036      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3302      	adds	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e007      	b.n	80039ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1cf      	bne.n	80039a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f810 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e006      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	e02c      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d028      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a56:	f7fd fceb 	bl	8001430 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d21d      	bcs.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0c3      	beq.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b06:	f023 030c 	bic.w	r3, r3, #12
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <UART_SetConfig+0x114>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d103      	bne.n	8003b3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7ff fdb8 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	e002      	b.n	8003b42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7ff fda0 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <UART_SetConfig+0x118>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	0119      	lsls	r1, r3, #4
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <UART_SetConfig+0x118>)
 8003b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2064      	movs	r0, #100	; 0x64
 8003b82:	fb00 f303 	mul.w	r3, r0, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	3332      	adds	r3, #50	; 0x32
 8003b8c:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <UART_SetConfig+0x118>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b98:	4419      	add	r1, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <UART_SetConfig+0x118>)
 8003bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2064      	movs	r0, #100	; 0x64
 8003bba:	fb00 f303 	mul.w	r3, r0, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	3332      	adds	r3, #50	; 0x32
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <UART_SetConfig+0x118>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40013800 	.word	0x40013800
 8003be4:	51eb851f 	.word	0x51eb851f

08003be8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	f023 030f 	bic.w	r3, r3, #15
 8003bf8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	f043 030c 	orr.w	r3, r3, #12
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	f043 0308 	orr.w	r3, r3, #8
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	f043 030c 	orr.w	r3, r3, #12
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003c1e:	7bbb      	ldrb	r3, [r7, #14]
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c28:	f107 0208 	add.w	r2, r7, #8
 8003c2c:	2364      	movs	r3, #100	; 0x64
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2304      	movs	r3, #4
 8003c32:	214e      	movs	r1, #78	; 0x4e
 8003c34:	4803      	ldr	r0, [pc, #12]	; (8003c44 <lcd_send_cmd+0x5c>)
 8003c36:	f7fe fe47 	bl	80028c8 <HAL_I2C_Master_Transmit>
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000278 	.word	0x20000278

08003c48 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003c4c:	2032      	movs	r0, #50	; 0x32
 8003c4e:	f7fd fbf9 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003c52:	2030      	movs	r0, #48	; 0x30
 8003c54:	f7ff ffc8 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003c58:	2005      	movs	r0, #5
 8003c5a:	f7fd fbf3 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003c5e:	2030      	movs	r0, #48	; 0x30
 8003c60:	f7ff ffc2 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003c64:	2001      	movs	r0, #1
 8003c66:	f7fd fbed 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003c6a:	2030      	movs	r0, #48	; 0x30
 8003c6c:	f7ff ffbc 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(10);
 8003c70:	200a      	movs	r0, #10
 8003c72:	f7fd fbe7 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003c76:	2020      	movs	r0, #32
 8003c78:	f7ff ffb6 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(10);
 8003c7c:	200a      	movs	r0, #10
 8003c7e:	f7fd fbe1 	bl	8001444 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003c82:	2028      	movs	r0, #40	; 0x28
 8003c84:	f7ff ffb0 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(1);
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7fd fbdb 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003c8e:	2008      	movs	r0, #8
 8003c90:	f7ff ffaa 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(1);
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fd fbd5 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7ff ffa4 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(1);
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7fd fbcf 	bl	8001444 <HAL_Delay>
	HAL_Delay(1);
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f7fd fbcc 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003cac:	2006      	movs	r0, #6
 8003cae:	f7ff ff9b 	bl	8003be8 <lcd_send_cmd>
	HAL_Delay(1);
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f7fd fbc6 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003cb8:	200c      	movs	r0, #12
 8003cba:	f7ff ff95 	bl	8003be8 <lcd_send_cmd>
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <__errno>:
 8003cc4:	4b01      	ldr	r3, [pc, #4]	; (8003ccc <__errno+0x8>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	2000000c 	.word	0x2000000c

08003cd0 <__libc_init_array>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	4e0c      	ldr	r6, [pc, #48]	; (8003d08 <__libc_init_array+0x38>)
 8003cd6:	4c0d      	ldr	r4, [pc, #52]	; (8003d0c <__libc_init_array+0x3c>)
 8003cd8:	1ba4      	subs	r4, r4, r6
 8003cda:	10a4      	asrs	r4, r4, #2
 8003cdc:	42a5      	cmp	r5, r4
 8003cde:	d109      	bne.n	8003cf4 <__libc_init_array+0x24>
 8003ce0:	f004 fa02 	bl	80080e8 <_init>
 8003ce4:	2500      	movs	r5, #0
 8003ce6:	4e0a      	ldr	r6, [pc, #40]	; (8003d10 <__libc_init_array+0x40>)
 8003ce8:	4c0a      	ldr	r4, [pc, #40]	; (8003d14 <__libc_init_array+0x44>)
 8003cea:	1ba4      	subs	r4, r4, r6
 8003cec:	10a4      	asrs	r4, r4, #2
 8003cee:	42a5      	cmp	r5, r4
 8003cf0:	d105      	bne.n	8003cfe <__libc_init_array+0x2e>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf8:	4798      	blx	r3
 8003cfa:	3501      	adds	r5, #1
 8003cfc:	e7ee      	b.n	8003cdc <__libc_init_array+0xc>
 8003cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d02:	4798      	blx	r3
 8003d04:	3501      	adds	r5, #1
 8003d06:	e7f2      	b.n	8003cee <__libc_init_array+0x1e>
 8003d08:	08008480 	.word	0x08008480
 8003d0c:	08008480 	.word	0x08008480
 8003d10:	08008480 	.word	0x08008480
 8003d14:	08008484 	.word	0x08008484

08003d18 <memset>:
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4402      	add	r2, r0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <memset+0xa>
 8003d20:	4770      	bx	lr
 8003d22:	f803 1b01 	strb.w	r1, [r3], #1
 8003d26:	e7f9      	b.n	8003d1c <memset+0x4>

08003d28 <__cvt>:
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2e:	461e      	mov	r6, r3
 8003d30:	bfbb      	ittet	lt
 8003d32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d36:	461e      	movlt	r6, r3
 8003d38:	2300      	movge	r3, #0
 8003d3a:	232d      	movlt	r3, #45	; 0x2d
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003d40:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003d44:	f027 0720 	bic.w	r7, r7, #32
 8003d48:	2f46      	cmp	r7, #70	; 0x46
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d4e:	700b      	strb	r3, [r1, #0]
 8003d50:	d004      	beq.n	8003d5c <__cvt+0x34>
 8003d52:	2f45      	cmp	r7, #69	; 0x45
 8003d54:	d100      	bne.n	8003d58 <__cvt+0x30>
 8003d56:	3501      	adds	r5, #1
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e000      	b.n	8003d5e <__cvt+0x36>
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	aa07      	add	r2, sp, #28
 8003d60:	9204      	str	r2, [sp, #16]
 8003d62:	aa06      	add	r2, sp, #24
 8003d64:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d68:	e9cd 3500 	strd	r3, r5, [sp]
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4633      	mov	r3, r6
 8003d70:	f001 fd96 	bl	80058a0 <_dtoa_r>
 8003d74:	2f47      	cmp	r7, #71	; 0x47
 8003d76:	4680      	mov	r8, r0
 8003d78:	d102      	bne.n	8003d80 <__cvt+0x58>
 8003d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d7c:	07db      	lsls	r3, r3, #31
 8003d7e:	d526      	bpl.n	8003dce <__cvt+0xa6>
 8003d80:	2f46      	cmp	r7, #70	; 0x46
 8003d82:	eb08 0905 	add.w	r9, r8, r5
 8003d86:	d111      	bne.n	8003dac <__cvt+0x84>
 8003d88:	f898 3000 	ldrb.w	r3, [r8]
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d10a      	bne.n	8003da6 <__cvt+0x7e>
 8003d90:	2200      	movs	r2, #0
 8003d92:	2300      	movs	r3, #0
 8003d94:	4620      	mov	r0, r4
 8003d96:	4631      	mov	r1, r6
 8003d98:	f7fc fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8003d9c:	b918      	cbnz	r0, 8003da6 <__cvt+0x7e>
 8003d9e:	f1c5 0501 	rsb	r5, r5, #1
 8003da2:	f8ca 5000 	str.w	r5, [sl]
 8003da6:	f8da 3000 	ldr.w	r3, [sl]
 8003daa:	4499      	add	r9, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	2300      	movs	r3, #0
 8003db0:	4620      	mov	r0, r4
 8003db2:	4631      	mov	r1, r6
 8003db4:	f7fc fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8003db8:	b938      	cbnz	r0, 8003dca <__cvt+0xa2>
 8003dba:	2230      	movs	r2, #48	; 0x30
 8003dbc:	9b07      	ldr	r3, [sp, #28]
 8003dbe:	454b      	cmp	r3, r9
 8003dc0:	d205      	bcs.n	8003dce <__cvt+0xa6>
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	9107      	str	r1, [sp, #28]
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e7f8      	b.n	8003dbc <__cvt+0x94>
 8003dca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003dce:	4640      	mov	r0, r8
 8003dd0:	9b07      	ldr	r3, [sp, #28]
 8003dd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003dd4:	eba3 0308 	sub.w	r3, r3, r8
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	b008      	add	sp, #32
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003de0 <__exponent>:
 8003de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de2:	2900      	cmp	r1, #0
 8003de4:	bfb4      	ite	lt
 8003de6:	232d      	movlt	r3, #45	; 0x2d
 8003de8:	232b      	movge	r3, #43	; 0x2b
 8003dea:	4604      	mov	r4, r0
 8003dec:	bfb8      	it	lt
 8003dee:	4249      	neglt	r1, r1
 8003df0:	2909      	cmp	r1, #9
 8003df2:	f804 2b02 	strb.w	r2, [r4], #2
 8003df6:	7043      	strb	r3, [r0, #1]
 8003df8:	dd21      	ble.n	8003e3e <__exponent+0x5e>
 8003dfa:	f10d 0307 	add.w	r3, sp, #7
 8003dfe:	461f      	mov	r7, r3
 8003e00:	260a      	movs	r6, #10
 8003e02:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e06:	fb06 1115 	mls	r1, r6, r5, r1
 8003e0a:	2d09      	cmp	r5, #9
 8003e0c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003e10:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e14:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e18:	4629      	mov	r1, r5
 8003e1a:	dc09      	bgt.n	8003e30 <__exponent+0x50>
 8003e1c:	3130      	adds	r1, #48	; 0x30
 8003e1e:	3b02      	subs	r3, #2
 8003e20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e24:	42bb      	cmp	r3, r7
 8003e26:	4622      	mov	r2, r4
 8003e28:	d304      	bcc.n	8003e34 <__exponent+0x54>
 8003e2a:	1a10      	subs	r0, r2, r0
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e30:	4613      	mov	r3, r2
 8003e32:	e7e6      	b.n	8003e02 <__exponent+0x22>
 8003e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e38:	f804 2b01 	strb.w	r2, [r4], #1
 8003e3c:	e7f2      	b.n	8003e24 <__exponent+0x44>
 8003e3e:	2330      	movs	r3, #48	; 0x30
 8003e40:	4419      	add	r1, r3
 8003e42:	7083      	strb	r3, [r0, #2]
 8003e44:	1d02      	adds	r2, r0, #4
 8003e46:	70c1      	strb	r1, [r0, #3]
 8003e48:	e7ef      	b.n	8003e2a <__exponent+0x4a>
	...

08003e4c <_printf_float>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	b091      	sub	sp, #68	; 0x44
 8003e52:	460c      	mov	r4, r1
 8003e54:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003e56:	4693      	mov	fp, r2
 8003e58:	461e      	mov	r6, r3
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	f002 fecc 	bl	8006bf8 <_localeconv_r>
 8003e60:	6803      	ldr	r3, [r0, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	f7fc f973 	bl	8000150 <strlen>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	900a      	str	r0, [sp, #40]	; 0x28
 8003e72:	3307      	adds	r3, #7
 8003e74:	f023 0307 	bic.w	r3, r3, #7
 8003e78:	f103 0208 	add.w	r2, r3, #8
 8003e7c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003e80:	f8d4 a000 	ldr.w	sl, [r4]
 8003e84:	603a      	str	r2, [r7, #0]
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e8e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003e92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e98:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9c:	4ba6      	ldr	r3, [pc, #664]	; (8004138 <_printf_float+0x2ec>)
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ea2:	f7fc fdb3 	bl	8000a0c <__aeabi_dcmpun>
 8003ea6:	bb68      	cbnz	r0, 8003f04 <_printf_float+0xb8>
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	4ba2      	ldr	r3, [pc, #648]	; (8004138 <_printf_float+0x2ec>)
 8003eae:	4638      	mov	r0, r7
 8003eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eb2:	f7fc fd8d 	bl	80009d0 <__aeabi_dcmple>
 8003eb6:	bb28      	cbnz	r0, 8003f04 <_printf_float+0xb8>
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	f7fc fd7c 	bl	80009bc <__aeabi_dcmplt>
 8003ec4:	b110      	cbz	r0, 8003ecc <_printf_float+0x80>
 8003ec6:	232d      	movs	r3, #45	; 0x2d
 8003ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ecc:	4f9b      	ldr	r7, [pc, #620]	; (800413c <_printf_float+0x2f0>)
 8003ece:	4b9c      	ldr	r3, [pc, #624]	; (8004140 <_printf_float+0x2f4>)
 8003ed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ed4:	bf98      	it	ls
 8003ed6:	461f      	movls	r7, r3
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f04f 0900 	mov.w	r9, #0
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	f02a 0304 	bic.w	r3, sl, #4
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	9600      	str	r6, [sp, #0]
 8003ee8:	465b      	mov	r3, fp
 8003eea:	aa0f      	add	r2, sp, #60	; 0x3c
 8003eec:	4621      	mov	r1, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 f9e2 	bl	80042b8 <_printf_common>
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	f040 8090 	bne.w	800401a <_printf_float+0x1ce>
 8003efa:	f04f 30ff 	mov.w	r0, #4294967295
 8003efe:	b011      	add	sp, #68	; 0x44
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	463a      	mov	r2, r7
 8003f06:	464b      	mov	r3, r9
 8003f08:	4638      	mov	r0, r7
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc fd7e 	bl	8000a0c <__aeabi_dcmpun>
 8003f10:	b110      	cbz	r0, 8003f18 <_printf_float+0xcc>
 8003f12:	4f8c      	ldr	r7, [pc, #560]	; (8004144 <_printf_float+0x2f8>)
 8003f14:	4b8c      	ldr	r3, [pc, #560]	; (8004148 <_printf_float+0x2fc>)
 8003f16:	e7db      	b.n	8003ed0 <_printf_float+0x84>
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003f1e:	1c59      	adds	r1, r3, #1
 8003f20:	a80d      	add	r0, sp, #52	; 0x34
 8003f22:	a90e      	add	r1, sp, #56	; 0x38
 8003f24:	d140      	bne.n	8003fa8 <_printf_float+0x15c>
 8003f26:	2306      	movs	r3, #6
 8003f28:	6063      	str	r3, [r4, #4]
 8003f2a:	f04f 0c00 	mov.w	ip, #0
 8003f2e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003f32:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003f36:	6863      	ldr	r3, [r4, #4]
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	463a      	mov	r2, r7
 8003f42:	464b      	mov	r3, r9
 8003f44:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7ff feed 	bl	8003d28 <__cvt>
 8003f4e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003f52:	2b47      	cmp	r3, #71	; 0x47
 8003f54:	4607      	mov	r7, r0
 8003f56:	d109      	bne.n	8003f6c <_printf_float+0x120>
 8003f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f5a:	1cd8      	adds	r0, r3, #3
 8003f5c:	db02      	blt.n	8003f64 <_printf_float+0x118>
 8003f5e:	6862      	ldr	r2, [r4, #4]
 8003f60:	4293      	cmp	r3, r2
 8003f62:	dd47      	ble.n	8003ff4 <_printf_float+0x1a8>
 8003f64:	f1a8 0802 	sub.w	r8, r8, #2
 8003f68:	fa5f f888 	uxtb.w	r8, r8
 8003f6c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003f70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f72:	d824      	bhi.n	8003fbe <_printf_float+0x172>
 8003f74:	3901      	subs	r1, #1
 8003f76:	4642      	mov	r2, r8
 8003f78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f7c:	910d      	str	r1, [sp, #52]	; 0x34
 8003f7e:	f7ff ff2f 	bl	8003de0 <__exponent>
 8003f82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f84:	4681      	mov	r9, r0
 8003f86:	1813      	adds	r3, r2, r0
 8003f88:	2a01      	cmp	r2, #1
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	dc02      	bgt.n	8003f94 <_printf_float+0x148>
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	07d1      	lsls	r1, r2, #31
 8003f92:	d501      	bpl.n	8003f98 <_printf_float+0x14c>
 8003f94:	3301      	adds	r3, #1
 8003f96:	6123      	str	r3, [r4, #16]
 8003f98:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0a2      	beq.n	8003ee6 <_printf_float+0x9a>
 8003fa0:	232d      	movs	r3, #45	; 0x2d
 8003fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa6:	e79e      	b.n	8003ee6 <_printf_float+0x9a>
 8003fa8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003fac:	f000 816e 	beq.w	800428c <_printf_float+0x440>
 8003fb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fb4:	d1b9      	bne.n	8003f2a <_printf_float+0xde>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1b7      	bne.n	8003f2a <_printf_float+0xde>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e7b4      	b.n	8003f28 <_printf_float+0xdc>
 8003fbe:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003fc2:	d119      	bne.n	8003ff8 <_printf_float+0x1ac>
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	6863      	ldr	r3, [r4, #4]
 8003fc8:	dd0c      	ble.n	8003fe4 <_printf_float+0x198>
 8003fca:	6121      	str	r1, [r4, #16]
 8003fcc:	b913      	cbnz	r3, 8003fd4 <_printf_float+0x188>
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	07d2      	lsls	r2, r2, #31
 8003fd2:	d502      	bpl.n	8003fda <_printf_float+0x18e>
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	440b      	add	r3, r1
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fdc:	f04f 0900 	mov.w	r9, #0
 8003fe0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fe2:	e7d9      	b.n	8003f98 <_printf_float+0x14c>
 8003fe4:	b913      	cbnz	r3, 8003fec <_printf_float+0x1a0>
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	07d0      	lsls	r0, r2, #31
 8003fea:	d501      	bpl.n	8003ff0 <_printf_float+0x1a4>
 8003fec:	3302      	adds	r3, #2
 8003fee:	e7f3      	b.n	8003fd8 <_printf_float+0x18c>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e7f1      	b.n	8003fd8 <_printf_float+0x18c>
 8003ff4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003ff8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	db05      	blt.n	800400c <_printf_float+0x1c0>
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	07d1      	lsls	r1, r2, #31
 8004006:	d5e8      	bpl.n	8003fda <_printf_float+0x18e>
 8004008:	3301      	adds	r3, #1
 800400a:	e7e5      	b.n	8003fd8 <_printf_float+0x18c>
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfcc      	ite	gt
 8004010:	2301      	movgt	r3, #1
 8004012:	f1c3 0302 	rsble	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	e7de      	b.n	8003fd8 <_printf_float+0x18c>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	055a      	lsls	r2, r3, #21
 800401e:	d407      	bmi.n	8004030 <_printf_float+0x1e4>
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	463a      	mov	r2, r7
 8004024:	4659      	mov	r1, fp
 8004026:	4628      	mov	r0, r5
 8004028:	47b0      	blx	r6
 800402a:	3001      	adds	r0, #1
 800402c:	d129      	bne.n	8004082 <_printf_float+0x236>
 800402e:	e764      	b.n	8003efa <_printf_float+0xae>
 8004030:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004034:	f240 80d7 	bls.w	80041e6 <_printf_float+0x39a>
 8004038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800403c:	2200      	movs	r2, #0
 800403e:	2300      	movs	r3, #0
 8004040:	f7fc fcb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004044:	b388      	cbz	r0, 80040aa <_printf_float+0x25e>
 8004046:	2301      	movs	r3, #1
 8004048:	4a40      	ldr	r2, [pc, #256]	; (800414c <_printf_float+0x300>)
 800404a:	4659      	mov	r1, fp
 800404c:	4628      	mov	r0, r5
 800404e:	47b0      	blx	r6
 8004050:	3001      	adds	r0, #1
 8004052:	f43f af52 	beq.w	8003efa <_printf_float+0xae>
 8004056:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800405a:	429a      	cmp	r2, r3
 800405c:	db02      	blt.n	8004064 <_printf_float+0x218>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	07d8      	lsls	r0, r3, #31
 8004062:	d50e      	bpl.n	8004082 <_printf_float+0x236>
 8004064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004068:	4659      	mov	r1, fp
 800406a:	4628      	mov	r0, r5
 800406c:	47b0      	blx	r6
 800406e:	3001      	adds	r0, #1
 8004070:	f43f af43 	beq.w	8003efa <_printf_float+0xae>
 8004074:	2700      	movs	r7, #0
 8004076:	f104 081a 	add.w	r8, r4, #26
 800407a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800407c:	3b01      	subs	r3, #1
 800407e:	42bb      	cmp	r3, r7
 8004080:	dc09      	bgt.n	8004096 <_printf_float+0x24a>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079f      	lsls	r7, r3, #30
 8004086:	f100 80fd 	bmi.w	8004284 <_printf_float+0x438>
 800408a:	68e0      	ldr	r0, [r4, #12]
 800408c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800408e:	4298      	cmp	r0, r3
 8004090:	bfb8      	it	lt
 8004092:	4618      	movlt	r0, r3
 8004094:	e733      	b.n	8003efe <_printf_float+0xb2>
 8004096:	2301      	movs	r3, #1
 8004098:	4642      	mov	r2, r8
 800409a:	4659      	mov	r1, fp
 800409c:	4628      	mov	r0, r5
 800409e:	47b0      	blx	r6
 80040a0:	3001      	adds	r0, #1
 80040a2:	f43f af2a 	beq.w	8003efa <_printf_float+0xae>
 80040a6:	3701      	adds	r7, #1
 80040a8:	e7e7      	b.n	800407a <_printf_float+0x22e>
 80040aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dc2b      	bgt.n	8004108 <_printf_float+0x2bc>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4a26      	ldr	r2, [pc, #152]	; (800414c <_printf_float+0x300>)
 80040b4:	4659      	mov	r1, fp
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b0      	blx	r6
 80040ba:	3001      	adds	r0, #1
 80040bc:	f43f af1d 	beq.w	8003efa <_printf_float+0xae>
 80040c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040c2:	b923      	cbnz	r3, 80040ce <_printf_float+0x282>
 80040c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040c6:	b913      	cbnz	r3, 80040ce <_printf_float+0x282>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	07d9      	lsls	r1, r3, #31
 80040cc:	d5d9      	bpl.n	8004082 <_printf_float+0x236>
 80040ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040d2:	4659      	mov	r1, fp
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b0      	blx	r6
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f af0e 	beq.w	8003efa <_printf_float+0xae>
 80040de:	f04f 0800 	mov.w	r8, #0
 80040e2:	f104 091a 	add.w	r9, r4, #26
 80040e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e8:	425b      	negs	r3, r3
 80040ea:	4543      	cmp	r3, r8
 80040ec:	dc01      	bgt.n	80040f2 <_printf_float+0x2a6>
 80040ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f0:	e797      	b.n	8004022 <_printf_float+0x1d6>
 80040f2:	2301      	movs	r3, #1
 80040f4:	464a      	mov	r2, r9
 80040f6:	4659      	mov	r1, fp
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b0      	blx	r6
 80040fc:	3001      	adds	r0, #1
 80040fe:	f43f aefc 	beq.w	8003efa <_printf_float+0xae>
 8004102:	f108 0801 	add.w	r8, r8, #1
 8004106:	e7ee      	b.n	80040e6 <_printf_float+0x29a>
 8004108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800410a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800410c:	429a      	cmp	r2, r3
 800410e:	bfa8      	it	ge
 8004110:	461a      	movge	r2, r3
 8004112:	2a00      	cmp	r2, #0
 8004114:	4690      	mov	r8, r2
 8004116:	dd07      	ble.n	8004128 <_printf_float+0x2dc>
 8004118:	4613      	mov	r3, r2
 800411a:	4659      	mov	r1, fp
 800411c:	463a      	mov	r2, r7
 800411e:	4628      	mov	r0, r5
 8004120:	47b0      	blx	r6
 8004122:	3001      	adds	r0, #1
 8004124:	f43f aee9 	beq.w	8003efa <_printf_float+0xae>
 8004128:	f104 031a 	add.w	r3, r4, #26
 800412c:	f04f 0a00 	mov.w	sl, #0
 8004130:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004134:	930b      	str	r3, [sp, #44]	; 0x2c
 8004136:	e015      	b.n	8004164 <_printf_float+0x318>
 8004138:	7fefffff 	.word	0x7fefffff
 800413c:	08008168 	.word	0x08008168
 8004140:	08008164 	.word	0x08008164
 8004144:	08008170 	.word	0x08008170
 8004148:	0800816c 	.word	0x0800816c
 800414c:	08008174 	.word	0x08008174
 8004150:	2301      	movs	r3, #1
 8004152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004154:	4659      	mov	r1, fp
 8004156:	4628      	mov	r0, r5
 8004158:	47b0      	blx	r6
 800415a:	3001      	adds	r0, #1
 800415c:	f43f aecd 	beq.w	8003efa <_printf_float+0xae>
 8004160:	f10a 0a01 	add.w	sl, sl, #1
 8004164:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004168:	eba9 0308 	sub.w	r3, r9, r8
 800416c:	4553      	cmp	r3, sl
 800416e:	dcef      	bgt.n	8004150 <_printf_float+0x304>
 8004170:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004174:	429a      	cmp	r2, r3
 8004176:	444f      	add	r7, r9
 8004178:	db14      	blt.n	80041a4 <_printf_float+0x358>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	07da      	lsls	r2, r3, #31
 800417e:	d411      	bmi.n	80041a4 <_printf_float+0x358>
 8004180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004182:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004184:	eba3 0209 	sub.w	r2, r3, r9
 8004188:	eba3 0901 	sub.w	r9, r3, r1
 800418c:	4591      	cmp	r9, r2
 800418e:	bfa8      	it	ge
 8004190:	4691      	movge	r9, r2
 8004192:	f1b9 0f00 	cmp.w	r9, #0
 8004196:	dc0d      	bgt.n	80041b4 <_printf_float+0x368>
 8004198:	2700      	movs	r7, #0
 800419a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800419e:	f104 081a 	add.w	r8, r4, #26
 80041a2:	e018      	b.n	80041d6 <_printf_float+0x38a>
 80041a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041a8:	4659      	mov	r1, fp
 80041aa:	4628      	mov	r0, r5
 80041ac:	47b0      	blx	r6
 80041ae:	3001      	adds	r0, #1
 80041b0:	d1e6      	bne.n	8004180 <_printf_float+0x334>
 80041b2:	e6a2      	b.n	8003efa <_printf_float+0xae>
 80041b4:	464b      	mov	r3, r9
 80041b6:	463a      	mov	r2, r7
 80041b8:	4659      	mov	r1, fp
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b0      	blx	r6
 80041be:	3001      	adds	r0, #1
 80041c0:	d1ea      	bne.n	8004198 <_printf_float+0x34c>
 80041c2:	e69a      	b.n	8003efa <_printf_float+0xae>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4642      	mov	r2, r8
 80041c8:	4659      	mov	r1, fp
 80041ca:	4628      	mov	r0, r5
 80041cc:	47b0      	blx	r6
 80041ce:	3001      	adds	r0, #1
 80041d0:	f43f ae93 	beq.w	8003efa <_printf_float+0xae>
 80041d4:	3701      	adds	r7, #1
 80041d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	eba3 0309 	sub.w	r3, r3, r9
 80041e0:	42bb      	cmp	r3, r7
 80041e2:	dcef      	bgt.n	80041c4 <_printf_float+0x378>
 80041e4:	e74d      	b.n	8004082 <_printf_float+0x236>
 80041e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	dc01      	bgt.n	80041f0 <_printf_float+0x3a4>
 80041ec:	07db      	lsls	r3, r3, #31
 80041ee:	d538      	bpl.n	8004262 <_printf_float+0x416>
 80041f0:	2301      	movs	r3, #1
 80041f2:	463a      	mov	r2, r7
 80041f4:	4659      	mov	r1, fp
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b0      	blx	r6
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f ae7d 	beq.w	8003efa <_printf_float+0xae>
 8004200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004204:	4659      	mov	r1, fp
 8004206:	4628      	mov	r0, r5
 8004208:	47b0      	blx	r6
 800420a:	3001      	adds	r0, #1
 800420c:	f107 0701 	add.w	r7, r7, #1
 8004210:	f43f ae73 	beq.w	8003efa <_printf_float+0xae>
 8004214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800421a:	2200      	movs	r2, #0
 800421c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004220:	2300      	movs	r3, #0
 8004222:	f7fc fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004226:	b9c0      	cbnz	r0, 800425a <_printf_float+0x40e>
 8004228:	4643      	mov	r3, r8
 800422a:	463a      	mov	r2, r7
 800422c:	4659      	mov	r1, fp
 800422e:	4628      	mov	r0, r5
 8004230:	47b0      	blx	r6
 8004232:	3001      	adds	r0, #1
 8004234:	d10d      	bne.n	8004252 <_printf_float+0x406>
 8004236:	e660      	b.n	8003efa <_printf_float+0xae>
 8004238:	2301      	movs	r3, #1
 800423a:	4642      	mov	r2, r8
 800423c:	4659      	mov	r1, fp
 800423e:	4628      	mov	r0, r5
 8004240:	47b0      	blx	r6
 8004242:	3001      	adds	r0, #1
 8004244:	f43f ae59 	beq.w	8003efa <_printf_float+0xae>
 8004248:	3701      	adds	r7, #1
 800424a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800424c:	3b01      	subs	r3, #1
 800424e:	42bb      	cmp	r3, r7
 8004250:	dcf2      	bgt.n	8004238 <_printf_float+0x3ec>
 8004252:	464b      	mov	r3, r9
 8004254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004258:	e6e4      	b.n	8004024 <_printf_float+0x1d8>
 800425a:	2700      	movs	r7, #0
 800425c:	f104 081a 	add.w	r8, r4, #26
 8004260:	e7f3      	b.n	800424a <_printf_float+0x3fe>
 8004262:	2301      	movs	r3, #1
 8004264:	e7e1      	b.n	800422a <_printf_float+0x3de>
 8004266:	2301      	movs	r3, #1
 8004268:	4642      	mov	r2, r8
 800426a:	4659      	mov	r1, fp
 800426c:	4628      	mov	r0, r5
 800426e:	47b0      	blx	r6
 8004270:	3001      	adds	r0, #1
 8004272:	f43f ae42 	beq.w	8003efa <_printf_float+0xae>
 8004276:	3701      	adds	r7, #1
 8004278:	68e3      	ldr	r3, [r4, #12]
 800427a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	42bb      	cmp	r3, r7
 8004280:	dcf1      	bgt.n	8004266 <_printf_float+0x41a>
 8004282:	e702      	b.n	800408a <_printf_float+0x23e>
 8004284:	2700      	movs	r7, #0
 8004286:	f104 0819 	add.w	r8, r4, #25
 800428a:	e7f5      	b.n	8004278 <_printf_float+0x42c>
 800428c:	2b00      	cmp	r3, #0
 800428e:	f43f ae94 	beq.w	8003fba <_printf_float+0x16e>
 8004292:	f04f 0c00 	mov.w	ip, #0
 8004296:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800429a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80042a4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	463a      	mov	r2, r7
 80042ac:	464b      	mov	r3, r9
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7ff fd3a 	bl	8003d28 <__cvt>
 80042b4:	4607      	mov	r7, r0
 80042b6:	e64f      	b.n	8003f58 <_printf_float+0x10c>

080042b8 <_printf_common>:
 80042b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	4691      	mov	r9, r2
 80042be:	461f      	mov	r7, r3
 80042c0:	688a      	ldr	r2, [r1, #8]
 80042c2:	690b      	ldr	r3, [r1, #16]
 80042c4:	4606      	mov	r6, r0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bfb8      	it	lt
 80042ca:	4613      	movlt	r3, r2
 80042cc:	f8c9 3000 	str.w	r3, [r9]
 80042d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d4:	460c      	mov	r4, r1
 80042d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042da:	b112      	cbz	r2, 80042e2 <_printf_common+0x2a>
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c9 3000 	str.w	r3, [r9]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	0699      	lsls	r1, r3, #26
 80042e6:	bf42      	ittt	mi
 80042e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042ec:	3302      	addmi	r3, #2
 80042ee:	f8c9 3000 	strmi.w	r3, [r9]
 80042f2:	6825      	ldr	r5, [r4, #0]
 80042f4:	f015 0506 	ands.w	r5, r5, #6
 80042f8:	d107      	bne.n	800430a <_printf_common+0x52>
 80042fa:	f104 0a19 	add.w	sl, r4, #25
 80042fe:	68e3      	ldr	r3, [r4, #12]
 8004300:	f8d9 2000 	ldr.w	r2, [r9]
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	42ab      	cmp	r3, r5
 8004308:	dc29      	bgt.n	800435e <_printf_common+0xa6>
 800430a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	3300      	adds	r3, #0
 8004312:	bf18      	it	ne
 8004314:	2301      	movne	r3, #1
 8004316:	0692      	lsls	r2, r2, #26
 8004318:	d42e      	bmi.n	8004378 <_printf_common+0xc0>
 800431a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800431e:	4639      	mov	r1, r7
 8004320:	4630      	mov	r0, r6
 8004322:	47c0      	blx	r8
 8004324:	3001      	adds	r0, #1
 8004326:	d021      	beq.n	800436c <_printf_common+0xb4>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	68e5      	ldr	r5, [r4, #12]
 800432c:	f003 0306 	and.w	r3, r3, #6
 8004330:	2b04      	cmp	r3, #4
 8004332:	bf18      	it	ne
 8004334:	2500      	movne	r5, #0
 8004336:	f8d9 2000 	ldr.w	r2, [r9]
 800433a:	f04f 0900 	mov.w	r9, #0
 800433e:	bf08      	it	eq
 8004340:	1aad      	subeq	r5, r5, r2
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	6922      	ldr	r2, [r4, #16]
 8004346:	bf08      	it	eq
 8004348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800434c:	4293      	cmp	r3, r2
 800434e:	bfc4      	itt	gt
 8004350:	1a9b      	subgt	r3, r3, r2
 8004352:	18ed      	addgt	r5, r5, r3
 8004354:	341a      	adds	r4, #26
 8004356:	454d      	cmp	r5, r9
 8004358:	d11a      	bne.n	8004390 <_printf_common+0xd8>
 800435a:	2000      	movs	r0, #0
 800435c:	e008      	b.n	8004370 <_printf_common+0xb8>
 800435e:	2301      	movs	r3, #1
 8004360:	4652      	mov	r2, sl
 8004362:	4639      	mov	r1, r7
 8004364:	4630      	mov	r0, r6
 8004366:	47c0      	blx	r8
 8004368:	3001      	adds	r0, #1
 800436a:	d103      	bne.n	8004374 <_printf_common+0xbc>
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	3501      	adds	r5, #1
 8004376:	e7c2      	b.n	80042fe <_printf_common+0x46>
 8004378:	2030      	movs	r0, #48	; 0x30
 800437a:	18e1      	adds	r1, r4, r3
 800437c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004386:	4422      	add	r2, r4
 8004388:	3302      	adds	r3, #2
 800438a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800438e:	e7c4      	b.n	800431a <_printf_common+0x62>
 8004390:	2301      	movs	r3, #1
 8004392:	4622      	mov	r2, r4
 8004394:	4639      	mov	r1, r7
 8004396:	4630      	mov	r0, r6
 8004398:	47c0      	blx	r8
 800439a:	3001      	adds	r0, #1
 800439c:	d0e6      	beq.n	800436c <_printf_common+0xb4>
 800439e:	f109 0901 	add.w	r9, r9, #1
 80043a2:	e7d8      	b.n	8004356 <_printf_common+0x9e>

080043a4 <_printf_i>:
 80043a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043ac:	460c      	mov	r4, r1
 80043ae:	7e09      	ldrb	r1, [r1, #24]
 80043b0:	b085      	sub	sp, #20
 80043b2:	296e      	cmp	r1, #110	; 0x6e
 80043b4:	4617      	mov	r7, r2
 80043b6:	4606      	mov	r6, r0
 80043b8:	4698      	mov	r8, r3
 80043ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043bc:	f000 80b3 	beq.w	8004526 <_printf_i+0x182>
 80043c0:	d822      	bhi.n	8004408 <_printf_i+0x64>
 80043c2:	2963      	cmp	r1, #99	; 0x63
 80043c4:	d036      	beq.n	8004434 <_printf_i+0x90>
 80043c6:	d80a      	bhi.n	80043de <_printf_i+0x3a>
 80043c8:	2900      	cmp	r1, #0
 80043ca:	f000 80b9 	beq.w	8004540 <_printf_i+0x19c>
 80043ce:	2958      	cmp	r1, #88	; 0x58
 80043d0:	f000 8083 	beq.w	80044da <_printf_i+0x136>
 80043d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80043dc:	e032      	b.n	8004444 <_printf_i+0xa0>
 80043de:	2964      	cmp	r1, #100	; 0x64
 80043e0:	d001      	beq.n	80043e6 <_printf_i+0x42>
 80043e2:	2969      	cmp	r1, #105	; 0x69
 80043e4:	d1f6      	bne.n	80043d4 <_printf_i+0x30>
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	6813      	ldr	r3, [r2, #0]
 80043ea:	0605      	lsls	r5, r0, #24
 80043ec:	f103 0104 	add.w	r1, r3, #4
 80043f0:	d52a      	bpl.n	8004448 <_printf_i+0xa4>
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6011      	str	r1, [r2, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da03      	bge.n	8004402 <_printf_i+0x5e>
 80043fa:	222d      	movs	r2, #45	; 0x2d
 80043fc:	425b      	negs	r3, r3
 80043fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004402:	486f      	ldr	r0, [pc, #444]	; (80045c0 <_printf_i+0x21c>)
 8004404:	220a      	movs	r2, #10
 8004406:	e039      	b.n	800447c <_printf_i+0xd8>
 8004408:	2973      	cmp	r1, #115	; 0x73
 800440a:	f000 809d 	beq.w	8004548 <_printf_i+0x1a4>
 800440e:	d808      	bhi.n	8004422 <_printf_i+0x7e>
 8004410:	296f      	cmp	r1, #111	; 0x6f
 8004412:	d020      	beq.n	8004456 <_printf_i+0xb2>
 8004414:	2970      	cmp	r1, #112	; 0x70
 8004416:	d1dd      	bne.n	80043d4 <_printf_i+0x30>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f043 0320 	orr.w	r3, r3, #32
 800441e:	6023      	str	r3, [r4, #0]
 8004420:	e003      	b.n	800442a <_printf_i+0x86>
 8004422:	2975      	cmp	r1, #117	; 0x75
 8004424:	d017      	beq.n	8004456 <_printf_i+0xb2>
 8004426:	2978      	cmp	r1, #120	; 0x78
 8004428:	d1d4      	bne.n	80043d4 <_printf_i+0x30>
 800442a:	2378      	movs	r3, #120	; 0x78
 800442c:	4865      	ldr	r0, [pc, #404]	; (80045c4 <_printf_i+0x220>)
 800442e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004432:	e055      	b.n	80044e0 <_printf_i+0x13c>
 8004434:	6813      	ldr	r3, [r2, #0]
 8004436:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443a:	1d19      	adds	r1, r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6011      	str	r1, [r2, #0]
 8004440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004444:	2301      	movs	r3, #1
 8004446:	e08c      	b.n	8004562 <_printf_i+0x1be>
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800444e:	6011      	str	r1, [r2, #0]
 8004450:	bf18      	it	ne
 8004452:	b21b      	sxthne	r3, r3
 8004454:	e7cf      	b.n	80043f6 <_printf_i+0x52>
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	6825      	ldr	r5, [r4, #0]
 800445a:	1d18      	adds	r0, r3, #4
 800445c:	6010      	str	r0, [r2, #0]
 800445e:	0628      	lsls	r0, r5, #24
 8004460:	d501      	bpl.n	8004466 <_printf_i+0xc2>
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	e002      	b.n	800446c <_printf_i+0xc8>
 8004466:	0668      	lsls	r0, r5, #25
 8004468:	d5fb      	bpl.n	8004462 <_printf_i+0xbe>
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	296f      	cmp	r1, #111	; 0x6f
 800446e:	bf14      	ite	ne
 8004470:	220a      	movne	r2, #10
 8004472:	2208      	moveq	r2, #8
 8004474:	4852      	ldr	r0, [pc, #328]	; (80045c0 <_printf_i+0x21c>)
 8004476:	2100      	movs	r1, #0
 8004478:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800447c:	6865      	ldr	r5, [r4, #4]
 800447e:	2d00      	cmp	r5, #0
 8004480:	60a5      	str	r5, [r4, #8]
 8004482:	f2c0 8095 	blt.w	80045b0 <_printf_i+0x20c>
 8004486:	6821      	ldr	r1, [r4, #0]
 8004488:	f021 0104 	bic.w	r1, r1, #4
 800448c:	6021      	str	r1, [r4, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d13d      	bne.n	800450e <_printf_i+0x16a>
 8004492:	2d00      	cmp	r5, #0
 8004494:	f040 808e 	bne.w	80045b4 <_printf_i+0x210>
 8004498:	4665      	mov	r5, ip
 800449a:	2a08      	cmp	r2, #8
 800449c:	d10b      	bne.n	80044b6 <_printf_i+0x112>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	07db      	lsls	r3, r3, #31
 80044a2:	d508      	bpl.n	80044b6 <_printf_i+0x112>
 80044a4:	6923      	ldr	r3, [r4, #16]
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	bfde      	ittt	le
 80044ac:	2330      	movle	r3, #48	; 0x30
 80044ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044b6:	ebac 0305 	sub.w	r3, ip, r5
 80044ba:	6123      	str	r3, [r4, #16]
 80044bc:	f8cd 8000 	str.w	r8, [sp]
 80044c0:	463b      	mov	r3, r7
 80044c2:	aa03      	add	r2, sp, #12
 80044c4:	4621      	mov	r1, r4
 80044c6:	4630      	mov	r0, r6
 80044c8:	f7ff fef6 	bl	80042b8 <_printf_common>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d14d      	bne.n	800456c <_printf_i+0x1c8>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	b005      	add	sp, #20
 80044d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044da:	4839      	ldr	r0, [pc, #228]	; (80045c0 <_printf_i+0x21c>)
 80044dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	6821      	ldr	r1, [r4, #0]
 80044e4:	1d1d      	adds	r5, r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6015      	str	r5, [r2, #0]
 80044ea:	060a      	lsls	r2, r1, #24
 80044ec:	d50b      	bpl.n	8004506 <_printf_i+0x162>
 80044ee:	07ca      	lsls	r2, r1, #31
 80044f0:	bf44      	itt	mi
 80044f2:	f041 0120 	orrmi.w	r1, r1, #32
 80044f6:	6021      	strmi	r1, [r4, #0]
 80044f8:	b91b      	cbnz	r3, 8004502 <_printf_i+0x15e>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	f022 0220 	bic.w	r2, r2, #32
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	2210      	movs	r2, #16
 8004504:	e7b7      	b.n	8004476 <_printf_i+0xd2>
 8004506:	064d      	lsls	r5, r1, #25
 8004508:	bf48      	it	mi
 800450a:	b29b      	uxthmi	r3, r3
 800450c:	e7ef      	b.n	80044ee <_printf_i+0x14a>
 800450e:	4665      	mov	r5, ip
 8004510:	fbb3 f1f2 	udiv	r1, r3, r2
 8004514:	fb02 3311 	mls	r3, r2, r1, r3
 8004518:	5cc3      	ldrb	r3, [r0, r3]
 800451a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800451e:	460b      	mov	r3, r1
 8004520:	2900      	cmp	r1, #0
 8004522:	d1f5      	bne.n	8004510 <_printf_i+0x16c>
 8004524:	e7b9      	b.n	800449a <_printf_i+0xf6>
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1d18      	adds	r0, r3, #4
 800452c:	6961      	ldr	r1, [r4, #20]
 800452e:	6010      	str	r0, [r2, #0]
 8004530:	0628      	lsls	r0, r5, #24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	d501      	bpl.n	800453a <_printf_i+0x196>
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	e002      	b.n	8004540 <_printf_i+0x19c>
 800453a:	066a      	lsls	r2, r5, #25
 800453c:	d5fb      	bpl.n	8004536 <_printf_i+0x192>
 800453e:	8019      	strh	r1, [r3, #0]
 8004540:	2300      	movs	r3, #0
 8004542:	4665      	mov	r5, ip
 8004544:	6123      	str	r3, [r4, #16]
 8004546:	e7b9      	b.n	80044bc <_printf_i+0x118>
 8004548:	6813      	ldr	r3, [r2, #0]
 800454a:	1d19      	adds	r1, r3, #4
 800454c:	6011      	str	r1, [r2, #0]
 800454e:	681d      	ldr	r5, [r3, #0]
 8004550:	6862      	ldr	r2, [r4, #4]
 8004552:	2100      	movs	r1, #0
 8004554:	4628      	mov	r0, r5
 8004556:	f002 fb77 	bl	8006c48 <memchr>
 800455a:	b108      	cbz	r0, 8004560 <_printf_i+0x1bc>
 800455c:	1b40      	subs	r0, r0, r5
 800455e:	6060      	str	r0, [r4, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2300      	movs	r3, #0
 8004566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456a:	e7a7      	b.n	80044bc <_printf_i+0x118>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	462a      	mov	r2, r5
 8004570:	4639      	mov	r1, r7
 8004572:	4630      	mov	r0, r6
 8004574:	47c0      	blx	r8
 8004576:	3001      	adds	r0, #1
 8004578:	d0aa      	beq.n	80044d0 <_printf_i+0x12c>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	079b      	lsls	r3, r3, #30
 800457e:	d413      	bmi.n	80045a8 <_printf_i+0x204>
 8004580:	68e0      	ldr	r0, [r4, #12]
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	4298      	cmp	r0, r3
 8004586:	bfb8      	it	lt
 8004588:	4618      	movlt	r0, r3
 800458a:	e7a3      	b.n	80044d4 <_printf_i+0x130>
 800458c:	2301      	movs	r3, #1
 800458e:	464a      	mov	r2, r9
 8004590:	4639      	mov	r1, r7
 8004592:	4630      	mov	r0, r6
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d09a      	beq.n	80044d0 <_printf_i+0x12c>
 800459a:	3501      	adds	r5, #1
 800459c:	68e3      	ldr	r3, [r4, #12]
 800459e:	9a03      	ldr	r2, [sp, #12]
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	42ab      	cmp	r3, r5
 80045a4:	dcf2      	bgt.n	800458c <_printf_i+0x1e8>
 80045a6:	e7eb      	b.n	8004580 <_printf_i+0x1dc>
 80045a8:	2500      	movs	r5, #0
 80045aa:	f104 0919 	add.w	r9, r4, #25
 80045ae:	e7f5      	b.n	800459c <_printf_i+0x1f8>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ac      	bne.n	800450e <_printf_i+0x16a>
 80045b4:	7803      	ldrb	r3, [r0, #0]
 80045b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045be:	e76c      	b.n	800449a <_printf_i+0xf6>
 80045c0:	08008176 	.word	0x08008176
 80045c4:	08008187 	.word	0x08008187

080045c8 <_scanf_float>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	469a      	mov	sl, r3
 80045ce:	688b      	ldr	r3, [r1, #8]
 80045d0:	4616      	mov	r6, r2
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80045d8:	bf88      	it	hi
 80045da:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80045de:	b087      	sub	sp, #28
 80045e0:	bf85      	ittet	hi
 80045e2:	189b      	addhi	r3, r3, r2
 80045e4:	9301      	strhi	r3, [sp, #4]
 80045e6:	2300      	movls	r3, #0
 80045e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80045ec:	4688      	mov	r8, r1
 80045ee:	f04f 0b00 	mov.w	fp, #0
 80045f2:	bf8c      	ite	hi
 80045f4:	608b      	strhi	r3, [r1, #8]
 80045f6:	9301      	strls	r3, [sp, #4]
 80045f8:	680b      	ldr	r3, [r1, #0]
 80045fa:	4607      	mov	r7, r0
 80045fc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004600:	f848 3b1c 	str.w	r3, [r8], #28
 8004604:	460c      	mov	r4, r1
 8004606:	4645      	mov	r5, r8
 8004608:	465a      	mov	r2, fp
 800460a:	46d9      	mov	r9, fp
 800460c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004610:	f8cd b008 	str.w	fp, [sp, #8]
 8004614:	68a1      	ldr	r1, [r4, #8]
 8004616:	b181      	cbz	r1, 800463a <_scanf_float+0x72>
 8004618:	6833      	ldr	r3, [r6, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b49      	cmp	r3, #73	; 0x49
 800461e:	d071      	beq.n	8004704 <_scanf_float+0x13c>
 8004620:	d84d      	bhi.n	80046be <_scanf_float+0xf6>
 8004622:	2b39      	cmp	r3, #57	; 0x39
 8004624:	d840      	bhi.n	80046a8 <_scanf_float+0xe0>
 8004626:	2b31      	cmp	r3, #49	; 0x31
 8004628:	f080 8088 	bcs.w	800473c <_scanf_float+0x174>
 800462c:	2b2d      	cmp	r3, #45	; 0x2d
 800462e:	f000 8090 	beq.w	8004752 <_scanf_float+0x18a>
 8004632:	d815      	bhi.n	8004660 <_scanf_float+0x98>
 8004634:	2b2b      	cmp	r3, #43	; 0x2b
 8004636:	f000 808c 	beq.w	8004752 <_scanf_float+0x18a>
 800463a:	f1b9 0f00 	cmp.w	r9, #0
 800463e:	d003      	beq.n	8004648 <_scanf_float+0x80>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	3a01      	subs	r2, #1
 800464a:	2a01      	cmp	r2, #1
 800464c:	f200 80ea 	bhi.w	8004824 <_scanf_float+0x25c>
 8004650:	4545      	cmp	r5, r8
 8004652:	f200 80dc 	bhi.w	800480e <_scanf_float+0x246>
 8004656:	2601      	movs	r6, #1
 8004658:	4630      	mov	r0, r6
 800465a:	b007      	add	sp, #28
 800465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004660:	2b2e      	cmp	r3, #46	; 0x2e
 8004662:	f000 809f 	beq.w	80047a4 <_scanf_float+0x1dc>
 8004666:	2b30      	cmp	r3, #48	; 0x30
 8004668:	d1e7      	bne.n	800463a <_scanf_float+0x72>
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004670:	d064      	beq.n	800473c <_scanf_float+0x174>
 8004672:	9b01      	ldr	r3, [sp, #4]
 8004674:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004678:	6020      	str	r0, [r4, #0]
 800467a:	f109 0901 	add.w	r9, r9, #1
 800467e:	b11b      	cbz	r3, 8004688 <_scanf_float+0xc0>
 8004680:	3b01      	subs	r3, #1
 8004682:	3101      	adds	r1, #1
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	60a1      	str	r1, [r4, #8]
 8004688:	68a3      	ldr	r3, [r4, #8]
 800468a:	3b01      	subs	r3, #1
 800468c:	60a3      	str	r3, [r4, #8]
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	3301      	adds	r3, #1
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	6873      	ldr	r3, [r6, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	6073      	str	r3, [r6, #4]
 800469c:	f340 80ac 	ble.w	80047f8 <_scanf_float+0x230>
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	e7b5      	b.n	8004614 <_scanf_float+0x4c>
 80046a8:	2b45      	cmp	r3, #69	; 0x45
 80046aa:	f000 8085 	beq.w	80047b8 <_scanf_float+0x1f0>
 80046ae:	2b46      	cmp	r3, #70	; 0x46
 80046b0:	d06a      	beq.n	8004788 <_scanf_float+0x1c0>
 80046b2:	2b41      	cmp	r3, #65	; 0x41
 80046b4:	d1c1      	bne.n	800463a <_scanf_float+0x72>
 80046b6:	2a01      	cmp	r2, #1
 80046b8:	d1bf      	bne.n	800463a <_scanf_float+0x72>
 80046ba:	2202      	movs	r2, #2
 80046bc:	e046      	b.n	800474c <_scanf_float+0x184>
 80046be:	2b65      	cmp	r3, #101	; 0x65
 80046c0:	d07a      	beq.n	80047b8 <_scanf_float+0x1f0>
 80046c2:	d818      	bhi.n	80046f6 <_scanf_float+0x12e>
 80046c4:	2b54      	cmp	r3, #84	; 0x54
 80046c6:	d066      	beq.n	8004796 <_scanf_float+0x1ce>
 80046c8:	d811      	bhi.n	80046ee <_scanf_float+0x126>
 80046ca:	2b4e      	cmp	r3, #78	; 0x4e
 80046cc:	d1b5      	bne.n	800463a <_scanf_float+0x72>
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	d146      	bne.n	8004760 <_scanf_float+0x198>
 80046d2:	f1b9 0f00 	cmp.w	r9, #0
 80046d6:	d145      	bne.n	8004764 <_scanf_float+0x19c>
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80046de:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80046e2:	d13f      	bne.n	8004764 <_scanf_float+0x19c>
 80046e4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80046e8:	6021      	str	r1, [r4, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	e02e      	b.n	800474c <_scanf_float+0x184>
 80046ee:	2b59      	cmp	r3, #89	; 0x59
 80046f0:	d01e      	beq.n	8004730 <_scanf_float+0x168>
 80046f2:	2b61      	cmp	r3, #97	; 0x61
 80046f4:	e7de      	b.n	80046b4 <_scanf_float+0xec>
 80046f6:	2b6e      	cmp	r3, #110	; 0x6e
 80046f8:	d0e9      	beq.n	80046ce <_scanf_float+0x106>
 80046fa:	d815      	bhi.n	8004728 <_scanf_float+0x160>
 80046fc:	2b66      	cmp	r3, #102	; 0x66
 80046fe:	d043      	beq.n	8004788 <_scanf_float+0x1c0>
 8004700:	2b69      	cmp	r3, #105	; 0x69
 8004702:	d19a      	bne.n	800463a <_scanf_float+0x72>
 8004704:	f1bb 0f00 	cmp.w	fp, #0
 8004708:	d138      	bne.n	800477c <_scanf_float+0x1b4>
 800470a:	f1b9 0f00 	cmp.w	r9, #0
 800470e:	d197      	bne.n	8004640 <_scanf_float+0x78>
 8004710:	6821      	ldr	r1, [r4, #0]
 8004712:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004716:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800471a:	d195      	bne.n	8004648 <_scanf_float+0x80>
 800471c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004720:	6021      	str	r1, [r4, #0]
 8004722:	f04f 0b01 	mov.w	fp, #1
 8004726:	e011      	b.n	800474c <_scanf_float+0x184>
 8004728:	2b74      	cmp	r3, #116	; 0x74
 800472a:	d034      	beq.n	8004796 <_scanf_float+0x1ce>
 800472c:	2b79      	cmp	r3, #121	; 0x79
 800472e:	d184      	bne.n	800463a <_scanf_float+0x72>
 8004730:	f1bb 0f07 	cmp.w	fp, #7
 8004734:	d181      	bne.n	800463a <_scanf_float+0x72>
 8004736:	f04f 0b08 	mov.w	fp, #8
 800473a:	e007      	b.n	800474c <_scanf_float+0x184>
 800473c:	eb12 0f0b 	cmn.w	r2, fp
 8004740:	f47f af7b 	bne.w	800463a <_scanf_float+0x72>
 8004744:	6821      	ldr	r1, [r4, #0]
 8004746:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800474a:	6021      	str	r1, [r4, #0]
 800474c:	702b      	strb	r3, [r5, #0]
 800474e:	3501      	adds	r5, #1
 8004750:	e79a      	b.n	8004688 <_scanf_float+0xc0>
 8004752:	6821      	ldr	r1, [r4, #0]
 8004754:	0608      	lsls	r0, r1, #24
 8004756:	f57f af70 	bpl.w	800463a <_scanf_float+0x72>
 800475a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800475e:	e7f4      	b.n	800474a <_scanf_float+0x182>
 8004760:	2a02      	cmp	r2, #2
 8004762:	d047      	beq.n	80047f4 <_scanf_float+0x22c>
 8004764:	f1bb 0f01 	cmp.w	fp, #1
 8004768:	d003      	beq.n	8004772 <_scanf_float+0x1aa>
 800476a:	f1bb 0f04 	cmp.w	fp, #4
 800476e:	f47f af64 	bne.w	800463a <_scanf_float+0x72>
 8004772:	f10b 0b01 	add.w	fp, fp, #1
 8004776:	fa5f fb8b 	uxtb.w	fp, fp
 800477a:	e7e7      	b.n	800474c <_scanf_float+0x184>
 800477c:	f1bb 0f03 	cmp.w	fp, #3
 8004780:	d0f7      	beq.n	8004772 <_scanf_float+0x1aa>
 8004782:	f1bb 0f05 	cmp.w	fp, #5
 8004786:	e7f2      	b.n	800476e <_scanf_float+0x1a6>
 8004788:	f1bb 0f02 	cmp.w	fp, #2
 800478c:	f47f af55 	bne.w	800463a <_scanf_float+0x72>
 8004790:	f04f 0b03 	mov.w	fp, #3
 8004794:	e7da      	b.n	800474c <_scanf_float+0x184>
 8004796:	f1bb 0f06 	cmp.w	fp, #6
 800479a:	f47f af4e 	bne.w	800463a <_scanf_float+0x72>
 800479e:	f04f 0b07 	mov.w	fp, #7
 80047a2:	e7d3      	b.n	800474c <_scanf_float+0x184>
 80047a4:	6821      	ldr	r1, [r4, #0]
 80047a6:	0588      	lsls	r0, r1, #22
 80047a8:	f57f af47 	bpl.w	800463a <_scanf_float+0x72>
 80047ac:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80047b0:	6021      	str	r1, [r4, #0]
 80047b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80047b6:	e7c9      	b.n	800474c <_scanf_float+0x184>
 80047b8:	6821      	ldr	r1, [r4, #0]
 80047ba:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80047be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80047c2:	d006      	beq.n	80047d2 <_scanf_float+0x20a>
 80047c4:	0548      	lsls	r0, r1, #21
 80047c6:	f57f af38 	bpl.w	800463a <_scanf_float+0x72>
 80047ca:	f1b9 0f00 	cmp.w	r9, #0
 80047ce:	f43f af3b 	beq.w	8004648 <_scanf_float+0x80>
 80047d2:	0588      	lsls	r0, r1, #22
 80047d4:	bf58      	it	pl
 80047d6:	9802      	ldrpl	r0, [sp, #8]
 80047d8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80047dc:	bf58      	it	pl
 80047de:	eba9 0000 	subpl.w	r0, r9, r0
 80047e2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80047e6:	bf58      	it	pl
 80047e8:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80047ec:	6021      	str	r1, [r4, #0]
 80047ee:	f04f 0900 	mov.w	r9, #0
 80047f2:	e7ab      	b.n	800474c <_scanf_float+0x184>
 80047f4:	2203      	movs	r2, #3
 80047f6:	e7a9      	b.n	800474c <_scanf_float+0x184>
 80047f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047fc:	4631      	mov	r1, r6
 80047fe:	4638      	mov	r0, r7
 8004800:	9205      	str	r2, [sp, #20]
 8004802:	4798      	blx	r3
 8004804:	9a05      	ldr	r2, [sp, #20]
 8004806:	2800      	cmp	r0, #0
 8004808:	f43f af04 	beq.w	8004614 <_scanf_float+0x4c>
 800480c:	e715      	b.n	800463a <_scanf_float+0x72>
 800480e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004812:	4632      	mov	r2, r6
 8004814:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004818:	4638      	mov	r0, r7
 800481a:	4798      	blx	r3
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	3b01      	subs	r3, #1
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	e715      	b.n	8004650 <_scanf_float+0x88>
 8004824:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004828:	2b06      	cmp	r3, #6
 800482a:	d80a      	bhi.n	8004842 <_scanf_float+0x27a>
 800482c:	f1bb 0f02 	cmp.w	fp, #2
 8004830:	d967      	bls.n	8004902 <_scanf_float+0x33a>
 8004832:	f1ab 0b03 	sub.w	fp, fp, #3
 8004836:	fa5f fb8b 	uxtb.w	fp, fp
 800483a:	eba5 0b0b 	sub.w	fp, r5, fp
 800483e:	455d      	cmp	r5, fp
 8004840:	d14a      	bne.n	80048d8 <_scanf_float+0x310>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	05da      	lsls	r2, r3, #23
 8004846:	d51f      	bpl.n	8004888 <_scanf_float+0x2c0>
 8004848:	055b      	lsls	r3, r3, #21
 800484a:	d467      	bmi.n	800491c <_scanf_float+0x354>
 800484c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004850:	6923      	ldr	r3, [r4, #16]
 8004852:	2965      	cmp	r1, #101	; 0x65
 8004854:	f103 33ff 	add.w	r3, r3, #4294967295
 8004858:	f105 3bff 	add.w	fp, r5, #4294967295
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	d00d      	beq.n	800487c <_scanf_float+0x2b4>
 8004860:	2945      	cmp	r1, #69	; 0x45
 8004862:	d00b      	beq.n	800487c <_scanf_float+0x2b4>
 8004864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004868:	4632      	mov	r2, r6
 800486a:	4638      	mov	r0, r7
 800486c:	4798      	blx	r3
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004874:	3b01      	subs	r3, #1
 8004876:	f1a5 0b02 	sub.w	fp, r5, #2
 800487a:	6123      	str	r3, [r4, #16]
 800487c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004880:	4632      	mov	r2, r6
 8004882:	4638      	mov	r0, r7
 8004884:	4798      	blx	r3
 8004886:	465d      	mov	r5, fp
 8004888:	6826      	ldr	r6, [r4, #0]
 800488a:	f016 0610 	ands.w	r6, r6, #16
 800488e:	d176      	bne.n	800497e <_scanf_float+0x3b6>
 8004890:	702e      	strb	r6, [r5, #0]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489c:	d141      	bne.n	8004922 <_scanf_float+0x35a>
 800489e:	9b02      	ldr	r3, [sp, #8]
 80048a0:	eba9 0303 	sub.w	r3, r9, r3
 80048a4:	425a      	negs	r2, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d148      	bne.n	800493c <_scanf_float+0x374>
 80048aa:	4641      	mov	r1, r8
 80048ac:	2200      	movs	r2, #0
 80048ae:	4638      	mov	r0, r7
 80048b0:	f000 feca 	bl	8005648 <_strtod_r>
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	4680      	mov	r8, r0
 80048b8:	f015 0f02 	tst.w	r5, #2
 80048bc:	4689      	mov	r9, r1
 80048be:	f8da 3000 	ldr.w	r3, [sl]
 80048c2:	d046      	beq.n	8004952 <_scanf_float+0x38a>
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	f8ca 2000 	str.w	r2, [sl]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	e9c3 8900 	strd	r8, r9, [r3]
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60e3      	str	r3, [r4, #12]
 80048d6:	e6bf      	b.n	8004658 <_scanf_float+0x90>
 80048d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048dc:	4632      	mov	r2, r6
 80048de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80048e2:	4638      	mov	r0, r7
 80048e4:	4798      	blx	r3
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	e7a7      	b.n	800483e <_scanf_float+0x276>
 80048ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048f2:	4632      	mov	r2, r6
 80048f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80048f8:	4638      	mov	r0, r7
 80048fa:	4798      	blx	r3
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	3b01      	subs	r3, #1
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	4545      	cmp	r5, r8
 8004904:	d8f3      	bhi.n	80048ee <_scanf_float+0x326>
 8004906:	e6a6      	b.n	8004656 <_scanf_float+0x8e>
 8004908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800490c:	4632      	mov	r2, r6
 800490e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004912:	4638      	mov	r0, r7
 8004914:	4798      	blx	r3
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	3b01      	subs	r3, #1
 800491a:	6123      	str	r3, [r4, #16]
 800491c:	4545      	cmp	r5, r8
 800491e:	d8f3      	bhi.n	8004908 <_scanf_float+0x340>
 8004920:	e699      	b.n	8004656 <_scanf_float+0x8e>
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0c0      	beq.n	80048aa <_scanf_float+0x2e2>
 8004928:	9904      	ldr	r1, [sp, #16]
 800492a:	230a      	movs	r3, #10
 800492c:	4632      	mov	r2, r6
 800492e:	3101      	adds	r1, #1
 8004930:	4638      	mov	r0, r7
 8004932:	f000 ff15 	bl	8005760 <_strtol_r>
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	9d04      	ldr	r5, [sp, #16]
 800493a:	1ac2      	subs	r2, r0, r3
 800493c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004940:	429d      	cmp	r5, r3
 8004942:	bf28      	it	cs
 8004944:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <_scanf_float+0x3bc>)
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f838 	bl	80049c0 <siprintf>
 8004950:	e7ab      	b.n	80048aa <_scanf_float+0x2e2>
 8004952:	1d1f      	adds	r7, r3, #4
 8004954:	f015 0504 	ands.w	r5, r5, #4
 8004958:	f8ca 7000 	str.w	r7, [sl]
 800495c:	d1b5      	bne.n	80048ca <_scanf_float+0x302>
 800495e:	681f      	ldr	r7, [r3, #0]
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	f7fc f852 	bl	8000a0c <__aeabi_dcmpun>
 8004968:	b120      	cbz	r0, 8004974 <_scanf_float+0x3ac>
 800496a:	4628      	mov	r0, r5
 800496c:	f000 f824 	bl	80049b8 <nanf>
 8004970:	6038      	str	r0, [r7, #0]
 8004972:	e7ad      	b.n	80048d0 <_scanf_float+0x308>
 8004974:	4640      	mov	r0, r8
 8004976:	4649      	mov	r1, r9
 8004978:	f7fc f8a6 	bl	8000ac8 <__aeabi_d2f>
 800497c:	e7f8      	b.n	8004970 <_scanf_float+0x3a8>
 800497e:	2600      	movs	r6, #0
 8004980:	e66a      	b.n	8004658 <_scanf_float+0x90>
 8004982:	bf00      	nop
 8004984:	08008198 	.word	0x08008198

08004988 <iprintf>:
 8004988:	b40f      	push	{r0, r1, r2, r3}
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <iprintf+0x2c>)
 800498c:	b513      	push	{r0, r1, r4, lr}
 800498e:	681c      	ldr	r4, [r3, #0]
 8004990:	b124      	cbz	r4, 800499c <iprintf+0x14>
 8004992:	69a3      	ldr	r3, [r4, #24]
 8004994:	b913      	cbnz	r3, 800499c <iprintf+0x14>
 8004996:	4620      	mov	r0, r4
 8004998:	f001 fd76 	bl	8006488 <__sinit>
 800499c:	ab05      	add	r3, sp, #20
 800499e:	9a04      	ldr	r2, [sp, #16]
 80049a0:	68a1      	ldr	r1, [r4, #8]
 80049a2:	4620      	mov	r0, r4
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	f002 ff8f 	bl	80078c8 <_vfiprintf_r>
 80049aa:	b002      	add	sp, #8
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b0:	b004      	add	sp, #16
 80049b2:	4770      	bx	lr
 80049b4:	2000000c 	.word	0x2000000c

080049b8 <nanf>:
 80049b8:	4800      	ldr	r0, [pc, #0]	; (80049bc <nanf+0x4>)
 80049ba:	4770      	bx	lr
 80049bc:	7fc00000 	.word	0x7fc00000

080049c0 <siprintf>:
 80049c0:	b40e      	push	{r1, r2, r3}
 80049c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049c6:	b500      	push	{lr}
 80049c8:	b09c      	sub	sp, #112	; 0x70
 80049ca:	ab1d      	add	r3, sp, #116	; 0x74
 80049cc:	9002      	str	r0, [sp, #8]
 80049ce:	9006      	str	r0, [sp, #24]
 80049d0:	9107      	str	r1, [sp, #28]
 80049d2:	9104      	str	r1, [sp, #16]
 80049d4:	4808      	ldr	r0, [pc, #32]	; (80049f8 <siprintf+0x38>)
 80049d6:	4909      	ldr	r1, [pc, #36]	; (80049fc <siprintf+0x3c>)
 80049d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049dc:	9105      	str	r1, [sp, #20]
 80049de:	6800      	ldr	r0, [r0, #0]
 80049e0:	a902      	add	r1, sp, #8
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	f002 fe50 	bl	8007688 <_svfiprintf_r>
 80049e8:	2200      	movs	r2, #0
 80049ea:	9b02      	ldr	r3, [sp, #8]
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	b01c      	add	sp, #112	; 0x70
 80049f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f4:	b003      	add	sp, #12
 80049f6:	4770      	bx	lr
 80049f8:	2000000c 	.word	0x2000000c
 80049fc:	ffff0208 	.word	0xffff0208

08004a00 <sulp>:
 8004a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	460f      	mov	r7, r1
 8004a06:	4690      	mov	r8, r2
 8004a08:	f002 fc02 	bl	8007210 <__ulp>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	f1b8 0f00 	cmp.w	r8, #0
 8004a14:	d011      	beq.n	8004a3a <sulp+0x3a>
 8004a16:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004a1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dd0b      	ble.n	8004a3a <sulp+0x3a>
 8004a22:	2400      	movs	r4, #0
 8004a24:	051b      	lsls	r3, r3, #20
 8004a26:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	f7fb fd51 	bl	80004d8 <__aeabi_dmul>
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a42:	0000      	movs	r0, r0
 8004a44:	0000      	movs	r0, r0
	...

08004a48 <_strtod_l>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	461f      	mov	r7, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	b0a1      	sub	sp, #132	; 0x84
 8004a52:	4683      	mov	fp, r0
 8004a54:	4638      	mov	r0, r7
 8004a56:	460e      	mov	r6, r1
 8004a58:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a5a:	931c      	str	r3, [sp, #112]	; 0x70
 8004a5c:	f002 f8c9 	bl	8006bf2 <__localeconv_l>
 8004a60:	4680      	mov	r8, r0
 8004a62:	6800      	ldr	r0, [r0, #0]
 8004a64:	f7fb fb74 	bl	8000150 <strlen>
 8004a68:	f04f 0900 	mov.w	r9, #0
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	f04f 0a00 	mov.w	sl, #0
 8004a72:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	2a0d      	cmp	r2, #13
 8004a7a:	d832      	bhi.n	8004ae2 <_strtod_l+0x9a>
 8004a7c:	2a09      	cmp	r2, #9
 8004a7e:	d236      	bcs.n	8004aee <_strtod_l+0xa6>
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	d03e      	beq.n	8004b02 <_strtod_l+0xba>
 8004a84:	2300      	movs	r3, #0
 8004a86:	930d      	str	r3, [sp, #52]	; 0x34
 8004a88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004a8a:	782b      	ldrb	r3, [r5, #0]
 8004a8c:	2b30      	cmp	r3, #48	; 0x30
 8004a8e:	f040 80ac 	bne.w	8004bea <_strtod_l+0x1a2>
 8004a92:	786b      	ldrb	r3, [r5, #1]
 8004a94:	2b58      	cmp	r3, #88	; 0x58
 8004a96:	d001      	beq.n	8004a9c <_strtod_l+0x54>
 8004a98:	2b78      	cmp	r3, #120	; 0x78
 8004a9a:	d167      	bne.n	8004b6c <_strtod_l+0x124>
 8004a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a9e:	9702      	str	r7, [sp, #8]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	ab1c      	add	r3, sp, #112	; 0x70
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4a89      	ldr	r2, [pc, #548]	; (8004ccc <_strtod_l+0x284>)
 8004aa8:	ab1d      	add	r3, sp, #116	; 0x74
 8004aaa:	a91b      	add	r1, sp, #108	; 0x6c
 8004aac:	4658      	mov	r0, fp
 8004aae:	f001 fdc5 	bl	800663c <__gethex>
 8004ab2:	f010 0407 	ands.w	r4, r0, #7
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	d005      	beq.n	8004ac6 <_strtod_l+0x7e>
 8004aba:	2c06      	cmp	r4, #6
 8004abc:	d12b      	bne.n	8004b16 <_strtod_l+0xce>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	3501      	adds	r5, #1
 8004ac2:	951b      	str	r5, [sp, #108]	; 0x6c
 8004ac4:	930d      	str	r3, [sp, #52]	; 0x34
 8004ac6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 85a6 	bne.w	800561a <_strtod_l+0xbd2>
 8004ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad0:	b1e3      	cbz	r3, 8004b0c <_strtod_l+0xc4>
 8004ad2:	464a      	mov	r2, r9
 8004ad4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	b021      	add	sp, #132	; 0x84
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	2a2b      	cmp	r2, #43	; 0x2b
 8004ae4:	d015      	beq.n	8004b12 <_strtod_l+0xca>
 8004ae6:	2a2d      	cmp	r2, #45	; 0x2d
 8004ae8:	d004      	beq.n	8004af4 <_strtod_l+0xac>
 8004aea:	2a20      	cmp	r2, #32
 8004aec:	d1ca      	bne.n	8004a84 <_strtod_l+0x3c>
 8004aee:	3301      	adds	r3, #1
 8004af0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004af2:	e7bf      	b.n	8004a74 <_strtod_l+0x2c>
 8004af4:	2201      	movs	r2, #1
 8004af6:	920d      	str	r2, [sp, #52]	; 0x34
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	921b      	str	r2, [sp, #108]	; 0x6c
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1c2      	bne.n	8004a88 <_strtod_l+0x40>
 8004b02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b04:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8585 	bne.w	8005616 <_strtod_l+0xbce>
 8004b0c:	464a      	mov	r2, r9
 8004b0e:	4653      	mov	r3, sl
 8004b10:	e7e2      	b.n	8004ad8 <_strtod_l+0x90>
 8004b12:	2200      	movs	r2, #0
 8004b14:	e7ef      	b.n	8004af6 <_strtod_l+0xae>
 8004b16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b18:	b13a      	cbz	r2, 8004b2a <_strtod_l+0xe2>
 8004b1a:	2135      	movs	r1, #53	; 0x35
 8004b1c:	a81e      	add	r0, sp, #120	; 0x78
 8004b1e:	f002 fc6a 	bl	80073f6 <__copybits>
 8004b22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b24:	4658      	mov	r0, fp
 8004b26:	f002 f8dc 	bl	8006ce2 <_Bfree>
 8004b2a:	3c01      	subs	r4, #1
 8004b2c:	2c04      	cmp	r4, #4
 8004b2e:	d806      	bhi.n	8004b3e <_strtod_l+0xf6>
 8004b30:	e8df f004 	tbb	[pc, r4]
 8004b34:	1714030a 	.word	0x1714030a
 8004b38:	0a          	.byte	0x0a
 8004b39:	00          	.byte	0x00
 8004b3a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004b3e:	0731      	lsls	r1, r6, #28
 8004b40:	d5c1      	bpl.n	8004ac6 <_strtod_l+0x7e>
 8004b42:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004b46:	e7be      	b.n	8004ac6 <_strtod_l+0x7e>
 8004b48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004b4a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004b4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b56:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004b5a:	e7f0      	b.n	8004b3e <_strtod_l+0xf6>
 8004b5c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004cd0 <_strtod_l+0x288>
 8004b60:	e7ed      	b.n	8004b3e <_strtod_l+0xf6>
 8004b62:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004b66:	f04f 39ff 	mov.w	r9, #4294967295
 8004b6a:	e7e8      	b.n	8004b3e <_strtod_l+0xf6>
 8004b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d0f9      	beq.n	8004b6c <_strtod_l+0x124>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0a4      	beq.n	8004ac6 <_strtod_l+0x7e>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	2500      	movs	r5, #0
 8004b80:	220a      	movs	r2, #10
 8004b82:	9307      	str	r3, [sp, #28]
 8004b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b86:	9506      	str	r5, [sp, #24]
 8004b88:	9308      	str	r3, [sp, #32]
 8004b8a:	9504      	str	r5, [sp, #16]
 8004b8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004b8e:	7807      	ldrb	r7, [r0, #0]
 8004b90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004b94:	b2d9      	uxtb	r1, r3
 8004b96:	2909      	cmp	r1, #9
 8004b98:	d929      	bls.n	8004bee <_strtod_l+0x1a6>
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	f8d8 1000 	ldr.w	r1, [r8]
 8004ba0:	f002 fffb 	bl	8007b9a <strncmp>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d031      	beq.n	8004c0c <_strtod_l+0x1c4>
 8004ba8:	2000      	movs	r0, #0
 8004baa:	463b      	mov	r3, r7
 8004bac:	4602      	mov	r2, r0
 8004bae:	9c04      	ldr	r4, [sp, #16]
 8004bb0:	9005      	str	r0, [sp, #20]
 8004bb2:	2b65      	cmp	r3, #101	; 0x65
 8004bb4:	d001      	beq.n	8004bba <_strtod_l+0x172>
 8004bb6:	2b45      	cmp	r3, #69	; 0x45
 8004bb8:	d114      	bne.n	8004be4 <_strtod_l+0x19c>
 8004bba:	b924      	cbnz	r4, 8004bc6 <_strtod_l+0x17e>
 8004bbc:	b910      	cbnz	r0, 8004bc4 <_strtod_l+0x17c>
 8004bbe:	9b07      	ldr	r3, [sp, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d09e      	beq.n	8004b02 <_strtod_l+0xba>
 8004bc4:	2400      	movs	r4, #0
 8004bc6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004bc8:	1c73      	adds	r3, r6, #1
 8004bca:	931b      	str	r3, [sp, #108]	; 0x6c
 8004bcc:	7873      	ldrb	r3, [r6, #1]
 8004bce:	2b2b      	cmp	r3, #43	; 0x2b
 8004bd0:	d078      	beq.n	8004cc4 <_strtod_l+0x27c>
 8004bd2:	2b2d      	cmp	r3, #45	; 0x2d
 8004bd4:	d070      	beq.n	8004cb8 <_strtod_l+0x270>
 8004bd6:	f04f 0c00 	mov.w	ip, #0
 8004bda:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004bde:	2f09      	cmp	r7, #9
 8004be0:	d97c      	bls.n	8004cdc <_strtod_l+0x294>
 8004be2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004be4:	f04f 0e00 	mov.w	lr, #0
 8004be8:	e09a      	b.n	8004d20 <_strtod_l+0x2d8>
 8004bea:	2300      	movs	r3, #0
 8004bec:	e7c7      	b.n	8004b7e <_strtod_l+0x136>
 8004bee:	9904      	ldr	r1, [sp, #16]
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	2908      	cmp	r1, #8
 8004bf4:	bfd7      	itett	le
 8004bf6:	9906      	ldrle	r1, [sp, #24]
 8004bf8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004bfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c00:	9306      	strle	r3, [sp, #24]
 8004c02:	9b04      	ldr	r3, [sp, #16]
 8004c04:	901b      	str	r0, [sp, #108]	; 0x6c
 8004c06:	3301      	adds	r3, #1
 8004c08:	9304      	str	r3, [sp, #16]
 8004c0a:	e7bf      	b.n	8004b8c <_strtod_l+0x144>
 8004c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c0e:	191a      	adds	r2, r3, r4
 8004c10:	921b      	str	r2, [sp, #108]	; 0x6c
 8004c12:	9a04      	ldr	r2, [sp, #16]
 8004c14:	5d1b      	ldrb	r3, [r3, r4]
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	d037      	beq.n	8004c8a <_strtod_l+0x242>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	9c04      	ldr	r4, [sp, #16]
 8004c1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004c22:	2909      	cmp	r1, #9
 8004c24:	d913      	bls.n	8004c4e <_strtod_l+0x206>
 8004c26:	2101      	movs	r1, #1
 8004c28:	9105      	str	r1, [sp, #20]
 8004c2a:	e7c2      	b.n	8004bb2 <_strtod_l+0x16a>
 8004c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c2e:	3001      	adds	r0, #1
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	921b      	str	r2, [sp, #108]	; 0x6c
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b30      	cmp	r3, #48	; 0x30
 8004c38:	d0f8      	beq.n	8004c2c <_strtod_l+0x1e4>
 8004c3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004c3e:	2a08      	cmp	r2, #8
 8004c40:	f200 84f0 	bhi.w	8005624 <_strtod_l+0xbdc>
 8004c44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004c46:	9208      	str	r2, [sp, #32]
 8004c48:	4602      	mov	r2, r0
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004c52:	f100 0101 	add.w	r1, r0, #1
 8004c56:	d012      	beq.n	8004c7e <_strtod_l+0x236>
 8004c58:	440a      	add	r2, r1
 8004c5a:	270a      	movs	r7, #10
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	eb00 0c04 	add.w	ip, r0, r4
 8004c62:	458c      	cmp	ip, r1
 8004c64:	d113      	bne.n	8004c8e <_strtod_l+0x246>
 8004c66:	1821      	adds	r1, r4, r0
 8004c68:	2908      	cmp	r1, #8
 8004c6a:	f104 0401 	add.w	r4, r4, #1
 8004c6e:	4404      	add	r4, r0
 8004c70:	dc19      	bgt.n	8004ca6 <_strtod_l+0x25e>
 8004c72:	210a      	movs	r1, #10
 8004c74:	9b06      	ldr	r3, [sp, #24]
 8004c76:	fb01 e303 	mla	r3, r1, r3, lr
 8004c7a:	9306      	str	r3, [sp, #24]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c80:	1c58      	adds	r0, r3, #1
 8004c82:	901b      	str	r0, [sp, #108]	; 0x6c
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	4608      	mov	r0, r1
 8004c88:	e7c9      	b.n	8004c1e <_strtod_l+0x1d6>
 8004c8a:	9804      	ldr	r0, [sp, #16]
 8004c8c:	e7d3      	b.n	8004c36 <_strtod_l+0x1ee>
 8004c8e:	2908      	cmp	r1, #8
 8004c90:	f101 0101 	add.w	r1, r1, #1
 8004c94:	dc03      	bgt.n	8004c9e <_strtod_l+0x256>
 8004c96:	9b06      	ldr	r3, [sp, #24]
 8004c98:	437b      	muls	r3, r7
 8004c9a:	9306      	str	r3, [sp, #24]
 8004c9c:	e7e1      	b.n	8004c62 <_strtod_l+0x21a>
 8004c9e:	2910      	cmp	r1, #16
 8004ca0:	bfd8      	it	le
 8004ca2:	437d      	mulle	r5, r7
 8004ca4:	e7dd      	b.n	8004c62 <_strtod_l+0x21a>
 8004ca6:	2c10      	cmp	r4, #16
 8004ca8:	bfdc      	itt	le
 8004caa:	210a      	movle	r1, #10
 8004cac:	fb01 e505 	mlale	r5, r1, r5, lr
 8004cb0:	e7e4      	b.n	8004c7c <_strtod_l+0x234>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	e781      	b.n	8004bbc <_strtod_l+0x174>
 8004cb8:	f04f 0c01 	mov.w	ip, #1
 8004cbc:	1cb3      	adds	r3, r6, #2
 8004cbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cc0:	78b3      	ldrb	r3, [r6, #2]
 8004cc2:	e78a      	b.n	8004bda <_strtod_l+0x192>
 8004cc4:	f04f 0c00 	mov.w	ip, #0
 8004cc8:	e7f8      	b.n	8004cbc <_strtod_l+0x274>
 8004cca:	bf00      	nop
 8004ccc:	080081a0 	.word	0x080081a0
 8004cd0:	7ff00000 	.word	0x7ff00000
 8004cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cd6:	1c5f      	adds	r7, r3, #1
 8004cd8:	971b      	str	r7, [sp, #108]	; 0x6c
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b30      	cmp	r3, #48	; 0x30
 8004cde:	d0f9      	beq.n	8004cd4 <_strtod_l+0x28c>
 8004ce0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004ce4:	2f08      	cmp	r7, #8
 8004ce6:	f63f af7d 	bhi.w	8004be4 <_strtod_l+0x19c>
 8004cea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004cee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cf4:	1c5f      	adds	r7, r3, #1
 8004cf6:	971b      	str	r7, [sp, #108]	; 0x6c
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004cfe:	f1b8 0f09 	cmp.w	r8, #9
 8004d02:	d937      	bls.n	8004d74 <_strtod_l+0x32c>
 8004d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d06:	1a7f      	subs	r7, r7, r1
 8004d08:	2f08      	cmp	r7, #8
 8004d0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004d0e:	dc37      	bgt.n	8004d80 <_strtod_l+0x338>
 8004d10:	45be      	cmp	lr, r7
 8004d12:	bfa8      	it	ge
 8004d14:	46be      	movge	lr, r7
 8004d16:	f1bc 0f00 	cmp.w	ip, #0
 8004d1a:	d001      	beq.n	8004d20 <_strtod_l+0x2d8>
 8004d1c:	f1ce 0e00 	rsb	lr, lr, #0
 8004d20:	2c00      	cmp	r4, #0
 8004d22:	d151      	bne.n	8004dc8 <_strtod_l+0x380>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f47f aece 	bne.w	8004ac6 <_strtod_l+0x7e>
 8004d2a:	9a07      	ldr	r2, [sp, #28]
 8004d2c:	2a00      	cmp	r2, #0
 8004d2e:	f47f aeca 	bne.w	8004ac6 <_strtod_l+0x7e>
 8004d32:	9a05      	ldr	r2, [sp, #20]
 8004d34:	2a00      	cmp	r2, #0
 8004d36:	f47f aee4 	bne.w	8004b02 <_strtod_l+0xba>
 8004d3a:	2b4e      	cmp	r3, #78	; 0x4e
 8004d3c:	d027      	beq.n	8004d8e <_strtod_l+0x346>
 8004d3e:	dc21      	bgt.n	8004d84 <_strtod_l+0x33c>
 8004d40:	2b49      	cmp	r3, #73	; 0x49
 8004d42:	f47f aede 	bne.w	8004b02 <_strtod_l+0xba>
 8004d46:	49a4      	ldr	r1, [pc, #656]	; (8004fd8 <_strtod_l+0x590>)
 8004d48:	a81b      	add	r0, sp, #108	; 0x6c
 8004d4a:	f001 feab 	bl	8006aa4 <__match>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	f43f aed7 	beq.w	8004b02 <_strtod_l+0xba>
 8004d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d56:	49a1      	ldr	r1, [pc, #644]	; (8004fdc <_strtod_l+0x594>)
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	a81b      	add	r0, sp, #108	; 0x6c
 8004d5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d5e:	f001 fea1 	bl	8006aa4 <__match>
 8004d62:	b910      	cbnz	r0, 8004d6a <_strtod_l+0x322>
 8004d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d66:	3301      	adds	r3, #1
 8004d68:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d6a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004ff0 <_strtod_l+0x5a8>
 8004d6e:	f04f 0900 	mov.w	r9, #0
 8004d72:	e6a8      	b.n	8004ac6 <_strtod_l+0x7e>
 8004d74:	210a      	movs	r1, #10
 8004d76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004d7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004d7e:	e7b8      	b.n	8004cf2 <_strtod_l+0x2aa>
 8004d80:	46be      	mov	lr, r7
 8004d82:	e7c8      	b.n	8004d16 <_strtod_l+0x2ce>
 8004d84:	2b69      	cmp	r3, #105	; 0x69
 8004d86:	d0de      	beq.n	8004d46 <_strtod_l+0x2fe>
 8004d88:	2b6e      	cmp	r3, #110	; 0x6e
 8004d8a:	f47f aeba 	bne.w	8004b02 <_strtod_l+0xba>
 8004d8e:	4994      	ldr	r1, [pc, #592]	; (8004fe0 <_strtod_l+0x598>)
 8004d90:	a81b      	add	r0, sp, #108	; 0x6c
 8004d92:	f001 fe87 	bl	8006aa4 <__match>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f43f aeb3 	beq.w	8004b02 <_strtod_l+0xba>
 8004d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b28      	cmp	r3, #40	; 0x28
 8004da2:	d10e      	bne.n	8004dc2 <_strtod_l+0x37a>
 8004da4:	aa1e      	add	r2, sp, #120	; 0x78
 8004da6:	498f      	ldr	r1, [pc, #572]	; (8004fe4 <_strtod_l+0x59c>)
 8004da8:	a81b      	add	r0, sp, #108	; 0x6c
 8004daa:	f001 fe8f 	bl	8006acc <__hexnan>
 8004dae:	2805      	cmp	r0, #5
 8004db0:	d107      	bne.n	8004dc2 <_strtod_l+0x37a>
 8004db2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004db4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004db8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004dbc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004dc0:	e681      	b.n	8004ac6 <_strtod_l+0x7e>
 8004dc2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004ff8 <_strtod_l+0x5b0>
 8004dc6:	e7d2      	b.n	8004d6e <_strtod_l+0x326>
 8004dc8:	ebae 0302 	sub.w	r3, lr, r2
 8004dcc:	9307      	str	r3, [sp, #28]
 8004dce:	9b04      	ldr	r3, [sp, #16]
 8004dd0:	9806      	ldr	r0, [sp, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf08      	it	eq
 8004dd6:	4623      	moveq	r3, r4
 8004dd8:	2c10      	cmp	r4, #16
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	46a0      	mov	r8, r4
 8004dde:	bfa8      	it	ge
 8004de0:	f04f 0810 	movge.w	r8, #16
 8004de4:	f7fb fafe 	bl	80003e4 <__aeabi_ui2d>
 8004de8:	2c09      	cmp	r4, #9
 8004dea:	4681      	mov	r9, r0
 8004dec:	468a      	mov	sl, r1
 8004dee:	dc13      	bgt.n	8004e18 <_strtod_l+0x3d0>
 8004df0:	9b07      	ldr	r3, [sp, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f43f ae67 	beq.w	8004ac6 <_strtod_l+0x7e>
 8004df8:	9b07      	ldr	r3, [sp, #28]
 8004dfa:	dd7e      	ble.n	8004efa <_strtod_l+0x4b2>
 8004dfc:	2b16      	cmp	r3, #22
 8004dfe:	dc65      	bgt.n	8004ecc <_strtod_l+0x484>
 8004e00:	4a79      	ldr	r2, [pc, #484]	; (8004fe8 <_strtod_l+0x5a0>)
 8004e02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004e06:	464a      	mov	r2, r9
 8004e08:	e9de 0100 	ldrd	r0, r1, [lr]
 8004e0c:	4653      	mov	r3, sl
 8004e0e:	f7fb fb63 	bl	80004d8 <__aeabi_dmul>
 8004e12:	4681      	mov	r9, r0
 8004e14:	468a      	mov	sl, r1
 8004e16:	e656      	b.n	8004ac6 <_strtod_l+0x7e>
 8004e18:	4b73      	ldr	r3, [pc, #460]	; (8004fe8 <_strtod_l+0x5a0>)
 8004e1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e22:	f7fb fb59 	bl	80004d8 <__aeabi_dmul>
 8004e26:	4606      	mov	r6, r0
 8004e28:	4628      	mov	r0, r5
 8004e2a:	460f      	mov	r7, r1
 8004e2c:	f7fb fada 	bl	80003e4 <__aeabi_ui2d>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4630      	mov	r0, r6
 8004e36:	4639      	mov	r1, r7
 8004e38:	f7fb f998 	bl	800016c <__adddf3>
 8004e3c:	2c0f      	cmp	r4, #15
 8004e3e:	4681      	mov	r9, r0
 8004e40:	468a      	mov	sl, r1
 8004e42:	ddd5      	ble.n	8004df0 <_strtod_l+0x3a8>
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	eba4 0808 	sub.w	r8, r4, r8
 8004e4a:	4498      	add	r8, r3
 8004e4c:	f1b8 0f00 	cmp.w	r8, #0
 8004e50:	f340 809a 	ble.w	8004f88 <_strtod_l+0x540>
 8004e54:	f018 030f 	ands.w	r3, r8, #15
 8004e58:	d00a      	beq.n	8004e70 <_strtod_l+0x428>
 8004e5a:	4963      	ldr	r1, [pc, #396]	; (8004fe8 <_strtod_l+0x5a0>)
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e66:	4653      	mov	r3, sl
 8004e68:	f7fb fb36 	bl	80004d8 <__aeabi_dmul>
 8004e6c:	4681      	mov	r9, r0
 8004e6e:	468a      	mov	sl, r1
 8004e70:	f038 080f 	bics.w	r8, r8, #15
 8004e74:	d077      	beq.n	8004f66 <_strtod_l+0x51e>
 8004e76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004e7a:	dd4b      	ble.n	8004f14 <_strtod_l+0x4cc>
 8004e7c:	f04f 0800 	mov.w	r8, #0
 8004e80:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e84:	f8cd 8020 	str.w	r8, [sp, #32]
 8004e88:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e8c:	2322      	movs	r3, #34	; 0x22
 8004e8e:	f04f 0900 	mov.w	r9, #0
 8004e92:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004ff0 <_strtod_l+0x5a8>
 8004e96:	f8cb 3000 	str.w	r3, [fp]
 8004e9a:	9b08      	ldr	r3, [sp, #32]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f43f ae12 	beq.w	8004ac6 <_strtod_l+0x7e>
 8004ea2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	f001 ff1c 	bl	8006ce2 <_Bfree>
 8004eaa:	9906      	ldr	r1, [sp, #24]
 8004eac:	4658      	mov	r0, fp
 8004eae:	f001 ff18 	bl	8006ce2 <_Bfree>
 8004eb2:	9904      	ldr	r1, [sp, #16]
 8004eb4:	4658      	mov	r0, fp
 8004eb6:	f001 ff14 	bl	8006ce2 <_Bfree>
 8004eba:	9908      	ldr	r1, [sp, #32]
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	f001 ff10 	bl	8006ce2 <_Bfree>
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	4658      	mov	r0, fp
 8004ec6:	f001 ff0c 	bl	8006ce2 <_Bfree>
 8004eca:	e5fc      	b.n	8004ac6 <_strtod_l+0x7e>
 8004ecc:	9a07      	ldr	r2, [sp, #28]
 8004ece:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	dbb6      	blt.n	8004e44 <_strtod_l+0x3fc>
 8004ed6:	4d44      	ldr	r5, [pc, #272]	; (8004fe8 <_strtod_l+0x5a0>)
 8004ed8:	f1c4 040f 	rsb	r4, r4, #15
 8004edc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee6:	4653      	mov	r3, sl
 8004ee8:	f7fb faf6 	bl	80004d8 <__aeabi_dmul>
 8004eec:	9b07      	ldr	r3, [sp, #28]
 8004eee:	1b1c      	subs	r4, r3, r4
 8004ef0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004ef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ef8:	e789      	b.n	8004e0e <_strtod_l+0x3c6>
 8004efa:	f113 0f16 	cmn.w	r3, #22
 8004efe:	dba1      	blt.n	8004e44 <_strtod_l+0x3fc>
 8004f00:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <_strtod_l+0x5a0>)
 8004f02:	4648      	mov	r0, r9
 8004f04:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004f08:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	f7fb fc0d 	bl	800072c <__aeabi_ddiv>
 8004f12:	e77e      	b.n	8004e12 <_strtod_l+0x3ca>
 8004f14:	2300      	movs	r3, #0
 8004f16:	4648      	mov	r0, r9
 8004f18:	4651      	mov	r1, sl
 8004f1a:	461d      	mov	r5, r3
 8004f1c:	4e33      	ldr	r6, [pc, #204]	; (8004fec <_strtod_l+0x5a4>)
 8004f1e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004f22:	f1b8 0f01 	cmp.w	r8, #1
 8004f26:	dc21      	bgt.n	8004f6c <_strtod_l+0x524>
 8004f28:	b10b      	cbz	r3, 8004f2e <_strtod_l+0x4e6>
 8004f2a:	4681      	mov	r9, r0
 8004f2c:	468a      	mov	sl, r1
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <_strtod_l+0x5a4>)
 8004f30:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004f34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004f38:	464a      	mov	r2, r9
 8004f3a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004f3e:	4653      	mov	r3, sl
 8004f40:	f7fb faca 	bl	80004d8 <__aeabi_dmul>
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <_strtod_l+0x5a8>)
 8004f46:	460a      	mov	r2, r1
 8004f48:	400b      	ands	r3, r1
 8004f4a:	492a      	ldr	r1, [pc, #168]	; (8004ff4 <_strtod_l+0x5ac>)
 8004f4c:	4681      	mov	r9, r0
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	d894      	bhi.n	8004e7c <_strtod_l+0x434>
 8004f52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f56:	428b      	cmp	r3, r1
 8004f58:	bf86      	itte	hi
 8004f5a:	f04f 39ff 	movhi.w	r9, #4294967295
 8004f5e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004ffc <_strtod_l+0x5b4>
 8004f62:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004f66:	2300      	movs	r3, #0
 8004f68:	9305      	str	r3, [sp, #20]
 8004f6a:	e07b      	b.n	8005064 <_strtod_l+0x61c>
 8004f6c:	f018 0f01 	tst.w	r8, #1
 8004f70:	d006      	beq.n	8004f80 <_strtod_l+0x538>
 8004f72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb faad 	bl	80004d8 <__aeabi_dmul>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	3501      	adds	r5, #1
 8004f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f86:	e7cc      	b.n	8004f22 <_strtod_l+0x4da>
 8004f88:	d0ed      	beq.n	8004f66 <_strtod_l+0x51e>
 8004f8a:	f1c8 0800 	rsb	r8, r8, #0
 8004f8e:	f018 020f 	ands.w	r2, r8, #15
 8004f92:	d00a      	beq.n	8004faa <_strtod_l+0x562>
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <_strtod_l+0x5a0>)
 8004f96:	4648      	mov	r0, r9
 8004f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb fbc3 	bl	800072c <__aeabi_ddiv>
 8004fa6:	4681      	mov	r9, r0
 8004fa8:	468a      	mov	sl, r1
 8004faa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004fae:	d0da      	beq.n	8004f66 <_strtod_l+0x51e>
 8004fb0:	f1b8 0f1f 	cmp.w	r8, #31
 8004fb4:	dd24      	ble.n	8005000 <_strtod_l+0x5b8>
 8004fb6:	f04f 0800 	mov.w	r8, #0
 8004fba:	f8cd 8010 	str.w	r8, [sp, #16]
 8004fbe:	f8cd 8020 	str.w	r8, [sp, #32]
 8004fc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fc6:	2322      	movs	r3, #34	; 0x22
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	f04f 0a00 	mov.w	sl, #0
 8004fd0:	f8cb 3000 	str.w	r3, [fp]
 8004fd4:	e761      	b.n	8004e9a <_strtod_l+0x452>
 8004fd6:	bf00      	nop
 8004fd8:	08008169 	.word	0x08008169
 8004fdc:	080081f3 	.word	0x080081f3
 8004fe0:	08008171 	.word	0x08008171
 8004fe4:	080081b4 	.word	0x080081b4
 8004fe8:	08008298 	.word	0x08008298
 8004fec:	08008270 	.word	0x08008270
 8004ff0:	7ff00000 	.word	0x7ff00000
 8004ff4:	7ca00000 	.word	0x7ca00000
 8004ff8:	fff80000 	.word	0xfff80000
 8004ffc:	7fefffff 	.word	0x7fefffff
 8005000:	f018 0310 	ands.w	r3, r8, #16
 8005004:	bf18      	it	ne
 8005006:	236a      	movne	r3, #106	; 0x6a
 8005008:	4648      	mov	r0, r9
 800500a:	9305      	str	r3, [sp, #20]
 800500c:	4651      	mov	r1, sl
 800500e:	2300      	movs	r3, #0
 8005010:	4da1      	ldr	r5, [pc, #644]	; (8005298 <_strtod_l+0x850>)
 8005012:	f1b8 0f00 	cmp.w	r8, #0
 8005016:	f300 8113 	bgt.w	8005240 <_strtod_l+0x7f8>
 800501a:	b10b      	cbz	r3, 8005020 <_strtod_l+0x5d8>
 800501c:	4681      	mov	r9, r0
 800501e:	468a      	mov	sl, r1
 8005020:	9b05      	ldr	r3, [sp, #20]
 8005022:	b1bb      	cbz	r3, 8005054 <_strtod_l+0x60c>
 8005024:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005028:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800502c:	2b00      	cmp	r3, #0
 800502e:	4651      	mov	r1, sl
 8005030:	dd10      	ble.n	8005054 <_strtod_l+0x60c>
 8005032:	2b1f      	cmp	r3, #31
 8005034:	f340 8110 	ble.w	8005258 <_strtod_l+0x810>
 8005038:	2b34      	cmp	r3, #52	; 0x34
 800503a:	bfd8      	it	le
 800503c:	f04f 32ff 	movle.w	r2, #4294967295
 8005040:	f04f 0900 	mov.w	r9, #0
 8005044:	bfcf      	iteee	gt
 8005046:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800504a:	3b20      	suble	r3, #32
 800504c:	fa02 f303 	lslle.w	r3, r2, r3
 8005050:	ea03 0a01 	andle.w	sl, r3, r1
 8005054:	2200      	movs	r2, #0
 8005056:	2300      	movs	r3, #0
 8005058:	4648      	mov	r0, r9
 800505a:	4651      	mov	r1, sl
 800505c:	f7fb fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8005060:	2800      	cmp	r0, #0
 8005062:	d1a8      	bne.n	8004fb6 <_strtod_l+0x56e>
 8005064:	9b06      	ldr	r3, [sp, #24]
 8005066:	9a04      	ldr	r2, [sp, #16]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	9908      	ldr	r1, [sp, #32]
 800506c:	4623      	mov	r3, r4
 800506e:	4658      	mov	r0, fp
 8005070:	f001 fe89 	bl	8006d86 <__s2b>
 8005074:	9008      	str	r0, [sp, #32]
 8005076:	2800      	cmp	r0, #0
 8005078:	f43f af00 	beq.w	8004e7c <_strtod_l+0x434>
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	9b07      	ldr	r3, [sp, #28]
 8005080:	2a00      	cmp	r2, #0
 8005082:	f1c3 0300 	rsb	r3, r3, #0
 8005086:	bfa8      	it	ge
 8005088:	2300      	movge	r3, #0
 800508a:	f04f 0800 	mov.w	r8, #0
 800508e:	930e      	str	r3, [sp, #56]	; 0x38
 8005090:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005094:	9316      	str	r3, [sp, #88]	; 0x58
 8005096:	f8cd 8010 	str.w	r8, [sp, #16]
 800509a:	9b08      	ldr	r3, [sp, #32]
 800509c:	4658      	mov	r0, fp
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	f001 fdeb 	bl	8006c7a <_Balloc>
 80050a4:	9006      	str	r0, [sp, #24]
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f43f aef0 	beq.w	8004e8c <_strtod_l+0x444>
 80050ac:	9b08      	ldr	r3, [sp, #32]
 80050ae:	300c      	adds	r0, #12
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	f103 010c 	add.w	r1, r3, #12
 80050b6:	3202      	adds	r2, #2
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	f001 fdd3 	bl	8006c64 <memcpy>
 80050be:	ab1e      	add	r3, sp, #120	; 0x78
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	ab1d      	add	r3, sp, #116	; 0x74
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	464a      	mov	r2, r9
 80050c8:	4653      	mov	r3, sl
 80050ca:	4658      	mov	r0, fp
 80050cc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80050d0:	f002 f914 	bl	80072fc <__d2b>
 80050d4:	901c      	str	r0, [sp, #112]	; 0x70
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f aed8 	beq.w	8004e8c <_strtod_l+0x444>
 80050dc:	2101      	movs	r1, #1
 80050de:	4658      	mov	r0, fp
 80050e0:	f001 fedd 	bl	8006e9e <__i2b>
 80050e4:	9004      	str	r0, [sp, #16]
 80050e6:	4603      	mov	r3, r0
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f43f aecf 	beq.w	8004e8c <_strtod_l+0x444>
 80050ee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80050f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	bfab      	itete	ge
 80050f6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80050f8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80050fa:	18ee      	addge	r6, r5, r3
 80050fc:	1b5c      	sublt	r4, r3, r5
 80050fe:	9b05      	ldr	r3, [sp, #20]
 8005100:	bfa8      	it	ge
 8005102:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005104:	eba5 0503 	sub.w	r5, r5, r3
 8005108:	4415      	add	r5, r2
 800510a:	4b64      	ldr	r3, [pc, #400]	; (800529c <_strtod_l+0x854>)
 800510c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005110:	bfb8      	it	lt
 8005112:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005114:	429d      	cmp	r5, r3
 8005116:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800511a:	f280 80af 	bge.w	800527c <_strtod_l+0x834>
 800511e:	1b5b      	subs	r3, r3, r5
 8005120:	2b1f      	cmp	r3, #31
 8005122:	eba2 0203 	sub.w	r2, r2, r3
 8005126:	f04f 0701 	mov.w	r7, #1
 800512a:	f300 809c 	bgt.w	8005266 <_strtod_l+0x81e>
 800512e:	2500      	movs	r5, #0
 8005130:	fa07 f303 	lsl.w	r3, r7, r3
 8005134:	930f      	str	r3, [sp, #60]	; 0x3c
 8005136:	18b7      	adds	r7, r6, r2
 8005138:	9b05      	ldr	r3, [sp, #20]
 800513a:	42be      	cmp	r6, r7
 800513c:	4414      	add	r4, r2
 800513e:	441c      	add	r4, r3
 8005140:	4633      	mov	r3, r6
 8005142:	bfa8      	it	ge
 8005144:	463b      	movge	r3, r7
 8005146:	42a3      	cmp	r3, r4
 8005148:	bfa8      	it	ge
 800514a:	4623      	movge	r3, r4
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfc2      	ittt	gt
 8005150:	1aff      	subgt	r7, r7, r3
 8005152:	1ae4      	subgt	r4, r4, r3
 8005154:	1af6      	subgt	r6, r6, r3
 8005156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005158:	b1bb      	cbz	r3, 800518a <_strtod_l+0x742>
 800515a:	461a      	mov	r2, r3
 800515c:	9904      	ldr	r1, [sp, #16]
 800515e:	4658      	mov	r0, fp
 8005160:	f001 ff3c 	bl	8006fdc <__pow5mult>
 8005164:	9004      	str	r0, [sp, #16]
 8005166:	2800      	cmp	r0, #0
 8005168:	f43f ae90 	beq.w	8004e8c <_strtod_l+0x444>
 800516c:	4601      	mov	r1, r0
 800516e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005170:	4658      	mov	r0, fp
 8005172:	f001 fe9d 	bl	8006eb0 <__multiply>
 8005176:	9009      	str	r0, [sp, #36]	; 0x24
 8005178:	2800      	cmp	r0, #0
 800517a:	f43f ae87 	beq.w	8004e8c <_strtod_l+0x444>
 800517e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005180:	4658      	mov	r0, fp
 8005182:	f001 fdae 	bl	8006ce2 <_Bfree>
 8005186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005188:	931c      	str	r3, [sp, #112]	; 0x70
 800518a:	2f00      	cmp	r7, #0
 800518c:	dc7a      	bgt.n	8005284 <_strtod_l+0x83c>
 800518e:	9b07      	ldr	r3, [sp, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd08      	ble.n	80051a6 <_strtod_l+0x75e>
 8005194:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005196:	9906      	ldr	r1, [sp, #24]
 8005198:	4658      	mov	r0, fp
 800519a:	f001 ff1f 	bl	8006fdc <__pow5mult>
 800519e:	9006      	str	r0, [sp, #24]
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f43f ae73 	beq.w	8004e8c <_strtod_l+0x444>
 80051a6:	2c00      	cmp	r4, #0
 80051a8:	dd08      	ble.n	80051bc <_strtod_l+0x774>
 80051aa:	4622      	mov	r2, r4
 80051ac:	9906      	ldr	r1, [sp, #24]
 80051ae:	4658      	mov	r0, fp
 80051b0:	f001 ff62 	bl	8007078 <__lshift>
 80051b4:	9006      	str	r0, [sp, #24]
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f43f ae68 	beq.w	8004e8c <_strtod_l+0x444>
 80051bc:	2e00      	cmp	r6, #0
 80051be:	dd08      	ble.n	80051d2 <_strtod_l+0x78a>
 80051c0:	4632      	mov	r2, r6
 80051c2:	9904      	ldr	r1, [sp, #16]
 80051c4:	4658      	mov	r0, fp
 80051c6:	f001 ff57 	bl	8007078 <__lshift>
 80051ca:	9004      	str	r0, [sp, #16]
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f43f ae5d 	beq.w	8004e8c <_strtod_l+0x444>
 80051d2:	9a06      	ldr	r2, [sp, #24]
 80051d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051d6:	4658      	mov	r0, fp
 80051d8:	f001 ffbc 	bl	8007154 <__mdiff>
 80051dc:	4680      	mov	r8, r0
 80051de:	2800      	cmp	r0, #0
 80051e0:	f43f ae54 	beq.w	8004e8c <_strtod_l+0x444>
 80051e4:	2400      	movs	r4, #0
 80051e6:	68c3      	ldr	r3, [r0, #12]
 80051e8:	9904      	ldr	r1, [sp, #16]
 80051ea:	60c4      	str	r4, [r0, #12]
 80051ec:	930c      	str	r3, [sp, #48]	; 0x30
 80051ee:	f001 ff97 	bl	8007120 <__mcmp>
 80051f2:	42a0      	cmp	r0, r4
 80051f4:	da54      	bge.n	80052a0 <_strtod_l+0x858>
 80051f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051f8:	b9f3      	cbnz	r3, 8005238 <_strtod_l+0x7f0>
 80051fa:	f1b9 0f00 	cmp.w	r9, #0
 80051fe:	d11b      	bne.n	8005238 <_strtod_l+0x7f0>
 8005200:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005204:	b9c3      	cbnz	r3, 8005238 <_strtod_l+0x7f0>
 8005206:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800520a:	0d1b      	lsrs	r3, r3, #20
 800520c:	051b      	lsls	r3, r3, #20
 800520e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005212:	d911      	bls.n	8005238 <_strtod_l+0x7f0>
 8005214:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005218:	b91b      	cbnz	r3, 8005222 <_strtod_l+0x7da>
 800521a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800521e:	2b01      	cmp	r3, #1
 8005220:	dd0a      	ble.n	8005238 <_strtod_l+0x7f0>
 8005222:	4641      	mov	r1, r8
 8005224:	2201      	movs	r2, #1
 8005226:	4658      	mov	r0, fp
 8005228:	f001 ff26 	bl	8007078 <__lshift>
 800522c:	9904      	ldr	r1, [sp, #16]
 800522e:	4680      	mov	r8, r0
 8005230:	f001 ff76 	bl	8007120 <__mcmp>
 8005234:	2800      	cmp	r0, #0
 8005236:	dc68      	bgt.n	800530a <_strtod_l+0x8c2>
 8005238:	9b05      	ldr	r3, [sp, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d172      	bne.n	8005324 <_strtod_l+0x8dc>
 800523e:	e630      	b.n	8004ea2 <_strtod_l+0x45a>
 8005240:	f018 0f01 	tst.w	r8, #1
 8005244:	d004      	beq.n	8005250 <_strtod_l+0x808>
 8005246:	e9d5 2300 	ldrd	r2, r3, [r5]
 800524a:	f7fb f945 	bl	80004d8 <__aeabi_dmul>
 800524e:	2301      	movs	r3, #1
 8005250:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005254:	3508      	adds	r5, #8
 8005256:	e6dc      	b.n	8005012 <_strtod_l+0x5ca>
 8005258:	f04f 32ff 	mov.w	r2, #4294967295
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	ea03 0909 	and.w	r9, r3, r9
 8005264:	e6f6      	b.n	8005054 <_strtod_l+0x60c>
 8005266:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800526a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800526e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005272:	35e2      	adds	r5, #226	; 0xe2
 8005274:	fa07 f505 	lsl.w	r5, r7, r5
 8005278:	970f      	str	r7, [sp, #60]	; 0x3c
 800527a:	e75c      	b.n	8005136 <_strtod_l+0x6ee>
 800527c:	2301      	movs	r3, #1
 800527e:	2500      	movs	r5, #0
 8005280:	930f      	str	r3, [sp, #60]	; 0x3c
 8005282:	e758      	b.n	8005136 <_strtod_l+0x6ee>
 8005284:	463a      	mov	r2, r7
 8005286:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005288:	4658      	mov	r0, fp
 800528a:	f001 fef5 	bl	8007078 <__lshift>
 800528e:	901c      	str	r0, [sp, #112]	; 0x70
 8005290:	2800      	cmp	r0, #0
 8005292:	f47f af7c 	bne.w	800518e <_strtod_l+0x746>
 8005296:	e5f9      	b.n	8004e8c <_strtod_l+0x444>
 8005298:	080081c8 	.word	0x080081c8
 800529c:	fffffc02 	.word	0xfffffc02
 80052a0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80052a4:	f040 8089 	bne.w	80053ba <_strtod_l+0x972>
 80052a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052aa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80052ae:	b342      	cbz	r2, 8005302 <_strtod_l+0x8ba>
 80052b0:	4aaf      	ldr	r2, [pc, #700]	; (8005570 <_strtod_l+0xb28>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d156      	bne.n	8005364 <_strtod_l+0x91c>
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	4648      	mov	r0, r9
 80052ba:	b1eb      	cbz	r3, 80052f8 <_strtod_l+0x8b0>
 80052bc:	4653      	mov	r3, sl
 80052be:	4aad      	ldr	r2, [pc, #692]	; (8005574 <_strtod_l+0xb2c>)
 80052c0:	f04f 31ff 	mov.w	r1, #4294967295
 80052c4:	401a      	ands	r2, r3
 80052c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80052ca:	d818      	bhi.n	80052fe <_strtod_l+0x8b6>
 80052cc:	0d12      	lsrs	r2, r2, #20
 80052ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	4298      	cmp	r0, r3
 80052d8:	d144      	bne.n	8005364 <_strtod_l+0x91c>
 80052da:	4ba7      	ldr	r3, [pc, #668]	; (8005578 <_strtod_l+0xb30>)
 80052dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052de:	429a      	cmp	r2, r3
 80052e0:	d102      	bne.n	80052e8 <_strtod_l+0x8a0>
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f add2 	beq.w	8004e8c <_strtod_l+0x444>
 80052e8:	4ba2      	ldr	r3, [pc, #648]	; (8005574 <_strtod_l+0xb2c>)
 80052ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ec:	f04f 0900 	mov.w	r9, #0
 80052f0:	401a      	ands	r2, r3
 80052f2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80052f6:	e79f      	b.n	8005238 <_strtod_l+0x7f0>
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	e7eb      	b.n	80052d6 <_strtod_l+0x88e>
 80052fe:	460b      	mov	r3, r1
 8005300:	e7e9      	b.n	80052d6 <_strtod_l+0x88e>
 8005302:	bb7b      	cbnz	r3, 8005364 <_strtod_l+0x91c>
 8005304:	f1b9 0f00 	cmp.w	r9, #0
 8005308:	d12c      	bne.n	8005364 <_strtod_l+0x91c>
 800530a:	9905      	ldr	r1, [sp, #20]
 800530c:	4653      	mov	r3, sl
 800530e:	4a99      	ldr	r2, [pc, #612]	; (8005574 <_strtod_l+0xb2c>)
 8005310:	b1f1      	cbz	r1, 8005350 <_strtod_l+0x908>
 8005312:	ea02 010a 	and.w	r1, r2, sl
 8005316:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800531a:	dc19      	bgt.n	8005350 <_strtod_l+0x908>
 800531c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005320:	f77f ae51 	ble.w	8004fc6 <_strtod_l+0x57e>
 8005324:	2300      	movs	r3, #0
 8005326:	4a95      	ldr	r2, [pc, #596]	; (800557c <_strtod_l+0xb34>)
 8005328:	4648      	mov	r0, r9
 800532a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800532e:	4651      	mov	r1, sl
 8005330:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	4681      	mov	r9, r0
 800533a:	468a      	mov	sl, r1
 800533c:	2900      	cmp	r1, #0
 800533e:	f47f adb0 	bne.w	8004ea2 <_strtod_l+0x45a>
 8005342:	2800      	cmp	r0, #0
 8005344:	f47f adad 	bne.w	8004ea2 <_strtod_l+0x45a>
 8005348:	2322      	movs	r3, #34	; 0x22
 800534a:	f8cb 3000 	str.w	r3, [fp]
 800534e:	e5a8      	b.n	8004ea2 <_strtod_l+0x45a>
 8005350:	4013      	ands	r3, r2
 8005352:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005356:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800535a:	f04f 39ff 	mov.w	r9, #4294967295
 800535e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005362:	e769      	b.n	8005238 <_strtod_l+0x7f0>
 8005364:	b19d      	cbz	r5, 800538e <_strtod_l+0x946>
 8005366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005368:	421d      	tst	r5, r3
 800536a:	f43f af65 	beq.w	8005238 <_strtod_l+0x7f0>
 800536e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005370:	9a05      	ldr	r2, [sp, #20]
 8005372:	4648      	mov	r0, r9
 8005374:	4651      	mov	r1, sl
 8005376:	b173      	cbz	r3, 8005396 <_strtod_l+0x94e>
 8005378:	f7ff fb42 	bl	8004a00 <sulp>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005384:	f7fa fef2 	bl	800016c <__adddf3>
 8005388:	4681      	mov	r9, r0
 800538a:	468a      	mov	sl, r1
 800538c:	e754      	b.n	8005238 <_strtod_l+0x7f0>
 800538e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005390:	ea13 0f09 	tst.w	r3, r9
 8005394:	e7e9      	b.n	800536a <_strtod_l+0x922>
 8005396:	f7ff fb33 	bl	8004a00 <sulp>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053a2:	f7fa fee1 	bl	8000168 <__aeabi_dsub>
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	4681      	mov	r9, r0
 80053ac:	468a      	mov	sl, r1
 80053ae:	f7fb fafb 	bl	80009a8 <__aeabi_dcmpeq>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f47f ae07 	bne.w	8004fc6 <_strtod_l+0x57e>
 80053b8:	e73e      	b.n	8005238 <_strtod_l+0x7f0>
 80053ba:	9904      	ldr	r1, [sp, #16]
 80053bc:	4640      	mov	r0, r8
 80053be:	f001 ffec 	bl	800739a <__ratio>
 80053c2:	2200      	movs	r2, #0
 80053c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053c8:	4606      	mov	r6, r0
 80053ca:	460f      	mov	r7, r1
 80053cc:	f7fb fb00 	bl	80009d0 <__aeabi_dcmple>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d075      	beq.n	80054c0 <_strtod_l+0xa78>
 80053d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d047      	beq.n	800546a <_strtod_l+0xa22>
 80053da:	2600      	movs	r6, #0
 80053dc:	4f68      	ldr	r7, [pc, #416]	; (8005580 <_strtod_l+0xb38>)
 80053de:	4d68      	ldr	r5, [pc, #416]	; (8005580 <_strtod_l+0xb38>)
 80053e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e6:	0d1b      	lsrs	r3, r3, #20
 80053e8:	051b      	lsls	r3, r3, #20
 80053ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80053ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053ee:	4b65      	ldr	r3, [pc, #404]	; (8005584 <_strtod_l+0xb3c>)
 80053f0:	429a      	cmp	r2, r3
 80053f2:	f040 80cf 	bne.w	8005594 <_strtod_l+0xb4c>
 80053f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053fa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	4648      	mov	r0, r9
 8005402:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005406:	4651      	mov	r1, sl
 8005408:	f001 ff02 	bl	8007210 <__ulp>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4630      	mov	r0, r6
 8005412:	4639      	mov	r1, r7
 8005414:	f7fb f860 	bl	80004d8 <__aeabi_dmul>
 8005418:	464a      	mov	r2, r9
 800541a:	4653      	mov	r3, sl
 800541c:	f7fa fea6 	bl	800016c <__adddf3>
 8005420:	460b      	mov	r3, r1
 8005422:	4954      	ldr	r1, [pc, #336]	; (8005574 <_strtod_l+0xb2c>)
 8005424:	4a58      	ldr	r2, [pc, #352]	; (8005588 <_strtod_l+0xb40>)
 8005426:	4019      	ands	r1, r3
 8005428:	4291      	cmp	r1, r2
 800542a:	4681      	mov	r9, r0
 800542c:	d95e      	bls.n	80054ec <_strtod_l+0xaa4>
 800542e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005430:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <_strtod_l+0x9f8>
 8005438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543a:	3301      	adds	r3, #1
 800543c:	f43f ad26 	beq.w	8004e8c <_strtod_l+0x444>
 8005440:	f04f 39ff 	mov.w	r9, #4294967295
 8005444:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005578 <_strtod_l+0xb30>
 8005448:	991c      	ldr	r1, [sp, #112]	; 0x70
 800544a:	4658      	mov	r0, fp
 800544c:	f001 fc49 	bl	8006ce2 <_Bfree>
 8005450:	9906      	ldr	r1, [sp, #24]
 8005452:	4658      	mov	r0, fp
 8005454:	f001 fc45 	bl	8006ce2 <_Bfree>
 8005458:	9904      	ldr	r1, [sp, #16]
 800545a:	4658      	mov	r0, fp
 800545c:	f001 fc41 	bl	8006ce2 <_Bfree>
 8005460:	4641      	mov	r1, r8
 8005462:	4658      	mov	r0, fp
 8005464:	f001 fc3d 	bl	8006ce2 <_Bfree>
 8005468:	e617      	b.n	800509a <_strtod_l+0x652>
 800546a:	f1b9 0f00 	cmp.w	r9, #0
 800546e:	d119      	bne.n	80054a4 <_strtod_l+0xa5c>
 8005470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005476:	b9e3      	cbnz	r3, 80054b2 <_strtod_l+0xa6a>
 8005478:	2200      	movs	r2, #0
 800547a:	4b41      	ldr	r3, [pc, #260]	; (8005580 <_strtod_l+0xb38>)
 800547c:	4630      	mov	r0, r6
 800547e:	4639      	mov	r1, r7
 8005480:	f7fb fa9c 	bl	80009bc <__aeabi_dcmplt>
 8005484:	b9c8      	cbnz	r0, 80054ba <_strtod_l+0xa72>
 8005486:	2200      	movs	r2, #0
 8005488:	4b40      	ldr	r3, [pc, #256]	; (800558c <_strtod_l+0xb44>)
 800548a:	4630      	mov	r0, r6
 800548c:	4639      	mov	r1, r7
 800548e:	f7fb f823 	bl	80004d8 <__aeabi_dmul>
 8005492:	4604      	mov	r4, r0
 8005494:	460d      	mov	r5, r1
 8005496:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800549a:	9418      	str	r4, [sp, #96]	; 0x60
 800549c:	9319      	str	r3, [sp, #100]	; 0x64
 800549e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80054a2:	e79d      	b.n	80053e0 <_strtod_l+0x998>
 80054a4:	f1b9 0f01 	cmp.w	r9, #1
 80054a8:	d103      	bne.n	80054b2 <_strtod_l+0xa6a>
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f43f ad8a 	beq.w	8004fc6 <_strtod_l+0x57e>
 80054b2:	2600      	movs	r6, #0
 80054b4:	4f36      	ldr	r7, [pc, #216]	; (8005590 <_strtod_l+0xb48>)
 80054b6:	2400      	movs	r4, #0
 80054b8:	e791      	b.n	80053de <_strtod_l+0x996>
 80054ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80054bc:	4d33      	ldr	r5, [pc, #204]	; (800558c <_strtod_l+0xb44>)
 80054be:	e7ea      	b.n	8005496 <_strtod_l+0xa4e>
 80054c0:	4b32      	ldr	r3, [pc, #200]	; (800558c <_strtod_l+0xb44>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	f7fb f806 	bl	80004d8 <__aeabi_dmul>
 80054cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ce:	4604      	mov	r4, r0
 80054d0:	460d      	mov	r5, r1
 80054d2:	b933      	cbnz	r3, 80054e2 <_strtod_l+0xa9a>
 80054d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054d8:	9010      	str	r0, [sp, #64]	; 0x40
 80054da:	9311      	str	r3, [sp, #68]	; 0x44
 80054dc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054e0:	e77e      	b.n	80053e0 <_strtod_l+0x998>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80054ea:	e7f7      	b.n	80054dc <_strtod_l+0xa94>
 80054ec:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80054f0:	9b05      	ldr	r3, [sp, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1a8      	bne.n	8005448 <_strtod_l+0xa00>
 80054f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054fa:	0d1b      	lsrs	r3, r3, #20
 80054fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054fe:	051b      	lsls	r3, r3, #20
 8005500:	429a      	cmp	r2, r3
 8005502:	4656      	mov	r6, sl
 8005504:	d1a0      	bne.n	8005448 <_strtod_l+0xa00>
 8005506:	4629      	mov	r1, r5
 8005508:	4620      	mov	r0, r4
 800550a:	f7fb fa95 	bl	8000a38 <__aeabi_d2iz>
 800550e:	f7fa ff79 	bl	8000404 <__aeabi_i2d>
 8005512:	460b      	mov	r3, r1
 8005514:	4602      	mov	r2, r0
 8005516:	4629      	mov	r1, r5
 8005518:	4620      	mov	r0, r4
 800551a:	f7fa fe25 	bl	8000168 <__aeabi_dsub>
 800551e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005520:	4604      	mov	r4, r0
 8005522:	460d      	mov	r5, r1
 8005524:	b933      	cbnz	r3, 8005534 <_strtod_l+0xaec>
 8005526:	f1b9 0f00 	cmp.w	r9, #0
 800552a:	d103      	bne.n	8005534 <_strtod_l+0xaec>
 800552c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005530:	2e00      	cmp	r6, #0
 8005532:	d06a      	beq.n	800560a <_strtod_l+0xbc2>
 8005534:	a30a      	add	r3, pc, #40	; (adr r3, 8005560 <_strtod_l+0xb18>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fb fa3d 	bl	80009bc <__aeabi_dcmplt>
 8005542:	2800      	cmp	r0, #0
 8005544:	f47f acad 	bne.w	8004ea2 <_strtod_l+0x45a>
 8005548:	a307      	add	r3, pc, #28	; (adr r3, 8005568 <_strtod_l+0xb20>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	4620      	mov	r0, r4
 8005550:	4629      	mov	r1, r5
 8005552:	f7fb fa51 	bl	80009f8 <__aeabi_dcmpgt>
 8005556:	2800      	cmp	r0, #0
 8005558:	f43f af76 	beq.w	8005448 <_strtod_l+0xa00>
 800555c:	e4a1      	b.n	8004ea2 <_strtod_l+0x45a>
 800555e:	bf00      	nop
 8005560:	94a03595 	.word	0x94a03595
 8005564:	3fdfffff 	.word	0x3fdfffff
 8005568:	35afe535 	.word	0x35afe535
 800556c:	3fe00000 	.word	0x3fe00000
 8005570:	000fffff 	.word	0x000fffff
 8005574:	7ff00000 	.word	0x7ff00000
 8005578:	7fefffff 	.word	0x7fefffff
 800557c:	39500000 	.word	0x39500000
 8005580:	3ff00000 	.word	0x3ff00000
 8005584:	7fe00000 	.word	0x7fe00000
 8005588:	7c9fffff 	.word	0x7c9fffff
 800558c:	3fe00000 	.word	0x3fe00000
 8005590:	bff00000 	.word	0xbff00000
 8005594:	9b05      	ldr	r3, [sp, #20]
 8005596:	b313      	cbz	r3, 80055de <_strtod_l+0xb96>
 8005598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800559a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800559e:	d81e      	bhi.n	80055de <_strtod_l+0xb96>
 80055a0:	a325      	add	r3, pc, #148	; (adr r3, 8005638 <_strtod_l+0xbf0>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	4620      	mov	r0, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7fb fa11 	bl	80009d0 <__aeabi_dcmple>
 80055ae:	b190      	cbz	r0, 80055d6 <_strtod_l+0xb8e>
 80055b0:	4629      	mov	r1, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7fb fa68 	bl	8000a88 <__aeabi_d2uiz>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	bf08      	it	eq
 80055bc:	2001      	moveq	r0, #1
 80055be:	f7fa ff11 	bl	80003e4 <__aeabi_ui2d>
 80055c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055c4:	4604      	mov	r4, r0
 80055c6:	460d      	mov	r5, r1
 80055c8:	b9d3      	cbnz	r3, 8005600 <_strtod_l+0xbb8>
 80055ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ce:	9012      	str	r0, [sp, #72]	; 0x48
 80055d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80055d2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80055d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055d8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80055dc:	1a9f      	subs	r7, r3, r2
 80055de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055e2:	f001 fe15 	bl	8007210 <__ulp>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4630      	mov	r0, r6
 80055ec:	4639      	mov	r1, r7
 80055ee:	f7fa ff73 	bl	80004d8 <__aeabi_dmul>
 80055f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055f6:	f7fa fdb9 	bl	800016c <__adddf3>
 80055fa:	4681      	mov	r9, r0
 80055fc:	468a      	mov	sl, r1
 80055fe:	e777      	b.n	80054f0 <_strtod_l+0xaa8>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005608:	e7e3      	b.n	80055d2 <_strtod_l+0xb8a>
 800560a:	a30d      	add	r3, pc, #52	; (adr r3, 8005640 <_strtod_l+0xbf8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fb f9d4 	bl	80009bc <__aeabi_dcmplt>
 8005614:	e79f      	b.n	8005556 <_strtod_l+0xb0e>
 8005616:	2300      	movs	r3, #0
 8005618:	930d      	str	r3, [sp, #52]	; 0x34
 800561a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800561c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	f7ff ba55 	b.w	8004ace <_strtod_l+0x86>
 8005624:	2b65      	cmp	r3, #101	; 0x65
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f43f ab42 	beq.w	8004cb2 <_strtod_l+0x26a>
 800562e:	2101      	movs	r1, #1
 8005630:	4614      	mov	r4, r2
 8005632:	9105      	str	r1, [sp, #20]
 8005634:	f7ff babf 	b.w	8004bb6 <_strtod_l+0x16e>
 8005638:	ffc00000 	.word	0xffc00000
 800563c:	41dfffff 	.word	0x41dfffff
 8005640:	94a03595 	.word	0x94a03595
 8005644:	3fcfffff 	.word	0x3fcfffff

08005648 <_strtod_r>:
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <_strtod_r+0x18>)
 800564a:	b410      	push	{r4}
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4c05      	ldr	r4, [pc, #20]	; (8005664 <_strtod_r+0x1c>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf08      	it	eq
 8005656:	4623      	moveq	r3, r4
 8005658:	bc10      	pop	{r4}
 800565a:	f7ff b9f5 	b.w	8004a48 <_strtod_l>
 800565e:	bf00      	nop
 8005660:	2000000c 	.word	0x2000000c
 8005664:	20000070 	.word	0x20000070

08005668 <_strtol_l.isra.0>:
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	4680      	mov	r8, r0
 800566e:	4689      	mov	r9, r1
 8005670:	4692      	mov	sl, r2
 8005672:	461e      	mov	r6, r3
 8005674:	460f      	mov	r7, r1
 8005676:	463d      	mov	r5, r7
 8005678:	9808      	ldr	r0, [sp, #32]
 800567a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800567e:	f001 fab5 	bl	8006bec <__locale_ctype_ptr_l>
 8005682:	4420      	add	r0, r4
 8005684:	7843      	ldrb	r3, [r0, #1]
 8005686:	f013 0308 	ands.w	r3, r3, #8
 800568a:	d132      	bne.n	80056f2 <_strtol_l.isra.0+0x8a>
 800568c:	2c2d      	cmp	r4, #45	; 0x2d
 800568e:	d132      	bne.n	80056f6 <_strtol_l.isra.0+0x8e>
 8005690:	2201      	movs	r2, #1
 8005692:	787c      	ldrb	r4, [r7, #1]
 8005694:	1cbd      	adds	r5, r7, #2
 8005696:	2e00      	cmp	r6, #0
 8005698:	d05d      	beq.n	8005756 <_strtol_l.isra.0+0xee>
 800569a:	2e10      	cmp	r6, #16
 800569c:	d109      	bne.n	80056b2 <_strtol_l.isra.0+0x4a>
 800569e:	2c30      	cmp	r4, #48	; 0x30
 80056a0:	d107      	bne.n	80056b2 <_strtol_l.isra.0+0x4a>
 80056a2:	782b      	ldrb	r3, [r5, #0]
 80056a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056a8:	2b58      	cmp	r3, #88	; 0x58
 80056aa:	d14f      	bne.n	800574c <_strtol_l.isra.0+0xe4>
 80056ac:	2610      	movs	r6, #16
 80056ae:	786c      	ldrb	r4, [r5, #1]
 80056b0:	3502      	adds	r5, #2
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	bf14      	ite	ne
 80056b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80056ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80056be:	2700      	movs	r7, #0
 80056c0:	fbb1 fcf6 	udiv	ip, r1, r6
 80056c4:	4638      	mov	r0, r7
 80056c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80056ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80056ce:	2b09      	cmp	r3, #9
 80056d0:	d817      	bhi.n	8005702 <_strtol_l.isra.0+0x9a>
 80056d2:	461c      	mov	r4, r3
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	dd23      	ble.n	8005720 <_strtol_l.isra.0+0xb8>
 80056d8:	1c7b      	adds	r3, r7, #1
 80056da:	d007      	beq.n	80056ec <_strtol_l.isra.0+0x84>
 80056dc:	4584      	cmp	ip, r0
 80056de:	d31c      	bcc.n	800571a <_strtol_l.isra.0+0xb2>
 80056e0:	d101      	bne.n	80056e6 <_strtol_l.isra.0+0x7e>
 80056e2:	45a6      	cmp	lr, r4
 80056e4:	db19      	blt.n	800571a <_strtol_l.isra.0+0xb2>
 80056e6:	2701      	movs	r7, #1
 80056e8:	fb00 4006 	mla	r0, r0, r6, r4
 80056ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f0:	e7eb      	b.n	80056ca <_strtol_l.isra.0+0x62>
 80056f2:	462f      	mov	r7, r5
 80056f4:	e7bf      	b.n	8005676 <_strtol_l.isra.0+0xe>
 80056f6:	2c2b      	cmp	r4, #43	; 0x2b
 80056f8:	bf04      	itt	eq
 80056fa:	1cbd      	addeq	r5, r7, #2
 80056fc:	787c      	ldrbeq	r4, [r7, #1]
 80056fe:	461a      	mov	r2, r3
 8005700:	e7c9      	b.n	8005696 <_strtol_l.isra.0+0x2e>
 8005702:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005706:	2b19      	cmp	r3, #25
 8005708:	d801      	bhi.n	800570e <_strtol_l.isra.0+0xa6>
 800570a:	3c37      	subs	r4, #55	; 0x37
 800570c:	e7e2      	b.n	80056d4 <_strtol_l.isra.0+0x6c>
 800570e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005712:	2b19      	cmp	r3, #25
 8005714:	d804      	bhi.n	8005720 <_strtol_l.isra.0+0xb8>
 8005716:	3c57      	subs	r4, #87	; 0x57
 8005718:	e7dc      	b.n	80056d4 <_strtol_l.isra.0+0x6c>
 800571a:	f04f 37ff 	mov.w	r7, #4294967295
 800571e:	e7e5      	b.n	80056ec <_strtol_l.isra.0+0x84>
 8005720:	1c7b      	adds	r3, r7, #1
 8005722:	d108      	bne.n	8005736 <_strtol_l.isra.0+0xce>
 8005724:	2322      	movs	r3, #34	; 0x22
 8005726:	4608      	mov	r0, r1
 8005728:	f8c8 3000 	str.w	r3, [r8]
 800572c:	f1ba 0f00 	cmp.w	sl, #0
 8005730:	d107      	bne.n	8005742 <_strtol_l.isra.0+0xda>
 8005732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005736:	b102      	cbz	r2, 800573a <_strtol_l.isra.0+0xd2>
 8005738:	4240      	negs	r0, r0
 800573a:	f1ba 0f00 	cmp.w	sl, #0
 800573e:	d0f8      	beq.n	8005732 <_strtol_l.isra.0+0xca>
 8005740:	b10f      	cbz	r7, 8005746 <_strtol_l.isra.0+0xde>
 8005742:	f105 39ff 	add.w	r9, r5, #4294967295
 8005746:	f8ca 9000 	str.w	r9, [sl]
 800574a:	e7f2      	b.n	8005732 <_strtol_l.isra.0+0xca>
 800574c:	2430      	movs	r4, #48	; 0x30
 800574e:	2e00      	cmp	r6, #0
 8005750:	d1af      	bne.n	80056b2 <_strtol_l.isra.0+0x4a>
 8005752:	2608      	movs	r6, #8
 8005754:	e7ad      	b.n	80056b2 <_strtol_l.isra.0+0x4a>
 8005756:	2c30      	cmp	r4, #48	; 0x30
 8005758:	d0a3      	beq.n	80056a2 <_strtol_l.isra.0+0x3a>
 800575a:	260a      	movs	r6, #10
 800575c:	e7a9      	b.n	80056b2 <_strtol_l.isra.0+0x4a>
	...

08005760 <_strtol_r>:
 8005760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005762:	4c06      	ldr	r4, [pc, #24]	; (800577c <_strtol_r+0x1c>)
 8005764:	4d06      	ldr	r5, [pc, #24]	; (8005780 <_strtol_r+0x20>)
 8005766:	6824      	ldr	r4, [r4, #0]
 8005768:	6a24      	ldr	r4, [r4, #32]
 800576a:	2c00      	cmp	r4, #0
 800576c:	bf08      	it	eq
 800576e:	462c      	moveq	r4, r5
 8005770:	9400      	str	r4, [sp, #0]
 8005772:	f7ff ff79 	bl	8005668 <_strtol_l.isra.0>
 8005776:	b003      	add	sp, #12
 8005778:	bd30      	pop	{r4, r5, pc}
 800577a:	bf00      	nop
 800577c:	2000000c 	.word	0x2000000c
 8005780:	20000070 	.word	0x20000070

08005784 <quorem>:
 8005784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	6903      	ldr	r3, [r0, #16]
 800578a:	690c      	ldr	r4, [r1, #16]
 800578c:	4680      	mov	r8, r0
 800578e:	42a3      	cmp	r3, r4
 8005790:	f2c0 8084 	blt.w	800589c <quorem+0x118>
 8005794:	3c01      	subs	r4, #1
 8005796:	f101 0714 	add.w	r7, r1, #20
 800579a:	f100 0614 	add.w	r6, r0, #20
 800579e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80057a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80057a6:	3501      	adds	r5, #1
 80057a8:	fbb0 f5f5 	udiv	r5, r0, r5
 80057ac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80057b0:	eb06 030c 	add.w	r3, r6, ip
 80057b4:	eb07 090c 	add.w	r9, r7, ip
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	b39d      	cbz	r5, 8005824 <quorem+0xa0>
 80057bc:	f04f 0a00 	mov.w	sl, #0
 80057c0:	4638      	mov	r0, r7
 80057c2:	46b6      	mov	lr, r6
 80057c4:	46d3      	mov	fp, sl
 80057c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80057ca:	b293      	uxth	r3, r2
 80057cc:	fb05 a303 	mla	r3, r5, r3, sl
 80057d0:	0c12      	lsrs	r2, r2, #16
 80057d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057d6:	fb05 a202 	mla	r2, r5, r2, sl
 80057da:	b29b      	uxth	r3, r3
 80057dc:	ebab 0303 	sub.w	r3, fp, r3
 80057e0:	f8de b000 	ldr.w	fp, [lr]
 80057e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80057e8:	fa1f fb8b 	uxth.w	fp, fp
 80057ec:	445b      	add	r3, fp
 80057ee:	fa1f fb82 	uxth.w	fp, r2
 80057f2:	f8de 2000 	ldr.w	r2, [lr]
 80057f6:	4581      	cmp	r9, r0
 80057f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80057fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005806:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800580a:	f84e 3b04 	str.w	r3, [lr], #4
 800580e:	d2da      	bcs.n	80057c6 <quorem+0x42>
 8005810:	f856 300c 	ldr.w	r3, [r6, ip]
 8005814:	b933      	cbnz	r3, 8005824 <quorem+0xa0>
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	3b04      	subs	r3, #4
 800581a:	429e      	cmp	r6, r3
 800581c:	461a      	mov	r2, r3
 800581e:	d331      	bcc.n	8005884 <quorem+0x100>
 8005820:	f8c8 4010 	str.w	r4, [r8, #16]
 8005824:	4640      	mov	r0, r8
 8005826:	f001 fc7b 	bl	8007120 <__mcmp>
 800582a:	2800      	cmp	r0, #0
 800582c:	db26      	blt.n	800587c <quorem+0xf8>
 800582e:	4630      	mov	r0, r6
 8005830:	f04f 0c00 	mov.w	ip, #0
 8005834:	3501      	adds	r5, #1
 8005836:	f857 1b04 	ldr.w	r1, [r7], #4
 800583a:	f8d0 e000 	ldr.w	lr, [r0]
 800583e:	b28b      	uxth	r3, r1
 8005840:	ebac 0303 	sub.w	r3, ip, r3
 8005844:	fa1f f28e 	uxth.w	r2, lr
 8005848:	4413      	add	r3, r2
 800584a:	0c0a      	lsrs	r2, r1, #16
 800584c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800585a:	45b9      	cmp	r9, r7
 800585c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005860:	f840 3b04 	str.w	r3, [r0], #4
 8005864:	d2e7      	bcs.n	8005836 <quorem+0xb2>
 8005866:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800586a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800586e:	b92a      	cbnz	r2, 800587c <quorem+0xf8>
 8005870:	3b04      	subs	r3, #4
 8005872:	429e      	cmp	r6, r3
 8005874:	461a      	mov	r2, r3
 8005876:	d30b      	bcc.n	8005890 <quorem+0x10c>
 8005878:	f8c8 4010 	str.w	r4, [r8, #16]
 800587c:	4628      	mov	r0, r5
 800587e:	b003      	add	sp, #12
 8005880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	3b04      	subs	r3, #4
 8005888:	2a00      	cmp	r2, #0
 800588a:	d1c9      	bne.n	8005820 <quorem+0x9c>
 800588c:	3c01      	subs	r4, #1
 800588e:	e7c4      	b.n	800581a <quorem+0x96>
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	3b04      	subs	r3, #4
 8005894:	2a00      	cmp	r2, #0
 8005896:	d1ef      	bne.n	8005878 <quorem+0xf4>
 8005898:	3c01      	subs	r4, #1
 800589a:	e7ea      	b.n	8005872 <quorem+0xee>
 800589c:	2000      	movs	r0, #0
 800589e:	e7ee      	b.n	800587e <quorem+0xfa>

080058a0 <_dtoa_r>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	4616      	mov	r6, r2
 80058a6:	461f      	mov	r7, r3
 80058a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058aa:	b095      	sub	sp, #84	; 0x54
 80058ac:	4604      	mov	r4, r0
 80058ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80058b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80058b6:	b93d      	cbnz	r5, 80058c8 <_dtoa_r+0x28>
 80058b8:	2010      	movs	r0, #16
 80058ba:	f001 f9ab 	bl	8006c14 <malloc>
 80058be:	6260      	str	r0, [r4, #36]	; 0x24
 80058c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058c4:	6005      	str	r5, [r0, #0]
 80058c6:	60c5      	str	r5, [r0, #12]
 80058c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ca:	6819      	ldr	r1, [r3, #0]
 80058cc:	b151      	cbz	r1, 80058e4 <_dtoa_r+0x44>
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	2301      	movs	r3, #1
 80058d2:	4093      	lsls	r3, r2
 80058d4:	604a      	str	r2, [r1, #4]
 80058d6:	608b      	str	r3, [r1, #8]
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 fa02 	bl	8006ce2 <_Bfree>
 80058de:	2200      	movs	r2, #0
 80058e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	1e3b      	subs	r3, r7, #0
 80058e6:	bfaf      	iteee	ge
 80058e8:	2300      	movge	r3, #0
 80058ea:	2201      	movlt	r2, #1
 80058ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058f0:	9303      	strlt	r3, [sp, #12]
 80058f2:	bfac      	ite	ge
 80058f4:	f8c8 3000 	strge.w	r3, [r8]
 80058f8:	f8c8 2000 	strlt.w	r2, [r8]
 80058fc:	4bae      	ldr	r3, [pc, #696]	; (8005bb8 <_dtoa_r+0x318>)
 80058fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005902:	ea33 0308 	bics.w	r3, r3, r8
 8005906:	d11b      	bne.n	8005940 <_dtoa_r+0xa0>
 8005908:	f242 730f 	movw	r3, #9999	; 0x270f
 800590c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	b923      	cbnz	r3, 800591e <_dtoa_r+0x7e>
 8005914:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005918:	2800      	cmp	r0, #0
 800591a:	f000 8545 	beq.w	80063a8 <_dtoa_r+0xb08>
 800591e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005920:	b953      	cbnz	r3, 8005938 <_dtoa_r+0x98>
 8005922:	4ba6      	ldr	r3, [pc, #664]	; (8005bbc <_dtoa_r+0x31c>)
 8005924:	e021      	b.n	800596a <_dtoa_r+0xca>
 8005926:	4ba6      	ldr	r3, [pc, #664]	; (8005bc0 <_dtoa_r+0x320>)
 8005928:	9306      	str	r3, [sp, #24]
 800592a:	3308      	adds	r3, #8
 800592c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	9806      	ldr	r0, [sp, #24]
 8005932:	b015      	add	sp, #84	; 0x54
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	4ba0      	ldr	r3, [pc, #640]	; (8005bbc <_dtoa_r+0x31c>)
 800593a:	9306      	str	r3, [sp, #24]
 800593c:	3303      	adds	r3, #3
 800593e:	e7f5      	b.n	800592c <_dtoa_r+0x8c>
 8005940:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	2300      	movs	r3, #0
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f7fb f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8005950:	4682      	mov	sl, r0
 8005952:	b160      	cbz	r0, 800596e <_dtoa_r+0xce>
 8005954:	2301      	movs	r3, #1
 8005956:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8520 	beq.w	80063a2 <_dtoa_r+0xb02>
 8005962:	4b98      	ldr	r3, [pc, #608]	; (8005bc4 <_dtoa_r+0x324>)
 8005964:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	3b01      	subs	r3, #1
 800596a:	9306      	str	r3, [sp, #24]
 800596c:	e7e0      	b.n	8005930 <_dtoa_r+0x90>
 800596e:	ab12      	add	r3, sp, #72	; 0x48
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	ab13      	add	r3, sp, #76	; 0x4c
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4632      	mov	r2, r6
 8005978:	463b      	mov	r3, r7
 800597a:	4620      	mov	r0, r4
 800597c:	f001 fcbe 	bl	80072fc <__d2b>
 8005980:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005984:	4683      	mov	fp, r0
 8005986:	2d00      	cmp	r5, #0
 8005988:	d07d      	beq.n	8005a86 <_dtoa_r+0x1e6>
 800598a:	46b0      	mov	r8, r6
 800598c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005990:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005994:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005998:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800599c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80059a0:	2200      	movs	r2, #0
 80059a2:	4b89      	ldr	r3, [pc, #548]	; (8005bc8 <_dtoa_r+0x328>)
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	f7fa fbde 	bl	8000168 <__aeabi_dsub>
 80059ac:	a37c      	add	r3, pc, #496	; (adr r3, 8005ba0 <_dtoa_r+0x300>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fd91 	bl	80004d8 <__aeabi_dmul>
 80059b6:	a37c      	add	r3, pc, #496	; (adr r3, 8005ba8 <_dtoa_r+0x308>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f7fa fbd6 	bl	800016c <__adddf3>
 80059c0:	4606      	mov	r6, r0
 80059c2:	4628      	mov	r0, r5
 80059c4:	460f      	mov	r7, r1
 80059c6:	f7fa fd1d 	bl	8000404 <__aeabi_i2d>
 80059ca:	a379      	add	r3, pc, #484	; (adr r3, 8005bb0 <_dtoa_r+0x310>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fd82 	bl	80004d8 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fa fbc6 	bl	800016c <__adddf3>
 80059e0:	4606      	mov	r6, r0
 80059e2:	460f      	mov	r7, r1
 80059e4:	f7fb f828 	bl	8000a38 <__aeabi_d2iz>
 80059e8:	2200      	movs	r2, #0
 80059ea:	4682      	mov	sl, r0
 80059ec:	2300      	movs	r3, #0
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fa ffe3 	bl	80009bc <__aeabi_dcmplt>
 80059f6:	b148      	cbz	r0, 8005a0c <_dtoa_r+0x16c>
 80059f8:	4650      	mov	r0, sl
 80059fa:	f7fa fd03 	bl	8000404 <__aeabi_i2d>
 80059fe:	4632      	mov	r2, r6
 8005a00:	463b      	mov	r3, r7
 8005a02:	f7fa ffd1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a06:	b908      	cbnz	r0, 8005a0c <_dtoa_r+0x16c>
 8005a08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a0c:	f1ba 0f16 	cmp.w	sl, #22
 8005a10:	d85a      	bhi.n	8005ac8 <_dtoa_r+0x228>
 8005a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a16:	496d      	ldr	r1, [pc, #436]	; (8005bcc <_dtoa_r+0x32c>)
 8005a18:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a20:	f7fa ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d051      	beq.n	8005acc <_dtoa_r+0x22c>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a2e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a32:	1b5d      	subs	r5, r3, r5
 8005a34:	1e6b      	subs	r3, r5, #1
 8005a36:	9307      	str	r3, [sp, #28]
 8005a38:	bf43      	ittte	mi
 8005a3a:	2300      	movmi	r3, #0
 8005a3c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005a40:	9307      	strmi	r3, [sp, #28]
 8005a42:	f04f 0900 	movpl.w	r9, #0
 8005a46:	f1ba 0f00 	cmp.w	sl, #0
 8005a4a:	db41      	blt.n	8005ad0 <_dtoa_r+0x230>
 8005a4c:	9b07      	ldr	r3, [sp, #28]
 8005a4e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005a52:	4453      	add	r3, sl
 8005a54:	9307      	str	r3, [sp, #28]
 8005a56:	2300      	movs	r3, #0
 8005a58:	9308      	str	r3, [sp, #32]
 8005a5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	f200 808f 	bhi.w	8005b80 <_dtoa_r+0x2e0>
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	bfc4      	itt	gt
 8005a66:	3b04      	subgt	r3, #4
 8005a68:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005a6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a6c:	bfc8      	it	gt
 8005a6e:	2500      	movgt	r5, #0
 8005a70:	f1a3 0302 	sub.w	r3, r3, #2
 8005a74:	bfd8      	it	le
 8005a76:	2501      	movle	r5, #1
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	f200 808d 	bhi.w	8005b98 <_dtoa_r+0x2f8>
 8005a7e:	e8df f003 	tbb	[pc, r3]
 8005a82:	7d7b      	.short	0x7d7b
 8005a84:	6f2f      	.short	0x6f2f
 8005a86:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005a8a:	441d      	add	r5, r3
 8005a8c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005a90:	2820      	cmp	r0, #32
 8005a92:	dd13      	ble.n	8005abc <_dtoa_r+0x21c>
 8005a94:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005a98:	9b02      	ldr	r3, [sp, #8]
 8005a9a:	fa08 f800 	lsl.w	r8, r8, r0
 8005a9e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005aa2:	fa23 f000 	lsr.w	r0, r3, r0
 8005aa6:	ea48 0000 	orr.w	r0, r8, r0
 8005aaa:	f7fa fc9b 	bl	80003e4 <__aeabi_ui2d>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005ab6:	3d01      	subs	r5, #1
 8005ab8:	9310      	str	r3, [sp, #64]	; 0x40
 8005aba:	e771      	b.n	80059a0 <_dtoa_r+0x100>
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	f1c0 0020 	rsb	r0, r0, #32
 8005ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ac6:	e7f0      	b.n	8005aaa <_dtoa_r+0x20a>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e7b0      	b.n	8005a2e <_dtoa_r+0x18e>
 8005acc:	900d      	str	r0, [sp, #52]	; 0x34
 8005ace:	e7af      	b.n	8005a30 <_dtoa_r+0x190>
 8005ad0:	f1ca 0300 	rsb	r3, sl, #0
 8005ad4:	9308      	str	r3, [sp, #32]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	eba9 090a 	sub.w	r9, r9, sl
 8005adc:	930c      	str	r3, [sp, #48]	; 0x30
 8005ade:	e7bc      	b.n	8005a5a <_dtoa_r+0x1ba>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dd74      	ble.n	8005bd4 <_dtoa_r+0x334>
 8005aea:	4698      	mov	r8, r3
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	2200      	movs	r2, #0
 8005af0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005af2:	6072      	str	r2, [r6, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f102 0014 	add.w	r0, r2, #20
 8005afa:	4298      	cmp	r0, r3
 8005afc:	6871      	ldr	r1, [r6, #4]
 8005afe:	d96e      	bls.n	8005bde <_dtoa_r+0x33e>
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 f8ba 	bl	8006c7a <_Balloc>
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	6030      	str	r0, [r6, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b8 0f0e 	cmp.w	r8, #14
 8005b10:	9306      	str	r3, [sp, #24]
 8005b12:	f200 80ed 	bhi.w	8005cf0 <_dtoa_r+0x450>
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	f000 80ea 	beq.w	8005cf0 <_dtoa_r+0x450>
 8005b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b20:	f1ba 0f00 	cmp.w	sl, #0
 8005b24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005b28:	dd77      	ble.n	8005c1a <_dtoa_r+0x37a>
 8005b2a:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <_dtoa_r+0x32c>)
 8005b2c:	f00a 030f 	and.w	r3, sl, #15
 8005b30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005b34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b38:	06f0      	lsls	r0, r6, #27
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b42:	d568      	bpl.n	8005c16 <_dtoa_r+0x376>
 8005b44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <_dtoa_r+0x330>)
 8005b4a:	2503      	movs	r5, #3
 8005b4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b50:	f7fa fdec 	bl	800072c <__aeabi_ddiv>
 8005b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b58:	f006 060f 	and.w	r6, r6, #15
 8005b5c:	4f1c      	ldr	r7, [pc, #112]	; (8005bd0 <_dtoa_r+0x330>)
 8005b5e:	e04f      	b.n	8005c00 <_dtoa_r+0x360>
 8005b60:	2301      	movs	r3, #1
 8005b62:	9309      	str	r3, [sp, #36]	; 0x24
 8005b64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b66:	4453      	add	r3, sl
 8005b68:	f103 0801 	add.w	r8, r3, #1
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	4643      	mov	r3, r8
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	bfb8      	it	lt
 8005b74:	2301      	movlt	r3, #1
 8005b76:	e7ba      	b.n	8005aee <_dtoa_r+0x24e>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e7b2      	b.n	8005ae2 <_dtoa_r+0x242>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e7f0      	b.n	8005b62 <_dtoa_r+0x2c2>
 8005b80:	2501      	movs	r5, #1
 8005b82:	2300      	movs	r3, #0
 8005b84:	9509      	str	r5, [sp, #36]	; 0x24
 8005b86:	931e      	str	r3, [sp, #120]	; 0x78
 8005b88:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	4698      	mov	r8, r3
 8005b92:	2312      	movs	r3, #18
 8005b94:	921f      	str	r2, [sp, #124]	; 0x7c
 8005b96:	e7aa      	b.n	8005aee <_dtoa_r+0x24e>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9c:	e7f4      	b.n	8005b88 <_dtoa_r+0x2e8>
 8005b9e:	bf00      	nop
 8005ba0:	636f4361 	.word	0x636f4361
 8005ba4:	3fd287a7 	.word	0x3fd287a7
 8005ba8:	8b60c8b3 	.word	0x8b60c8b3
 8005bac:	3fc68a28 	.word	0x3fc68a28
 8005bb0:	509f79fb 	.word	0x509f79fb
 8005bb4:	3fd34413 	.word	0x3fd34413
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	080081f9 	.word	0x080081f9
 8005bc0:	080081f0 	.word	0x080081f0
 8005bc4:	08008175 	.word	0x08008175
 8005bc8:	3ff80000 	.word	0x3ff80000
 8005bcc:	08008298 	.word	0x08008298
 8005bd0:	08008270 	.word	0x08008270
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	4698      	mov	r8, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	e7da      	b.n	8005b94 <_dtoa_r+0x2f4>
 8005bde:	3101      	adds	r1, #1
 8005be0:	6071      	str	r1, [r6, #4]
 8005be2:	0052      	lsls	r2, r2, #1
 8005be4:	e787      	b.n	8005af6 <_dtoa_r+0x256>
 8005be6:	07f1      	lsls	r1, r6, #31
 8005be8:	d508      	bpl.n	8005bfc <_dtoa_r+0x35c>
 8005bea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf2:	f7fa fc71 	bl	80004d8 <__aeabi_dmul>
 8005bf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	1076      	asrs	r6, r6, #1
 8005bfe:	3708      	adds	r7, #8
 8005c00:	2e00      	cmp	r6, #0
 8005c02:	d1f0      	bne.n	8005be6 <_dtoa_r+0x346>
 8005c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c0c:	f7fa fd8e 	bl	800072c <__aeabi_ddiv>
 8005c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c14:	e01b      	b.n	8005c4e <_dtoa_r+0x3ae>
 8005c16:	2502      	movs	r5, #2
 8005c18:	e7a0      	b.n	8005b5c <_dtoa_r+0x2bc>
 8005c1a:	f000 80a4 	beq.w	8005d66 <_dtoa_r+0x4c6>
 8005c1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c22:	f1ca 0600 	rsb	r6, sl, #0
 8005c26:	4ba0      	ldr	r3, [pc, #640]	; (8005ea8 <_dtoa_r+0x608>)
 8005c28:	f006 020f 	and.w	r2, r6, #15
 8005c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f7fa fc50 	bl	80004d8 <__aeabi_dmul>
 8005c38:	2502      	movs	r5, #2
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c40:	4f9a      	ldr	r7, [pc, #616]	; (8005eac <_dtoa_r+0x60c>)
 8005c42:	1136      	asrs	r6, r6, #4
 8005c44:	2e00      	cmp	r6, #0
 8005c46:	f040 8083 	bne.w	8005d50 <_dtoa_r+0x4b0>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e0      	bne.n	8005c10 <_dtoa_r+0x370>
 8005c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 808a 	beq.w	8005d6a <_dtoa_r+0x4ca>
 8005c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c62:	2200      	movs	r2, #0
 8005c64:	4b92      	ldr	r3, [pc, #584]	; (8005eb0 <_dtoa_r+0x610>)
 8005c66:	f7fa fea9 	bl	80009bc <__aeabi_dcmplt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d07d      	beq.n	8005d6a <_dtoa_r+0x4ca>
 8005c6e:	f1b8 0f00 	cmp.w	r8, #0
 8005c72:	d07a      	beq.n	8005d6a <_dtoa_r+0x4ca>
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dd36      	ble.n	8005ce8 <_dtoa_r+0x448>
 8005c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4b8c      	ldr	r3, [pc, #560]	; (8005eb4 <_dtoa_r+0x614>)
 8005c82:	f7fa fc29 	bl	80004d8 <__aeabi_dmul>
 8005c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8a:	9e04      	ldr	r6, [sp, #16]
 8005c8c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005c90:	3501      	adds	r5, #1
 8005c92:	4628      	mov	r0, r5
 8005c94:	f7fa fbb6 	bl	8000404 <__aeabi_i2d>
 8005c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c9c:	f7fa fc1c 	bl	80004d8 <__aeabi_dmul>
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	4b85      	ldr	r3, [pc, #532]	; (8005eb8 <_dtoa_r+0x618>)
 8005ca4:	f7fa fa62 	bl	800016c <__adddf3>
 8005ca8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005cac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cb0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005cb2:	2e00      	cmp	r6, #0
 8005cb4:	d15c      	bne.n	8005d70 <_dtoa_r+0x4d0>
 8005cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4b7f      	ldr	r3, [pc, #508]	; (8005ebc <_dtoa_r+0x61c>)
 8005cbe:	f7fa fa53 	bl	8000168 <__aeabi_dsub>
 8005cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cca:	f7fa fe95 	bl	80009f8 <__aeabi_dcmpgt>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f040 8281 	bne.w	80061d6 <_dtoa_r+0x936>
 8005cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cda:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005cde:	f7fa fe6d 	bl	80009bc <__aeabi_dcmplt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f040 8275 	bne.w	80061d2 <_dtoa_r+0x932>
 8005ce8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f2c0 814b 	blt.w	8005f8e <_dtoa_r+0x6ee>
 8005cf8:	f1ba 0f0e 	cmp.w	sl, #14
 8005cfc:	f300 8147 	bgt.w	8005f8e <_dtoa_r+0x6ee>
 8005d00:	4b69      	ldr	r3, [pc, #420]	; (8005ea8 <_dtoa_r+0x608>)
 8005d02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f280 80d7 	bge.w	8005ec4 <_dtoa_r+0x624>
 8005d16:	f1b8 0f00 	cmp.w	r8, #0
 8005d1a:	f300 80d3 	bgt.w	8005ec4 <_dtoa_r+0x624>
 8005d1e:	f040 8257 	bne.w	80061d0 <_dtoa_r+0x930>
 8005d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d26:	2200      	movs	r2, #0
 8005d28:	4b64      	ldr	r3, [pc, #400]	; (8005ebc <_dtoa_r+0x61c>)
 8005d2a:	f7fa fbd5 	bl	80004d8 <__aeabi_dmul>
 8005d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d32:	f7fa fe57 	bl	80009e4 <__aeabi_dcmpge>
 8005d36:	4646      	mov	r6, r8
 8005d38:	4647      	mov	r7, r8
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f040 822d 	bne.w	800619a <_dtoa_r+0x8fa>
 8005d40:	9b06      	ldr	r3, [sp, #24]
 8005d42:	9a06      	ldr	r2, [sp, #24]
 8005d44:	1c5d      	adds	r5, r3, #1
 8005d46:	2331      	movs	r3, #49	; 0x31
 8005d48:	f10a 0a01 	add.w	sl, sl, #1
 8005d4c:	7013      	strb	r3, [r2, #0]
 8005d4e:	e228      	b.n	80061a2 <_dtoa_r+0x902>
 8005d50:	07f2      	lsls	r2, r6, #31
 8005d52:	d505      	bpl.n	8005d60 <_dtoa_r+0x4c0>
 8005d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d58:	f7fa fbbe 	bl	80004d8 <__aeabi_dmul>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	3501      	adds	r5, #1
 8005d60:	1076      	asrs	r6, r6, #1
 8005d62:	3708      	adds	r7, #8
 8005d64:	e76e      	b.n	8005c44 <_dtoa_r+0x3a4>
 8005d66:	2502      	movs	r5, #2
 8005d68:	e771      	b.n	8005c4e <_dtoa_r+0x3ae>
 8005d6a:	4657      	mov	r7, sl
 8005d6c:	4646      	mov	r6, r8
 8005d6e:	e790      	b.n	8005c92 <_dtoa_r+0x3f2>
 8005d70:	4b4d      	ldr	r3, [pc, #308]	; (8005ea8 <_dtoa_r+0x608>)
 8005d72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d76:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d048      	beq.n	8005e12 <_dtoa_r+0x572>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	2000      	movs	r0, #0
 8005d86:	494e      	ldr	r1, [pc, #312]	; (8005ec0 <_dtoa_r+0x620>)
 8005d88:	f7fa fcd0 	bl	800072c <__aeabi_ddiv>
 8005d8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d90:	f7fa f9ea 	bl	8000168 <__aeabi_dsub>
 8005d94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d98:	9d06      	ldr	r5, [sp, #24]
 8005d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9e:	f7fa fe4b 	bl	8000a38 <__aeabi_d2iz>
 8005da2:	9011      	str	r0, [sp, #68]	; 0x44
 8005da4:	f7fa fb2e 	bl	8000404 <__aeabi_i2d>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db0:	f7fa f9da 	bl	8000168 <__aeabi_dsub>
 8005db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dba:	3330      	adds	r3, #48	; 0x30
 8005dbc:	f805 3b01 	strb.w	r3, [r5], #1
 8005dc0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dc4:	f7fa fdfa 	bl	80009bc <__aeabi_dcmplt>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d163      	bne.n	8005e94 <_dtoa_r+0x5f4>
 8005dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	4937      	ldr	r1, [pc, #220]	; (8005eb0 <_dtoa_r+0x610>)
 8005dd4:	f7fa f9c8 	bl	8000168 <__aeabi_dsub>
 8005dd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ddc:	f7fa fdee 	bl	80009bc <__aeabi_dcmplt>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	f040 80b5 	bne.w	8005f50 <_dtoa_r+0x6b0>
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	1aeb      	subs	r3, r5, r3
 8005dea:	429e      	cmp	r6, r3
 8005dec:	f77f af7c 	ble.w	8005ce8 <_dtoa_r+0x448>
 8005df0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005df4:	2200      	movs	r2, #0
 8005df6:	4b2f      	ldr	r3, [pc, #188]	; (8005eb4 <_dtoa_r+0x614>)
 8005df8:	f7fa fb6e 	bl	80004d8 <__aeabi_dmul>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e06:	4b2b      	ldr	r3, [pc, #172]	; (8005eb4 <_dtoa_r+0x614>)
 8005e08:	f7fa fb66 	bl	80004d8 <__aeabi_dmul>
 8005e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e10:	e7c3      	b.n	8005d9a <_dtoa_r+0x4fa>
 8005e12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e16:	f7fa fb5f 	bl	80004d8 <__aeabi_dmul>
 8005e1a:	9b06      	ldr	r3, [sp, #24]
 8005e1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e20:	199d      	adds	r5, r3, r6
 8005e22:	461e      	mov	r6, r3
 8005e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e28:	f7fa fe06 	bl	8000a38 <__aeabi_d2iz>
 8005e2c:	9011      	str	r0, [sp, #68]	; 0x44
 8005e2e:	f7fa fae9 	bl	8000404 <__aeabi_i2d>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e3a:	f7fa f995 	bl	8000168 <__aeabi_dsub>
 8005e3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e44:	3330      	adds	r3, #48	; 0x30
 8005e46:	f806 3b01 	strb.w	r3, [r6], #1
 8005e4a:	42ae      	cmp	r6, r5
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	d124      	bne.n	8005e9c <_dtoa_r+0x5fc>
 8005e52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <_dtoa_r+0x620>)
 8005e58:	f7fa f988 	bl	800016c <__adddf3>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e64:	f7fa fdc8 	bl	80009f8 <__aeabi_dcmpgt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d171      	bne.n	8005f50 <_dtoa_r+0x6b0>
 8005e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e70:	2000      	movs	r0, #0
 8005e72:	4913      	ldr	r1, [pc, #76]	; (8005ec0 <_dtoa_r+0x620>)
 8005e74:	f7fa f978 	bl	8000168 <__aeabi_dsub>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e80:	f7fa fd9c 	bl	80009bc <__aeabi_dcmplt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f43f af2f 	beq.w	8005ce8 <_dtoa_r+0x448>
 8005e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e8e:	1e6a      	subs	r2, r5, #1
 8005e90:	2b30      	cmp	r3, #48	; 0x30
 8005e92:	d001      	beq.n	8005e98 <_dtoa_r+0x5f8>
 8005e94:	46ba      	mov	sl, r7
 8005e96:	e04a      	b.n	8005f2e <_dtoa_r+0x68e>
 8005e98:	4615      	mov	r5, r2
 8005e9a:	e7f6      	b.n	8005e8a <_dtoa_r+0x5ea>
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <_dtoa_r+0x614>)
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea6:	e7bd      	b.n	8005e24 <_dtoa_r+0x584>
 8005ea8:	08008298 	.word	0x08008298
 8005eac:	08008270 	.word	0x08008270
 8005eb0:	3ff00000 	.word	0x3ff00000
 8005eb4:	40240000 	.word	0x40240000
 8005eb8:	401c0000 	.word	0x401c0000
 8005ebc:	40140000 	.word	0x40140000
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	9d06      	ldr	r5, [sp, #24]
 8005ec6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ece:	4630      	mov	r0, r6
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	f7fa fc2b 	bl	800072c <__aeabi_ddiv>
 8005ed6:	f7fa fdaf 	bl	8000a38 <__aeabi_d2iz>
 8005eda:	4681      	mov	r9, r0
 8005edc:	f7fa fa92 	bl	8000404 <__aeabi_i2d>
 8005ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee4:	f7fa faf8 	bl	80004d8 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa f93a 	bl	8000168 <__aeabi_dsub>
 8005ef4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005ef8:	f805 6b01 	strb.w	r6, [r5], #1
 8005efc:	9e06      	ldr	r6, [sp, #24]
 8005efe:	4602      	mov	r2, r0
 8005f00:	1bae      	subs	r6, r5, r6
 8005f02:	45b0      	cmp	r8, r6
 8005f04:	460b      	mov	r3, r1
 8005f06:	d135      	bne.n	8005f74 <_dtoa_r+0x6d4>
 8005f08:	f7fa f930 	bl	800016c <__adddf3>
 8005f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	f7fa fd70 	bl	80009f8 <__aeabi_dcmpgt>
 8005f18:	b9c8      	cbnz	r0, 8005f4e <_dtoa_r+0x6ae>
 8005f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fd41 	bl	80009a8 <__aeabi_dcmpeq>
 8005f26:	b110      	cbz	r0, 8005f2e <_dtoa_r+0x68e>
 8005f28:	f019 0f01 	tst.w	r9, #1
 8005f2c:	d10f      	bne.n	8005f4e <_dtoa_r+0x6ae>
 8005f2e:	4659      	mov	r1, fp
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fed6 	bl	8006ce2 <_Bfree>
 8005f36:	2300      	movs	r3, #0
 8005f38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f3a:	702b      	strb	r3, [r5, #0]
 8005f3c:	f10a 0301 	add.w	r3, sl, #1
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f43f acf3 	beq.w	8005930 <_dtoa_r+0x90>
 8005f4a:	601d      	str	r5, [r3, #0]
 8005f4c:	e4f0      	b.n	8005930 <_dtoa_r+0x90>
 8005f4e:	4657      	mov	r7, sl
 8005f50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f54:	1e6b      	subs	r3, r5, #1
 8005f56:	2a39      	cmp	r2, #57	; 0x39
 8005f58:	d106      	bne.n	8005f68 <_dtoa_r+0x6c8>
 8005f5a:	9a06      	ldr	r2, [sp, #24]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d107      	bne.n	8005f70 <_dtoa_r+0x6d0>
 8005f60:	2330      	movs	r3, #48	; 0x30
 8005f62:	7013      	strb	r3, [r2, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	3701      	adds	r7, #1
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	3201      	adds	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	e791      	b.n	8005e94 <_dtoa_r+0x5f4>
 8005f70:	461d      	mov	r5, r3
 8005f72:	e7ed      	b.n	8005f50 <_dtoa_r+0x6b0>
 8005f74:	2200      	movs	r2, #0
 8005f76:	4b99      	ldr	r3, [pc, #612]	; (80061dc <_dtoa_r+0x93c>)
 8005f78:	f7fa faae 	bl	80004d8 <__aeabi_dmul>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4606      	mov	r6, r0
 8005f82:	460f      	mov	r7, r1
 8005f84:	f7fa fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d09e      	beq.n	8005eca <_dtoa_r+0x62a>
 8005f8c:	e7cf      	b.n	8005f2e <_dtoa_r+0x68e>
 8005f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	f000 8088 	beq.w	80060a6 <_dtoa_r+0x806>
 8005f96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f98:	2a01      	cmp	r2, #1
 8005f9a:	dc6d      	bgt.n	8006078 <_dtoa_r+0x7d8>
 8005f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d066      	beq.n	8006070 <_dtoa_r+0x7d0>
 8005fa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fa6:	464d      	mov	r5, r9
 8005fa8:	9e08      	ldr	r6, [sp, #32]
 8005faa:	9a07      	ldr	r2, [sp, #28]
 8005fac:	2101      	movs	r1, #1
 8005fae:	441a      	add	r2, r3
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4499      	add	r9, r3
 8005fb4:	9207      	str	r2, [sp, #28]
 8005fb6:	f000 ff72 	bl	8006e9e <__i2b>
 8005fba:	4607      	mov	r7, r0
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	dd0b      	ble.n	8005fd8 <_dtoa_r+0x738>
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dd08      	ble.n	8005fd8 <_dtoa_r+0x738>
 8005fc6:	42ab      	cmp	r3, r5
 8005fc8:	bfa8      	it	ge
 8005fca:	462b      	movge	r3, r5
 8005fcc:	9a07      	ldr	r2, [sp, #28]
 8005fce:	eba9 0903 	sub.w	r9, r9, r3
 8005fd2:	1aed      	subs	r5, r5, r3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	9307      	str	r3, [sp, #28]
 8005fd8:	9b08      	ldr	r3, [sp, #32]
 8005fda:	b1eb      	cbz	r3, 8006018 <_dtoa_r+0x778>
 8005fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d065      	beq.n	80060ae <_dtoa_r+0x80e>
 8005fe2:	b18e      	cbz	r6, 8006008 <_dtoa_r+0x768>
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fff7 	bl	8006fdc <__pow5mult>
 8005fee:	465a      	mov	r2, fp
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4607      	mov	r7, r0
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 ff5b 	bl	8006eb0 <__multiply>
 8005ffa:	4659      	mov	r1, fp
 8005ffc:	900a      	str	r0, [sp, #40]	; 0x28
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 fe6f 	bl	8006ce2 <_Bfree>
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	469b      	mov	fp, r3
 8006008:	9b08      	ldr	r3, [sp, #32]
 800600a:	1b9a      	subs	r2, r3, r6
 800600c:	d004      	beq.n	8006018 <_dtoa_r+0x778>
 800600e:	4659      	mov	r1, fp
 8006010:	4620      	mov	r0, r4
 8006012:	f000 ffe3 	bl	8006fdc <__pow5mult>
 8006016:	4683      	mov	fp, r0
 8006018:	2101      	movs	r1, #1
 800601a:	4620      	mov	r0, r4
 800601c:	f000 ff3f 	bl	8006e9e <__i2b>
 8006020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006022:	4606      	mov	r6, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 81c6 	beq.w	80063b6 <_dtoa_r+0xb16>
 800602a:	461a      	mov	r2, r3
 800602c:	4601      	mov	r1, r0
 800602e:	4620      	mov	r0, r4
 8006030:	f000 ffd4 	bl	8006fdc <__pow5mult>
 8006034:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006036:	4606      	mov	r6, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	dc3e      	bgt.n	80060ba <_dtoa_r+0x81a>
 800603c:	9b02      	ldr	r3, [sp, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d137      	bne.n	80060b2 <_dtoa_r+0x812>
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006048:	2b00      	cmp	r3, #0
 800604a:	d134      	bne.n	80060b6 <_dtoa_r+0x816>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006052:	0d1b      	lsrs	r3, r3, #20
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	b12b      	cbz	r3, 8006064 <_dtoa_r+0x7c4>
 8006058:	9b07      	ldr	r3, [sp, #28]
 800605a:	f109 0901 	add.w	r9, r9, #1
 800605e:	3301      	adds	r3, #1
 8006060:	9307      	str	r3, [sp, #28]
 8006062:	2301      	movs	r3, #1
 8006064:	9308      	str	r3, [sp, #32]
 8006066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006068:	2b00      	cmp	r3, #0
 800606a:	d128      	bne.n	80060be <_dtoa_r+0x81e>
 800606c:	2001      	movs	r0, #1
 800606e:	e02e      	b.n	80060ce <_dtoa_r+0x82e>
 8006070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006072:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006076:	e796      	b.n	8005fa6 <_dtoa_r+0x706>
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	f108 36ff 	add.w	r6, r8, #4294967295
 800607e:	42b3      	cmp	r3, r6
 8006080:	bfb7      	itett	lt
 8006082:	9b08      	ldrlt	r3, [sp, #32]
 8006084:	1b9e      	subge	r6, r3, r6
 8006086:	1af2      	sublt	r2, r6, r3
 8006088:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800608a:	bfbf      	itttt	lt
 800608c:	9608      	strlt	r6, [sp, #32]
 800608e:	189b      	addlt	r3, r3, r2
 8006090:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006092:	2600      	movlt	r6, #0
 8006094:	f1b8 0f00 	cmp.w	r8, #0
 8006098:	bfb9      	ittee	lt
 800609a:	eba9 0508 	sublt.w	r5, r9, r8
 800609e:	2300      	movlt	r3, #0
 80060a0:	464d      	movge	r5, r9
 80060a2:	4643      	movge	r3, r8
 80060a4:	e781      	b.n	8005faa <_dtoa_r+0x70a>
 80060a6:	9e08      	ldr	r6, [sp, #32]
 80060a8:	464d      	mov	r5, r9
 80060aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80060ac:	e786      	b.n	8005fbc <_dtoa_r+0x71c>
 80060ae:	9a08      	ldr	r2, [sp, #32]
 80060b0:	e7ad      	b.n	800600e <_dtoa_r+0x76e>
 80060b2:	2300      	movs	r3, #0
 80060b4:	e7d6      	b.n	8006064 <_dtoa_r+0x7c4>
 80060b6:	9b02      	ldr	r3, [sp, #8]
 80060b8:	e7d4      	b.n	8006064 <_dtoa_r+0x7c4>
 80060ba:	2300      	movs	r3, #0
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	6933      	ldr	r3, [r6, #16]
 80060c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060c4:	6918      	ldr	r0, [r3, #16]
 80060c6:	f000 fe9c 	bl	8006e02 <__hi0bits>
 80060ca:	f1c0 0020 	rsb	r0, r0, #32
 80060ce:	9b07      	ldr	r3, [sp, #28]
 80060d0:	4418      	add	r0, r3
 80060d2:	f010 001f 	ands.w	r0, r0, #31
 80060d6:	d047      	beq.n	8006168 <_dtoa_r+0x8c8>
 80060d8:	f1c0 0320 	rsb	r3, r0, #32
 80060dc:	2b04      	cmp	r3, #4
 80060de:	dd3b      	ble.n	8006158 <_dtoa_r+0x8b8>
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	f1c0 001c 	rsb	r0, r0, #28
 80060e6:	4481      	add	r9, r0
 80060e8:	4405      	add	r5, r0
 80060ea:	4403      	add	r3, r0
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f1b9 0f00 	cmp.w	r9, #0
 80060f2:	dd05      	ble.n	8006100 <_dtoa_r+0x860>
 80060f4:	4659      	mov	r1, fp
 80060f6:	464a      	mov	r2, r9
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 ffbd 	bl	8007078 <__lshift>
 80060fe:	4683      	mov	fp, r0
 8006100:	9b07      	ldr	r3, [sp, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd05      	ble.n	8006112 <_dtoa_r+0x872>
 8006106:	4631      	mov	r1, r6
 8006108:	461a      	mov	r2, r3
 800610a:	4620      	mov	r0, r4
 800610c:	f000 ffb4 	bl	8007078 <__lshift>
 8006110:	4606      	mov	r6, r0
 8006112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006114:	b353      	cbz	r3, 800616c <_dtoa_r+0x8cc>
 8006116:	4631      	mov	r1, r6
 8006118:	4658      	mov	r0, fp
 800611a:	f001 f801 	bl	8007120 <__mcmp>
 800611e:	2800      	cmp	r0, #0
 8006120:	da24      	bge.n	800616c <_dtoa_r+0x8cc>
 8006122:	2300      	movs	r3, #0
 8006124:	4659      	mov	r1, fp
 8006126:	220a      	movs	r2, #10
 8006128:	4620      	mov	r0, r4
 800612a:	f000 fdf1 	bl	8006d10 <__multadd>
 800612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006130:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006134:	4683      	mov	fp, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8144 	beq.w	80063c4 <_dtoa_r+0xb24>
 800613c:	2300      	movs	r3, #0
 800613e:	4639      	mov	r1, r7
 8006140:	220a      	movs	r2, #10
 8006142:	4620      	mov	r0, r4
 8006144:	f000 fde4 	bl	8006d10 <__multadd>
 8006148:	9b04      	ldr	r3, [sp, #16]
 800614a:	4607      	mov	r7, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	dc4d      	bgt.n	80061ec <_dtoa_r+0x94c>
 8006150:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006152:	2b02      	cmp	r3, #2
 8006154:	dd4a      	ble.n	80061ec <_dtoa_r+0x94c>
 8006156:	e011      	b.n	800617c <_dtoa_r+0x8dc>
 8006158:	d0c9      	beq.n	80060ee <_dtoa_r+0x84e>
 800615a:	9a07      	ldr	r2, [sp, #28]
 800615c:	331c      	adds	r3, #28
 800615e:	441a      	add	r2, r3
 8006160:	4499      	add	r9, r3
 8006162:	441d      	add	r5, r3
 8006164:	4613      	mov	r3, r2
 8006166:	e7c1      	b.n	80060ec <_dtoa_r+0x84c>
 8006168:	4603      	mov	r3, r0
 800616a:	e7f6      	b.n	800615a <_dtoa_r+0x8ba>
 800616c:	f1b8 0f00 	cmp.w	r8, #0
 8006170:	dc36      	bgt.n	80061e0 <_dtoa_r+0x940>
 8006172:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006174:	2b02      	cmp	r3, #2
 8006176:	dd33      	ble.n	80061e0 <_dtoa_r+0x940>
 8006178:	f8cd 8010 	str.w	r8, [sp, #16]
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	b963      	cbnz	r3, 800619a <_dtoa_r+0x8fa>
 8006180:	4631      	mov	r1, r6
 8006182:	2205      	movs	r2, #5
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fdc3 	bl	8006d10 <__multadd>
 800618a:	4601      	mov	r1, r0
 800618c:	4606      	mov	r6, r0
 800618e:	4658      	mov	r0, fp
 8006190:	f000 ffc6 	bl	8007120 <__mcmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	f73f add3 	bgt.w	8005d40 <_dtoa_r+0x4a0>
 800619a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800619c:	9d06      	ldr	r5, [sp, #24]
 800619e:	ea6f 0a03 	mvn.w	sl, r3
 80061a2:	f04f 0900 	mov.w	r9, #0
 80061a6:	4631      	mov	r1, r6
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fd9a 	bl	8006ce2 <_Bfree>
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	f43f aebd 	beq.w	8005f2e <_dtoa_r+0x68e>
 80061b4:	f1b9 0f00 	cmp.w	r9, #0
 80061b8:	d005      	beq.n	80061c6 <_dtoa_r+0x926>
 80061ba:	45b9      	cmp	r9, r7
 80061bc:	d003      	beq.n	80061c6 <_dtoa_r+0x926>
 80061be:	4649      	mov	r1, r9
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 fd8e 	bl	8006ce2 <_Bfree>
 80061c6:	4639      	mov	r1, r7
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fd8a 	bl	8006ce2 <_Bfree>
 80061ce:	e6ae      	b.n	8005f2e <_dtoa_r+0x68e>
 80061d0:	2600      	movs	r6, #0
 80061d2:	4637      	mov	r7, r6
 80061d4:	e7e1      	b.n	800619a <_dtoa_r+0x8fa>
 80061d6:	46ba      	mov	sl, r7
 80061d8:	4637      	mov	r7, r6
 80061da:	e5b1      	b.n	8005d40 <_dtoa_r+0x4a0>
 80061dc:	40240000 	.word	0x40240000
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80f3 	beq.w	80063d2 <_dtoa_r+0xb32>
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	dd05      	ble.n	80061fc <_dtoa_r+0x95c>
 80061f0:	4639      	mov	r1, r7
 80061f2:	462a      	mov	r2, r5
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 ff3f 	bl	8007078 <__lshift>
 80061fa:	4607      	mov	r7, r0
 80061fc:	9b08      	ldr	r3, [sp, #32]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04c      	beq.n	800629c <_dtoa_r+0x9fc>
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4620      	mov	r0, r4
 8006206:	f000 fd38 	bl	8006c7a <_Balloc>
 800620a:	4605      	mov	r5, r0
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	f107 010c 	add.w	r1, r7, #12
 8006212:	3202      	adds	r2, #2
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	300c      	adds	r0, #12
 8006218:	f000 fd24 	bl	8006c64 <memcpy>
 800621c:	2201      	movs	r2, #1
 800621e:	4629      	mov	r1, r5
 8006220:	4620      	mov	r0, r4
 8006222:	f000 ff29 	bl	8007078 <__lshift>
 8006226:	46b9      	mov	r9, r7
 8006228:	4607      	mov	r7, r0
 800622a:	9b06      	ldr	r3, [sp, #24]
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	9b02      	ldr	r3, [sp, #8]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	9308      	str	r3, [sp, #32]
 8006236:	4631      	mov	r1, r6
 8006238:	4658      	mov	r0, fp
 800623a:	f7ff faa3 	bl	8005784 <quorem>
 800623e:	4649      	mov	r1, r9
 8006240:	4605      	mov	r5, r0
 8006242:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006246:	4658      	mov	r0, fp
 8006248:	f000 ff6a 	bl	8007120 <__mcmp>
 800624c:	463a      	mov	r2, r7
 800624e:	9002      	str	r0, [sp, #8]
 8006250:	4631      	mov	r1, r6
 8006252:	4620      	mov	r0, r4
 8006254:	f000 ff7e 	bl	8007154 <__mdiff>
 8006258:	68c3      	ldr	r3, [r0, #12]
 800625a:	4602      	mov	r2, r0
 800625c:	bb03      	cbnz	r3, 80062a0 <_dtoa_r+0xa00>
 800625e:	4601      	mov	r1, r0
 8006260:	9009      	str	r0, [sp, #36]	; 0x24
 8006262:	4658      	mov	r0, fp
 8006264:	f000 ff5c 	bl	8007120 <__mcmp>
 8006268:	4603      	mov	r3, r0
 800626a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800626c:	4611      	mov	r1, r2
 800626e:	4620      	mov	r0, r4
 8006270:	9309      	str	r3, [sp, #36]	; 0x24
 8006272:	f000 fd36 	bl	8006ce2 <_Bfree>
 8006276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006278:	b9a3      	cbnz	r3, 80062a4 <_dtoa_r+0xa04>
 800627a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800627c:	b992      	cbnz	r2, 80062a4 <_dtoa_r+0xa04>
 800627e:	9a08      	ldr	r2, [sp, #32]
 8006280:	b982      	cbnz	r2, 80062a4 <_dtoa_r+0xa04>
 8006282:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006286:	d029      	beq.n	80062dc <_dtoa_r+0xa3c>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd01      	ble.n	8006292 <_dtoa_r+0x9f2>
 800628e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006292:	9b07      	ldr	r3, [sp, #28]
 8006294:	1c5d      	adds	r5, r3, #1
 8006296:	f883 8000 	strb.w	r8, [r3]
 800629a:	e784      	b.n	80061a6 <_dtoa_r+0x906>
 800629c:	4638      	mov	r0, r7
 800629e:	e7c2      	b.n	8006226 <_dtoa_r+0x986>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e7e3      	b.n	800626c <_dtoa_r+0x9cc>
 80062a4:	9a02      	ldr	r2, [sp, #8]
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	db04      	blt.n	80062b4 <_dtoa_r+0xa14>
 80062aa:	d123      	bne.n	80062f4 <_dtoa_r+0xa54>
 80062ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80062ae:	bb0a      	cbnz	r2, 80062f4 <_dtoa_r+0xa54>
 80062b0:	9a08      	ldr	r2, [sp, #32]
 80062b2:	b9fa      	cbnz	r2, 80062f4 <_dtoa_r+0xa54>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	ddec      	ble.n	8006292 <_dtoa_r+0x9f2>
 80062b8:	4659      	mov	r1, fp
 80062ba:	2201      	movs	r2, #1
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fedb 	bl	8007078 <__lshift>
 80062c2:	4631      	mov	r1, r6
 80062c4:	4683      	mov	fp, r0
 80062c6:	f000 ff2b 	bl	8007120 <__mcmp>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	dc03      	bgt.n	80062d6 <_dtoa_r+0xa36>
 80062ce:	d1e0      	bne.n	8006292 <_dtoa_r+0x9f2>
 80062d0:	f018 0f01 	tst.w	r8, #1
 80062d4:	d0dd      	beq.n	8006292 <_dtoa_r+0x9f2>
 80062d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062da:	d1d8      	bne.n	800628e <_dtoa_r+0x9ee>
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	9a07      	ldr	r2, [sp, #28]
 80062e0:	1c5d      	adds	r5, r3, #1
 80062e2:	2339      	movs	r3, #57	; 0x39
 80062e4:	7013      	strb	r3, [r2, #0]
 80062e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062ea:	1e6a      	subs	r2, r5, #1
 80062ec:	2b39      	cmp	r3, #57	; 0x39
 80062ee:	d04d      	beq.n	800638c <_dtoa_r+0xaec>
 80062f0:	3301      	adds	r3, #1
 80062f2:	e052      	b.n	800639a <_dtoa_r+0xafa>
 80062f4:	9a07      	ldr	r2, [sp, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f102 0501 	add.w	r5, r2, #1
 80062fc:	dd06      	ble.n	800630c <_dtoa_r+0xa6c>
 80062fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006302:	d0eb      	beq.n	80062dc <_dtoa_r+0xa3c>
 8006304:	f108 0801 	add.w	r8, r8, #1
 8006308:	9b07      	ldr	r3, [sp, #28]
 800630a:	e7c4      	b.n	8006296 <_dtoa_r+0x9f6>
 800630c:	9b06      	ldr	r3, [sp, #24]
 800630e:	9a04      	ldr	r2, [sp, #16]
 8006310:	1aeb      	subs	r3, r5, r3
 8006312:	4293      	cmp	r3, r2
 8006314:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006318:	d021      	beq.n	800635e <_dtoa_r+0xabe>
 800631a:	4659      	mov	r1, fp
 800631c:	2300      	movs	r3, #0
 800631e:	220a      	movs	r2, #10
 8006320:	4620      	mov	r0, r4
 8006322:	f000 fcf5 	bl	8006d10 <__multadd>
 8006326:	45b9      	cmp	r9, r7
 8006328:	4683      	mov	fp, r0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	f04f 020a 	mov.w	r2, #10
 8006332:	4649      	mov	r1, r9
 8006334:	4620      	mov	r0, r4
 8006336:	d105      	bne.n	8006344 <_dtoa_r+0xaa4>
 8006338:	f000 fcea 	bl	8006d10 <__multadd>
 800633c:	4681      	mov	r9, r0
 800633e:	4607      	mov	r7, r0
 8006340:	9507      	str	r5, [sp, #28]
 8006342:	e778      	b.n	8006236 <_dtoa_r+0x996>
 8006344:	f000 fce4 	bl	8006d10 <__multadd>
 8006348:	4639      	mov	r1, r7
 800634a:	4681      	mov	r9, r0
 800634c:	2300      	movs	r3, #0
 800634e:	220a      	movs	r2, #10
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fcdd 	bl	8006d10 <__multadd>
 8006356:	4607      	mov	r7, r0
 8006358:	e7f2      	b.n	8006340 <_dtoa_r+0xaa0>
 800635a:	f04f 0900 	mov.w	r9, #0
 800635e:	4659      	mov	r1, fp
 8006360:	2201      	movs	r2, #1
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fe88 	bl	8007078 <__lshift>
 8006368:	4631      	mov	r1, r6
 800636a:	4683      	mov	fp, r0
 800636c:	f000 fed8 	bl	8007120 <__mcmp>
 8006370:	2800      	cmp	r0, #0
 8006372:	dcb8      	bgt.n	80062e6 <_dtoa_r+0xa46>
 8006374:	d102      	bne.n	800637c <_dtoa_r+0xadc>
 8006376:	f018 0f01 	tst.w	r8, #1
 800637a:	d1b4      	bne.n	80062e6 <_dtoa_r+0xa46>
 800637c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006380:	1e6a      	subs	r2, r5, #1
 8006382:	2b30      	cmp	r3, #48	; 0x30
 8006384:	f47f af0f 	bne.w	80061a6 <_dtoa_r+0x906>
 8006388:	4615      	mov	r5, r2
 800638a:	e7f7      	b.n	800637c <_dtoa_r+0xadc>
 800638c:	9b06      	ldr	r3, [sp, #24]
 800638e:	4293      	cmp	r3, r2
 8006390:	d105      	bne.n	800639e <_dtoa_r+0xafe>
 8006392:	2331      	movs	r3, #49	; 0x31
 8006394:	9a06      	ldr	r2, [sp, #24]
 8006396:	f10a 0a01 	add.w	sl, sl, #1
 800639a:	7013      	strb	r3, [r2, #0]
 800639c:	e703      	b.n	80061a6 <_dtoa_r+0x906>
 800639e:	4615      	mov	r5, r2
 80063a0:	e7a1      	b.n	80062e6 <_dtoa_r+0xa46>
 80063a2:	4b17      	ldr	r3, [pc, #92]	; (8006400 <_dtoa_r+0xb60>)
 80063a4:	f7ff bae1 	b.w	800596a <_dtoa_r+0xca>
 80063a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f47f aabb 	bne.w	8005926 <_dtoa_r+0x86>
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <_dtoa_r+0xb64>)
 80063b2:	f7ff bada 	b.w	800596a <_dtoa_r+0xca>
 80063b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f77f ae3f 	ble.w	800603c <_dtoa_r+0x79c>
 80063be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	e653      	b.n	800606c <_dtoa_r+0x7cc>
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dc03      	bgt.n	80063d2 <_dtoa_r+0xb32>
 80063ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f73f aed5 	bgt.w	800617c <_dtoa_r+0x8dc>
 80063d2:	9d06      	ldr	r5, [sp, #24]
 80063d4:	4631      	mov	r1, r6
 80063d6:	4658      	mov	r0, fp
 80063d8:	f7ff f9d4 	bl	8005784 <quorem>
 80063dc:	9b06      	ldr	r3, [sp, #24]
 80063de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80063e2:	f805 8b01 	strb.w	r8, [r5], #1
 80063e6:	9a04      	ldr	r2, [sp, #16]
 80063e8:	1aeb      	subs	r3, r5, r3
 80063ea:	429a      	cmp	r2, r3
 80063ec:	ddb5      	ble.n	800635a <_dtoa_r+0xaba>
 80063ee:	4659      	mov	r1, fp
 80063f0:	2300      	movs	r3, #0
 80063f2:	220a      	movs	r2, #10
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fc8b 	bl	8006d10 <__multadd>
 80063fa:	4683      	mov	fp, r0
 80063fc:	e7ea      	b.n	80063d4 <_dtoa_r+0xb34>
 80063fe:	bf00      	nop
 8006400:	08008174 	.word	0x08008174
 8006404:	080081f0 	.word	0x080081f0

08006408 <std>:
 8006408:	2300      	movs	r3, #0
 800640a:	b510      	push	{r4, lr}
 800640c:	4604      	mov	r4, r0
 800640e:	e9c0 3300 	strd	r3, r3, [r0]
 8006412:	6083      	str	r3, [r0, #8]
 8006414:	8181      	strh	r1, [r0, #12]
 8006416:	6643      	str	r3, [r0, #100]	; 0x64
 8006418:	81c2      	strh	r2, [r0, #14]
 800641a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800641e:	6183      	str	r3, [r0, #24]
 8006420:	4619      	mov	r1, r3
 8006422:	2208      	movs	r2, #8
 8006424:	305c      	adds	r0, #92	; 0x5c
 8006426:	f7fd fc77 	bl	8003d18 <memset>
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <std+0x38>)
 800642c:	6224      	str	r4, [r4, #32]
 800642e:	6263      	str	r3, [r4, #36]	; 0x24
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <std+0x3c>)
 8006432:	62a3      	str	r3, [r4, #40]	; 0x28
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <std+0x40>)
 8006436:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <std+0x44>)
 800643a:	6323      	str	r3, [r4, #48]	; 0x30
 800643c:	bd10      	pop	{r4, pc}
 800643e:	bf00      	nop
 8006440:	08007b15 	.word	0x08007b15
 8006444:	08007b37 	.word	0x08007b37
 8006448:	08007b6f 	.word	0x08007b6f
 800644c:	08007b93 	.word	0x08007b93

08006450 <_cleanup_r>:
 8006450:	4901      	ldr	r1, [pc, #4]	; (8006458 <_cleanup_r+0x8>)
 8006452:	f000 b885 	b.w	8006560 <_fwalk_reent>
 8006456:	bf00      	nop
 8006458:	08007ead 	.word	0x08007ead

0800645c <__sfmoreglue>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	2568      	movs	r5, #104	; 0x68
 8006460:	1e4a      	subs	r2, r1, #1
 8006462:	4355      	muls	r5, r2
 8006464:	460e      	mov	r6, r1
 8006466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800646a:	f001 f859 	bl	8007520 <_malloc_r>
 800646e:	4604      	mov	r4, r0
 8006470:	b140      	cbz	r0, 8006484 <__sfmoreglue+0x28>
 8006472:	2100      	movs	r1, #0
 8006474:	e9c0 1600 	strd	r1, r6, [r0]
 8006478:	300c      	adds	r0, #12
 800647a:	60a0      	str	r0, [r4, #8]
 800647c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006480:	f7fd fc4a 	bl	8003d18 <memset>
 8006484:	4620      	mov	r0, r4
 8006486:	bd70      	pop	{r4, r5, r6, pc}

08006488 <__sinit>:
 8006488:	6983      	ldr	r3, [r0, #24]
 800648a:	b510      	push	{r4, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	bb33      	cbnz	r3, 80064de <__sinit+0x56>
 8006490:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006494:	6503      	str	r3, [r0, #80]	; 0x50
 8006496:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <__sinit+0x58>)
 8006498:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <__sinit+0x5c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6282      	str	r2, [r0, #40]	; 0x28
 800649e:	4298      	cmp	r0, r3
 80064a0:	bf04      	itt	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	6183      	streq	r3, [r0, #24]
 80064a6:	f000 f81f 	bl	80064e8 <__sfp>
 80064aa:	6060      	str	r0, [r4, #4]
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 f81b 	bl	80064e8 <__sfp>
 80064b2:	60a0      	str	r0, [r4, #8]
 80064b4:	4620      	mov	r0, r4
 80064b6:	f000 f817 	bl	80064e8 <__sfp>
 80064ba:	2200      	movs	r2, #0
 80064bc:	60e0      	str	r0, [r4, #12]
 80064be:	2104      	movs	r1, #4
 80064c0:	6860      	ldr	r0, [r4, #4]
 80064c2:	f7ff ffa1 	bl	8006408 <std>
 80064c6:	2201      	movs	r2, #1
 80064c8:	2109      	movs	r1, #9
 80064ca:	68a0      	ldr	r0, [r4, #8]
 80064cc:	f7ff ff9c 	bl	8006408 <std>
 80064d0:	2202      	movs	r2, #2
 80064d2:	2112      	movs	r1, #18
 80064d4:	68e0      	ldr	r0, [r4, #12]
 80064d6:	f7ff ff97 	bl	8006408 <std>
 80064da:	2301      	movs	r3, #1
 80064dc:	61a3      	str	r3, [r4, #24]
 80064de:	bd10      	pop	{r4, pc}
 80064e0:	08008160 	.word	0x08008160
 80064e4:	08006451 	.word	0x08006451

080064e8 <__sfp>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <__sfp+0x70>)
 80064ec:	4607      	mov	r7, r0
 80064ee:	681e      	ldr	r6, [r3, #0]
 80064f0:	69b3      	ldr	r3, [r6, #24]
 80064f2:	b913      	cbnz	r3, 80064fa <__sfp+0x12>
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff ffc7 	bl	8006488 <__sinit>
 80064fa:	3648      	adds	r6, #72	; 0x48
 80064fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006500:	3b01      	subs	r3, #1
 8006502:	d503      	bpl.n	800650c <__sfp+0x24>
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	b133      	cbz	r3, 8006516 <__sfp+0x2e>
 8006508:	6836      	ldr	r6, [r6, #0]
 800650a:	e7f7      	b.n	80064fc <__sfp+0x14>
 800650c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006510:	b16d      	cbz	r5, 800652e <__sfp+0x46>
 8006512:	3468      	adds	r4, #104	; 0x68
 8006514:	e7f4      	b.n	8006500 <__sfp+0x18>
 8006516:	2104      	movs	r1, #4
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff ff9f 	bl	800645c <__sfmoreglue>
 800651e:	6030      	str	r0, [r6, #0]
 8006520:	2800      	cmp	r0, #0
 8006522:	d1f1      	bne.n	8006508 <__sfp+0x20>
 8006524:	230c      	movs	r3, #12
 8006526:	4604      	mov	r4, r0
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4620      	mov	r0, r4
 800652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <__sfp+0x74>)
 8006530:	6665      	str	r5, [r4, #100]	; 0x64
 8006532:	e9c4 5500 	strd	r5, r5, [r4]
 8006536:	60a5      	str	r5, [r4, #8]
 8006538:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800653c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006540:	2208      	movs	r2, #8
 8006542:	4629      	mov	r1, r5
 8006544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006548:	f7fd fbe6 	bl	8003d18 <memset>
 800654c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006554:	e7e9      	b.n	800652a <__sfp+0x42>
 8006556:	bf00      	nop
 8006558:	08008160 	.word	0x08008160
 800655c:	ffff0001 	.word	0xffff0001

08006560 <_fwalk_reent>:
 8006560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006564:	4680      	mov	r8, r0
 8006566:	4689      	mov	r9, r1
 8006568:	2600      	movs	r6, #0
 800656a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800656e:	b914      	cbnz	r4, 8006576 <_fwalk_reent+0x16>
 8006570:	4630      	mov	r0, r6
 8006572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006576:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800657a:	3f01      	subs	r7, #1
 800657c:	d501      	bpl.n	8006582 <_fwalk_reent+0x22>
 800657e:	6824      	ldr	r4, [r4, #0]
 8006580:	e7f5      	b.n	800656e <_fwalk_reent+0xe>
 8006582:	89ab      	ldrh	r3, [r5, #12]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d907      	bls.n	8006598 <_fwalk_reent+0x38>
 8006588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800658c:	3301      	adds	r3, #1
 800658e:	d003      	beq.n	8006598 <_fwalk_reent+0x38>
 8006590:	4629      	mov	r1, r5
 8006592:	4640      	mov	r0, r8
 8006594:	47c8      	blx	r9
 8006596:	4306      	orrs	r6, r0
 8006598:	3568      	adds	r5, #104	; 0x68
 800659a:	e7ee      	b.n	800657a <_fwalk_reent+0x1a>

0800659c <rshift>:
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	6906      	ldr	r6, [r0, #16]
 80065a0:	114b      	asrs	r3, r1, #5
 80065a2:	429e      	cmp	r6, r3
 80065a4:	f100 0414 	add.w	r4, r0, #20
 80065a8:	dd31      	ble.n	800660e <rshift+0x72>
 80065aa:	f011 011f 	ands.w	r1, r1, #31
 80065ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80065b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80065b6:	d108      	bne.n	80065ca <rshift+0x2e>
 80065b8:	4621      	mov	r1, r4
 80065ba:	42b2      	cmp	r2, r6
 80065bc:	460b      	mov	r3, r1
 80065be:	d211      	bcs.n	80065e4 <rshift+0x48>
 80065c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80065c4:	f841 3b04 	str.w	r3, [r1], #4
 80065c8:	e7f7      	b.n	80065ba <rshift+0x1e>
 80065ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80065ce:	4623      	mov	r3, r4
 80065d0:	f1c1 0c20 	rsb	ip, r1, #32
 80065d4:	40cd      	lsrs	r5, r1
 80065d6:	3204      	adds	r2, #4
 80065d8:	42b2      	cmp	r2, r6
 80065da:	4617      	mov	r7, r2
 80065dc:	d30d      	bcc.n	80065fa <rshift+0x5e>
 80065de:	601d      	str	r5, [r3, #0]
 80065e0:	b105      	cbz	r5, 80065e4 <rshift+0x48>
 80065e2:	3304      	adds	r3, #4
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	eba3 0204 	sub.w	r2, r3, r4
 80065ea:	bf08      	it	eq
 80065ec:	2300      	moveq	r3, #0
 80065ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80065f2:	6102      	str	r2, [r0, #16]
 80065f4:	bf08      	it	eq
 80065f6:	6143      	streq	r3, [r0, #20]
 80065f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fa:	683f      	ldr	r7, [r7, #0]
 80065fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8006600:	433d      	orrs	r5, r7
 8006602:	f843 5b04 	str.w	r5, [r3], #4
 8006606:	f852 5b04 	ldr.w	r5, [r2], #4
 800660a:	40cd      	lsrs	r5, r1
 800660c:	e7e4      	b.n	80065d8 <rshift+0x3c>
 800660e:	4623      	mov	r3, r4
 8006610:	e7e8      	b.n	80065e4 <rshift+0x48>

08006612 <__hexdig_fun>:
 8006612:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006616:	2b09      	cmp	r3, #9
 8006618:	d802      	bhi.n	8006620 <__hexdig_fun+0xe>
 800661a:	3820      	subs	r0, #32
 800661c:	b2c0      	uxtb	r0, r0
 800661e:	4770      	bx	lr
 8006620:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006624:	2b05      	cmp	r3, #5
 8006626:	d801      	bhi.n	800662c <__hexdig_fun+0x1a>
 8006628:	3847      	subs	r0, #71	; 0x47
 800662a:	e7f7      	b.n	800661c <__hexdig_fun+0xa>
 800662c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006630:	2b05      	cmp	r3, #5
 8006632:	d801      	bhi.n	8006638 <__hexdig_fun+0x26>
 8006634:	3827      	subs	r0, #39	; 0x27
 8006636:	e7f1      	b.n	800661c <__hexdig_fun+0xa>
 8006638:	2000      	movs	r0, #0
 800663a:	4770      	bx	lr

0800663c <__gethex>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	b08b      	sub	sp, #44	; 0x2c
 8006642:	9002      	str	r0, [sp, #8]
 8006644:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006646:	468a      	mov	sl, r1
 8006648:	4690      	mov	r8, r2
 800664a:	9306      	str	r3, [sp, #24]
 800664c:	f000 fad1 	bl	8006bf2 <__localeconv_l>
 8006650:	6803      	ldr	r3, [r0, #0]
 8006652:	f04f 0b00 	mov.w	fp, #0
 8006656:	4618      	mov	r0, r3
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	f7f9 fd79 	bl	8000150 <strlen>
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	9001      	str	r0, [sp, #4]
 8006662:	4403      	add	r3, r0
 8006664:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	f8da 3000 	ldr.w	r3, [sl]
 800666e:	3302      	adds	r3, #2
 8006670:	461f      	mov	r7, r3
 8006672:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006676:	2830      	cmp	r0, #48	; 0x30
 8006678:	d06c      	beq.n	8006754 <__gethex+0x118>
 800667a:	f7ff ffca 	bl	8006612 <__hexdig_fun>
 800667e:	4604      	mov	r4, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	d16a      	bne.n	800675a <__gethex+0x11e>
 8006684:	9a01      	ldr	r2, [sp, #4]
 8006686:	9903      	ldr	r1, [sp, #12]
 8006688:	4638      	mov	r0, r7
 800668a:	f001 fa86 	bl	8007b9a <strncmp>
 800668e:	2800      	cmp	r0, #0
 8006690:	d166      	bne.n	8006760 <__gethex+0x124>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	5cf8      	ldrb	r0, [r7, r3]
 8006696:	18fe      	adds	r6, r7, r3
 8006698:	f7ff ffbb 	bl	8006612 <__hexdig_fun>
 800669c:	2800      	cmp	r0, #0
 800669e:	d062      	beq.n	8006766 <__gethex+0x12a>
 80066a0:	4633      	mov	r3, r6
 80066a2:	7818      	ldrb	r0, [r3, #0]
 80066a4:	461f      	mov	r7, r3
 80066a6:	2830      	cmp	r0, #48	; 0x30
 80066a8:	f103 0301 	add.w	r3, r3, #1
 80066ac:	d0f9      	beq.n	80066a2 <__gethex+0x66>
 80066ae:	f7ff ffb0 	bl	8006612 <__hexdig_fun>
 80066b2:	fab0 f580 	clz	r5, r0
 80066b6:	4634      	mov	r4, r6
 80066b8:	f04f 0b01 	mov.w	fp, #1
 80066bc:	096d      	lsrs	r5, r5, #5
 80066be:	463a      	mov	r2, r7
 80066c0:	4616      	mov	r6, r2
 80066c2:	7830      	ldrb	r0, [r6, #0]
 80066c4:	3201      	adds	r2, #1
 80066c6:	f7ff ffa4 	bl	8006612 <__hexdig_fun>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d1f8      	bne.n	80066c0 <__gethex+0x84>
 80066ce:	9a01      	ldr	r2, [sp, #4]
 80066d0:	9903      	ldr	r1, [sp, #12]
 80066d2:	4630      	mov	r0, r6
 80066d4:	f001 fa61 	bl	8007b9a <strncmp>
 80066d8:	b950      	cbnz	r0, 80066f0 <__gethex+0xb4>
 80066da:	b954      	cbnz	r4, 80066f2 <__gethex+0xb6>
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	18f4      	adds	r4, r6, r3
 80066e0:	4622      	mov	r2, r4
 80066e2:	4616      	mov	r6, r2
 80066e4:	7830      	ldrb	r0, [r6, #0]
 80066e6:	3201      	adds	r2, #1
 80066e8:	f7ff ff93 	bl	8006612 <__hexdig_fun>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d1f8      	bne.n	80066e2 <__gethex+0xa6>
 80066f0:	b10c      	cbz	r4, 80066f6 <__gethex+0xba>
 80066f2:	1ba4      	subs	r4, r4, r6
 80066f4:	00a4      	lsls	r4, r4, #2
 80066f6:	7833      	ldrb	r3, [r6, #0]
 80066f8:	2b50      	cmp	r3, #80	; 0x50
 80066fa:	d001      	beq.n	8006700 <__gethex+0xc4>
 80066fc:	2b70      	cmp	r3, #112	; 0x70
 80066fe:	d140      	bne.n	8006782 <__gethex+0x146>
 8006700:	7873      	ldrb	r3, [r6, #1]
 8006702:	2b2b      	cmp	r3, #43	; 0x2b
 8006704:	d031      	beq.n	800676a <__gethex+0x12e>
 8006706:	2b2d      	cmp	r3, #45	; 0x2d
 8006708:	d033      	beq.n	8006772 <__gethex+0x136>
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	1c71      	adds	r1, r6, #1
 8006710:	7808      	ldrb	r0, [r1, #0]
 8006712:	f7ff ff7e 	bl	8006612 <__hexdig_fun>
 8006716:	1e43      	subs	r3, r0, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b18      	cmp	r3, #24
 800671c:	d831      	bhi.n	8006782 <__gethex+0x146>
 800671e:	f1a0 0210 	sub.w	r2, r0, #16
 8006722:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006726:	f7ff ff74 	bl	8006612 <__hexdig_fun>
 800672a:	1e43      	subs	r3, r0, #1
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b18      	cmp	r3, #24
 8006730:	d922      	bls.n	8006778 <__gethex+0x13c>
 8006732:	f1b9 0f00 	cmp.w	r9, #0
 8006736:	d000      	beq.n	800673a <__gethex+0xfe>
 8006738:	4252      	negs	r2, r2
 800673a:	4414      	add	r4, r2
 800673c:	f8ca 1000 	str.w	r1, [sl]
 8006740:	b30d      	cbz	r5, 8006786 <__gethex+0x14a>
 8006742:	f1bb 0f00 	cmp.w	fp, #0
 8006746:	bf0c      	ite	eq
 8006748:	2706      	moveq	r7, #6
 800674a:	2700      	movne	r7, #0
 800674c:	4638      	mov	r0, r7
 800674e:	b00b      	add	sp, #44	; 0x2c
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	f10b 0b01 	add.w	fp, fp, #1
 8006758:	e78a      	b.n	8006670 <__gethex+0x34>
 800675a:	2500      	movs	r5, #0
 800675c:	462c      	mov	r4, r5
 800675e:	e7ae      	b.n	80066be <__gethex+0x82>
 8006760:	463e      	mov	r6, r7
 8006762:	2501      	movs	r5, #1
 8006764:	e7c7      	b.n	80066f6 <__gethex+0xba>
 8006766:	4604      	mov	r4, r0
 8006768:	e7fb      	b.n	8006762 <__gethex+0x126>
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	1cb1      	adds	r1, r6, #2
 8006770:	e7ce      	b.n	8006710 <__gethex+0xd4>
 8006772:	f04f 0901 	mov.w	r9, #1
 8006776:	e7fa      	b.n	800676e <__gethex+0x132>
 8006778:	230a      	movs	r3, #10
 800677a:	fb03 0202 	mla	r2, r3, r2, r0
 800677e:	3a10      	subs	r2, #16
 8006780:	e7cf      	b.n	8006722 <__gethex+0xe6>
 8006782:	4631      	mov	r1, r6
 8006784:	e7da      	b.n	800673c <__gethex+0x100>
 8006786:	4629      	mov	r1, r5
 8006788:	1bf3      	subs	r3, r6, r7
 800678a:	3b01      	subs	r3, #1
 800678c:	2b07      	cmp	r3, #7
 800678e:	dc49      	bgt.n	8006824 <__gethex+0x1e8>
 8006790:	9802      	ldr	r0, [sp, #8]
 8006792:	f000 fa72 	bl	8006c7a <_Balloc>
 8006796:	f04f 0b00 	mov.w	fp, #0
 800679a:	4605      	mov	r5, r0
 800679c:	46da      	mov	sl, fp
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	f100 0914 	add.w	r9, r0, #20
 80067a4:	f1c3 0301 	rsb	r3, r3, #1
 80067a8:	f8cd 9010 	str.w	r9, [sp, #16]
 80067ac:	9308      	str	r3, [sp, #32]
 80067ae:	42b7      	cmp	r7, r6
 80067b0:	d33b      	bcc.n	800682a <__gethex+0x1ee>
 80067b2:	9804      	ldr	r0, [sp, #16]
 80067b4:	f840 ab04 	str.w	sl, [r0], #4
 80067b8:	eba0 0009 	sub.w	r0, r0, r9
 80067bc:	1080      	asrs	r0, r0, #2
 80067be:	6128      	str	r0, [r5, #16]
 80067c0:	0147      	lsls	r7, r0, #5
 80067c2:	4650      	mov	r0, sl
 80067c4:	f000 fb1d 	bl	8006e02 <__hi0bits>
 80067c8:	f8d8 6000 	ldr.w	r6, [r8]
 80067cc:	1a3f      	subs	r7, r7, r0
 80067ce:	42b7      	cmp	r7, r6
 80067d0:	dd64      	ble.n	800689c <__gethex+0x260>
 80067d2:	1bbf      	subs	r7, r7, r6
 80067d4:	4639      	mov	r1, r7
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fe27 	bl	800742a <__any_on>
 80067dc:	4682      	mov	sl, r0
 80067de:	b178      	cbz	r0, 8006800 <__gethex+0x1c4>
 80067e0:	f04f 0a01 	mov.w	sl, #1
 80067e4:	1e7b      	subs	r3, r7, #1
 80067e6:	1159      	asrs	r1, r3, #5
 80067e8:	f003 021f 	and.w	r2, r3, #31
 80067ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80067f0:	fa0a f202 	lsl.w	r2, sl, r2
 80067f4:	420a      	tst	r2, r1
 80067f6:	d003      	beq.n	8006800 <__gethex+0x1c4>
 80067f8:	4553      	cmp	r3, sl
 80067fa:	dc46      	bgt.n	800688a <__gethex+0x24e>
 80067fc:	f04f 0a02 	mov.w	sl, #2
 8006800:	4639      	mov	r1, r7
 8006802:	4628      	mov	r0, r5
 8006804:	f7ff feca 	bl	800659c <rshift>
 8006808:	443c      	add	r4, r7
 800680a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800680e:	42a3      	cmp	r3, r4
 8006810:	da52      	bge.n	80068b8 <__gethex+0x27c>
 8006812:	4629      	mov	r1, r5
 8006814:	9802      	ldr	r0, [sp, #8]
 8006816:	f000 fa64 	bl	8006ce2 <_Bfree>
 800681a:	2300      	movs	r3, #0
 800681c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800681e:	27a3      	movs	r7, #163	; 0xa3
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	e793      	b.n	800674c <__gethex+0x110>
 8006824:	3101      	adds	r1, #1
 8006826:	105b      	asrs	r3, r3, #1
 8006828:	e7b0      	b.n	800678c <__gethex+0x150>
 800682a:	1e73      	subs	r3, r6, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	9a07      	ldr	r2, [sp, #28]
 8006830:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <__gethex+0x22e>
 8006838:	f1bb 0f20 	cmp.w	fp, #32
 800683c:	d107      	bne.n	800684e <__gethex+0x212>
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	f8c3 a000 	str.w	sl, [r3]
 8006844:	f04f 0a00 	mov.w	sl, #0
 8006848:	46d3      	mov	fp, sl
 800684a:	3304      	adds	r3, #4
 800684c:	9304      	str	r3, [sp, #16]
 800684e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006852:	f7ff fede 	bl	8006612 <__hexdig_fun>
 8006856:	f000 000f 	and.w	r0, r0, #15
 800685a:	fa00 f00b 	lsl.w	r0, r0, fp
 800685e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006862:	f10b 0b04 	add.w	fp, fp, #4
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	e00d      	b.n	8006886 <__gethex+0x24a>
 800686a:	9b05      	ldr	r3, [sp, #20]
 800686c:	9a08      	ldr	r2, [sp, #32]
 800686e:	4413      	add	r3, r2
 8006870:	42bb      	cmp	r3, r7
 8006872:	d3e1      	bcc.n	8006838 <__gethex+0x1fc>
 8006874:	4618      	mov	r0, r3
 8006876:	9a01      	ldr	r2, [sp, #4]
 8006878:	9903      	ldr	r1, [sp, #12]
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	f001 f98d 	bl	8007b9a <strncmp>
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	2800      	cmp	r0, #0
 8006884:	d1d8      	bne.n	8006838 <__gethex+0x1fc>
 8006886:	461e      	mov	r6, r3
 8006888:	e791      	b.n	80067ae <__gethex+0x172>
 800688a:	1eb9      	subs	r1, r7, #2
 800688c:	4628      	mov	r0, r5
 800688e:	f000 fdcc 	bl	800742a <__any_on>
 8006892:	2800      	cmp	r0, #0
 8006894:	d0b2      	beq.n	80067fc <__gethex+0x1c0>
 8006896:	f04f 0a03 	mov.w	sl, #3
 800689a:	e7b1      	b.n	8006800 <__gethex+0x1c4>
 800689c:	da09      	bge.n	80068b2 <__gethex+0x276>
 800689e:	1bf7      	subs	r7, r6, r7
 80068a0:	4629      	mov	r1, r5
 80068a2:	463a      	mov	r2, r7
 80068a4:	9802      	ldr	r0, [sp, #8]
 80068a6:	f000 fbe7 	bl	8007078 <__lshift>
 80068aa:	4605      	mov	r5, r0
 80068ac:	1be4      	subs	r4, r4, r7
 80068ae:	f100 0914 	add.w	r9, r0, #20
 80068b2:	f04f 0a00 	mov.w	sl, #0
 80068b6:	e7a8      	b.n	800680a <__gethex+0x1ce>
 80068b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80068bc:	42a0      	cmp	r0, r4
 80068be:	dd6b      	ble.n	8006998 <__gethex+0x35c>
 80068c0:	1b04      	subs	r4, r0, r4
 80068c2:	42a6      	cmp	r6, r4
 80068c4:	dc2e      	bgt.n	8006924 <__gethex+0x2e8>
 80068c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d022      	beq.n	8006914 <__gethex+0x2d8>
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d024      	beq.n	800691c <__gethex+0x2e0>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d115      	bne.n	8006902 <__gethex+0x2c6>
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d113      	bne.n	8006902 <__gethex+0x2c6>
 80068da:	2e01      	cmp	r6, #1
 80068dc:	dc0b      	bgt.n	80068f6 <__gethex+0x2ba>
 80068de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80068e2:	9a06      	ldr	r2, [sp, #24]
 80068e4:	2762      	movs	r7, #98	; 0x62
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	2301      	movs	r3, #1
 80068ea:	612b      	str	r3, [r5, #16]
 80068ec:	f8c9 3000 	str.w	r3, [r9]
 80068f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068f2:	601d      	str	r5, [r3, #0]
 80068f4:	e72a      	b.n	800674c <__gethex+0x110>
 80068f6:	1e71      	subs	r1, r6, #1
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 fd96 	bl	800742a <__any_on>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d1ed      	bne.n	80068de <__gethex+0x2a2>
 8006902:	4629      	mov	r1, r5
 8006904:	9802      	ldr	r0, [sp, #8]
 8006906:	f000 f9ec 	bl	8006ce2 <_Bfree>
 800690a:	2300      	movs	r3, #0
 800690c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800690e:	2750      	movs	r7, #80	; 0x50
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e71b      	b.n	800674c <__gethex+0x110>
 8006914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0e1      	beq.n	80068de <__gethex+0x2a2>
 800691a:	e7f2      	b.n	8006902 <__gethex+0x2c6>
 800691c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1dd      	bne.n	80068de <__gethex+0x2a2>
 8006922:	e7ee      	b.n	8006902 <__gethex+0x2c6>
 8006924:	1e67      	subs	r7, r4, #1
 8006926:	f1ba 0f00 	cmp.w	sl, #0
 800692a:	d132      	bne.n	8006992 <__gethex+0x356>
 800692c:	b127      	cbz	r7, 8006938 <__gethex+0x2fc>
 800692e:	4639      	mov	r1, r7
 8006930:	4628      	mov	r0, r5
 8006932:	f000 fd7a 	bl	800742a <__any_on>
 8006936:	4682      	mov	sl, r0
 8006938:	2301      	movs	r3, #1
 800693a:	117a      	asrs	r2, r7, #5
 800693c:	f007 071f 	and.w	r7, r7, #31
 8006940:	fa03 f707 	lsl.w	r7, r3, r7
 8006944:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006948:	4621      	mov	r1, r4
 800694a:	421f      	tst	r7, r3
 800694c:	f04f 0702 	mov.w	r7, #2
 8006950:	4628      	mov	r0, r5
 8006952:	bf18      	it	ne
 8006954:	f04a 0a02 	orrne.w	sl, sl, #2
 8006958:	1b36      	subs	r6, r6, r4
 800695a:	f7ff fe1f 	bl	800659c <rshift>
 800695e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006962:	f1ba 0f00 	cmp.w	sl, #0
 8006966:	d048      	beq.n	80069fa <__gethex+0x3be>
 8006968:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d015      	beq.n	800699c <__gethex+0x360>
 8006970:	2b03      	cmp	r3, #3
 8006972:	d017      	beq.n	80069a4 <__gethex+0x368>
 8006974:	2b01      	cmp	r3, #1
 8006976:	d109      	bne.n	800698c <__gethex+0x350>
 8006978:	f01a 0f02 	tst.w	sl, #2
 800697c:	d006      	beq.n	800698c <__gethex+0x350>
 800697e:	f8d9 3000 	ldr.w	r3, [r9]
 8006982:	ea4a 0a03 	orr.w	sl, sl, r3
 8006986:	f01a 0f01 	tst.w	sl, #1
 800698a:	d10e      	bne.n	80069aa <__gethex+0x36e>
 800698c:	f047 0710 	orr.w	r7, r7, #16
 8006990:	e033      	b.n	80069fa <__gethex+0x3be>
 8006992:	f04f 0a01 	mov.w	sl, #1
 8006996:	e7cf      	b.n	8006938 <__gethex+0x2fc>
 8006998:	2701      	movs	r7, #1
 800699a:	e7e2      	b.n	8006962 <__gethex+0x326>
 800699c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800699e:	f1c3 0301 	rsb	r3, r3, #1
 80069a2:	9315      	str	r3, [sp, #84]	; 0x54
 80069a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <__gethex+0x350>
 80069aa:	f04f 0c00 	mov.w	ip, #0
 80069ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80069b2:	f105 0314 	add.w	r3, r5, #20
 80069b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80069ba:	eb03 010a 	add.w	r1, r3, sl
 80069be:	4618      	mov	r0, r3
 80069c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80069c8:	d01c      	beq.n	8006a04 <__gethex+0x3c8>
 80069ca:	3201      	adds	r2, #1
 80069cc:	6002      	str	r2, [r0, #0]
 80069ce:	2f02      	cmp	r7, #2
 80069d0:	f105 0314 	add.w	r3, r5, #20
 80069d4:	d138      	bne.n	8006a48 <__gethex+0x40c>
 80069d6:	f8d8 2000 	ldr.w	r2, [r8]
 80069da:	3a01      	subs	r2, #1
 80069dc:	42b2      	cmp	r2, r6
 80069de:	d10a      	bne.n	80069f6 <__gethex+0x3ba>
 80069e0:	2201      	movs	r2, #1
 80069e2:	1171      	asrs	r1, r6, #5
 80069e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069e8:	f006 061f 	and.w	r6, r6, #31
 80069ec:	fa02 f606 	lsl.w	r6, r2, r6
 80069f0:	421e      	tst	r6, r3
 80069f2:	bf18      	it	ne
 80069f4:	4617      	movne	r7, r2
 80069f6:	f047 0720 	orr.w	r7, r7, #32
 80069fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069fc:	601d      	str	r5, [r3, #0]
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	601c      	str	r4, [r3, #0]
 8006a02:	e6a3      	b.n	800674c <__gethex+0x110>
 8006a04:	4299      	cmp	r1, r3
 8006a06:	f843 cc04 	str.w	ip, [r3, #-4]
 8006a0a:	d8d8      	bhi.n	80069be <__gethex+0x382>
 8006a0c:	68ab      	ldr	r3, [r5, #8]
 8006a0e:	4599      	cmp	r9, r3
 8006a10:	db12      	blt.n	8006a38 <__gethex+0x3fc>
 8006a12:	6869      	ldr	r1, [r5, #4]
 8006a14:	9802      	ldr	r0, [sp, #8]
 8006a16:	3101      	adds	r1, #1
 8006a18:	f000 f92f 	bl	8006c7a <_Balloc>
 8006a1c:	4683      	mov	fp, r0
 8006a1e:	692a      	ldr	r2, [r5, #16]
 8006a20:	f105 010c 	add.w	r1, r5, #12
 8006a24:	3202      	adds	r2, #2
 8006a26:	0092      	lsls	r2, r2, #2
 8006a28:	300c      	adds	r0, #12
 8006a2a:	f000 f91b 	bl	8006c64 <memcpy>
 8006a2e:	4629      	mov	r1, r5
 8006a30:	9802      	ldr	r0, [sp, #8]
 8006a32:	f000 f956 	bl	8006ce2 <_Bfree>
 8006a36:	465d      	mov	r5, fp
 8006a38:	692b      	ldr	r3, [r5, #16]
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	612a      	str	r2, [r5, #16]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006a44:	615a      	str	r2, [r3, #20]
 8006a46:	e7c2      	b.n	80069ce <__gethex+0x392>
 8006a48:	692a      	ldr	r2, [r5, #16]
 8006a4a:	454a      	cmp	r2, r9
 8006a4c:	dd0b      	ble.n	8006a66 <__gethex+0x42a>
 8006a4e:	2101      	movs	r1, #1
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7ff fda3 	bl	800659c <rshift>
 8006a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a5a:	3401      	adds	r4, #1
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	f6ff aed8 	blt.w	8006812 <__gethex+0x1d6>
 8006a62:	2701      	movs	r7, #1
 8006a64:	e7c7      	b.n	80069f6 <__gethex+0x3ba>
 8006a66:	f016 061f 	ands.w	r6, r6, #31
 8006a6a:	d0fa      	beq.n	8006a62 <__gethex+0x426>
 8006a6c:	449a      	add	sl, r3
 8006a6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006a72:	f000 f9c6 	bl	8006e02 <__hi0bits>
 8006a76:	f1c6 0620 	rsb	r6, r6, #32
 8006a7a:	42b0      	cmp	r0, r6
 8006a7c:	dbe7      	blt.n	8006a4e <__gethex+0x412>
 8006a7e:	e7f0      	b.n	8006a62 <__gethex+0x426>

08006a80 <L_shift>:
 8006a80:	f1c2 0208 	rsb	r2, r2, #8
 8006a84:	0092      	lsls	r2, r2, #2
 8006a86:	b570      	push	{r4, r5, r6, lr}
 8006a88:	f1c2 0620 	rsb	r6, r2, #32
 8006a8c:	6843      	ldr	r3, [r0, #4]
 8006a8e:	6804      	ldr	r4, [r0, #0]
 8006a90:	fa03 f506 	lsl.w	r5, r3, r6
 8006a94:	432c      	orrs	r4, r5
 8006a96:	40d3      	lsrs	r3, r2
 8006a98:	6004      	str	r4, [r0, #0]
 8006a9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a9e:	4288      	cmp	r0, r1
 8006aa0:	d3f4      	bcc.n	8006a8c <L_shift+0xc>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}

08006aa4 <__match>:
 8006aa4:	b530      	push	{r4, r5, lr}
 8006aa6:	6803      	ldr	r3, [r0, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aae:	b914      	cbnz	r4, 8006ab6 <__match+0x12>
 8006ab0:	6003      	str	r3, [r0, #0]
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	bd30      	pop	{r4, r5, pc}
 8006ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006abe:	2d19      	cmp	r5, #25
 8006ac0:	bf98      	it	ls
 8006ac2:	3220      	addls	r2, #32
 8006ac4:	42a2      	cmp	r2, r4
 8006ac6:	d0f0      	beq.n	8006aaa <__match+0x6>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7f3      	b.n	8006ab4 <__match+0x10>

08006acc <__hexnan>:
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	2500      	movs	r5, #0
 8006ad2:	680b      	ldr	r3, [r1, #0]
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	115f      	asrs	r7, r3, #5
 8006ad8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006adc:	f013 031f 	ands.w	r3, r3, #31
 8006ae0:	bf18      	it	ne
 8006ae2:	3704      	addne	r7, #4
 8006ae4:	1f3e      	subs	r6, r7, #4
 8006ae6:	4690      	mov	r8, r2
 8006ae8:	46b1      	mov	r9, r6
 8006aea:	4634      	mov	r4, r6
 8006aec:	46ab      	mov	fp, r5
 8006aee:	b087      	sub	sp, #28
 8006af0:	6801      	ldr	r1, [r0, #0]
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	f847 5c04 	str.w	r5, [r7, #-4]
 8006af8:	9502      	str	r5, [sp, #8]
 8006afa:	784a      	ldrb	r2, [r1, #1]
 8006afc:	1c4b      	adds	r3, r1, #1
 8006afe:	9303      	str	r3, [sp, #12]
 8006b00:	b342      	cbz	r2, 8006b54 <__hexnan+0x88>
 8006b02:	4610      	mov	r0, r2
 8006b04:	9105      	str	r1, [sp, #20]
 8006b06:	9204      	str	r2, [sp, #16]
 8006b08:	f7ff fd83 	bl	8006612 <__hexdig_fun>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d143      	bne.n	8006b98 <__hexnan+0xcc>
 8006b10:	9a04      	ldr	r2, [sp, #16]
 8006b12:	9905      	ldr	r1, [sp, #20]
 8006b14:	2a20      	cmp	r2, #32
 8006b16:	d818      	bhi.n	8006b4a <__hexnan+0x7e>
 8006b18:	9b02      	ldr	r3, [sp, #8]
 8006b1a:	459b      	cmp	fp, r3
 8006b1c:	dd13      	ble.n	8006b46 <__hexnan+0x7a>
 8006b1e:	454c      	cmp	r4, r9
 8006b20:	d206      	bcs.n	8006b30 <__hexnan+0x64>
 8006b22:	2d07      	cmp	r5, #7
 8006b24:	dc04      	bgt.n	8006b30 <__hexnan+0x64>
 8006b26:	462a      	mov	r2, r5
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f7ff ffa8 	bl	8006a80 <L_shift>
 8006b30:	4544      	cmp	r4, r8
 8006b32:	d944      	bls.n	8006bbe <__hexnan+0xf2>
 8006b34:	2300      	movs	r3, #0
 8006b36:	f1a4 0904 	sub.w	r9, r4, #4
 8006b3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b3e:	461d      	mov	r5, r3
 8006b40:	464c      	mov	r4, r9
 8006b42:	f8cd b008 	str.w	fp, [sp, #8]
 8006b46:	9903      	ldr	r1, [sp, #12]
 8006b48:	e7d7      	b.n	8006afa <__hexnan+0x2e>
 8006b4a:	2a29      	cmp	r2, #41	; 0x29
 8006b4c:	d14a      	bne.n	8006be4 <__hexnan+0x118>
 8006b4e:	3102      	adds	r1, #2
 8006b50:	f8ca 1000 	str.w	r1, [sl]
 8006b54:	f1bb 0f00 	cmp.w	fp, #0
 8006b58:	d044      	beq.n	8006be4 <__hexnan+0x118>
 8006b5a:	454c      	cmp	r4, r9
 8006b5c:	d206      	bcs.n	8006b6c <__hexnan+0xa0>
 8006b5e:	2d07      	cmp	r5, #7
 8006b60:	dc04      	bgt.n	8006b6c <__hexnan+0xa0>
 8006b62:	462a      	mov	r2, r5
 8006b64:	4649      	mov	r1, r9
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7ff ff8a 	bl	8006a80 <L_shift>
 8006b6c:	4544      	cmp	r4, r8
 8006b6e:	d928      	bls.n	8006bc2 <__hexnan+0xf6>
 8006b70:	4643      	mov	r3, r8
 8006b72:	f854 2b04 	ldr.w	r2, [r4], #4
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	f843 2b04 	str.w	r2, [r3], #4
 8006b7c:	d2f9      	bcs.n	8006b72 <__hexnan+0xa6>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f843 2b04 	str.w	r2, [r3], #4
 8006b84:	429e      	cmp	r6, r3
 8006b86:	d2fb      	bcs.n	8006b80 <__hexnan+0xb4>
 8006b88:	6833      	ldr	r3, [r6, #0]
 8006b8a:	b91b      	cbnz	r3, 8006b94 <__hexnan+0xc8>
 8006b8c:	4546      	cmp	r6, r8
 8006b8e:	d127      	bne.n	8006be0 <__hexnan+0x114>
 8006b90:	2301      	movs	r3, #1
 8006b92:	6033      	str	r3, [r6, #0]
 8006b94:	2005      	movs	r0, #5
 8006b96:	e026      	b.n	8006be6 <__hexnan+0x11a>
 8006b98:	3501      	adds	r5, #1
 8006b9a:	2d08      	cmp	r5, #8
 8006b9c:	f10b 0b01 	add.w	fp, fp, #1
 8006ba0:	dd06      	ble.n	8006bb0 <__hexnan+0xe4>
 8006ba2:	4544      	cmp	r4, r8
 8006ba4:	d9cf      	bls.n	8006b46 <__hexnan+0x7a>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2501      	movs	r5, #1
 8006baa:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bae:	3c04      	subs	r4, #4
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	f000 000f 	and.w	r0, r0, #15
 8006bb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006bba:	6020      	str	r0, [r4, #0]
 8006bbc:	e7c3      	b.n	8006b46 <__hexnan+0x7a>
 8006bbe:	2508      	movs	r5, #8
 8006bc0:	e7c1      	b.n	8006b46 <__hexnan+0x7a>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0df      	beq.n	8006b88 <__hexnan+0xbc>
 8006bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bcc:	f1c3 0320 	rsb	r3, r3, #32
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006bd8:	401a      	ands	r2, r3
 8006bda:	f847 2c04 	str.w	r2, [r7, #-4]
 8006bde:	e7d3      	b.n	8006b88 <__hexnan+0xbc>
 8006be0:	3e04      	subs	r6, #4
 8006be2:	e7d1      	b.n	8006b88 <__hexnan+0xbc>
 8006be4:	2004      	movs	r0, #4
 8006be6:	b007      	add	sp, #28
 8006be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bec <__locale_ctype_ptr_l>:
 8006bec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006bf0:	4770      	bx	lr

08006bf2 <__localeconv_l>:
 8006bf2:	30f0      	adds	r0, #240	; 0xf0
 8006bf4:	4770      	bx	lr
	...

08006bf8 <_localeconv_r>:
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <_localeconv_r+0x14>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a18      	ldr	r0, [r3, #32]
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <_localeconv_r+0x18>)
 8006c00:	2800      	cmp	r0, #0
 8006c02:	bf08      	it	eq
 8006c04:	4618      	moveq	r0, r3
 8006c06:	30f0      	adds	r0, #240	; 0xf0
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	20000070 	.word	0x20000070

08006c14 <malloc>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <malloc+0xc>)
 8006c16:	4601      	mov	r1, r0
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f000 bc81 	b.w	8007520 <_malloc_r>
 8006c1e:	bf00      	nop
 8006c20:	2000000c 	.word	0x2000000c

08006c24 <__ascii_mbtowc>:
 8006c24:	b082      	sub	sp, #8
 8006c26:	b901      	cbnz	r1, 8006c2a <__ascii_mbtowc+0x6>
 8006c28:	a901      	add	r1, sp, #4
 8006c2a:	b142      	cbz	r2, 8006c3e <__ascii_mbtowc+0x1a>
 8006c2c:	b14b      	cbz	r3, 8006c42 <__ascii_mbtowc+0x1e>
 8006c2e:	7813      	ldrb	r3, [r2, #0]
 8006c30:	600b      	str	r3, [r1, #0]
 8006c32:	7812      	ldrb	r2, [r2, #0]
 8006c34:	1c10      	adds	r0, r2, #0
 8006c36:	bf18      	it	ne
 8006c38:	2001      	movne	r0, #1
 8006c3a:	b002      	add	sp, #8
 8006c3c:	4770      	bx	lr
 8006c3e:	4610      	mov	r0, r2
 8006c40:	e7fb      	b.n	8006c3a <__ascii_mbtowc+0x16>
 8006c42:	f06f 0001 	mvn.w	r0, #1
 8006c46:	e7f8      	b.n	8006c3a <__ascii_mbtowc+0x16>

08006c48 <memchr>:
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	b2c9      	uxtb	r1, r1
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4290      	cmp	r0, r2
 8006c50:	4603      	mov	r3, r0
 8006c52:	d101      	bne.n	8006c58 <memchr+0x10>
 8006c54:	2300      	movs	r3, #0
 8006c56:	e003      	b.n	8006c60 <memchr+0x18>
 8006c58:	781c      	ldrb	r4, [r3, #0]
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	428c      	cmp	r4, r1
 8006c5e:	d1f6      	bne.n	8006c4e <memchr+0x6>
 8006c60:	4618      	mov	r0, r3
 8006c62:	bd10      	pop	{r4, pc}

08006c64 <memcpy>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	1e43      	subs	r3, r0, #1
 8006c68:	440a      	add	r2, r1
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	d100      	bne.n	8006c70 <memcpy+0xc>
 8006c6e:	bd10      	pop	{r4, pc}
 8006c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c78:	e7f7      	b.n	8006c6a <memcpy+0x6>

08006c7a <_Balloc>:
 8006c7a:	b570      	push	{r4, r5, r6, lr}
 8006c7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c7e:	4604      	mov	r4, r0
 8006c80:	460e      	mov	r6, r1
 8006c82:	b93d      	cbnz	r5, 8006c94 <_Balloc+0x1a>
 8006c84:	2010      	movs	r0, #16
 8006c86:	f7ff ffc5 	bl	8006c14 <malloc>
 8006c8a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c90:	6005      	str	r5, [r0, #0]
 8006c92:	60c5      	str	r5, [r0, #12]
 8006c94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c96:	68eb      	ldr	r3, [r5, #12]
 8006c98:	b183      	cbz	r3, 8006cbc <_Balloc+0x42>
 8006c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006ca2:	b9b8      	cbnz	r0, 8006cd4 <_Balloc+0x5a>
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f506 	lsl.w	r5, r1, r6
 8006caa:	1d6a      	adds	r2, r5, #5
 8006cac:	0092      	lsls	r2, r2, #2
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fbdc 	bl	800746c <_calloc_r>
 8006cb4:	b160      	cbz	r0, 8006cd0 <_Balloc+0x56>
 8006cb6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cba:	e00e      	b.n	8006cda <_Balloc+0x60>
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fbd3 	bl	800746c <_calloc_r>
 8006cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc8:	60e8      	str	r0, [r5, #12]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e4      	bne.n	8006c9a <_Balloc+0x20>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	6802      	ldr	r2, [r0, #0]
 8006cd6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ce0:	e7f7      	b.n	8006cd2 <_Balloc+0x58>

08006ce2 <_Bfree>:
 8006ce2:	b570      	push	{r4, r5, r6, lr}
 8006ce4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460d      	mov	r5, r1
 8006cea:	b93c      	cbnz	r4, 8006cfc <_Bfree+0x1a>
 8006cec:	2010      	movs	r0, #16
 8006cee:	f7ff ff91 	bl	8006c14 <malloc>
 8006cf2:	6270      	str	r0, [r6, #36]	; 0x24
 8006cf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cf8:	6004      	str	r4, [r0, #0]
 8006cfa:	60c4      	str	r4, [r0, #12]
 8006cfc:	b13d      	cbz	r5, 8006d0e <_Bfree+0x2c>
 8006cfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d00:	686a      	ldr	r2, [r5, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d08:	6029      	str	r1, [r5, #0]
 8006d0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}

08006d10 <__multadd>:
 8006d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d14:	461f      	mov	r7, r3
 8006d16:	4606      	mov	r6, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	690d      	ldr	r5, [r1, #16]
 8006d1e:	f101 0c14 	add.w	ip, r1, #20
 8006d22:	f8dc 0000 	ldr.w	r0, [ip]
 8006d26:	3301      	adds	r3, #1
 8006d28:	b281      	uxth	r1, r0
 8006d2a:	fb02 7101 	mla	r1, r2, r1, r7
 8006d2e:	0c00      	lsrs	r0, r0, #16
 8006d30:	0c0f      	lsrs	r7, r1, #16
 8006d32:	fb02 7000 	mla	r0, r2, r0, r7
 8006d36:	b289      	uxth	r1, r1
 8006d38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d42:	f84c 1b04 	str.w	r1, [ip], #4
 8006d46:	dcec      	bgt.n	8006d22 <__multadd+0x12>
 8006d48:	b1d7      	cbz	r7, 8006d80 <__multadd+0x70>
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	dc12      	bgt.n	8006d76 <__multadd+0x66>
 8006d50:	6861      	ldr	r1, [r4, #4]
 8006d52:	4630      	mov	r0, r6
 8006d54:	3101      	adds	r1, #1
 8006d56:	f7ff ff90 	bl	8006c7a <_Balloc>
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	6922      	ldr	r2, [r4, #16]
 8006d5e:	f104 010c 	add.w	r1, r4, #12
 8006d62:	3202      	adds	r2, #2
 8006d64:	0092      	lsls	r2, r2, #2
 8006d66:	300c      	adds	r0, #12
 8006d68:	f7ff ff7c 	bl	8006c64 <memcpy>
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7ff ffb7 	bl	8006ce2 <_Bfree>
 8006d74:	4644      	mov	r4, r8
 8006d76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	615f      	str	r7, [r3, #20]
 8006d7e:	6125      	str	r5, [r4, #16]
 8006d80:	4620      	mov	r0, r4
 8006d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d86 <__s2b>:
 8006d86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d8a:	4615      	mov	r5, r2
 8006d8c:	2209      	movs	r2, #9
 8006d8e:	461f      	mov	r7, r3
 8006d90:	3308      	adds	r3, #8
 8006d92:	460c      	mov	r4, r1
 8006d94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d98:	4606      	mov	r6, r0
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	db20      	blt.n	8006de4 <__s2b+0x5e>
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7ff ff69 	bl	8006c7a <_Balloc>
 8006da8:	9b08      	ldr	r3, [sp, #32]
 8006daa:	2d09      	cmp	r5, #9
 8006dac:	6143      	str	r3, [r0, #20]
 8006dae:	f04f 0301 	mov.w	r3, #1
 8006db2:	6103      	str	r3, [r0, #16]
 8006db4:	dd19      	ble.n	8006dea <__s2b+0x64>
 8006db6:	f104 0809 	add.w	r8, r4, #9
 8006dba:	46c1      	mov	r9, r8
 8006dbc:	442c      	add	r4, r5
 8006dbe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	3b30      	subs	r3, #48	; 0x30
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f7ff ffa1 	bl	8006d10 <__multadd>
 8006dce:	45a1      	cmp	r9, r4
 8006dd0:	d1f5      	bne.n	8006dbe <__s2b+0x38>
 8006dd2:	eb08 0405 	add.w	r4, r8, r5
 8006dd6:	3c08      	subs	r4, #8
 8006dd8:	1b2d      	subs	r5, r5, r4
 8006dda:	1963      	adds	r3, r4, r5
 8006ddc:	42bb      	cmp	r3, r7
 8006dde:	db07      	blt.n	8006df0 <__s2b+0x6a>
 8006de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de4:	0052      	lsls	r2, r2, #1
 8006de6:	3101      	adds	r1, #1
 8006de8:	e7d9      	b.n	8006d9e <__s2b+0x18>
 8006dea:	340a      	adds	r4, #10
 8006dec:	2509      	movs	r5, #9
 8006dee:	e7f3      	b.n	8006dd8 <__s2b+0x52>
 8006df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006df4:	4601      	mov	r1, r0
 8006df6:	3b30      	subs	r3, #48	; 0x30
 8006df8:	220a      	movs	r2, #10
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7ff ff88 	bl	8006d10 <__multadd>
 8006e00:	e7eb      	b.n	8006dda <__s2b+0x54>

08006e02 <__hi0bits>:
 8006e02:	0c02      	lsrs	r2, r0, #16
 8006e04:	0412      	lsls	r2, r2, #16
 8006e06:	4603      	mov	r3, r0
 8006e08:	b9b2      	cbnz	r2, 8006e38 <__hi0bits+0x36>
 8006e0a:	0403      	lsls	r3, r0, #16
 8006e0c:	2010      	movs	r0, #16
 8006e0e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e12:	bf04      	itt	eq
 8006e14:	021b      	lsleq	r3, r3, #8
 8006e16:	3008      	addeq	r0, #8
 8006e18:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e1c:	bf04      	itt	eq
 8006e1e:	011b      	lsleq	r3, r3, #4
 8006e20:	3004      	addeq	r0, #4
 8006e22:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e26:	bf04      	itt	eq
 8006e28:	009b      	lsleq	r3, r3, #2
 8006e2a:	3002      	addeq	r0, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db06      	blt.n	8006e3e <__hi0bits+0x3c>
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	d503      	bpl.n	8006e3c <__hi0bits+0x3a>
 8006e34:	3001      	adds	r0, #1
 8006e36:	4770      	bx	lr
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e7e8      	b.n	8006e0e <__hi0bits+0xc>
 8006e3c:	2020      	movs	r0, #32
 8006e3e:	4770      	bx	lr

08006e40 <__lo0bits>:
 8006e40:	6803      	ldr	r3, [r0, #0]
 8006e42:	4601      	mov	r1, r0
 8006e44:	f013 0207 	ands.w	r2, r3, #7
 8006e48:	d00b      	beq.n	8006e62 <__lo0bits+0x22>
 8006e4a:	07da      	lsls	r2, r3, #31
 8006e4c:	d423      	bmi.n	8006e96 <__lo0bits+0x56>
 8006e4e:	0798      	lsls	r0, r3, #30
 8006e50:	bf49      	itett	mi
 8006e52:	085b      	lsrmi	r3, r3, #1
 8006e54:	089b      	lsrpl	r3, r3, #2
 8006e56:	2001      	movmi	r0, #1
 8006e58:	600b      	strmi	r3, [r1, #0]
 8006e5a:	bf5c      	itt	pl
 8006e5c:	600b      	strpl	r3, [r1, #0]
 8006e5e:	2002      	movpl	r0, #2
 8006e60:	4770      	bx	lr
 8006e62:	b298      	uxth	r0, r3
 8006e64:	b9a8      	cbnz	r0, 8006e92 <__lo0bits+0x52>
 8006e66:	2010      	movs	r0, #16
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e6e:	bf04      	itt	eq
 8006e70:	0a1b      	lsreq	r3, r3, #8
 8006e72:	3008      	addeq	r0, #8
 8006e74:	071a      	lsls	r2, r3, #28
 8006e76:	bf04      	itt	eq
 8006e78:	091b      	lsreq	r3, r3, #4
 8006e7a:	3004      	addeq	r0, #4
 8006e7c:	079a      	lsls	r2, r3, #30
 8006e7e:	bf04      	itt	eq
 8006e80:	089b      	lsreq	r3, r3, #2
 8006e82:	3002      	addeq	r0, #2
 8006e84:	07da      	lsls	r2, r3, #31
 8006e86:	d402      	bmi.n	8006e8e <__lo0bits+0x4e>
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	d006      	beq.n	8006e9a <__lo0bits+0x5a>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	600b      	str	r3, [r1, #0]
 8006e90:	4770      	bx	lr
 8006e92:	4610      	mov	r0, r2
 8006e94:	e7e9      	b.n	8006e6a <__lo0bits+0x2a>
 8006e96:	2000      	movs	r0, #0
 8006e98:	4770      	bx	lr
 8006e9a:	2020      	movs	r0, #32
 8006e9c:	4770      	bx	lr

08006e9e <__i2b>:
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	f7ff fee9 	bl	8006c7a <_Balloc>
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	6144      	str	r4, [r0, #20]
 8006eac:	6102      	str	r2, [r0, #16]
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <__multiply>:
 8006eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	690a      	ldr	r2, [r1, #16]
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	4688      	mov	r8, r1
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bfbe      	ittt	lt
 8006ec0:	460b      	movlt	r3, r1
 8006ec2:	46a0      	movlt	r8, r4
 8006ec4:	461c      	movlt	r4, r3
 8006ec6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006eca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ed2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ed6:	eb07 0609 	add.w	r6, r7, r9
 8006eda:	42b3      	cmp	r3, r6
 8006edc:	bfb8      	it	lt
 8006ede:	3101      	addlt	r1, #1
 8006ee0:	f7ff fecb 	bl	8006c7a <_Balloc>
 8006ee4:	f100 0514 	add.w	r5, r0, #20
 8006ee8:	462b      	mov	r3, r5
 8006eea:	2200      	movs	r2, #0
 8006eec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ef0:	4573      	cmp	r3, lr
 8006ef2:	d316      	bcc.n	8006f22 <__multiply+0x72>
 8006ef4:	f104 0214 	add.w	r2, r4, #20
 8006ef8:	f108 0114 	add.w	r1, r8, #20
 8006efc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	9b00      	ldr	r3, [sp, #0]
 8006f08:	9201      	str	r2, [sp, #4]
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d80c      	bhi.n	8006f28 <__multiply+0x78>
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	dd03      	ble.n	8006f1a <__multiply+0x6a>
 8006f12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d05d      	beq.n	8006fd6 <__multiply+0x126>
 8006f1a:	6106      	str	r6, [r0, #16]
 8006f1c:	b003      	add	sp, #12
 8006f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f22:	f843 2b04 	str.w	r2, [r3], #4
 8006f26:	e7e3      	b.n	8006ef0 <__multiply+0x40>
 8006f28:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f2c:	f1bb 0f00 	cmp.w	fp, #0
 8006f30:	d023      	beq.n	8006f7a <__multiply+0xca>
 8006f32:	4689      	mov	r9, r1
 8006f34:	46ac      	mov	ip, r5
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f3e:	f8dc a000 	ldr.w	sl, [ip]
 8006f42:	b2a3      	uxth	r3, r4
 8006f44:	fa1f fa8a 	uxth.w	sl, sl
 8006f48:	fb0b a303 	mla	r3, fp, r3, sl
 8006f4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f50:	f8dc 4000 	ldr.w	r4, [ip]
 8006f54:	4443      	add	r3, r8
 8006f56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f5e:	46e2      	mov	sl, ip
 8006f60:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f6a:	454f      	cmp	r7, r9
 8006f6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f70:	f84a 3b04 	str.w	r3, [sl], #4
 8006f74:	d82b      	bhi.n	8006fce <__multiply+0x11e>
 8006f76:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	3204      	adds	r2, #4
 8006f7e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f82:	f1ba 0f00 	cmp.w	sl, #0
 8006f86:	d020      	beq.n	8006fca <__multiply+0x11a>
 8006f88:	4689      	mov	r9, r1
 8006f8a:	46a8      	mov	r8, r5
 8006f8c:	f04f 0b00 	mov.w	fp, #0
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f96:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006fa0:	46c4      	mov	ip, r8
 8006fa2:	445c      	add	r4, fp
 8006fa4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006fa8:	f84c 3b04 	str.w	r3, [ip], #4
 8006fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fb0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	fb0a b303 	mla	r3, sl, r3, fp
 8006fba:	454f      	cmp	r7, r9
 8006fbc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006fc0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006fc4:	d805      	bhi.n	8006fd2 <__multiply+0x122>
 8006fc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8006fca:	3504      	adds	r5, #4
 8006fcc:	e79b      	b.n	8006f06 <__multiply+0x56>
 8006fce:	46d4      	mov	ip, sl
 8006fd0:	e7b3      	b.n	8006f3a <__multiply+0x8a>
 8006fd2:	46e0      	mov	r8, ip
 8006fd4:	e7dd      	b.n	8006f92 <__multiply+0xe2>
 8006fd6:	3e01      	subs	r6, #1
 8006fd8:	e799      	b.n	8006f0e <__multiply+0x5e>
	...

08006fdc <__pow5mult>:
 8006fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe0:	4615      	mov	r5, r2
 8006fe2:	f012 0203 	ands.w	r2, r2, #3
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460f      	mov	r7, r1
 8006fea:	d007      	beq.n	8006ffc <__pow5mult+0x20>
 8006fec:	4c21      	ldr	r4, [pc, #132]	; (8007074 <__pow5mult+0x98>)
 8006fee:	3a01      	subs	r2, #1
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ff6:	f7ff fe8b 	bl	8006d10 <__multadd>
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	10ad      	asrs	r5, r5, #2
 8006ffe:	d035      	beq.n	800706c <__pow5mult+0x90>
 8007000:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007002:	b93c      	cbnz	r4, 8007014 <__pow5mult+0x38>
 8007004:	2010      	movs	r0, #16
 8007006:	f7ff fe05 	bl	8006c14 <malloc>
 800700a:	6270      	str	r0, [r6, #36]	; 0x24
 800700c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007010:	6004      	str	r4, [r0, #0]
 8007012:	60c4      	str	r4, [r0, #12]
 8007014:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800701c:	b94c      	cbnz	r4, 8007032 <__pow5mult+0x56>
 800701e:	f240 2171 	movw	r1, #625	; 0x271
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff ff3b 	bl	8006e9e <__i2b>
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	f04f 0800 	mov.w	r8, #0
 8007036:	07eb      	lsls	r3, r5, #31
 8007038:	d50a      	bpl.n	8007050 <__pow5mult+0x74>
 800703a:	4639      	mov	r1, r7
 800703c:	4622      	mov	r2, r4
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff ff36 	bl	8006eb0 <__multiply>
 8007044:	4681      	mov	r9, r0
 8007046:	4639      	mov	r1, r7
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff fe4a 	bl	8006ce2 <_Bfree>
 800704e:	464f      	mov	r7, r9
 8007050:	106d      	asrs	r5, r5, #1
 8007052:	d00b      	beq.n	800706c <__pow5mult+0x90>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	b938      	cbnz	r0, 8007068 <__pow5mult+0x8c>
 8007058:	4622      	mov	r2, r4
 800705a:	4621      	mov	r1, r4
 800705c:	4630      	mov	r0, r6
 800705e:	f7ff ff27 	bl	8006eb0 <__multiply>
 8007062:	6020      	str	r0, [r4, #0]
 8007064:	f8c0 8000 	str.w	r8, [r0]
 8007068:	4604      	mov	r4, r0
 800706a:	e7e4      	b.n	8007036 <__pow5mult+0x5a>
 800706c:	4638      	mov	r0, r7
 800706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007072:	bf00      	nop
 8007074:	08008360 	.word	0x08008360

08007078 <__lshift>:
 8007078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	4607      	mov	r7, r0
 8007080:	4616      	mov	r6, r2
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007088:	eb0a 0903 	add.w	r9, sl, r3
 800708c:	6849      	ldr	r1, [r1, #4]
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	f109 0501 	add.w	r5, r9, #1
 8007094:	42ab      	cmp	r3, r5
 8007096:	db32      	blt.n	80070fe <__lshift+0x86>
 8007098:	4638      	mov	r0, r7
 800709a:	f7ff fdee 	bl	8006c7a <_Balloc>
 800709e:	2300      	movs	r3, #0
 80070a0:	4680      	mov	r8, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	f100 0114 	add.w	r1, r0, #20
 80070a8:	4553      	cmp	r3, sl
 80070aa:	db2b      	blt.n	8007104 <__lshift+0x8c>
 80070ac:	6920      	ldr	r0, [r4, #16]
 80070ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b2:	f104 0314 	add.w	r3, r4, #20
 80070b6:	f016 021f 	ands.w	r2, r6, #31
 80070ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070c2:	d025      	beq.n	8007110 <__lshift+0x98>
 80070c4:	2000      	movs	r0, #0
 80070c6:	f1c2 0e20 	rsb	lr, r2, #32
 80070ca:	468a      	mov	sl, r1
 80070cc:	681e      	ldr	r6, [r3, #0]
 80070ce:	4096      	lsls	r6, r2
 80070d0:	4330      	orrs	r0, r6
 80070d2:	f84a 0b04 	str.w	r0, [sl], #4
 80070d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80070da:	459c      	cmp	ip, r3
 80070dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80070e0:	d814      	bhi.n	800710c <__lshift+0x94>
 80070e2:	6048      	str	r0, [r1, #4]
 80070e4:	b108      	cbz	r0, 80070ea <__lshift+0x72>
 80070e6:	f109 0502 	add.w	r5, r9, #2
 80070ea:	3d01      	subs	r5, #1
 80070ec:	4638      	mov	r0, r7
 80070ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80070f2:	4621      	mov	r1, r4
 80070f4:	f7ff fdf5 	bl	8006ce2 <_Bfree>
 80070f8:	4640      	mov	r0, r8
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	3101      	adds	r1, #1
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	e7c7      	b.n	8007094 <__lshift+0x1c>
 8007104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007108:	3301      	adds	r3, #1
 800710a:	e7cd      	b.n	80070a8 <__lshift+0x30>
 800710c:	4651      	mov	r1, sl
 800710e:	e7dc      	b.n	80070ca <__lshift+0x52>
 8007110:	3904      	subs	r1, #4
 8007112:	f853 2b04 	ldr.w	r2, [r3], #4
 8007116:	459c      	cmp	ip, r3
 8007118:	f841 2f04 	str.w	r2, [r1, #4]!
 800711c:	d8f9      	bhi.n	8007112 <__lshift+0x9a>
 800711e:	e7e4      	b.n	80070ea <__lshift+0x72>

08007120 <__mcmp>:
 8007120:	6903      	ldr	r3, [r0, #16]
 8007122:	690a      	ldr	r2, [r1, #16]
 8007124:	b530      	push	{r4, r5, lr}
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	d10c      	bne.n	8007144 <__mcmp+0x24>
 800712a:	0092      	lsls	r2, r2, #2
 800712c:	3014      	adds	r0, #20
 800712e:	3114      	adds	r1, #20
 8007130:	1884      	adds	r4, r0, r2
 8007132:	4411      	add	r1, r2
 8007134:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007138:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800713c:	4295      	cmp	r5, r2
 800713e:	d003      	beq.n	8007148 <__mcmp+0x28>
 8007140:	d305      	bcc.n	800714e <__mcmp+0x2e>
 8007142:	2301      	movs	r3, #1
 8007144:	4618      	mov	r0, r3
 8007146:	bd30      	pop	{r4, r5, pc}
 8007148:	42a0      	cmp	r0, r4
 800714a:	d3f3      	bcc.n	8007134 <__mcmp+0x14>
 800714c:	e7fa      	b.n	8007144 <__mcmp+0x24>
 800714e:	f04f 33ff 	mov.w	r3, #4294967295
 8007152:	e7f7      	b.n	8007144 <__mcmp+0x24>

08007154 <__mdiff>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	460d      	mov	r5, r1
 800715a:	4607      	mov	r7, r0
 800715c:	4611      	mov	r1, r2
 800715e:	4628      	mov	r0, r5
 8007160:	4614      	mov	r4, r2
 8007162:	f7ff ffdd 	bl	8007120 <__mcmp>
 8007166:	1e06      	subs	r6, r0, #0
 8007168:	d108      	bne.n	800717c <__mdiff+0x28>
 800716a:	4631      	mov	r1, r6
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff fd84 	bl	8006c7a <_Balloc>
 8007172:	2301      	movs	r3, #1
 8007174:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717c:	bfa4      	itt	ge
 800717e:	4623      	movge	r3, r4
 8007180:	462c      	movge	r4, r5
 8007182:	4638      	mov	r0, r7
 8007184:	6861      	ldr	r1, [r4, #4]
 8007186:	bfa6      	itte	ge
 8007188:	461d      	movge	r5, r3
 800718a:	2600      	movge	r6, #0
 800718c:	2601      	movlt	r6, #1
 800718e:	f7ff fd74 	bl	8006c7a <_Balloc>
 8007192:	f04f 0e00 	mov.w	lr, #0
 8007196:	60c6      	str	r6, [r0, #12]
 8007198:	692b      	ldr	r3, [r5, #16]
 800719a:	6926      	ldr	r6, [r4, #16]
 800719c:	f104 0214 	add.w	r2, r4, #20
 80071a0:	f105 0914 	add.w	r9, r5, #20
 80071a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80071a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80071ac:	f100 0114 	add.w	r1, r0, #20
 80071b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80071b4:	f859 5b04 	ldr.w	r5, [r9], #4
 80071b8:	fa1f f38a 	uxth.w	r3, sl
 80071bc:	4473      	add	r3, lr
 80071be:	b2ac      	uxth	r4, r5
 80071c0:	1b1b      	subs	r3, r3, r4
 80071c2:	0c2c      	lsrs	r4, r5, #16
 80071c4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80071c8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80071d2:	45c8      	cmp	r8, r9
 80071d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80071d8:	4694      	mov	ip, r2
 80071da:	f841 4b04 	str.w	r4, [r1], #4
 80071de:	d8e7      	bhi.n	80071b0 <__mdiff+0x5c>
 80071e0:	45bc      	cmp	ip, r7
 80071e2:	d304      	bcc.n	80071ee <__mdiff+0x9a>
 80071e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80071e8:	b183      	cbz	r3, 800720c <__mdiff+0xb8>
 80071ea:	6106      	str	r6, [r0, #16]
 80071ec:	e7c4      	b.n	8007178 <__mdiff+0x24>
 80071ee:	f85c 4b04 	ldr.w	r4, [ip], #4
 80071f2:	b2a2      	uxth	r2, r4
 80071f4:	4472      	add	r2, lr
 80071f6:	1413      	asrs	r3, r2, #16
 80071f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80071fc:	b292      	uxth	r2, r2
 80071fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007202:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007206:	f841 2b04 	str.w	r2, [r1], #4
 800720a:	e7e9      	b.n	80071e0 <__mdiff+0x8c>
 800720c:	3e01      	subs	r6, #1
 800720e:	e7e9      	b.n	80071e4 <__mdiff+0x90>

08007210 <__ulp>:
 8007210:	4b10      	ldr	r3, [pc, #64]	; (8007254 <__ulp+0x44>)
 8007212:	400b      	ands	r3, r1
 8007214:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007218:	2b00      	cmp	r3, #0
 800721a:	dd02      	ble.n	8007222 <__ulp+0x12>
 800721c:	2000      	movs	r0, #0
 800721e:	4619      	mov	r1, r3
 8007220:	4770      	bx	lr
 8007222:	425b      	negs	r3, r3
 8007224:	151b      	asrs	r3, r3, #20
 8007226:	2b13      	cmp	r3, #19
 8007228:	f04f 0000 	mov.w	r0, #0
 800722c:	f04f 0100 	mov.w	r1, #0
 8007230:	dc04      	bgt.n	800723c <__ulp+0x2c>
 8007232:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007236:	fa42 f103 	asr.w	r1, r2, r3
 800723a:	4770      	bx	lr
 800723c:	2201      	movs	r2, #1
 800723e:	3b14      	subs	r3, #20
 8007240:	2b1e      	cmp	r3, #30
 8007242:	bfce      	itee	gt
 8007244:	4613      	movgt	r3, r2
 8007246:	f1c3 031f 	rsble	r3, r3, #31
 800724a:	fa02 f303 	lslle.w	r3, r2, r3
 800724e:	4618      	mov	r0, r3
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	7ff00000 	.word	0x7ff00000

08007258 <__b2d>:
 8007258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800725c:	6907      	ldr	r7, [r0, #16]
 800725e:	f100 0914 	add.w	r9, r0, #20
 8007262:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007266:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800726a:	f1a7 0804 	sub.w	r8, r7, #4
 800726e:	4630      	mov	r0, r6
 8007270:	f7ff fdc7 	bl	8006e02 <__hi0bits>
 8007274:	f1c0 0320 	rsb	r3, r0, #32
 8007278:	280a      	cmp	r0, #10
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	491e      	ldr	r1, [pc, #120]	; (80072f8 <__b2d+0xa0>)
 800727e:	dc17      	bgt.n	80072b0 <__b2d+0x58>
 8007280:	45c1      	cmp	r9, r8
 8007282:	bf28      	it	cs
 8007284:	2200      	movcs	r2, #0
 8007286:	f1c0 0c0b 	rsb	ip, r0, #11
 800728a:	fa26 f30c 	lsr.w	r3, r6, ip
 800728e:	bf38      	it	cc
 8007290:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007294:	ea43 0501 	orr.w	r5, r3, r1
 8007298:	f100 0315 	add.w	r3, r0, #21
 800729c:	fa06 f303 	lsl.w	r3, r6, r3
 80072a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80072a4:	ea43 0402 	orr.w	r4, r3, r2
 80072a8:	4620      	mov	r0, r4
 80072aa:	4629      	mov	r1, r5
 80072ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b0:	45c1      	cmp	r9, r8
 80072b2:	bf3a      	itte	cc
 80072b4:	f1a7 0808 	subcc.w	r8, r7, #8
 80072b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80072bc:	2200      	movcs	r2, #0
 80072be:	f1b0 030b 	subs.w	r3, r0, #11
 80072c2:	d015      	beq.n	80072f0 <__b2d+0x98>
 80072c4:	409e      	lsls	r6, r3
 80072c6:	f1c3 0720 	rsb	r7, r3, #32
 80072ca:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80072ce:	fa22 f107 	lsr.w	r1, r2, r7
 80072d2:	45c8      	cmp	r8, r9
 80072d4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80072d8:	ea46 0501 	orr.w	r5, r6, r1
 80072dc:	bf94      	ite	ls
 80072de:	2100      	movls	r1, #0
 80072e0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80072e4:	fa02 f003 	lsl.w	r0, r2, r3
 80072e8:	40f9      	lsrs	r1, r7
 80072ea:	ea40 0401 	orr.w	r4, r0, r1
 80072ee:	e7db      	b.n	80072a8 <__b2d+0x50>
 80072f0:	ea46 0501 	orr.w	r5, r6, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	e7d7      	b.n	80072a8 <__b2d+0x50>
 80072f8:	3ff00000 	.word	0x3ff00000

080072fc <__d2b>:
 80072fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007300:	461c      	mov	r4, r3
 8007302:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007306:	2101      	movs	r1, #1
 8007308:	4690      	mov	r8, r2
 800730a:	f7ff fcb6 	bl	8006c7a <_Balloc>
 800730e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007312:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007316:	4607      	mov	r7, r0
 8007318:	bb34      	cbnz	r4, 8007368 <__d2b+0x6c>
 800731a:	9201      	str	r2, [sp, #4]
 800731c:	f1b8 0200 	subs.w	r2, r8, #0
 8007320:	d027      	beq.n	8007372 <__d2b+0x76>
 8007322:	a802      	add	r0, sp, #8
 8007324:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007328:	f7ff fd8a 	bl	8006e40 <__lo0bits>
 800732c:	9900      	ldr	r1, [sp, #0]
 800732e:	b1f0      	cbz	r0, 800736e <__d2b+0x72>
 8007330:	9a01      	ldr	r2, [sp, #4]
 8007332:	f1c0 0320 	rsb	r3, r0, #32
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	430b      	orrs	r3, r1
 800733c:	40c2      	lsrs	r2, r0
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	9201      	str	r2, [sp, #4]
 8007342:	9b01      	ldr	r3, [sp, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf14      	ite	ne
 8007348:	2102      	movne	r1, #2
 800734a:	2101      	moveq	r1, #1
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	6139      	str	r1, [r7, #16]
 8007350:	b1c4      	cbz	r4, 8007384 <__d2b+0x88>
 8007352:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007356:	4404      	add	r4, r0
 8007358:	6034      	str	r4, [r6, #0]
 800735a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800735e:	6028      	str	r0, [r5, #0]
 8007360:	4638      	mov	r0, r7
 8007362:	b002      	add	sp, #8
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800736c:	e7d5      	b.n	800731a <__d2b+0x1e>
 800736e:	6179      	str	r1, [r7, #20]
 8007370:	e7e7      	b.n	8007342 <__d2b+0x46>
 8007372:	a801      	add	r0, sp, #4
 8007374:	f7ff fd64 	bl	8006e40 <__lo0bits>
 8007378:	2101      	movs	r1, #1
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	6139      	str	r1, [r7, #16]
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	3020      	adds	r0, #32
 8007382:	e7e5      	b.n	8007350 <__d2b+0x54>
 8007384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007388:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800738c:	6030      	str	r0, [r6, #0]
 800738e:	6918      	ldr	r0, [r3, #16]
 8007390:	f7ff fd37 	bl	8006e02 <__hi0bits>
 8007394:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007398:	e7e1      	b.n	800735e <__d2b+0x62>

0800739a <__ratio>:
 800739a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739e:	4688      	mov	r8, r1
 80073a0:	4669      	mov	r1, sp
 80073a2:	4681      	mov	r9, r0
 80073a4:	f7ff ff58 	bl	8007258 <__b2d>
 80073a8:	468b      	mov	fp, r1
 80073aa:	4606      	mov	r6, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	4640      	mov	r0, r8
 80073b0:	a901      	add	r1, sp, #4
 80073b2:	f7ff ff51 	bl	8007258 <__b2d>
 80073b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073be:	460d      	mov	r5, r1
 80073c0:	eba3 0c02 	sub.w	ip, r3, r2
 80073c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bfd5      	itete	le
 80073d2:	460a      	movle	r2, r1
 80073d4:	463a      	movgt	r2, r7
 80073d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80073de:	bfd8      	it	le
 80073e0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80073e4:	462b      	mov	r3, r5
 80073e6:	4602      	mov	r2, r0
 80073e8:	4659      	mov	r1, fp
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7f9 f99e 	bl	800072c <__aeabi_ddiv>
 80073f0:	b003      	add	sp, #12
 80073f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073f6 <__copybits>:
 80073f6:	3901      	subs	r1, #1
 80073f8:	b510      	push	{r4, lr}
 80073fa:	1149      	asrs	r1, r1, #5
 80073fc:	6914      	ldr	r4, [r2, #16]
 80073fe:	3101      	adds	r1, #1
 8007400:	f102 0314 	add.w	r3, r2, #20
 8007404:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007408:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800740c:	42a3      	cmp	r3, r4
 800740e:	4602      	mov	r2, r0
 8007410:	d303      	bcc.n	800741a <__copybits+0x24>
 8007412:	2300      	movs	r3, #0
 8007414:	428a      	cmp	r2, r1
 8007416:	d305      	bcc.n	8007424 <__copybits+0x2e>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	f853 2b04 	ldr.w	r2, [r3], #4
 800741e:	f840 2b04 	str.w	r2, [r0], #4
 8007422:	e7f3      	b.n	800740c <__copybits+0x16>
 8007424:	f842 3b04 	str.w	r3, [r2], #4
 8007428:	e7f4      	b.n	8007414 <__copybits+0x1e>

0800742a <__any_on>:
 800742a:	f100 0214 	add.w	r2, r0, #20
 800742e:	6900      	ldr	r0, [r0, #16]
 8007430:	114b      	asrs	r3, r1, #5
 8007432:	4298      	cmp	r0, r3
 8007434:	b510      	push	{r4, lr}
 8007436:	db11      	blt.n	800745c <__any_on+0x32>
 8007438:	dd0a      	ble.n	8007450 <__any_on+0x26>
 800743a:	f011 011f 	ands.w	r1, r1, #31
 800743e:	d007      	beq.n	8007450 <__any_on+0x26>
 8007440:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007444:	fa24 f001 	lsr.w	r0, r4, r1
 8007448:	fa00 f101 	lsl.w	r1, r0, r1
 800744c:	428c      	cmp	r4, r1
 800744e:	d10b      	bne.n	8007468 <__any_on+0x3e>
 8007450:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007454:	4293      	cmp	r3, r2
 8007456:	d803      	bhi.n	8007460 <__any_on+0x36>
 8007458:	2000      	movs	r0, #0
 800745a:	bd10      	pop	{r4, pc}
 800745c:	4603      	mov	r3, r0
 800745e:	e7f7      	b.n	8007450 <__any_on+0x26>
 8007460:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007464:	2900      	cmp	r1, #0
 8007466:	d0f5      	beq.n	8007454 <__any_on+0x2a>
 8007468:	2001      	movs	r0, #1
 800746a:	e7f6      	b.n	800745a <__any_on+0x30>

0800746c <_calloc_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	fb02 f401 	mul.w	r4, r2, r1
 8007472:	4621      	mov	r1, r4
 8007474:	f000 f854 	bl	8007520 <_malloc_r>
 8007478:	4605      	mov	r5, r0
 800747a:	b118      	cbz	r0, 8007484 <_calloc_r+0x18>
 800747c:	4622      	mov	r2, r4
 800747e:	2100      	movs	r1, #0
 8007480:	f7fc fc4a 	bl	8003d18 <memset>
 8007484:	4628      	mov	r0, r5
 8007486:	bd38      	pop	{r3, r4, r5, pc}

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d043      	beq.n	8007518 <_free_r+0x90>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 fdbf 	bl	800801e <__malloc_lock>
 80074a0:	4a1e      	ldr	r2, [pc, #120]	; (800751c <_free_r+0x94>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	4610      	mov	r0, r2
 80074a6:	b933      	cbnz	r3, 80074b6 <_free_r+0x2e>
 80074a8:	6063      	str	r3, [r4, #4]
 80074aa:	6014      	str	r4, [r2, #0]
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b2:	f000 bdb5 	b.w	8008020 <__malloc_unlock>
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	d90b      	bls.n	80074d2 <_free_r+0x4a>
 80074ba:	6821      	ldr	r1, [r4, #0]
 80074bc:	1862      	adds	r2, r4, r1
 80074be:	4293      	cmp	r3, r2
 80074c0:	bf01      	itttt	eq
 80074c2:	681a      	ldreq	r2, [r3, #0]
 80074c4:	685b      	ldreq	r3, [r3, #4]
 80074c6:	1852      	addeq	r2, r2, r1
 80074c8:	6022      	streq	r2, [r4, #0]
 80074ca:	6063      	str	r3, [r4, #4]
 80074cc:	6004      	str	r4, [r0, #0]
 80074ce:	e7ed      	b.n	80074ac <_free_r+0x24>
 80074d0:	4613      	mov	r3, r2
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	b10a      	cbz	r2, 80074da <_free_r+0x52>
 80074d6:	42a2      	cmp	r2, r4
 80074d8:	d9fa      	bls.n	80074d0 <_free_r+0x48>
 80074da:	6819      	ldr	r1, [r3, #0]
 80074dc:	1858      	adds	r0, r3, r1
 80074de:	42a0      	cmp	r0, r4
 80074e0:	d10b      	bne.n	80074fa <_free_r+0x72>
 80074e2:	6820      	ldr	r0, [r4, #0]
 80074e4:	4401      	add	r1, r0
 80074e6:	1858      	adds	r0, r3, r1
 80074e8:	4282      	cmp	r2, r0
 80074ea:	6019      	str	r1, [r3, #0]
 80074ec:	d1de      	bne.n	80074ac <_free_r+0x24>
 80074ee:	6810      	ldr	r0, [r2, #0]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	4401      	add	r1, r0
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	e7d8      	b.n	80074ac <_free_r+0x24>
 80074fa:	d902      	bls.n	8007502 <_free_r+0x7a>
 80074fc:	230c      	movs	r3, #12
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	e7d4      	b.n	80074ac <_free_r+0x24>
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	1821      	adds	r1, r4, r0
 8007506:	428a      	cmp	r2, r1
 8007508:	bf01      	itttt	eq
 800750a:	6811      	ldreq	r1, [r2, #0]
 800750c:	6852      	ldreq	r2, [r2, #4]
 800750e:	1809      	addeq	r1, r1, r0
 8007510:	6021      	streq	r1, [r4, #0]
 8007512:	6062      	str	r2, [r4, #4]
 8007514:	605c      	str	r4, [r3, #4]
 8007516:	e7c9      	b.n	80074ac <_free_r+0x24>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	200001fc 	.word	0x200001fc

08007520 <_malloc_r>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	1ccd      	adds	r5, r1, #3
 8007524:	f025 0503 	bic.w	r5, r5, #3
 8007528:	3508      	adds	r5, #8
 800752a:	2d0c      	cmp	r5, #12
 800752c:	bf38      	it	cc
 800752e:	250c      	movcc	r5, #12
 8007530:	2d00      	cmp	r5, #0
 8007532:	4606      	mov	r6, r0
 8007534:	db01      	blt.n	800753a <_malloc_r+0x1a>
 8007536:	42a9      	cmp	r1, r5
 8007538:	d903      	bls.n	8007542 <_malloc_r+0x22>
 800753a:	230c      	movs	r3, #12
 800753c:	6033      	str	r3, [r6, #0]
 800753e:	2000      	movs	r0, #0
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	f000 fd6c 	bl	800801e <__malloc_lock>
 8007546:	4a21      	ldr	r2, [pc, #132]	; (80075cc <_malloc_r+0xac>)
 8007548:	6814      	ldr	r4, [r2, #0]
 800754a:	4621      	mov	r1, r4
 800754c:	b991      	cbnz	r1, 8007574 <_malloc_r+0x54>
 800754e:	4c20      	ldr	r4, [pc, #128]	; (80075d0 <_malloc_r+0xb0>)
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	b91b      	cbnz	r3, 800755c <_malloc_r+0x3c>
 8007554:	4630      	mov	r0, r6
 8007556:	f000 facd 	bl	8007af4 <_sbrk_r>
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f000 fac8 	bl	8007af4 <_sbrk_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d124      	bne.n	80075b2 <_malloc_r+0x92>
 8007568:	230c      	movs	r3, #12
 800756a:	4630      	mov	r0, r6
 800756c:	6033      	str	r3, [r6, #0]
 800756e:	f000 fd57 	bl	8008020 <__malloc_unlock>
 8007572:	e7e4      	b.n	800753e <_malloc_r+0x1e>
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	1b5b      	subs	r3, r3, r5
 8007578:	d418      	bmi.n	80075ac <_malloc_r+0x8c>
 800757a:	2b0b      	cmp	r3, #11
 800757c:	d90f      	bls.n	800759e <_malloc_r+0x7e>
 800757e:	600b      	str	r3, [r1, #0]
 8007580:	18cc      	adds	r4, r1, r3
 8007582:	50cd      	str	r5, [r1, r3]
 8007584:	4630      	mov	r0, r6
 8007586:	f000 fd4b 	bl	8008020 <__malloc_unlock>
 800758a:	f104 000b 	add.w	r0, r4, #11
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	f020 0007 	bic.w	r0, r0, #7
 8007594:	1ac3      	subs	r3, r0, r3
 8007596:	d0d3      	beq.n	8007540 <_malloc_r+0x20>
 8007598:	425a      	negs	r2, r3
 800759a:	50e2      	str	r2, [r4, r3]
 800759c:	e7d0      	b.n	8007540 <_malloc_r+0x20>
 800759e:	684b      	ldr	r3, [r1, #4]
 80075a0:	428c      	cmp	r4, r1
 80075a2:	bf16      	itet	ne
 80075a4:	6063      	strne	r3, [r4, #4]
 80075a6:	6013      	streq	r3, [r2, #0]
 80075a8:	460c      	movne	r4, r1
 80075aa:	e7eb      	b.n	8007584 <_malloc_r+0x64>
 80075ac:	460c      	mov	r4, r1
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x2c>
 80075b2:	1cc4      	adds	r4, r0, #3
 80075b4:	f024 0403 	bic.w	r4, r4, #3
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d005      	beq.n	80075c8 <_malloc_r+0xa8>
 80075bc:	1a21      	subs	r1, r4, r0
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 fa98 	bl	8007af4 <_sbrk_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0cf      	beq.n	8007568 <_malloc_r+0x48>
 80075c8:	6025      	str	r5, [r4, #0]
 80075ca:	e7db      	b.n	8007584 <_malloc_r+0x64>
 80075cc:	200001fc 	.word	0x200001fc
 80075d0:	20000200 	.word	0x20000200

080075d4 <__ssputs_r>:
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	688e      	ldr	r6, [r1, #8]
 80075da:	4682      	mov	sl, r0
 80075dc:	429e      	cmp	r6, r3
 80075de:	460c      	mov	r4, r1
 80075e0:	4690      	mov	r8, r2
 80075e2:	4699      	mov	r9, r3
 80075e4:	d837      	bhi.n	8007656 <__ssputs_r+0x82>
 80075e6:	898a      	ldrh	r2, [r1, #12]
 80075e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075ec:	d031      	beq.n	8007652 <__ssputs_r+0x7e>
 80075ee:	2302      	movs	r3, #2
 80075f0:	6825      	ldr	r5, [r4, #0]
 80075f2:	6909      	ldr	r1, [r1, #16]
 80075f4:	1a6f      	subs	r7, r5, r1
 80075f6:	6965      	ldr	r5, [r4, #20]
 80075f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8007600:	f109 0301 	add.w	r3, r9, #1
 8007604:	443b      	add	r3, r7
 8007606:	429d      	cmp	r5, r3
 8007608:	bf38      	it	cc
 800760a:	461d      	movcc	r5, r3
 800760c:	0553      	lsls	r3, r2, #21
 800760e:	d530      	bpl.n	8007672 <__ssputs_r+0x9e>
 8007610:	4629      	mov	r1, r5
 8007612:	f7ff ff85 	bl	8007520 <_malloc_r>
 8007616:	4606      	mov	r6, r0
 8007618:	b950      	cbnz	r0, 8007630 <__ssputs_r+0x5c>
 800761a:	230c      	movs	r3, #12
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	f8ca 3000 	str.w	r3, [sl]
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007630:	463a      	mov	r2, r7
 8007632:	6921      	ldr	r1, [r4, #16]
 8007634:	f7ff fb16 	bl	8006c64 <memcpy>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800763e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	6126      	str	r6, [r4, #16]
 8007646:	443e      	add	r6, r7
 8007648:	6026      	str	r6, [r4, #0]
 800764a:	464e      	mov	r6, r9
 800764c:	6165      	str	r5, [r4, #20]
 800764e:	1bed      	subs	r5, r5, r7
 8007650:	60a5      	str	r5, [r4, #8]
 8007652:	454e      	cmp	r6, r9
 8007654:	d900      	bls.n	8007658 <__ssputs_r+0x84>
 8007656:	464e      	mov	r6, r9
 8007658:	4632      	mov	r2, r6
 800765a:	4641      	mov	r1, r8
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	f000 fcc5 	bl	8007fec <memmove>
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	2000      	movs	r0, #0
 8007666:	1b9b      	subs	r3, r3, r6
 8007668:	60a3      	str	r3, [r4, #8]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	441e      	add	r6, r3
 800766e:	6026      	str	r6, [r4, #0]
 8007670:	e7dc      	b.n	800762c <__ssputs_r+0x58>
 8007672:	462a      	mov	r2, r5
 8007674:	f000 fcd5 	bl	8008022 <_realloc_r>
 8007678:	4606      	mov	r6, r0
 800767a:	2800      	cmp	r0, #0
 800767c:	d1e2      	bne.n	8007644 <__ssputs_r+0x70>
 800767e:	6921      	ldr	r1, [r4, #16]
 8007680:	4650      	mov	r0, sl
 8007682:	f7ff ff01 	bl	8007488 <_free_r>
 8007686:	e7c8      	b.n	800761a <__ssputs_r+0x46>

08007688 <_svfiprintf_r>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	461d      	mov	r5, r3
 800768e:	898b      	ldrh	r3, [r1, #12]
 8007690:	b09d      	sub	sp, #116	; 0x74
 8007692:	061f      	lsls	r7, r3, #24
 8007694:	4680      	mov	r8, r0
 8007696:	460c      	mov	r4, r1
 8007698:	4616      	mov	r6, r2
 800769a:	d50f      	bpl.n	80076bc <_svfiprintf_r+0x34>
 800769c:	690b      	ldr	r3, [r1, #16]
 800769e:	b96b      	cbnz	r3, 80076bc <_svfiprintf_r+0x34>
 80076a0:	2140      	movs	r1, #64	; 0x40
 80076a2:	f7ff ff3d 	bl	8007520 <_malloc_r>
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	6120      	str	r0, [r4, #16]
 80076aa:	b928      	cbnz	r0, 80076b8 <_svfiprintf_r+0x30>
 80076ac:	230c      	movs	r3, #12
 80076ae:	f8c8 3000 	str.w	r3, [r8]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	e0c8      	b.n	800784a <_svfiprintf_r+0x1c2>
 80076b8:	2340      	movs	r3, #64	; 0x40
 80076ba:	6163      	str	r3, [r4, #20]
 80076bc:	2300      	movs	r3, #0
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	2320      	movs	r3, #32
 80076c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076c6:	2330      	movs	r3, #48	; 0x30
 80076c8:	f04f 0b01 	mov.w	fp, #1
 80076cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076d0:	9503      	str	r5, [sp, #12]
 80076d2:	4637      	mov	r7, r6
 80076d4:	463d      	mov	r5, r7
 80076d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076da:	b10b      	cbz	r3, 80076e0 <_svfiprintf_r+0x58>
 80076dc:	2b25      	cmp	r3, #37	; 0x25
 80076de:	d13e      	bne.n	800775e <_svfiprintf_r+0xd6>
 80076e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80076e4:	d00b      	beq.n	80076fe <_svfiprintf_r+0x76>
 80076e6:	4653      	mov	r3, sl
 80076e8:	4632      	mov	r2, r6
 80076ea:	4621      	mov	r1, r4
 80076ec:	4640      	mov	r0, r8
 80076ee:	f7ff ff71 	bl	80075d4 <__ssputs_r>
 80076f2:	3001      	adds	r0, #1
 80076f4:	f000 80a4 	beq.w	8007840 <_svfiprintf_r+0x1b8>
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	4453      	add	r3, sl
 80076fc:	9309      	str	r3, [sp, #36]	; 0x24
 80076fe:	783b      	ldrb	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 809d 	beq.w	8007840 <_svfiprintf_r+0x1b8>
 8007706:	2300      	movs	r3, #0
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	9307      	str	r3, [sp, #28]
 8007714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007718:	931a      	str	r3, [sp, #104]	; 0x68
 800771a:	462f      	mov	r7, r5
 800771c:	2205      	movs	r2, #5
 800771e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007722:	4850      	ldr	r0, [pc, #320]	; (8007864 <_svfiprintf_r+0x1dc>)
 8007724:	f7ff fa90 	bl	8006c48 <memchr>
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	b9d0      	cbnz	r0, 8007762 <_svfiprintf_r+0xda>
 800772c:	06d9      	lsls	r1, r3, #27
 800772e:	bf44      	itt	mi
 8007730:	2220      	movmi	r2, #32
 8007732:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007736:	071a      	lsls	r2, r3, #28
 8007738:	bf44      	itt	mi
 800773a:	222b      	movmi	r2, #43	; 0x2b
 800773c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007740:	782a      	ldrb	r2, [r5, #0]
 8007742:	2a2a      	cmp	r2, #42	; 0x2a
 8007744:	d015      	beq.n	8007772 <_svfiprintf_r+0xea>
 8007746:	462f      	mov	r7, r5
 8007748:	2000      	movs	r0, #0
 800774a:	250a      	movs	r5, #10
 800774c:	9a07      	ldr	r2, [sp, #28]
 800774e:	4639      	mov	r1, r7
 8007750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007754:	3b30      	subs	r3, #48	; 0x30
 8007756:	2b09      	cmp	r3, #9
 8007758:	d94d      	bls.n	80077f6 <_svfiprintf_r+0x16e>
 800775a:	b1b8      	cbz	r0, 800778c <_svfiprintf_r+0x104>
 800775c:	e00f      	b.n	800777e <_svfiprintf_r+0xf6>
 800775e:	462f      	mov	r7, r5
 8007760:	e7b8      	b.n	80076d4 <_svfiprintf_r+0x4c>
 8007762:	4a40      	ldr	r2, [pc, #256]	; (8007864 <_svfiprintf_r+0x1dc>)
 8007764:	463d      	mov	r5, r7
 8007766:	1a80      	subs	r0, r0, r2
 8007768:	fa0b f000 	lsl.w	r0, fp, r0
 800776c:	4318      	orrs	r0, r3
 800776e:	9004      	str	r0, [sp, #16]
 8007770:	e7d3      	b.n	800771a <_svfiprintf_r+0x92>
 8007772:	9a03      	ldr	r2, [sp, #12]
 8007774:	1d11      	adds	r1, r2, #4
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	9103      	str	r1, [sp, #12]
 800777a:	2a00      	cmp	r2, #0
 800777c:	db01      	blt.n	8007782 <_svfiprintf_r+0xfa>
 800777e:	9207      	str	r2, [sp, #28]
 8007780:	e004      	b.n	800778c <_svfiprintf_r+0x104>
 8007782:	4252      	negs	r2, r2
 8007784:	f043 0302 	orr.w	r3, r3, #2
 8007788:	9207      	str	r2, [sp, #28]
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	783b      	ldrb	r3, [r7, #0]
 800778e:	2b2e      	cmp	r3, #46	; 0x2e
 8007790:	d10c      	bne.n	80077ac <_svfiprintf_r+0x124>
 8007792:	787b      	ldrb	r3, [r7, #1]
 8007794:	2b2a      	cmp	r3, #42	; 0x2a
 8007796:	d133      	bne.n	8007800 <_svfiprintf_r+0x178>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	3702      	adds	r7, #2
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	9203      	str	r2, [sp, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077aa:	9305      	str	r3, [sp, #20]
 80077ac:	4d2e      	ldr	r5, [pc, #184]	; (8007868 <_svfiprintf_r+0x1e0>)
 80077ae:	2203      	movs	r2, #3
 80077b0:	7839      	ldrb	r1, [r7, #0]
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7ff fa48 	bl	8006c48 <memchr>
 80077b8:	b138      	cbz	r0, 80077ca <_svfiprintf_r+0x142>
 80077ba:	2340      	movs	r3, #64	; 0x40
 80077bc:	1b40      	subs	r0, r0, r5
 80077be:	fa03 f000 	lsl.w	r0, r3, r0
 80077c2:	9b04      	ldr	r3, [sp, #16]
 80077c4:	3701      	adds	r7, #1
 80077c6:	4303      	orrs	r3, r0
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	7839      	ldrb	r1, [r7, #0]
 80077cc:	2206      	movs	r2, #6
 80077ce:	4827      	ldr	r0, [pc, #156]	; (800786c <_svfiprintf_r+0x1e4>)
 80077d0:	1c7e      	adds	r6, r7, #1
 80077d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077d6:	f7ff fa37 	bl	8006c48 <memchr>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d038      	beq.n	8007850 <_svfiprintf_r+0x1c8>
 80077de:	4b24      	ldr	r3, [pc, #144]	; (8007870 <_svfiprintf_r+0x1e8>)
 80077e0:	bb13      	cbnz	r3, 8007828 <_svfiprintf_r+0x1a0>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	3307      	adds	r3, #7
 80077e6:	f023 0307 	bic.w	r3, r3, #7
 80077ea:	3308      	adds	r3, #8
 80077ec:	9303      	str	r3, [sp, #12]
 80077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f0:	444b      	add	r3, r9
 80077f2:	9309      	str	r3, [sp, #36]	; 0x24
 80077f4:	e76d      	b.n	80076d2 <_svfiprintf_r+0x4a>
 80077f6:	fb05 3202 	mla	r2, r5, r2, r3
 80077fa:	2001      	movs	r0, #1
 80077fc:	460f      	mov	r7, r1
 80077fe:	e7a6      	b.n	800774e <_svfiprintf_r+0xc6>
 8007800:	2300      	movs	r3, #0
 8007802:	250a      	movs	r5, #10
 8007804:	4619      	mov	r1, r3
 8007806:	3701      	adds	r7, #1
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	4638      	mov	r0, r7
 800780c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007810:	3a30      	subs	r2, #48	; 0x30
 8007812:	2a09      	cmp	r2, #9
 8007814:	d903      	bls.n	800781e <_svfiprintf_r+0x196>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0c8      	beq.n	80077ac <_svfiprintf_r+0x124>
 800781a:	9105      	str	r1, [sp, #20]
 800781c:	e7c6      	b.n	80077ac <_svfiprintf_r+0x124>
 800781e:	fb05 2101 	mla	r1, r5, r1, r2
 8007822:	2301      	movs	r3, #1
 8007824:	4607      	mov	r7, r0
 8007826:	e7f0      	b.n	800780a <_svfiprintf_r+0x182>
 8007828:	ab03      	add	r3, sp, #12
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4622      	mov	r2, r4
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <_svfiprintf_r+0x1ec>)
 8007830:	a904      	add	r1, sp, #16
 8007832:	4640      	mov	r0, r8
 8007834:	f7fc fb0a 	bl	8003e4c <_printf_float>
 8007838:	f1b0 3fff 	cmp.w	r0, #4294967295
 800783c:	4681      	mov	r9, r0
 800783e:	d1d6      	bne.n	80077ee <_svfiprintf_r+0x166>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	065b      	lsls	r3, r3, #25
 8007844:	f53f af35 	bmi.w	80076b2 <_svfiprintf_r+0x2a>
 8007848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800784a:	b01d      	add	sp, #116	; 0x74
 800784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4622      	mov	r2, r4
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <_svfiprintf_r+0x1ec>)
 8007858:	a904      	add	r1, sp, #16
 800785a:	4640      	mov	r0, r8
 800785c:	f7fc fda2 	bl	80043a4 <_printf_i>
 8007860:	e7ea      	b.n	8007838 <_svfiprintf_r+0x1b0>
 8007862:	bf00      	nop
 8007864:	0800836c 	.word	0x0800836c
 8007868:	08008372 	.word	0x08008372
 800786c:	08008376 	.word	0x08008376
 8007870:	08003e4d 	.word	0x08003e4d
 8007874:	080075d5 	.word	0x080075d5

08007878 <__sfputc_r>:
 8007878:	6893      	ldr	r3, [r2, #8]
 800787a:	b410      	push	{r4}
 800787c:	3b01      	subs	r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	6093      	str	r3, [r2, #8]
 8007882:	da07      	bge.n	8007894 <__sfputc_r+0x1c>
 8007884:	6994      	ldr	r4, [r2, #24]
 8007886:	42a3      	cmp	r3, r4
 8007888:	db01      	blt.n	800788e <__sfputc_r+0x16>
 800788a:	290a      	cmp	r1, #10
 800788c:	d102      	bne.n	8007894 <__sfputc_r+0x1c>
 800788e:	bc10      	pop	{r4}
 8007890:	f000 b996 	b.w	8007bc0 <__swbuf_r>
 8007894:	6813      	ldr	r3, [r2, #0]
 8007896:	1c58      	adds	r0, r3, #1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	7019      	strb	r1, [r3, #0]
 800789c:	4608      	mov	r0, r1
 800789e:	bc10      	pop	{r4}
 80078a0:	4770      	bx	lr

080078a2 <__sfputs_r>:
 80078a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	18d5      	adds	r5, r2, r3
 80078ac:	42ac      	cmp	r4, r5
 80078ae:	d101      	bne.n	80078b4 <__sfputs_r+0x12>
 80078b0:	2000      	movs	r0, #0
 80078b2:	e007      	b.n	80078c4 <__sfputs_r+0x22>
 80078b4:	463a      	mov	r2, r7
 80078b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ffdc 	bl	8007878 <__sfputc_r>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d1f3      	bne.n	80078ac <__sfputs_r+0xa>
 80078c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078c8 <_vfiprintf_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	b09d      	sub	sp, #116	; 0x74
 80078d0:	4617      	mov	r7, r2
 80078d2:	461d      	mov	r5, r3
 80078d4:	4606      	mov	r6, r0
 80078d6:	b118      	cbz	r0, 80078e0 <_vfiprintf_r+0x18>
 80078d8:	6983      	ldr	r3, [r0, #24]
 80078da:	b90b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x18>
 80078dc:	f7fe fdd4 	bl	8006488 <__sinit>
 80078e0:	4b7c      	ldr	r3, [pc, #496]	; (8007ad4 <_vfiprintf_r+0x20c>)
 80078e2:	429c      	cmp	r4, r3
 80078e4:	d158      	bne.n	8007998 <_vfiprintf_r+0xd0>
 80078e6:	6874      	ldr	r4, [r6, #4]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	0718      	lsls	r0, r3, #28
 80078ec:	d55e      	bpl.n	80079ac <_vfiprintf_r+0xe4>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d05b      	beq.n	80079ac <_vfiprintf_r+0xe4>
 80078f4:	2300      	movs	r3, #0
 80078f6:	9309      	str	r3, [sp, #36]	; 0x24
 80078f8:	2320      	movs	r3, #32
 80078fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078fe:	2330      	movs	r3, #48	; 0x30
 8007900:	f04f 0b01 	mov.w	fp, #1
 8007904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007908:	9503      	str	r5, [sp, #12]
 800790a:	46b8      	mov	r8, r7
 800790c:	4645      	mov	r5, r8
 800790e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007912:	b10b      	cbz	r3, 8007918 <_vfiprintf_r+0x50>
 8007914:	2b25      	cmp	r3, #37	; 0x25
 8007916:	d154      	bne.n	80079c2 <_vfiprintf_r+0xfa>
 8007918:	ebb8 0a07 	subs.w	sl, r8, r7
 800791c:	d00b      	beq.n	8007936 <_vfiprintf_r+0x6e>
 800791e:	4653      	mov	r3, sl
 8007920:	463a      	mov	r2, r7
 8007922:	4621      	mov	r1, r4
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffbc 	bl	80078a2 <__sfputs_r>
 800792a:	3001      	adds	r0, #1
 800792c:	f000 80c2 	beq.w	8007ab4 <_vfiprintf_r+0x1ec>
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	4453      	add	r3, sl
 8007934:	9309      	str	r3, [sp, #36]	; 0x24
 8007936:	f898 3000 	ldrb.w	r3, [r8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80ba 	beq.w	8007ab4 <_vfiprintf_r+0x1ec>
 8007940:	2300      	movs	r3, #0
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	9307      	str	r3, [sp, #28]
 800794e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007952:	931a      	str	r3, [sp, #104]	; 0x68
 8007954:	46a8      	mov	r8, r5
 8007956:	2205      	movs	r2, #5
 8007958:	f818 1b01 	ldrb.w	r1, [r8], #1
 800795c:	485e      	ldr	r0, [pc, #376]	; (8007ad8 <_vfiprintf_r+0x210>)
 800795e:	f7ff f973 	bl	8006c48 <memchr>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	bb78      	cbnz	r0, 80079c6 <_vfiprintf_r+0xfe>
 8007966:	06d9      	lsls	r1, r3, #27
 8007968:	bf44      	itt	mi
 800796a:	2220      	movmi	r2, #32
 800796c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007970:	071a      	lsls	r2, r3, #28
 8007972:	bf44      	itt	mi
 8007974:	222b      	movmi	r2, #43	; 0x2b
 8007976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800797a:	782a      	ldrb	r2, [r5, #0]
 800797c:	2a2a      	cmp	r2, #42	; 0x2a
 800797e:	d02a      	beq.n	80079d6 <_vfiprintf_r+0x10e>
 8007980:	46a8      	mov	r8, r5
 8007982:	2000      	movs	r0, #0
 8007984:	250a      	movs	r5, #10
 8007986:	9a07      	ldr	r2, [sp, #28]
 8007988:	4641      	mov	r1, r8
 800798a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798e:	3b30      	subs	r3, #48	; 0x30
 8007990:	2b09      	cmp	r3, #9
 8007992:	d969      	bls.n	8007a68 <_vfiprintf_r+0x1a0>
 8007994:	b360      	cbz	r0, 80079f0 <_vfiprintf_r+0x128>
 8007996:	e024      	b.n	80079e2 <_vfiprintf_r+0x11a>
 8007998:	4b50      	ldr	r3, [pc, #320]	; (8007adc <_vfiprintf_r+0x214>)
 800799a:	429c      	cmp	r4, r3
 800799c:	d101      	bne.n	80079a2 <_vfiprintf_r+0xda>
 800799e:	68b4      	ldr	r4, [r6, #8]
 80079a0:	e7a2      	b.n	80078e8 <_vfiprintf_r+0x20>
 80079a2:	4b4f      	ldr	r3, [pc, #316]	; (8007ae0 <_vfiprintf_r+0x218>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	bf08      	it	eq
 80079a8:	68f4      	ldreq	r4, [r6, #12]
 80079aa:	e79d      	b.n	80078e8 <_vfiprintf_r+0x20>
 80079ac:	4621      	mov	r1, r4
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 f978 	bl	8007ca4 <__swsetup_r>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d09d      	beq.n	80078f4 <_vfiprintf_r+0x2c>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	b01d      	add	sp, #116	; 0x74
 80079be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c2:	46a8      	mov	r8, r5
 80079c4:	e7a2      	b.n	800790c <_vfiprintf_r+0x44>
 80079c6:	4a44      	ldr	r2, [pc, #272]	; (8007ad8 <_vfiprintf_r+0x210>)
 80079c8:	4645      	mov	r5, r8
 80079ca:	1a80      	subs	r0, r0, r2
 80079cc:	fa0b f000 	lsl.w	r0, fp, r0
 80079d0:	4318      	orrs	r0, r3
 80079d2:	9004      	str	r0, [sp, #16]
 80079d4:	e7be      	b.n	8007954 <_vfiprintf_r+0x8c>
 80079d6:	9a03      	ldr	r2, [sp, #12]
 80079d8:	1d11      	adds	r1, r2, #4
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	2a00      	cmp	r2, #0
 80079e0:	db01      	blt.n	80079e6 <_vfiprintf_r+0x11e>
 80079e2:	9207      	str	r2, [sp, #28]
 80079e4:	e004      	b.n	80079f0 <_vfiprintf_r+0x128>
 80079e6:	4252      	negs	r2, r2
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	9207      	str	r2, [sp, #28]
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	f898 3000 	ldrb.w	r3, [r8]
 80079f4:	2b2e      	cmp	r3, #46	; 0x2e
 80079f6:	d10e      	bne.n	8007a16 <_vfiprintf_r+0x14e>
 80079f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079fc:	2b2a      	cmp	r3, #42	; 0x2a
 80079fe:	d138      	bne.n	8007a72 <_vfiprintf_r+0x1aa>
 8007a00:	9b03      	ldr	r3, [sp, #12]
 8007a02:	f108 0802 	add.w	r8, r8, #2
 8007a06:	1d1a      	adds	r2, r3, #4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	9203      	str	r2, [sp, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bfb8      	it	lt
 8007a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	4d33      	ldr	r5, [pc, #204]	; (8007ae4 <_vfiprintf_r+0x21c>)
 8007a18:	2203      	movs	r2, #3
 8007a1a:	f898 1000 	ldrb.w	r1, [r8]
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f7ff f912 	bl	8006c48 <memchr>
 8007a24:	b140      	cbz	r0, 8007a38 <_vfiprintf_r+0x170>
 8007a26:	2340      	movs	r3, #64	; 0x40
 8007a28:	1b40      	subs	r0, r0, r5
 8007a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	f108 0801 	add.w	r8, r8, #1
 8007a34:	4303      	orrs	r3, r0
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	f898 1000 	ldrb.w	r1, [r8]
 8007a3c:	2206      	movs	r2, #6
 8007a3e:	482a      	ldr	r0, [pc, #168]	; (8007ae8 <_vfiprintf_r+0x220>)
 8007a40:	f108 0701 	add.w	r7, r8, #1
 8007a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a48:	f7ff f8fe 	bl	8006c48 <memchr>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d037      	beq.n	8007ac0 <_vfiprintf_r+0x1f8>
 8007a50:	4b26      	ldr	r3, [pc, #152]	; (8007aec <_vfiprintf_r+0x224>)
 8007a52:	bb1b      	cbnz	r3, 8007a9c <_vfiprintf_r+0x1d4>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	3307      	adds	r3, #7
 8007a58:	f023 0307 	bic.w	r3, r3, #7
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	9303      	str	r3, [sp, #12]
 8007a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a62:	444b      	add	r3, r9
 8007a64:	9309      	str	r3, [sp, #36]	; 0x24
 8007a66:	e750      	b.n	800790a <_vfiprintf_r+0x42>
 8007a68:	fb05 3202 	mla	r2, r5, r2, r3
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	4688      	mov	r8, r1
 8007a70:	e78a      	b.n	8007988 <_vfiprintf_r+0xc0>
 8007a72:	2300      	movs	r3, #0
 8007a74:	250a      	movs	r5, #10
 8007a76:	4619      	mov	r1, r3
 8007a78:	f108 0801 	add.w	r8, r8, #1
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a84:	3a30      	subs	r2, #48	; 0x30
 8007a86:	2a09      	cmp	r2, #9
 8007a88:	d903      	bls.n	8007a92 <_vfiprintf_r+0x1ca>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0c3      	beq.n	8007a16 <_vfiprintf_r+0x14e>
 8007a8e:	9105      	str	r1, [sp, #20]
 8007a90:	e7c1      	b.n	8007a16 <_vfiprintf_r+0x14e>
 8007a92:	fb05 2101 	mla	r1, r5, r1, r2
 8007a96:	2301      	movs	r3, #1
 8007a98:	4680      	mov	r8, r0
 8007a9a:	e7f0      	b.n	8007a7e <_vfiprintf_r+0x1b6>
 8007a9c:	ab03      	add	r3, sp, #12
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <_vfiprintf_r+0x228>)
 8007aa4:	a904      	add	r1, sp, #16
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7fc f9d0 	bl	8003e4c <_printf_float>
 8007aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ab0:	4681      	mov	r9, r0
 8007ab2:	d1d5      	bne.n	8007a60 <_vfiprintf_r+0x198>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	065b      	lsls	r3, r3, #25
 8007ab8:	f53f af7e 	bmi.w	80079b8 <_vfiprintf_r+0xf0>
 8007abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007abe:	e77d      	b.n	80079bc <_vfiprintf_r+0xf4>
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <_vfiprintf_r+0x228>)
 8007ac8:	a904      	add	r1, sp, #16
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7fc fc6a 	bl	80043a4 <_printf_i>
 8007ad0:	e7ec      	b.n	8007aac <_vfiprintf_r+0x1e4>
 8007ad2:	bf00      	nop
 8007ad4:	08008220 	.word	0x08008220
 8007ad8:	0800836c 	.word	0x0800836c
 8007adc:	08008240 	.word	0x08008240
 8007ae0:	08008200 	.word	0x08008200
 8007ae4:	08008372 	.word	0x08008372
 8007ae8:	08008376 	.word	0x08008376
 8007aec:	08003e4d 	.word	0x08003e4d
 8007af0:	080078a3 	.word	0x080078a3

08007af4 <_sbrk_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	2300      	movs	r3, #0
 8007af8:	4c05      	ldr	r4, [pc, #20]	; (8007b10 <_sbrk_r+0x1c>)
 8007afa:	4605      	mov	r5, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	f7f9 fb68 	bl	80011d4 <_sbrk>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_sbrk_r+0x1a>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_sbrk_r+0x1a>
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	2000031c 	.word	0x2000031c

08007b14 <__sread>:
 8007b14:	b510      	push	{r4, lr}
 8007b16:	460c      	mov	r4, r1
 8007b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1c:	f000 faa8 	bl	8008070 <_read_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	bfab      	itete	ge
 8007b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b26:	89a3      	ldrhlt	r3, [r4, #12]
 8007b28:	181b      	addge	r3, r3, r0
 8007b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b2e:	bfac      	ite	ge
 8007b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b32:	81a3      	strhlt	r3, [r4, #12]
 8007b34:	bd10      	pop	{r4, pc}

08007b36 <__swrite>:
 8007b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3a:	461f      	mov	r7, r3
 8007b3c:	898b      	ldrh	r3, [r1, #12]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	05db      	lsls	r3, r3, #23
 8007b42:	460c      	mov	r4, r1
 8007b44:	4616      	mov	r6, r2
 8007b46:	d505      	bpl.n	8007b54 <__swrite+0x1e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b50:	f000 f9d6 	bl	8007f00 <_lseek_r>
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	4632      	mov	r2, r6
 8007b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b62:	463b      	mov	r3, r7
 8007b64:	4628      	mov	r0, r5
 8007b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	f000 b889 	b.w	8007c80 <_write_r>

08007b6e <__sseek>:
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b76:	f000 f9c3 	bl	8007f00 <_lseek_r>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	bf15      	itete	ne
 8007b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b8a:	81a3      	strheq	r3, [r4, #12]
 8007b8c:	bf18      	it	ne
 8007b8e:	81a3      	strhne	r3, [r4, #12]
 8007b90:	bd10      	pop	{r4, pc}

08007b92 <__sclose>:
 8007b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b96:	f000 b8f3 	b.w	8007d80 <_close_r>

08007b9a <strncmp>:
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	b16a      	cbz	r2, 8007bba <strncmp+0x20>
 8007b9e:	3901      	subs	r1, #1
 8007ba0:	1884      	adds	r4, r0, r2
 8007ba2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ba6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d103      	bne.n	8007bb6 <strncmp+0x1c>
 8007bae:	42a0      	cmp	r0, r4
 8007bb0:	d001      	beq.n	8007bb6 <strncmp+0x1c>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f5      	bne.n	8007ba2 <strncmp+0x8>
 8007bb6:	1a98      	subs	r0, r3, r2
 8007bb8:	bd10      	pop	{r4, pc}
 8007bba:	4610      	mov	r0, r2
 8007bbc:	e7fc      	b.n	8007bb8 <strncmp+0x1e>
	...

08007bc0 <__swbuf_r>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b118      	cbz	r0, 8007bd2 <__swbuf_r+0x12>
 8007bca:	6983      	ldr	r3, [r0, #24]
 8007bcc:	b90b      	cbnz	r3, 8007bd2 <__swbuf_r+0x12>
 8007bce:	f7fe fc5b 	bl	8006488 <__sinit>
 8007bd2:	4b21      	ldr	r3, [pc, #132]	; (8007c58 <__swbuf_r+0x98>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d12a      	bne.n	8007c2e <__swbuf_r+0x6e>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	69a3      	ldr	r3, [r4, #24]
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	071a      	lsls	r2, r3, #28
 8007be2:	d52e      	bpl.n	8007c42 <__swbuf_r+0x82>
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	b363      	cbz	r3, 8007c42 <__swbuf_r+0x82>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	b2f6      	uxtb	r6, r6
 8007bee:	1ac0      	subs	r0, r0, r3
 8007bf0:	6963      	ldr	r3, [r4, #20]
 8007bf2:	4637      	mov	r7, r6
 8007bf4:	4283      	cmp	r3, r0
 8007bf6:	dc04      	bgt.n	8007c02 <__swbuf_r+0x42>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f956 	bl	8007eac <_fflush_r>
 8007c00:	bb28      	cbnz	r0, 8007c4e <__swbuf_r+0x8e>
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	3001      	adds	r0, #1
 8007c06:	3b01      	subs	r3, #1
 8007c08:	60a3      	str	r3, [r4, #8]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	6022      	str	r2, [r4, #0]
 8007c10:	701e      	strb	r6, [r3, #0]
 8007c12:	6963      	ldr	r3, [r4, #20]
 8007c14:	4283      	cmp	r3, r0
 8007c16:	d004      	beq.n	8007c22 <__swbuf_r+0x62>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	07db      	lsls	r3, r3, #31
 8007c1c:	d519      	bpl.n	8007c52 <__swbuf_r+0x92>
 8007c1e:	2e0a      	cmp	r6, #10
 8007c20:	d117      	bne.n	8007c52 <__swbuf_r+0x92>
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 f941 	bl	8007eac <_fflush_r>
 8007c2a:	b190      	cbz	r0, 8007c52 <__swbuf_r+0x92>
 8007c2c:	e00f      	b.n	8007c4e <__swbuf_r+0x8e>
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <__swbuf_r+0x9c>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	d101      	bne.n	8007c38 <__swbuf_r+0x78>
 8007c34:	68ac      	ldr	r4, [r5, #8]
 8007c36:	e7d0      	b.n	8007bda <__swbuf_r+0x1a>
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <__swbuf_r+0xa0>)
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	bf08      	it	eq
 8007c3e:	68ec      	ldreq	r4, [r5, #12]
 8007c40:	e7cb      	b.n	8007bda <__swbuf_r+0x1a>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 f82d 	bl	8007ca4 <__swsetup_r>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d0cc      	beq.n	8007be8 <__swbuf_r+0x28>
 8007c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8007c52:	4638      	mov	r0, r7
 8007c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c56:	bf00      	nop
 8007c58:	08008220 	.word	0x08008220
 8007c5c:	08008240 	.word	0x08008240
 8007c60:	08008200 	.word	0x08008200

08007c64 <__ascii_wctomb>:
 8007c64:	b149      	cbz	r1, 8007c7a <__ascii_wctomb+0x16>
 8007c66:	2aff      	cmp	r2, #255	; 0xff
 8007c68:	bf8b      	itete	hi
 8007c6a:	238a      	movhi	r3, #138	; 0x8a
 8007c6c:	700a      	strbls	r2, [r1, #0]
 8007c6e:	6003      	strhi	r3, [r0, #0]
 8007c70:	2001      	movls	r0, #1
 8007c72:	bf88      	it	hi
 8007c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c78:	4770      	bx	lr
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4770      	bx	lr
	...

08007c80 <_write_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4605      	mov	r5, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4c05      	ldr	r4, [pc, #20]	; (8007ca0 <_write_r+0x20>)
 8007c8c:	6022      	str	r2, [r4, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7f9 fa53 	bl	800113a <_write>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_write_r+0x1e>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_write_r+0x1e>
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	2000031c 	.word	0x2000031c

08007ca4 <__swsetup_r>:
 8007ca4:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <__swsetup_r+0xcc>)
 8007ca6:	b570      	push	{r4, r5, r6, lr}
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b125      	cbz	r5, 8007cba <__swsetup_r+0x16>
 8007cb0:	69ab      	ldr	r3, [r5, #24]
 8007cb2:	b913      	cbnz	r3, 8007cba <__swsetup_r+0x16>
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f7fe fbe7 	bl	8006488 <__sinit>
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <__swsetup_r+0xd0>)
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d10f      	bne.n	8007ce0 <__swsetup_r+0x3c>
 8007cc0:	686c      	ldr	r4, [r5, #4]
 8007cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	0715      	lsls	r5, r2, #28
 8007cca:	d42c      	bmi.n	8007d26 <__swsetup_r+0x82>
 8007ccc:	06d0      	lsls	r0, r2, #27
 8007cce:	d411      	bmi.n	8007cf4 <__swsetup_r+0x50>
 8007cd0:	2209      	movs	r2, #9
 8007cd2:	6032      	str	r2, [r6, #0]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	e03e      	b.n	8007d5e <__swsetup_r+0xba>
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <__swsetup_r+0xd4>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	d101      	bne.n	8007cea <__swsetup_r+0x46>
 8007ce6:	68ac      	ldr	r4, [r5, #8]
 8007ce8:	e7eb      	b.n	8007cc2 <__swsetup_r+0x1e>
 8007cea:	4b24      	ldr	r3, [pc, #144]	; (8007d7c <__swsetup_r+0xd8>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	bf08      	it	eq
 8007cf0:	68ec      	ldreq	r4, [r5, #12]
 8007cf2:	e7e6      	b.n	8007cc2 <__swsetup_r+0x1e>
 8007cf4:	0751      	lsls	r1, r2, #29
 8007cf6:	d512      	bpl.n	8007d1e <__swsetup_r+0x7a>
 8007cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfa:	b141      	cbz	r1, 8007d0e <__swsetup_r+0x6a>
 8007cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d002      	beq.n	8007d0a <__swsetup_r+0x66>
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff fbbf 	bl	8007488 <_free_r>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	2300      	movs	r3, #0
 8007d18:	6063      	str	r3, [r4, #4]
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f043 0308 	orr.w	r3, r3, #8
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	b94b      	cbnz	r3, 8007d3e <__swsetup_r+0x9a>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	d003      	beq.n	8007d3e <__swsetup_r+0x9a>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f000 f917 	bl	8007f6c <__smakebuf_r>
 8007d3e:	89a2      	ldrh	r2, [r4, #12]
 8007d40:	f012 0301 	ands.w	r3, r2, #1
 8007d44:	d00c      	beq.n	8007d60 <__swsetup_r+0xbc>
 8007d46:	2300      	movs	r3, #0
 8007d48:	60a3      	str	r3, [r4, #8]
 8007d4a:	6963      	ldr	r3, [r4, #20]
 8007d4c:	425b      	negs	r3, r3
 8007d4e:	61a3      	str	r3, [r4, #24]
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	b953      	cbnz	r3, 8007d6a <__swsetup_r+0xc6>
 8007d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d5c:	d1ba      	bne.n	8007cd4 <__swsetup_r+0x30>
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	0792      	lsls	r2, r2, #30
 8007d62:	bf58      	it	pl
 8007d64:	6963      	ldrpl	r3, [r4, #20]
 8007d66:	60a3      	str	r3, [r4, #8]
 8007d68:	e7f2      	b.n	8007d50 <__swsetup_r+0xac>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e7f7      	b.n	8007d5e <__swsetup_r+0xba>
 8007d6e:	bf00      	nop
 8007d70:	2000000c 	.word	0x2000000c
 8007d74:	08008220 	.word	0x08008220
 8007d78:	08008240 	.word	0x08008240
 8007d7c:	08008200 	.word	0x08008200

08007d80 <_close_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	2300      	movs	r3, #0
 8007d84:	4c05      	ldr	r4, [pc, #20]	; (8007d9c <_close_r+0x1c>)
 8007d86:	4605      	mov	r5, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	6023      	str	r3, [r4, #0]
 8007d8c:	f7f9 f9f1 	bl	8001172 <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_close_r+0x1a>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_close_r+0x1a>
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2000031c 	.word	0x2000031c

08007da0 <__sflush_r>:
 8007da0:	898a      	ldrh	r2, [r1, #12]
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	4605      	mov	r5, r0
 8007da8:	0710      	lsls	r0, r2, #28
 8007daa:	460c      	mov	r4, r1
 8007dac:	d458      	bmi.n	8007e60 <__sflush_r+0xc0>
 8007dae:	684b      	ldr	r3, [r1, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc05      	bgt.n	8007dc0 <__sflush_r+0x20>
 8007db4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc02      	bgt.n	8007dc0 <__sflush_r+0x20>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d0f9      	beq.n	8007dba <__sflush_r+0x1a>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dcc:	682f      	ldr	r7, [r5, #0]
 8007dce:	6a21      	ldr	r1, [r4, #32]
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	d032      	beq.n	8007e3a <__sflush_r+0x9a>
 8007dd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	075a      	lsls	r2, r3, #29
 8007dda:	d505      	bpl.n	8007de8 <__sflush_r+0x48>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	1ac0      	subs	r0, r0, r3
 8007de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007de2:	b10b      	cbz	r3, 8007de8 <__sflush_r+0x48>
 8007de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de6:	1ac0      	subs	r0, r0, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	4602      	mov	r2, r0
 8007dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dee:	6a21      	ldr	r1, [r4, #32]
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	d106      	bne.n	8007e08 <__sflush_r+0x68>
 8007dfa:	6829      	ldr	r1, [r5, #0]
 8007dfc:	291d      	cmp	r1, #29
 8007dfe:	d848      	bhi.n	8007e92 <__sflush_r+0xf2>
 8007e00:	4a29      	ldr	r2, [pc, #164]	; (8007ea8 <__sflush_r+0x108>)
 8007e02:	40ca      	lsrs	r2, r1
 8007e04:	07d6      	lsls	r6, r2, #31
 8007e06:	d544      	bpl.n	8007e92 <__sflush_r+0xf2>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6062      	str	r2, [r4, #4]
 8007e0c:	6922      	ldr	r2, [r4, #16]
 8007e0e:	04d9      	lsls	r1, r3, #19
 8007e10:	6022      	str	r2, [r4, #0]
 8007e12:	d504      	bpl.n	8007e1e <__sflush_r+0x7e>
 8007e14:	1c42      	adds	r2, r0, #1
 8007e16:	d101      	bne.n	8007e1c <__sflush_r+0x7c>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b903      	cbnz	r3, 8007e1e <__sflush_r+0x7e>
 8007e1c:	6560      	str	r0, [r4, #84]	; 0x54
 8007e1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e20:	602f      	str	r7, [r5, #0]
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d0c9      	beq.n	8007dba <__sflush_r+0x1a>
 8007e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	d002      	beq.n	8007e34 <__sflush_r+0x94>
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7ff fb2a 	bl	8007488 <_free_r>
 8007e34:	2000      	movs	r0, #0
 8007e36:	6360      	str	r0, [r4, #52]	; 0x34
 8007e38:	e7c0      	b.n	8007dbc <__sflush_r+0x1c>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b0      	blx	r6
 8007e40:	1c41      	adds	r1, r0, #1
 8007e42:	d1c8      	bne.n	8007dd6 <__sflush_r+0x36>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0c5      	beq.n	8007dd6 <__sflush_r+0x36>
 8007e4a:	2b1d      	cmp	r3, #29
 8007e4c:	d001      	beq.n	8007e52 <__sflush_r+0xb2>
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	d101      	bne.n	8007e56 <__sflush_r+0xb6>
 8007e52:	602f      	str	r7, [r5, #0]
 8007e54:	e7b1      	b.n	8007dba <__sflush_r+0x1a>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	e7ad      	b.n	8007dbc <__sflush_r+0x1c>
 8007e60:	690f      	ldr	r7, [r1, #16]
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d0a9      	beq.n	8007dba <__sflush_r+0x1a>
 8007e66:	0793      	lsls	r3, r2, #30
 8007e68:	bf18      	it	ne
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	680e      	ldr	r6, [r1, #0]
 8007e6e:	bf08      	it	eq
 8007e70:	694b      	ldreq	r3, [r1, #20]
 8007e72:	eba6 0807 	sub.w	r8, r6, r7
 8007e76:	600f      	str	r7, [r1, #0]
 8007e78:	608b      	str	r3, [r1, #8]
 8007e7a:	f1b8 0f00 	cmp.w	r8, #0
 8007e7e:	dd9c      	ble.n	8007dba <__sflush_r+0x1a>
 8007e80:	4643      	mov	r3, r8
 8007e82:	463a      	mov	r2, r7
 8007e84:	6a21      	ldr	r1, [r4, #32]
 8007e86:	4628      	mov	r0, r5
 8007e88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e8a:	47b0      	blx	r6
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	dc06      	bgt.n	8007e9e <__sflush_r+0xfe>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e78e      	b.n	8007dbc <__sflush_r+0x1c>
 8007e9e:	4407      	add	r7, r0
 8007ea0:	eba8 0800 	sub.w	r8, r8, r0
 8007ea4:	e7e9      	b.n	8007e7a <__sflush_r+0xda>
 8007ea6:	bf00      	nop
 8007ea8:	20400001 	.word	0x20400001

08007eac <_fflush_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	b1db      	cbz	r3, 8007eee <_fflush_r+0x42>
 8007eb6:	b118      	cbz	r0, 8007ec0 <_fflush_r+0x14>
 8007eb8:	6983      	ldr	r3, [r0, #24]
 8007eba:	b90b      	cbnz	r3, 8007ec0 <_fflush_r+0x14>
 8007ebc:	f7fe fae4 	bl	8006488 <__sinit>
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <_fflush_r+0x48>)
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d109      	bne.n	8007eda <_fflush_r+0x2e>
 8007ec6:	686c      	ldr	r4, [r5, #4]
 8007ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ecc:	b17b      	cbz	r3, 8007eee <_fflush_r+0x42>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed6:	f7ff bf63 	b.w	8007da0 <__sflush_r>
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <_fflush_r+0x4c>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	d101      	bne.n	8007ee4 <_fflush_r+0x38>
 8007ee0:	68ac      	ldr	r4, [r5, #8]
 8007ee2:	e7f1      	b.n	8007ec8 <_fflush_r+0x1c>
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <_fflush_r+0x50>)
 8007ee6:	429c      	cmp	r4, r3
 8007ee8:	bf08      	it	eq
 8007eea:	68ec      	ldreq	r4, [r5, #12]
 8007eec:	e7ec      	b.n	8007ec8 <_fflush_r+0x1c>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	08008220 	.word	0x08008220
 8007ef8:	08008240 	.word	0x08008240
 8007efc:	08008200 	.word	0x08008200

08007f00 <_lseek_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4605      	mov	r5, r0
 8007f04:	4608      	mov	r0, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4c05      	ldr	r4, [pc, #20]	; (8007f20 <_lseek_r+0x20>)
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7f9 f953 	bl	80011ba <_lseek>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_lseek_r+0x1e>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_lseek_r+0x1e>
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	2000031c 	.word	0x2000031c

08007f24 <__swhatbuf_r>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	460e      	mov	r6, r1
 8007f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2c:	b096      	sub	sp, #88	; 0x58
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	da07      	bge.n	8007f46 <__swhatbuf_r+0x22>
 8007f36:	2300      	movs	r3, #0
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	89b3      	ldrh	r3, [r6, #12]
 8007f3c:	061a      	lsls	r2, r3, #24
 8007f3e:	d410      	bmi.n	8007f62 <__swhatbuf_r+0x3e>
 8007f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f44:	e00e      	b.n	8007f64 <__swhatbuf_r+0x40>
 8007f46:	466a      	mov	r2, sp
 8007f48:	f000 f8a4 	bl	8008094 <_fstat_r>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	dbf2      	blt.n	8007f36 <__swhatbuf_r+0x12>
 8007f50:	9a01      	ldr	r2, [sp, #4]
 8007f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f5a:	425a      	negs	r2, r3
 8007f5c:	415a      	adcs	r2, r3
 8007f5e:	602a      	str	r2, [r5, #0]
 8007f60:	e7ee      	b.n	8007f40 <__swhatbuf_r+0x1c>
 8007f62:	2340      	movs	r3, #64	; 0x40
 8007f64:	2000      	movs	r0, #0
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	b016      	add	sp, #88	; 0x58
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}

08007f6c <__smakebuf_r>:
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f70:	079d      	lsls	r5, r3, #30
 8007f72:	4606      	mov	r6, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	d507      	bpl.n	8007f88 <__smakebuf_r+0x1c>
 8007f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	2301      	movs	r3, #1
 8007f82:	6163      	str	r3, [r4, #20]
 8007f84:	b002      	add	sp, #8
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	ab01      	add	r3, sp, #4
 8007f8a:	466a      	mov	r2, sp
 8007f8c:	f7ff ffca 	bl	8007f24 <__swhatbuf_r>
 8007f90:	9900      	ldr	r1, [sp, #0]
 8007f92:	4605      	mov	r5, r0
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fac3 	bl	8007520 <_malloc_r>
 8007f9a:	b948      	cbnz	r0, 8007fb0 <__smakebuf_r+0x44>
 8007f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa0:	059a      	lsls	r2, r3, #22
 8007fa2:	d4ef      	bmi.n	8007f84 <__smakebuf_r+0x18>
 8007fa4:	f023 0303 	bic.w	r3, r3, #3
 8007fa8:	f043 0302 	orr.w	r3, r3, #2
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	e7e3      	b.n	8007f78 <__smakebuf_r+0xc>
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <__smakebuf_r+0x7c>)
 8007fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	6020      	str	r0, [r4, #0]
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	6120      	str	r0, [r4, #16]
 8007fc2:	6163      	str	r3, [r4, #20]
 8007fc4:	9b01      	ldr	r3, [sp, #4]
 8007fc6:	b15b      	cbz	r3, 8007fe0 <__smakebuf_r+0x74>
 8007fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f000 f873 	bl	80080b8 <_isatty_r>
 8007fd2:	b128      	cbz	r0, 8007fe0 <__smakebuf_r+0x74>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	431d      	orrs	r5, r3
 8007fe4:	81a5      	strh	r5, [r4, #12]
 8007fe6:	e7cd      	b.n	8007f84 <__smakebuf_r+0x18>
 8007fe8:	08006451 	.word	0x08006451

08007fec <memmove>:
 8007fec:	4288      	cmp	r0, r1
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	eb01 0302 	add.w	r3, r1, r2
 8007ff4:	d807      	bhi.n	8008006 <memmove+0x1a>
 8007ff6:	1e42      	subs	r2, r0, #1
 8007ff8:	4299      	cmp	r1, r3
 8007ffa:	d00a      	beq.n	8008012 <memmove+0x26>
 8007ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008000:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008004:	e7f8      	b.n	8007ff8 <memmove+0xc>
 8008006:	4283      	cmp	r3, r0
 8008008:	d9f5      	bls.n	8007ff6 <memmove+0xa>
 800800a:	1881      	adds	r1, r0, r2
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	42d3      	cmn	r3, r2
 8008010:	d100      	bne.n	8008014 <memmove+0x28>
 8008012:	bd10      	pop	{r4, pc}
 8008014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008018:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800801c:	e7f7      	b.n	800800e <memmove+0x22>

0800801e <__malloc_lock>:
 800801e:	4770      	bx	lr

08008020 <__malloc_unlock>:
 8008020:	4770      	bx	lr

08008022 <_realloc_r>:
 8008022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008024:	4607      	mov	r7, r0
 8008026:	4614      	mov	r4, r2
 8008028:	460e      	mov	r6, r1
 800802a:	b921      	cbnz	r1, 8008036 <_realloc_r+0x14>
 800802c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008030:	4611      	mov	r1, r2
 8008032:	f7ff ba75 	b.w	8007520 <_malloc_r>
 8008036:	b922      	cbnz	r2, 8008042 <_realloc_r+0x20>
 8008038:	f7ff fa26 	bl	8007488 <_free_r>
 800803c:	4625      	mov	r5, r4
 800803e:	4628      	mov	r0, r5
 8008040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008042:	f000 f849 	bl	80080d8 <_malloc_usable_size_r>
 8008046:	42a0      	cmp	r0, r4
 8008048:	d20f      	bcs.n	800806a <_realloc_r+0x48>
 800804a:	4621      	mov	r1, r4
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff fa67 	bl	8007520 <_malloc_r>
 8008052:	4605      	mov	r5, r0
 8008054:	2800      	cmp	r0, #0
 8008056:	d0f2      	beq.n	800803e <_realloc_r+0x1c>
 8008058:	4631      	mov	r1, r6
 800805a:	4622      	mov	r2, r4
 800805c:	f7fe fe02 	bl	8006c64 <memcpy>
 8008060:	4631      	mov	r1, r6
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff fa10 	bl	8007488 <_free_r>
 8008068:	e7e9      	b.n	800803e <_realloc_r+0x1c>
 800806a:	4635      	mov	r5, r6
 800806c:	e7e7      	b.n	800803e <_realloc_r+0x1c>
	...

08008070 <_read_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4605      	mov	r5, r0
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	2200      	movs	r2, #0
 800807a:	4c05      	ldr	r4, [pc, #20]	; (8008090 <_read_r+0x20>)
 800807c:	6022      	str	r2, [r4, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7f9 f83e 	bl	8001100 <_read>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_read_r+0x1e>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	b103      	cbz	r3, 800808e <_read_r+0x1e>
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	2000031c 	.word	0x2000031c

08008094 <_fstat_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	2300      	movs	r3, #0
 8008098:	4c06      	ldr	r4, [pc, #24]	; (80080b4 <_fstat_r+0x20>)
 800809a:	4605      	mov	r5, r0
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	f7f9 f871 	bl	8001188 <_fstat>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d102      	bne.n	80080b0 <_fstat_r+0x1c>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	b103      	cbz	r3, 80080b0 <_fstat_r+0x1c>
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	bd38      	pop	{r3, r4, r5, pc}
 80080b2:	bf00      	nop
 80080b4:	2000031c 	.word	0x2000031c

080080b8 <_isatty_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	2300      	movs	r3, #0
 80080bc:	4c05      	ldr	r4, [pc, #20]	; (80080d4 <_isatty_r+0x1c>)
 80080be:	4605      	mov	r5, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	f7f9 f86f 	bl	80011a6 <_isatty>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_isatty_r+0x1a>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_isatty_r+0x1a>
 80080d0:	602b      	str	r3, [r5, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	2000031c 	.word	0x2000031c

080080d8 <_malloc_usable_size_r>:
 80080d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080dc:	1f18      	subs	r0, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bfbc      	itt	lt
 80080e2:	580b      	ldrlt	r3, [r1, r0]
 80080e4:	18c0      	addlt	r0, r0, r3
 80080e6:	4770      	bx	lr

080080e8 <_init>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr

080080f4 <_fini>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	bf00      	nop
 80080f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fa:	bc08      	pop	{r3}
 80080fc:	469e      	mov	lr, r3
 80080fe:	4770      	bx	lr
