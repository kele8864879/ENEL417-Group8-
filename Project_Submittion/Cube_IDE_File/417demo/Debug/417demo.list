
417demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800b900  0800b900  0001b900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be38  0800be38  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800be38  0800be38  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be38  0800be38  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800be40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200001e8  0800c028  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800c028  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128cf  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d7f  00000000  00000000  00032ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00035860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a8de  00000000  00000000  00037a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010903  00000000  00000000  0005236e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000936a5  00000000  00000000  00062c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6316  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d10  00000000  00000000  000f6394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b8e8 	.word	0x0800b8e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b8e8 	.word	0x0800b8e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <MX_ADC1_Init+0xd4>)
 8001164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001166:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001170:	2201      	movs	r2, #1
 8001172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001176:	2200      	movs	r2, #0
 8001178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_ADC1_Init+0xd0>)
 800117c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_ADC1_Init+0xd0>)
 800118a:	2204      	movs	r2, #4
 800118c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118e:	4824      	ldr	r0, [pc, #144]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001190:	f002 fb68 	bl	8003864 <HAL_ADC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800119a:	f001 fee9 	bl	8002f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80011a6:	2305      	movs	r3, #5
 80011a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_ADC1_Init+0xd0>)
 80011b0:	f002 fede 	bl	8003f70 <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f001 fed9 	bl	8002f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011be:	2301      	movs	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80011c6:	2306      	movs	r3, #6
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <MX_ADC1_Init+0xd0>)
 80011d0:	f002 fece 	bl	8003f70 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011da:	f001 fec9 	bl	8002f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011de:	2306      	movs	r3, #6
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011e2:	2303      	movs	r3, #3
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_ADC1_Init+0xd0>)
 80011ec:	f002 fec0 	bl	8003f70 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011f6:	f001 febb 	bl	8002f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011fa:	2307      	movs	r3, #7
 80011fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011fe:	2304      	movs	r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_ADC1_Init+0xd0>)
 8001208:	f002 feb2 	bl	8003f70 <HAL_ADC_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001212:	f001 fead 	bl	8002f70 <Error_Handler>
  }

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000248 	.word	0x20000248
 8001224:	40012400 	.word	0x40012400

08001228 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_ADC2_Init+0x74>)
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <MX_ADC2_Init+0x78>)
 800123c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_ADC2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_ADC2_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_ADC2_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_ADC2_Init+0x74>)
 8001252:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001256:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_ADC2_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_ADC2_Init+0x74>)
 8001260:	2201      	movs	r2, #1
 8001262:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_ADC2_Init+0x74>)
 8001266:	f002 fafd 	bl	8003864 <HAL_ADC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001270:	f001 fe7e 	bl	8002f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001274:	2304      	movs	r3, #4
 8001276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001278:	2301      	movs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_ADC2_Init+0x74>)
 8001286:	f002 fe73 	bl	8003f70 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001290:	f001 fe6e 	bl	8002f70 <Error_Handler>
  }

}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000218 	.word	0x20000218
 80012a0:	40012800 	.word	0x40012800

080012a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_ADC_MspInit+0x10c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d14a      	bne.n	800135a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80012f4:	23c3      	movs	r3, #195	; 0xc3
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4619      	mov	r1, r3
 8001302:	482d      	ldr	r0, [pc, #180]	; (80013b8 <HAL_ADC_MspInit+0x114>)
 8001304:	f003 fb9c 	bl	8004a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_ADC_MspInit+0x118>)
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <HAL_ADC_MspInit+0x11c>)
 800130c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_ADC_MspInit+0x118>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001326:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_ADC_MspInit+0x118>)
 800132a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800132e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001332:	2220      	movs	r2, #32
 8001334:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800133c:	481f      	ldr	r0, [pc, #124]	; (80013bc <HAL_ADC_MspInit+0x118>)
 800133e:	f003 f91b 	bl	8004578 <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001348:	f001 fe12 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001350:	621a      	str	r2, [r3, #32]
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_ADC_MspInit+0x118>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001358:	e026      	b.n	80013a8 <HAL_ADC_MspInit+0x104>
  else if(adcHandle->Instance==ADC2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_ADC_MspInit+0x120>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d121      	bne.n	80013a8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_ADC_MspInit+0x110>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001394:	2310      	movs	r3, #16
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_ADC_MspInit+0x114>)
 80013a4:	f003 fb4c 	bl	8004a40 <HAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40012400 	.word	0x40012400
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010800 	.word	0x40010800
 80013bc:	20000278 	.word	0x20000278
 80013c0:	40020008 	.word	0x40020008
 80013c4:	40012800 	.word	0x40012800

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_DMA_Init+0x38>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <MX_DMA_Init+0x38>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_DMA_Init+0x38>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	200b      	movs	r0, #11
 80013ec:	f003 f88d 	bl	800450a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f0:	200b      	movs	r0, #11
 80013f2:	f003 f8a6 	bl	8004542 <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <MX_GPIO_Init+0x10c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <MX_GPIO_Init+0x10c>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b37      	ldr	r3, [pc, #220]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a36      	ldr	r2, [pc, #216]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <MX_GPIO_Init+0x10c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_GPIO_Init+0x10c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <MX_GPIO_Init+0x10c>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MX_GPIO_Init+0x10c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001478:	2200      	movs	r2, #0
 800147a:	213e      	movs	r1, #62	; 0x3e
 800147c:	4825      	ldr	r0, [pc, #148]	; (8001514 <MX_GPIO_Init+0x110>)
 800147e:	f003 fc50 	bl	8004d22 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 8001488:	4823      	ldr	r0, [pc, #140]	; (8001518 <MX_GPIO_Init+0x114>)
 800148a:	f003 fc4a 	bl	8004d22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2130      	movs	r1, #48	; 0x30
 8001492:	4822      	ldr	r0, [pc, #136]	; (800151c <MX_GPIO_Init+0x118>)
 8001494:	f003 fc45 	bl	8004d22 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001498:	233e      	movs	r3, #62	; 0x3e
 800149a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4819      	ldr	r0, [pc, #100]	; (8001514 <MX_GPIO_Init+0x110>)
 80014b0:	f003 fac6 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014b4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <MX_GPIO_Init+0x110>)
 80014ca:	f003 fab9 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80014ce:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_GPIO_Init+0x114>)
 80014e8:	f003 faaa 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014ec:	2330      	movs	r3, #48	; 0x30
 80014ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_GPIO_Init+0x118>)
 8001504:	f003 fa9c 	bl	8004a40 <HAL_GPIO_Init>

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40011000 	.word	0x40011000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00

08001520 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f023 030f 	bic.w	r3, r3, #15
 8001530:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f043 030c 	orr.w	r3, r3, #12
 800153e:	b2db      	uxtb	r3, r3
 8001540:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	b2db      	uxtb	r3, r3
 800154a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	f043 030c 	orr.w	r3, r3, #12
 8001552:	b2db      	uxtb	r3, r3
 8001554:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001556:	7bbb      	ldrb	r3, [r7, #14]
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	b2db      	uxtb	r3, r3
 800155e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001560:	f107 0208 	add.w	r2, r7, #8
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2304      	movs	r3, #4
 800156a:	214e      	movs	r1, #78	; 0x4e
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <lcd_send_cmd+0x5c>)
 800156e:	f003 fd29 	bl	8004fc4 <HAL_I2C_Master_Transmit>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002bc 	.word	0x200002bc

08001580 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f023 030f 	bic.w	r3, r3, #15
 8001590:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	f043 030d 	orr.w	r3, r3, #13
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f043 0309 	orr.w	r3, r3, #9
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	f043 030d 	orr.w	r3, r3, #13
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	f043 0309 	orr.w	r3, r3, #9
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2304      	movs	r3, #4
 80015ca:	214e      	movs	r1, #78	; 0x4e
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <lcd_send_data+0x5c>)
 80015ce:	f003 fcf9 	bl	8004fc4 <HAL_I2C_Master_Transmit>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002bc 	.word	0x200002bc

080015e0 <lcd_clear>:

void lcd_clear (void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80015e6:	2080      	movs	r0, #128	; 0x80
 80015e8:	f7ff ff9a 	bl	8001520 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e005      	b.n	80015fe <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80015f2:	2020      	movs	r0, #32
 80015f4:	f7ff ffc4 	bl	8001580 <lcd_send_data>
	for (int i=0; i<70; i++)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3301      	adds	r3, #1
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b45      	cmp	r3, #69	; 0x45
 8001602:	ddf6      	ble.n	80015f2 <lcd_clear+0x12>
	}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    switch (row)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <lcd_put_cur+0x16>
 800161c:	2b01      	cmp	r3, #1
 800161e:	d005      	beq.n	800162c <lcd_put_cur+0x20>
 8001620:	e009      	b.n	8001636 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	603b      	str	r3, [r7, #0]
            break;
 800162a:	e004      	b.n	8001636 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001632:	603b      	str	r3, [r7, #0]
            break;
 8001634:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff70 	bl	8001520 <lcd_send_cmd>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <lcd_init>:


void lcd_init (void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800164c:	2032      	movs	r0, #50	; 0x32
 800164e:	f002 f8e7 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001652:	2030      	movs	r0, #48	; 0x30
 8001654:	f7ff ff64 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001658:	2005      	movs	r0, #5
 800165a:	f002 f8e1 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x30);
 800165e:	2030      	movs	r0, #48	; 0x30
 8001660:	f7ff ff5e 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001664:	2001      	movs	r0, #1
 8001666:	f002 f8db 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x30);
 800166a:	2030      	movs	r0, #48	; 0x30
 800166c:	f7ff ff58 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(10);
 8001670:	200a      	movs	r0, #10
 8001672:	f002 f8d5 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001676:	2020      	movs	r0, #32
 8001678:	f7ff ff52 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f002 f8cf 	bl	8003820 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001682:	2028      	movs	r0, #40	; 0x28
 8001684:	f7ff ff4c 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f002 f8c9 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800168e:	2008      	movs	r0, #8
 8001690:	f7ff ff46 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f002 f8c3 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800169a:	2001      	movs	r0, #1
 800169c:	f7ff ff40 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f002 f8bd 	bl	8003820 <HAL_Delay>
	HAL_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f002 f8ba 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80016ac:	2006      	movs	r0, #6
 80016ae:	f7ff ff37 	bl	8001520 <lcd_send_cmd>
	HAL_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f002 f8b4 	bl	8003820 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80016b8:	200c      	movs	r0, #12
 80016ba:	f7ff ff31 	bl	8001520 <lcd_send_cmd>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80016ca:	e006      	b.n	80016da <lcd_send_string+0x18>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff53 	bl	8001580 <lcd_send_data>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f4      	bne.n	80016cc <lcd_send_string+0xa>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C1_Init+0x50>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <MX_I2C1_Init+0x54>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C1_Init+0x50>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_I2C1_Init+0x58>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_I2C1_Init+0x50>)
 800170a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_I2C1_Init+0x50>)
 800172a:	f003 fb13 	bl	8004d54 <HAL_I2C_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001734:	f001 fc1c 	bl	8002f70 <Error_Handler>
  }

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002bc 	.word	0x200002bc
 8001740:	40005400 	.word	0x40005400
 8001744:	000186a0 	.word	0x000186a0

08001748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_I2C_MspInit+0x70>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d123      	bne.n	80017b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_I2C_MspInit+0x74>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001780:	23c0      	movs	r3, #192	; 0xc0
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001784:	2312      	movs	r3, #18
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 8001794:	f003 f954 	bl	8004a40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a2:	61d3      	str	r3, [r2, #28]
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_I2C_MspInit+0x74>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010c00 	.word	0x40010c00

080017c4 <read_keypad>:

#include "main.h"
#include "keypad.h"

char read_keypad (void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin (C1_PORT, C1_PIN, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2102      	movs	r1, #2
 80017cc:	48ba      	ldr	r0, [pc, #744]	; (8001ab8 <read_keypad+0x2f4>)
 80017ce:	f003 faa8 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C2_PORT, C2_PIN, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2110      	movs	r1, #16
 80017d6:	48b8      	ldr	r0, [pc, #736]	; (8001ab8 <read_keypad+0x2f4>)
 80017d8:	f003 faa3 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C3_PORT, C3_PIN, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2108      	movs	r1, #8
 80017e0:	48b5      	ldr	r0, [pc, #724]	; (8001ab8 <read_keypad+0x2f4>)
 80017e2:	f003 fa9e 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C4_PORT, C4_PIN, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2104      	movs	r1, #4
 80017ea:	48b3      	ldr	r0, [pc, #716]	; (8001ab8 <read_keypad+0x2f4>)
 80017ec:	f003 fa99 	bl	8004d22 <HAL_GPIO_WritePin>

    if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 80017f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f4:	48b0      	ldr	r0, [pc, #704]	; (8001ab8 <read_keypad+0x2f4>)
 80017f6:	f003 fa7d 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10a      	bne.n	8001816 <read_keypad+0x52>
    {
    	while(HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 8001800:	bf00      	nop
 8001802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001806:	48ac      	ldr	r0, [pc, #688]	; (8001ab8 <read_keypad+0x2f4>)
 8001808:	f003 fa74 	bl	8004cf4 <HAL_GPIO_ReadPin>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d0f7      	beq.n	8001802 <read_keypad+0x3e>
    	{

    	}
	    return '1';
 8001812:	2331      	movs	r3, #49	; 0x31
 8001814:	e14d      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	48a7      	ldr	r0, [pc, #668]	; (8001ab8 <read_keypad+0x2f4>)
 800181c:	f003 fa6a 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10a      	bne.n	800183c <read_keypad+0x78>
    {
    	while(HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 8001826:	bf00      	nop
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	48a2      	ldr	r0, [pc, #648]	; (8001ab8 <read_keypad+0x2f4>)
 800182e:	f003 fa61 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d0f7      	beq.n	8001828 <read_keypad+0x64>
    	{

    	}
	    return '4';
 8001838:	2334      	movs	r3, #52	; 0x34
 800183a:	e13a      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	489e      	ldr	r0, [pc, #632]	; (8001ab8 <read_keypad+0x2f4>)
 8001840:	f003 fa58 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	d109      	bne.n	800185e <read_keypad+0x9a>
    {
    	while(HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 800184a:	bf00      	nop
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	489a      	ldr	r0, [pc, #616]	; (8001ab8 <read_keypad+0x2f4>)
 8001850:	f003 fa50 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b01      	cmp	r3, #1
 8001858:	d0f8      	beq.n	800184c <read_keypad+0x88>
    	{

    	}
	    return '7';
 800185a:	2337      	movs	r3, #55	; 0x37
 800185c:	e129      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	4895      	ldr	r0, [pc, #596]	; (8001ab8 <read_keypad+0x2f4>)
 8001862:	f003 fa47 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d109      	bne.n	8001880 <read_keypad+0xbc>
        {
    	   while(HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 800186c:	bf00      	nop
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	4891      	ldr	r0, [pc, #580]	; (8001ab8 <read_keypad+0x2f4>)
 8001872:	f003 fa3f 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d0f8      	beq.n	800186e <read_keypad+0xaa>
    	   {

    	   }
    	   return '*';
 800187c:	232a      	movs	r3, #42	; 0x2a
 800187e:	e118      	b.n	8001ab2 <read_keypad+0x2ee>

    	}

	HAL_GPIO_WritePin (C1_PORT, C1_PIN, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2102      	movs	r1, #2
 8001884:	488c      	ldr	r0, [pc, #560]	; (8001ab8 <read_keypad+0x2f4>)
 8001886:	f003 fa4c 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C2_PORT, C2_PIN, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2110      	movs	r1, #16
 800188e:	488a      	ldr	r0, [pc, #552]	; (8001ab8 <read_keypad+0x2f4>)
 8001890:	f003 fa47 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C3_PORT, C3_PIN, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2108      	movs	r1, #8
 8001898:	4887      	ldr	r0, [pc, #540]	; (8001ab8 <read_keypad+0x2f4>)
 800189a:	f003 fa42 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C4_PORT, C4_PIN, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2104      	movs	r1, #4
 80018a2:	4885      	ldr	r0, [pc, #532]	; (8001ab8 <read_keypad+0x2f4>)
 80018a4:	f003 fa3d 	bl	8004d22 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 80018a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ac:	4882      	ldr	r0, [pc, #520]	; (8001ab8 <read_keypad+0x2f4>)
 80018ae:	f003 fa21 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10a      	bne.n	80018ce <read_keypad+0x10a>
	{
		   while(HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 80018b8:	bf00      	nop
 80018ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018be:	487e      	ldr	r0, [pc, #504]	; (8001ab8 <read_keypad+0x2f4>)
 80018c0:	f003 fa18 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d0f7      	beq.n	80018ba <read_keypad+0xf6>
		   {

		   }
	       return '2';
 80018ca:	2332      	movs	r3, #50	; 0x32
 80018cc:	e0f1      	b.n	8001ab2 <read_keypad+0x2ee>
	}
    if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 80018ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d2:	4879      	ldr	r0, [pc, #484]	; (8001ab8 <read_keypad+0x2f4>)
 80018d4:	f003 fa0e 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d10a      	bne.n	80018f4 <read_keypad+0x130>
    {
    	   while(HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 80018de:	bf00      	nop
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	4874      	ldr	r0, [pc, #464]	; (8001ab8 <read_keypad+0x2f4>)
 80018e6:	f003 fa05 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d0f7      	beq.n	80018e0 <read_keypad+0x11c>
    	   {

    	   }

	       return '5';
 80018f0:	2335      	movs	r3, #53	; 0x35
 80018f2:	e0de      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	4870      	ldr	r0, [pc, #448]	; (8001ab8 <read_keypad+0x2f4>)
 80018f8:	f003 f9fc 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d109      	bne.n	8001916 <read_keypad+0x152>
    {
    	while(HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 8001902:	bf00      	nop
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	486c      	ldr	r0, [pc, #432]	; (8001ab8 <read_keypad+0x2f4>)
 8001908:	f003 f9f4 	bl	8004cf4 <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	d0f8      	beq.n	8001904 <read_keypad+0x140>
    	{

    	}
	      return '8';
 8001912:	2338      	movs	r3, #56	; 0x38
 8001914:	e0cd      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	4867      	ldr	r0, [pc, #412]	; (8001ab8 <read_keypad+0x2f4>)
 800191a:	f003 f9eb 	bl	8004cf4 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d109      	bne.n	8001938 <read_keypad+0x174>
    {
    	while(HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 8001924:	bf00      	nop
 8001926:	2140      	movs	r1, #64	; 0x40
 8001928:	4863      	ldr	r0, [pc, #396]	; (8001ab8 <read_keypad+0x2f4>)
 800192a:	f003 f9e3 	bl	8004cf4 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d0f8      	beq.n	8001926 <read_keypad+0x162>
    	{

    	}

        return '0';
 8001934:	2330      	movs	r3, #48	; 0x30
 8001936:	e0bc      	b.n	8001ab2 <read_keypad+0x2ee>

    }


	HAL_GPIO_WritePin (C1_PORT, C1_PIN, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	485e      	ldr	r0, [pc, #376]	; (8001ab8 <read_keypad+0x2f4>)
 800193e:	f003 f9f0 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C2_PORT, C2_PIN, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	485c      	ldr	r0, [pc, #368]	; (8001ab8 <read_keypad+0x2f4>)
 8001948:	f003 f9eb 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C3_PORT, C3_PIN, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2108      	movs	r1, #8
 8001950:	4859      	ldr	r0, [pc, #356]	; (8001ab8 <read_keypad+0x2f4>)
 8001952:	f003 f9e6 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C4_PORT, C4_PIN, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2104      	movs	r1, #4
 800195a:	4857      	ldr	r0, [pc, #348]	; (8001ab8 <read_keypad+0x2f4>)
 800195c:	f003 f9e1 	bl	8004d22 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 8001960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001964:	4854      	ldr	r0, [pc, #336]	; (8001ab8 <read_keypad+0x2f4>)
 8001966:	f003 f9c5 	bl	8004cf4 <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10a      	bne.n	8001986 <read_keypad+0x1c2>
	{
    	   while(HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 8001970:	bf00      	nop
 8001972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001976:	4850      	ldr	r0, [pc, #320]	; (8001ab8 <read_keypad+0x2f4>)
 8001978:	f003 f9bc 	bl	8004cf4 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	d0f7      	beq.n	8001972 <read_keypad+0x1ae>
    	   {

    	   }
	       return '3';
 8001982:	2333      	movs	r3, #51	; 0x33
 8001984:	e095      	b.n	8001ab2 <read_keypad+0x2ee>
	}
    if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 8001986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198a:	484b      	ldr	r0, [pc, #300]	; (8001ab8 <read_keypad+0x2f4>)
 800198c:	f003 f9b2 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10a      	bne.n	80019ac <read_keypad+0x1e8>
    {
    	   while(HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 8001996:	bf00      	nop
 8001998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199c:	4846      	ldr	r0, [pc, #280]	; (8001ab8 <read_keypad+0x2f4>)
 800199e:	f003 f9a9 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d0f7      	beq.n	8001998 <read_keypad+0x1d4>
    	   {

    	   }
	       return '6';
 80019a8:	2336      	movs	r3, #54	; 0x36
 80019aa:	e082      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	4842      	ldr	r0, [pc, #264]	; (8001ab8 <read_keypad+0x2f4>)
 80019b0:	f003 f9a0 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d109      	bne.n	80019ce <read_keypad+0x20a>
    {
    	  while(HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 80019ba:	bf00      	nop
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	483e      	ldr	r0, [pc, #248]	; (8001ab8 <read_keypad+0x2f4>)
 80019c0:	f003 f998 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d0f8      	beq.n	80019bc <read_keypad+0x1f8>
    	 {

    	 }
	      return '9';
 80019ca:	2339      	movs	r3, #57	; 0x39
 80019cc:	e071      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 80019ce:	2140      	movs	r1, #64	; 0x40
 80019d0:	4839      	ldr	r0, [pc, #228]	; (8001ab8 <read_keypad+0x2f4>)
 80019d2:	f003 f98f 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d109      	bne.n	80019f0 <read_keypad+0x22c>
    {
    	while(HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 80019dc:	bf00      	nop
 80019de:	2140      	movs	r1, #64	; 0x40
 80019e0:	4835      	ldr	r0, [pc, #212]	; (8001ab8 <read_keypad+0x2f4>)
 80019e2:	f003 f987 	bl	8004cf4 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d0f8      	beq.n	80019de <read_keypad+0x21a>
    	{

    	}
        return '#';
 80019ec:	2323      	movs	r3, #35	; 0x23
 80019ee:	e060      	b.n	8001ab2 <read_keypad+0x2ee>

    }


	HAL_GPIO_WritePin (C1_PORT, C1_PIN, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2102      	movs	r1, #2
 80019f4:	4830      	ldr	r0, [pc, #192]	; (8001ab8 <read_keypad+0x2f4>)
 80019f6:	f003 f994 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C2_PORT, C2_PIN, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2110      	movs	r1, #16
 80019fe:	482e      	ldr	r0, [pc, #184]	; (8001ab8 <read_keypad+0x2f4>)
 8001a00:	f003 f98f 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C3_PORT, C3_PIN, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2108      	movs	r1, #8
 8001a08:	482b      	ldr	r0, [pc, #172]	; (8001ab8 <read_keypad+0x2f4>)
 8001a0a:	f003 f98a 	bl	8004d22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (C4_PORT, C4_PIN, GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2104      	movs	r1, #4
 8001a12:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <read_keypad+0x2f4>)
 8001a14:	f003 f985 	bl	8004d22 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 8001a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a1c:	4826      	ldr	r0, [pc, #152]	; (8001ab8 <read_keypad+0x2f4>)
 8001a1e:	f003 f969 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10a      	bne.n	8001a3e <read_keypad+0x27a>
	{
    	   while(HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == 1)
 8001a28:	bf00      	nop
 8001a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2e:	4822      	ldr	r0, [pc, #136]	; (8001ab8 <read_keypad+0x2f4>)
 8001a30:	f003 f960 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d0f7      	beq.n	8001a2a <read_keypad+0x266>
    	   {

    	   }
	       return 'A';
 8001a3a:	2341      	movs	r3, #65	; 0x41
 8001a3c:	e039      	b.n	8001ab2 <read_keypad+0x2ee>
	}
    if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 8001a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a42:	481d      	ldr	r0, [pc, #116]	; (8001ab8 <read_keypad+0x2f4>)
 8001a44:	f003 f956 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10a      	bne.n	8001a64 <read_keypad+0x2a0>
    {
    	   while(HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == 1)
 8001a4e:	bf00      	nop
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <read_keypad+0x2f4>)
 8001a56:	f003 f94d 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d0f7      	beq.n	8001a50 <read_keypad+0x28c>
    	   {

    	   }
	       return 'B';
 8001a60:	2342      	movs	r3, #66	; 0x42
 8001a62:	e026      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <read_keypad+0x2f4>)
 8001a68:	f003 f944 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d109      	bne.n	8001a86 <read_keypad+0x2c2>
    {
    	while(HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == 1)
 8001a72:	bf00      	nop
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <read_keypad+0x2f4>)
 8001a78:	f003 f93c 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d0f8      	beq.n	8001a74 <read_keypad+0x2b0>
    	{

    	}
	      return 'C';
 8001a82:	2343      	movs	r3, #67	; 0x43
 8001a84:	e015      	b.n	8001ab2 <read_keypad+0x2ee>

	}

    if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <read_keypad+0x2f4>)
 8001a8a:	f003 f933 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d109      	bne.n	8001aa8 <read_keypad+0x2e4>
    {
    	while(HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == 1)
 8001a94:	bf00      	nop
 8001a96:	2140      	movs	r1, #64	; 0x40
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <read_keypad+0x2f4>)
 8001a9a:	f003 f92b 	bl	8004cf4 <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d0f8      	beq.n	8001a96 <read_keypad+0x2d2>
    	{

    	}
        return  'D';
 8001aa4:	2344      	movs	r3, #68	; 0x44
 8001aa6:	e004      	b.n	8001ab2 <read_keypad+0x2ee>

    }

    return NO_KEY='E';
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <read_keypad+0x2f8>)
 8001aaa:	2245      	movs	r2, #69	; 0x45
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	4b03      	ldr	r3, [pc, #12]	; (8001abc <read_keypad+0x2f8>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	20000310 	.word	0x20000310

08001ac0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
 8001ac8:	1d39      	adds	r1, r7, #4
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <__io_putchar+0x20>)
 8001ad2:	f005 f910 	bl	8006cf6 <HAL_UART_Transmit>
    return ch;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000538 	.word	0x20000538

08001ae4 <Humidity_Read>:
*/



void Humidity_Read(void)
{
 8001ae4:	b598      	push	{r3, r4, r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	               humidity= adc_buf[2];//读取湿度
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <Humidity_Read+0xfc>)
 8001aea:	889b      	ldrh	r3, [r3, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f8f1 	bl	8000cd4 <__aeabi_ui2f>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <Humidity_Read+0x100>)
 8001af6:	601a      	str	r2, [r3, #0]
	               humidity1=adc_buf[3];
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <Humidity_Read+0xfc>)
 8001afa:	88db      	ldrh	r3, [r3, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f8e9 	bl	8000cd4 <__aeabi_ui2f>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <Humidity_Read+0x104>)
 8001b06:	601a      	str	r2, [r3, #0]
	               avg_humidity=(humidity+humidity1)/2;
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <Humidity_Read+0x100>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <Humidity_Read+0x104>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f7ff f82e 	bl	8000b74 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f9e4 	bl	8000eec <__aeabi_fdiv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <Humidity_Read+0x108>)
 8001b2a:	601a      	str	r2, [r3, #0]
	             //  printf(" humidity is %.1f v\t\r\n",humidity);
	            //   printf(" humidity is %.1f v\t\r\n",humidity1);
			       if(avg_humidity>air_humidity)//读取的温度与比较空气湿度比较
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <Humidity_Read+0x108>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <Humidity_Read+0x10c>)
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fae1 	bl	80010fc <__aeabi_fcmpgt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <Humidity_Read+0x66>
			       {
			    	   avg_humidity=0;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <Humidity_Read+0x108>)
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e03a      	b.n	8001bc0 <Humidity_Read+0xdc>
			       }

			       else if( water_humidity<humidity&&humidity< air_humidity)//读取的湿度与空气湿度和水里的湿度比较
 8001b4a:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <Humidity_Read+0x110>)
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <Humidity_Read+0x100>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7ff fab4 	bl	80010c0 <__aeabi_fcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d02d      	beq.n	8001bba <Humidity_Read+0xd6>
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <Humidity_Read+0x100>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <Humidity_Read+0x10c>)
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff faaa 	bl	80010c0 <__aeabi_fcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d023      	beq.n	8001bba <Humidity_Read+0xd6>
			       {
			    	   avg_humidity=(1-(avg_humidity-water_humidity)/(air_humidity-water_humidity))*100;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <Humidity_Read+0x108>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <Humidity_Read+0x110>)
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fff8 	bl	8000b70 <__aeabi_fsub>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461c      	mov	r4, r3
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <Humidity_Read+0x10c>)
 8001b86:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <Humidity_Read+0x110>)
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fff0 	bl	8000b70 <__aeabi_fsub>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4619      	mov	r1, r3
 8001b94:	4620      	mov	r0, r4
 8001b96:	f7ff f9a9 	bl	8000eec <__aeabi_fdiv>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ba2:	f7fe ffe5 	bl	8000b70 <__aeabi_fsub>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <Humidity_Read+0x114>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f8ea 	bl	8000d84 <__aeabi_fmul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <Humidity_Read+0x108>)
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e002      	b.n	8001bc0 <Humidity_Read+0xdc>
			       }
			       else
			       {
			    	   avg_humidity=100;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <Humidity_Read+0x108>)
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <Humidity_Read+0x114>)
 8001bbe:	601a      	str	r2, [r3, #0]
			       }
			       sprintf(RH,"%.1f%%", avg_humidity);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <Humidity_Read+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc2f 	bl	8000428 <__aeabi_f2d>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <Humidity_Read+0x118>)
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <Humidity_Read+0x11c>)
 8001bd6:	f006 faf5 	bl	80081c4 <siprintf>

}
 8001bda:	bf00      	nop
 8001bdc:	bd98      	pop	{r3, r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000414 	.word	0x20000414
 8001be4:	20000400 	.word	0x20000400
 8001be8:	200003f8 	.word	0x200003f8
 8001bec:	200003e8 	.word	0x200003e8
 8001bf0:	45548000 	.word	0x45548000
 8001bf4:	44d20000 	.word	0x44d20000
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	0800b900 	.word	0x0800b900
 8001c00:	200003ec 	.word	0x200003ec

08001c04 <humidity_run>:

void humidity_run()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
			       if((avg_humidity<target_RH)||(pump_flag==1))
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <humidity_run+0x60>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <humidity_run+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f7ff fa54 	bl	80010c0 <__aeabi_fcmplt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <humidity_run+0x22>
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <humidity_run+0x68>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d106      	bne.n	8001c34 <humidity_run+0x30>
			       {
			    	   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2c:	4810      	ldr	r0, [pc, #64]	; (8001c70 <humidity_run+0x6c>)
 8001c2e:	f003 f878 	bl	8004d22 <HAL_GPIO_WritePin>
			       else if(avg_humidity>=target_RH||pump_flag==0)
				   {
			    	   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
				   }

}
 8001c32:	e014      	b.n	8001c5e <humidity_run+0x5a>
			       else if(avg_humidity>=target_RH||pump_flag==0)
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <humidity_run+0x60>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <humidity_run+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	f7ff fa52 	bl	80010e8 <__aeabi_fcmpge>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <humidity_run+0x4e>
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <humidity_run+0x68>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <humidity_run+0x5a>
			    	   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c58:	4805      	ldr	r0, [pc, #20]	; (8001c70 <humidity_run+0x6c>)
 8001c5a:	f003 f862 	bl	8004d22 <HAL_GPIO_WritePin>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200003e8 	.word	0x200003e8
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000204 	.word	0x20000204
 8001c70:	40010800 	.word	0x40010800

08001c74 <set_humidity_mode>:
void set_humidity_mode()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

	if(key=='A')
 8001c7a:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b41      	cmp	r3, #65	; 0x41
 8001c80:	f040 80a2 	bne.w	8001dc8 <set_humidity_mode+0x154>
	{
					  int i=0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
					  int temp=1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
					  lcd_clear();
 8001c8c:	f7ff fca8 	bl	80015e0 <lcd_clear>
					  lcd_put_cur(0,0);
 8001c90:	2100      	movs	r1, #0
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fcba 	bl	800160c <lcd_put_cur>
					  lcd_send_string("set humidity mode");
 8001c98:	484e      	ldr	r0, [pc, #312]	; (8001dd4 <set_humidity_mode+0x160>)
 8001c9a:	f7ff fd12 	bl	80016c2 <lcd_send_string>
					  lcd_put_cur(1,0);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fcb3 	bl	800160c <lcd_put_cur>
					  lcd_send_string("enter value:");
 8001ca6:	484c      	ldr	r0, [pc, #304]	; (8001dd8 <set_humidity_mode+0x164>)
 8001ca8:	f7ff fd0b 	bl	80016c2 <lcd_send_string>
					  while(key!='*')
 8001cac:	e07e      	b.n	8001dac <set_humidity_mode+0x138>
					  {
					 	 key=read_keypad();
 8001cae:	f7ff fd89 	bl	80017c4 <read_keypad>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001cb8:	701a      	strb	r2, [r3, #0]
					 	 target_RH=0;
 8001cba:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <set_humidity_mode+0x168>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
					 	 if(key!='E')
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b45      	cmp	r3, #69	; 0x45
 8001cc8:	d00e      	beq.n	8001ce8 <set_humidity_mode+0x74>
					 	  {
					 	    lcd_send_data(key);
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fc56 	bl	8001580 <lcd_send_data>
					 	    set_humidity[i]=key;
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001cd6:	7819      	ldrb	r1, [r3, #0]
 8001cd8:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <set_humidity_mode+0x16c>)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	4413      	add	r3, r2
 8001cde:	460a      	mov	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
					 	    i++;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
					 	  }
					 	  HAL_Delay(1000);
 8001ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cec:	f001 fd98 	bl	8003820 <HAL_Delay>

					 	  if(key=='*')
 8001cf0:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf6:	d159      	bne.n	8001dac <set_humidity_mode+0x138>
					 	  {
					 	     int counter=0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
					 	     int flag=0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
					 	     while(set_humidity[flag]!='*')
 8001d00:	e005      	b.n	8001d0e <set_humidity_mode+0x9a>
					 	     {
					 	    	   flag++;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
					 	    	   counter++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
					 	     while(set_humidity[flag]!='*')
 8001d0e:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <set_humidity_mode+0x16c>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b2a      	cmp	r3, #42	; 0x2a
 8001d18:	d1f3      	bne.n	8001d02 <set_humidity_mode+0x8e>
					 	     }
					 	    for(int j=0;j<=counter-1;j++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	e020      	b.n	8001d62 <set_humidity_mode+0xee>
					 	    {
					 	    	target_RH+=(set_humidity[counter-1-j]-'0')*temp;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <set_humidity_mode+0x16c>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	3b30      	subs	r3, #48	; 0x30
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe ffd1 	bl	8000cdc <__aeabi_i2f>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <set_humidity_mode+0x168>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7fe ff16 	bl	8000b74 <__addsf3>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <set_humidity_mode+0x168>)
 8001d4e:	601a      	str	r2, [r3, #0]
					 	    	temp=temp*10;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
					 	    for(int j=0;j<=counter-1;j++)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	ddd9      	ble.n	8001d20 <set_humidity_mode+0xac>
					 	    }

					 	    	 lcd_clear();
 8001d6c:	f7ff fc38 	bl	80015e0 <lcd_clear>
					 	    	 lcd_put_cur(0,0);
 8001d70:	2100      	movs	r1, #0
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fc4a 	bl	800160c <lcd_put_cur>
					 	    	 if(target_RH>100||target_RH<0)
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <set_humidity_mode+0x168>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4919      	ldr	r1, [pc, #100]	; (8001de4 <set_humidity_mode+0x170>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9bc 	bl	80010fc <__aeabi_fcmpgt>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <set_humidity_mode+0x12c>
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <set_humidity_mode+0x168>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f994 	bl	80010c0 <__aeabi_fcmplt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d100      	bne.n	8001da0 <set_humidity_mode+0x12c>
 8001d9e:	e005      	b.n	8001dac <set_humidity_mode+0x138>
					 	    	 {
					 	    		 lcd_send_string("wrong input, the range is from 0 to 100");
 8001da0:	4811      	ldr	r0, [pc, #68]	; (8001de8 <set_humidity_mode+0x174>)
 8001da2:	f7ff fc8e 	bl	80016c2 <lcd_send_string>
					 	    		 target_RH=50;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <set_humidity_mode+0x168>)
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <set_humidity_mode+0x178>)
 8001daa:	601a      	str	r2, [r3, #0]
					  while(key!='*')
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b2a      	cmp	r3, #42	; 0x2a
 8001db2:	f47f af7c 	bne.w	8001cae <set_humidity_mode+0x3a>
					 	    	 }

					 	    }
					 	   }

					 	         HAL_Delay(1000);
 8001db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dba:	f001 fd31 	bl	8003820 <HAL_Delay>
					 	        lcd_clear();
 8001dbe:	f7ff fc0f 	bl	80015e0 <lcd_clear>
					 	         key=' ';
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <set_humidity_mode+0x15c>)
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	701a      	strb	r2, [r3, #0]
		}

}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000311 	.word	0x20000311
 8001dd4:	0800b908 	.word	0x0800b908
 8001dd8:	0800b91c 	.word	0x0800b91c
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000408 	.word	0x20000408
 8001de4:	42c80000 	.word	0x42c80000
 8001de8:	0800b92c 	.word	0x0800b92c
 8001dec:	42480000 	.word	0x42480000

08001df0 <set_illuminance_mode>:

void set_illuminance_mode()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
	char* buffer[2];
	 int i=0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
	 int temp=1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
	 ilu_mode;
	 	 	 	 	 	 lcd_clear();
 8001dfe:	f7ff fbef 	bl	80015e0 <lcd_clear>
						 lcd_put_cur(0,0);
 8001e02:	2100      	movs	r1, #0
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fc01 	bl	800160c <lcd_put_cur>
						 lcd_send_string("set illuminance mode");
 8001e0a:	483f      	ldr	r0, [pc, #252]	; (8001f08 <set_illuminance_mode+0x118>)
 8001e0c:	f7ff fc59 	bl	80016c2 <lcd_send_string>
						 lcd_put_cur(1,0);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fbfa 	bl	800160c <lcd_put_cur>
						 lcd_send_string("enter value:");
 8001e18:	483c      	ldr	r0, [pc, #240]	; (8001f0c <set_illuminance_mode+0x11c>)
 8001e1a:	f7ff fc52 	bl	80016c2 <lcd_send_string>
						  while(key!='*')
 8001e1e:	e063      	b.n	8001ee8 <set_illuminance_mode+0xf8>
						  {
						 	 key=read_keypad();
 8001e20:	f7ff fcd0 	bl	80017c4 <read_keypad>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <set_illuminance_mode+0x120>)
 8001e2a:	701a      	strb	r2, [r3, #0]
						 	 ilu_mode=0;
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <set_illuminance_mode+0x124>)
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
						 	 if(key!='E')
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <set_illuminance_mode+0x120>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b45      	cmp	r3, #69	; 0x45
 8001e3a:	d00e      	beq.n	8001e5a <set_illuminance_mode+0x6a>
						 	  {
						 	    lcd_send_data(key);
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <set_illuminance_mode+0x120>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fb9d 	bl	8001580 <lcd_send_data>
						 	    set_data[i]=key;
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <set_illuminance_mode+0x120>)
 8001e48:	7819      	ldrb	r1, [r3, #0]
 8001e4a:	4a33      	ldr	r2, [pc, #204]	; (8001f18 <set_illuminance_mode+0x128>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	460a      	mov	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
						 	    i++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
						 	  }
						 	  HAL_Delay(100);
 8001e5a:	2064      	movs	r0, #100	; 0x64
 8001e5c:	f001 fce0 	bl	8003820 <HAL_Delay>

						 	  if(key=='*')
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <set_illuminance_mode+0x120>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b2a      	cmp	r3, #42	; 0x2a
 8001e66:	d13f      	bne.n	8001ee8 <set_illuminance_mode+0xf8>
						 	  {
						 	     int counter=0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
						 	     int flag=0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
						 	     while(set_data[flag]!='*')
 8001e70:	e005      	b.n	8001e7e <set_illuminance_mode+0x8e>
						 	     {
						 	    	   flag++;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3301      	adds	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
						 	    	   counter++;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
						 	     while(set_data[flag]!='*')
 8001e7e:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <set_illuminance_mode+0x128>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b2a      	cmp	r3, #42	; 0x2a
 8001e88:	d1f3      	bne.n	8001e72 <set_illuminance_mode+0x82>
						 	     }
						 	    for(int j=0;j<=counter-1;j++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e020      	b.n	8001ed2 <set_illuminance_mode+0xe2>
						 	    {
						 	    	ilu_mode+=(set_data[counter-1-j]-'0')*temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1e5a      	subs	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <set_illuminance_mode+0x128>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	3b30      	subs	r3, #48	; 0x30
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff19 	bl	8000cdc <__aeabi_i2f>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <set_illuminance_mode+0x124>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7fe fe5e 	bl	8000b74 <__addsf3>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <set_illuminance_mode+0x124>)
 8001ebe:	601a      	str	r2, [r3, #0]
						 	    	temp=temp*10;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
						 	    for(int j=0;j<=counter-1;j++)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	ddd9      	ble.n	8001e90 <set_illuminance_mode+0xa0>
						 	    }

						 	    	 lcd_clear();
 8001edc:	f7ff fb80 	bl	80015e0 <lcd_clear>
						 	    	 lcd_put_cur(0,0);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fb92 	bl	800160c <lcd_put_cur>
						  while(key!='*')
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <set_illuminance_mode+0x120>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b2a      	cmp	r3, #42	; 0x2a
 8001eee:	d197      	bne.n	8001e20 <set_illuminance_mode+0x30>

						 	    }
						 	   }
						 	         HAL_Delay(1000);
 8001ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef4:	f001 fc94 	bl	8003820 <HAL_Delay>
						 	         key=' ';
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <set_illuminance_mode+0x120>)
 8001efa:	2220      	movs	r2, #32
 8001efc:	701a      	strb	r2, [r3, #0]


}
 8001efe:	bf00      	nop
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0800b954 	.word	0x0800b954
 8001f0c:	0800b91c 	.word	0x0800b91c
 8001f10:	20000311 	.word	0x20000311
 8001f14:	2000041c 	.word	0x2000041c
 8001f18:	20000314 	.word	0x20000314

08001f1c <set_position_mode>:

void set_position_mode()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
	char* buffer[2];
	position_gear=0;
 8001f22:	4b7e      	ldr	r3, [pc, #504]	; (800211c <set_position_mode+0x200>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

						  int i=0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
						  int temp=1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
						  lcd_clear();
 8001f30:	f7ff fb56 	bl	80015e0 <lcd_clear>
						  lcd_put_cur(0,0);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fb68 	bl	800160c <lcd_put_cur>
						  lcd_send_string("set position mode");
 8001f3c:	4878      	ldr	r0, [pc, #480]	; (8002120 <set_position_mode+0x204>)
 8001f3e:	f7ff fbc0 	bl	80016c2 <lcd_send_string>
						  lcd_put_cur(1,0);
 8001f42:	2100      	movs	r1, #0
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff fb61 	bl	800160c <lcd_put_cur>
						  lcd_send_string("enter value:");
 8001f4a:	4876      	ldr	r0, [pc, #472]	; (8002124 <set_position_mode+0x208>)
 8001f4c:	f7ff fbb9 	bl	80016c2 <lcd_send_string>
						  while(key!='*')	//判断是否确认
 8001f50:	e0d2      	b.n	80020f8 <set_position_mode+0x1dc>
						  {
						 	 key=read_keypad();
 8001f52:	f7ff fc37 	bl	80017c4 <read_keypad>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b73      	ldr	r3, [pc, #460]	; (8002128 <set_position_mode+0x20c>)
 8001f5c:	701a      	strb	r2, [r3, #0]
						 	 //set_value=0;
						 	 if(key!='E')	// 判断是否有输�???????????????????????????????
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <set_position_mode+0x20c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b45      	cmp	r3, #69	; 0x45
 8001f64:	d00e      	beq.n	8001f84 <set_position_mode+0x68>
						 	  {
						 	    lcd_send_data(key);
 8001f66:	4b70      	ldr	r3, [pc, #448]	; (8002128 <set_position_mode+0x20c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fb08 	bl	8001580 <lcd_send_data>
						 	   set_data[i]=key;
 8001f70:	4b6d      	ldr	r3, [pc, #436]	; (8002128 <set_position_mode+0x20c>)
 8001f72:	7819      	ldrb	r1, [r3, #0]
 8001f74:	4a6d      	ldr	r2, [pc, #436]	; (800212c <set_position_mode+0x210>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
						 	    i++;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
						 	  }
						 	  HAL_Delay(100);
 8001f84:	2064      	movs	r0, #100	; 0x64
 8001f86:	f001 fc4b 	bl	8003820 <HAL_Delay>

						 	  if(key=='*')
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <set_position_mode+0x20c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f90:	f040 80b2 	bne.w	80020f8 <set_position_mode+0x1dc>
						 	  {
						 	     int counter=0;	//Array position number for for loop
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
						 	     int flag=0;	//Array position
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
						 	     while(set_data[flag]!='*')	//IF present location is not the final '*'
 8001f9c:	e005      	b.n	8001faa <set_position_mode+0x8e>
						 	     {
						 	    	   flag++;		//judge array length
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
						 	    	   counter++;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
						 	     while(set_data[flag]!='*')	//IF present location is not the final '*'
 8001faa:	4a60      	ldr	r2, [pc, #384]	; (800212c <set_position_mode+0x210>)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001fb4:	d1f3      	bne.n	8001f9e <set_position_mode+0x82>
						 	     }
						 	    for(int j=0;j<=counter-1;j++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e017      	b.n	8001fec <set_position_mode+0xd0>
						 	    {
						 	    	position_gear+=(set_data[counter-1-j]-'0')*temp;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a59      	ldr	r2, [pc, #356]	; (800212c <set_position_mode+0x210>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	3b30      	subs	r3, #48	; 0x30
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	fb02 f203 	mul.w	r2, r2, r3
 8001fd0:	4b52      	ldr	r3, [pc, #328]	; (800211c <set_position_mode+0x200>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a51      	ldr	r2, [pc, #324]	; (800211c <set_position_mode+0x200>)
 8001fd8:	6013      	str	r3, [r2, #0]
						 	    	temp=temp*10;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
						 	    for(int j=0;j<=counter-1;j++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dde2      	ble.n	8001fbc <set_position_mode+0xa0>
						 	    }

						 	    	 lcd_clear();
 8001ff6:	f7ff faf3 	bl	80015e0 <lcd_clear>
						 	    	 lcd_put_cur(0,0);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff fb05 	bl	800160c <lcd_put_cur>
						 	    	 if (position_gear==1)
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <set_position_mode+0x200>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d119      	bne.n	800203e <set_position_mode+0x122>
						 	    	 {
						 	    		position_flag=1;
 800200a:	4b49      	ldr	r3, [pc, #292]	; (8002130 <set_position_mode+0x214>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
						 	    		PB4_OFF;
 8002010:	2200      	movs	r2, #0
 8002012:	2110      	movs	r1, #16
 8002014:	4847      	ldr	r0, [pc, #284]	; (8002134 <set_position_mode+0x218>)
 8002016:	f002 fe84 	bl	8004d22 <HAL_GPIO_WritePin>
										PB5_OFF;
 800201a:	2200      	movs	r2, #0
 800201c:	2120      	movs	r1, #32
 800201e:	4845      	ldr	r0, [pc, #276]	; (8002134 <set_position_mode+0x218>)
 8002020:	f002 fe7f 	bl	8004d22 <HAL_GPIO_WritePin>
							 	    	 lcd_clear();
 8002024:	f7ff fadc 	bl	80015e0 <lcd_clear>
							 	    	 lcd_put_cur(0,0);
 8002028:	2100      	movs	r1, #0
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff faee 	bl	800160c <lcd_put_cur>
							 	    	 lcd_send_string("Correct input, Now in Position Gear 1");
 8002030:	4841      	ldr	r0, [pc, #260]	; (8002138 <set_position_mode+0x21c>)
 8002032:	f7ff fb46 	bl	80016c2 <lcd_send_string>
							 	    	position_gear=0;
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <set_position_mode+0x200>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e05c      	b.n	80020f8 <set_position_mode+0x1dc>

						 	    	 }
						 	    	 else if(position_gear==2)
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <set_position_mode+0x200>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d119      	bne.n	800207a <set_position_mode+0x15e>
						 	    	 {
						 	    		position_flag=2;
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <set_position_mode+0x214>)
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
							 	    		PB4_OFF;
 800204c:	2200      	movs	r2, #0
 800204e:	2110      	movs	r1, #16
 8002050:	4838      	ldr	r0, [pc, #224]	; (8002134 <set_position_mode+0x218>)
 8002052:	f002 fe66 	bl	8004d22 <HAL_GPIO_WritePin>
											PB5_ON;
 8002056:	2201      	movs	r2, #1
 8002058:	2120      	movs	r1, #32
 800205a:	4836      	ldr	r0, [pc, #216]	; (8002134 <set_position_mode+0x218>)
 800205c:	f002 fe61 	bl	8004d22 <HAL_GPIO_WritePin>
								 	    	 lcd_clear();
 8002060:	f7ff fabe 	bl	80015e0 <lcd_clear>
								 	    	 lcd_put_cur(0,0);
 8002064:	2100      	movs	r1, #0
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fad0 	bl	800160c <lcd_put_cur>
								 	    	 lcd_send_string("Correct input, Now in Position Gear 2");
 800206c:	4833      	ldr	r0, [pc, #204]	; (800213c <set_position_mode+0x220>)
 800206e:	f7ff fb28 	bl	80016c2 <lcd_send_string>
								 	    	position_gear=0;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <set_position_mode+0x200>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e03e      	b.n	80020f8 <set_position_mode+0x1dc>
						 	    	 }
						 	    	 else if(position_gear==3)
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <set_position_mode+0x200>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d119      	bne.n	80020b6 <set_position_mode+0x19a>
						 	    	 {
						 	    		position_flag=3;
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <set_position_mode+0x214>)
 8002084:	2203      	movs	r2, #3
 8002086:	601a      	str	r2, [r3, #0]
							 	    		PB4_ON;
 8002088:	2201      	movs	r2, #1
 800208a:	2110      	movs	r1, #16
 800208c:	4829      	ldr	r0, [pc, #164]	; (8002134 <set_position_mode+0x218>)
 800208e:	f002 fe48 	bl	8004d22 <HAL_GPIO_WritePin>
											PB5_OFF;
 8002092:	2200      	movs	r2, #0
 8002094:	2120      	movs	r1, #32
 8002096:	4827      	ldr	r0, [pc, #156]	; (8002134 <set_position_mode+0x218>)
 8002098:	f002 fe43 	bl	8004d22 <HAL_GPIO_WritePin>
								 	    	 lcd_clear();
 800209c:	f7ff faa0 	bl	80015e0 <lcd_clear>
								 	    	 lcd_put_cur(0,0);
 80020a0:	2100      	movs	r1, #0
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fab2 	bl	800160c <lcd_put_cur>
								 	    	 lcd_send_string("Correct input, Now in Position Gear 3");
 80020a8:	4825      	ldr	r0, [pc, #148]	; (8002140 <set_position_mode+0x224>)
 80020aa:	f7ff fb0a 	bl	80016c2 <lcd_send_string>
								 	    	position_gear=0;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <set_position_mode+0x200>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e020      	b.n	80020f8 <set_position_mode+0x1dc>
						 	    	 }
						 	    	 else if(position_gear==4)
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <set_position_mode+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d119      	bne.n	80020f2 <set_position_mode+0x1d6>
						 	    	 {
						 	    		position_flag=4;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <set_position_mode+0x214>)
 80020c0:	2204      	movs	r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
							 	    		PB4_ON;
 80020c4:	2201      	movs	r2, #1
 80020c6:	2110      	movs	r1, #16
 80020c8:	481a      	ldr	r0, [pc, #104]	; (8002134 <set_position_mode+0x218>)
 80020ca:	f002 fe2a 	bl	8004d22 <HAL_GPIO_WritePin>
											PB5_ON;
 80020ce:	2201      	movs	r2, #1
 80020d0:	2120      	movs	r1, #32
 80020d2:	4818      	ldr	r0, [pc, #96]	; (8002134 <set_position_mode+0x218>)
 80020d4:	f002 fe25 	bl	8004d22 <HAL_GPIO_WritePin>
								 	    	 lcd_clear();
 80020d8:	f7ff fa82 	bl	80015e0 <lcd_clear>
								 	    	 lcd_put_cur(0,0);
 80020dc:	2100      	movs	r1, #0
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fa94 	bl	800160c <lcd_put_cur>
								 	    	 lcd_send_string("Correct input, Now in Position Gear 4");
 80020e4:	4817      	ldr	r0, [pc, #92]	; (8002144 <set_position_mode+0x228>)
 80020e6:	f7ff faec 	bl	80016c2 <lcd_send_string>
								 	    	position_gear=0;
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <set_position_mode+0x200>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e002      	b.n	80020f8 <set_position_mode+0x1dc>
						 	    	 }
						 	    	 else
									 {
						 	  		  lcd_send_string("Wrong input, please enter again");
 80020f2:	4815      	ldr	r0, [pc, #84]	; (8002148 <set_position_mode+0x22c>)
 80020f4:	f7ff fae5 	bl	80016c2 <lcd_send_string>
						  while(key!='*')	//判断是否确认
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <set_position_mode+0x20c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b2a      	cmp	r3, #42	; 0x2a
 80020fe:	f47f af28 	bne.w	8001f52 <set_position_mode+0x36>

						 	    	//while(1);

						 	    }
						 	   }
						 	         HAL_Delay(1000);
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002106:	f001 fb8b 	bl	8003820 <HAL_Delay>
						 	        lcd_clear();
 800210a:	f7ff fa69 	bl	80015e0 <lcd_clear>
						 	         key=' ';
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <set_position_mode+0x20c>)
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200003fc 	.word	0x200003fc
 8002120:	0800b96c 	.word	0x0800b96c
 8002124:	0800b91c 	.word	0x0800b91c
 8002128:	20000311 	.word	0x20000311
 800212c:	20000314 	.word	0x20000314
 8002130:	20000000 	.word	0x20000000
 8002134:	40010c00 	.word	0x40010c00
 8002138:	0800b980 	.word	0x0800b980
 800213c:	0800b9a8 	.word	0x0800b9a8
 8002140:	0800b9d0 	.word	0x0800b9d0
 8002144:	0800b9f8 	.word	0x0800b9f8
 8002148:	0800ba20 	.word	0x0800ba20

0800214c <set_temperature_mode>:
void set_temperature_mode()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
	char* buffer[2];
	 int i=0;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
	 int temp=1;
 8002156:	2301      	movs	r3, #1
 8002158:	61bb      	str	r3, [r7, #24]

	 	 	 	 	 	 lcd_clear();
 800215a:	f7ff fa41 	bl	80015e0 <lcd_clear>
						 lcd_put_cur(0,0);
 800215e:	2100      	movs	r1, #0
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fa53 	bl	800160c <lcd_put_cur>
						 lcd_send_string("set temperature mode");
 8002166:	483f      	ldr	r0, [pc, #252]	; (8002264 <set_temperature_mode+0x118>)
 8002168:	f7ff faab 	bl	80016c2 <lcd_send_string>
						 lcd_put_cur(1,0);
 800216c:	2100      	movs	r1, #0
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff fa4c 	bl	800160c <lcd_put_cur>
						 lcd_send_string("enter temp");
 8002174:	483c      	ldr	r0, [pc, #240]	; (8002268 <set_temperature_mode+0x11c>)
 8002176:	f7ff faa4 	bl	80016c2 <lcd_send_string>
						  while(key!='*')
 800217a:	e063      	b.n	8002244 <set_temperature_mode+0xf8>
						  {
						 	 key=read_keypad();
 800217c:	f7ff fb22 	bl	80017c4 <read_keypad>
 8002180:	4603      	mov	r3, r0
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <set_temperature_mode+0x120>)
 8002186:	701a      	strb	r2, [r3, #0]
						 	target_TEMP=0;
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <set_temperature_mode+0x124>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
						 	 if(key!='E')
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <set_temperature_mode+0x120>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b45      	cmp	r3, #69	; 0x45
 8002196:	d00e      	beq.n	80021b6 <set_temperature_mode+0x6a>
						 	  {
						 	    lcd_send_data(key);
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <set_temperature_mode+0x120>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f9ef 	bl	8001580 <lcd_send_data>
						 	    set_data[i]=key;
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <set_temperature_mode+0x120>)
 80021a4:	7819      	ldrb	r1, [r3, #0]
 80021a6:	4a33      	ldr	r2, [pc, #204]	; (8002274 <set_temperature_mode+0x128>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	460a      	mov	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]
						 	    i++;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
						 	  }
						 	  HAL_Delay(100);
 80021b6:	2064      	movs	r0, #100	; 0x64
 80021b8:	f001 fb32 	bl	8003820 <HAL_Delay>

						 	  if(key=='*')
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <set_temperature_mode+0x120>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b2a      	cmp	r3, #42	; 0x2a
 80021c2:	d13f      	bne.n	8002244 <set_temperature_mode+0xf8>
						 	  {
						 	     int counter=0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
						 	     int flag=0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
						 	     while(set_data[flag]!='*')
 80021cc:	e005      	b.n	80021da <set_temperature_mode+0x8e>
						 	     {
						 	    	   flag++;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	3301      	adds	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
						 	    	   counter++;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3301      	adds	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
						 	     while(set_data[flag]!='*')
 80021da:	4a26      	ldr	r2, [pc, #152]	; (8002274 <set_temperature_mode+0x128>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b2a      	cmp	r3, #42	; 0x2a
 80021e4:	d1f3      	bne.n	80021ce <set_temperature_mode+0x82>
						 	     }
						 	    for(int j=0;j<=counter-1;j++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e020      	b.n	800222e <set_temperature_mode+0xe2>
						 	    {
						 	    	target_TEMP+=(set_data[counter-1-j]-'0')*temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1e5a      	subs	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <set_temperature_mode+0x128>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	3b30      	subs	r3, #48	; 0x30
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fd6b 	bl	8000cdc <__aeabi_i2f>
 8002206:	4602      	mov	r2, r0
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <set_temperature_mode+0x124>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f7fe fcb0 	bl	8000b74 <__addsf3>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <set_temperature_mode+0x124>)
 800221a:	601a      	str	r2, [r3, #0]
						 	    	temp=temp*10;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
						 	    for(int j=0;j<=counter-1;j++)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3b01      	subs	r3, #1
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	ddd9      	ble.n	80021ec <set_temperature_mode+0xa0>
						 	    }

						 	    	 lcd_clear();
 8002238:	f7ff f9d2 	bl	80015e0 <lcd_clear>
						 	    	 lcd_put_cur(0,0);
 800223c:	2100      	movs	r1, #0
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff f9e4 	bl	800160c <lcd_put_cur>
						  while(key!='*')
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <set_temperature_mode+0x120>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b2a      	cmp	r3, #42	; 0x2a
 800224a:	d197      	bne.n	800217c <set_temperature_mode+0x30>

						 	    }
						 	   }
						 	         HAL_Delay(1000);
 800224c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002250:	f001 fae6 	bl	8003820 <HAL_Delay>
						 	         key=' ';
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <set_temperature_mode+0x120>)
 8002256:	2220      	movs	r2, #32
 8002258:	701a      	strb	r2, [r3, #0]


}
 800225a:	bf00      	nop
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	0800ba40 	.word	0x0800ba40
 8002268:	0800ba58 	.word	0x0800ba58
 800226c:	20000311 	.word	0x20000311
 8002270:	20000004 	.word	0x20000004
 8002274:	20000314 	.word	0x20000314

08002278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b0ba      	sub	sp, #232	; 0xe8
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float PA0_Vlotage;
	float PA1_Vlotage;
	float PA1;
	float led_pwm = 250;
 800227e:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <main+0x238>)
 8002280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float led_previous_reading = 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float led_current_reading = 0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float led_current_reading_1 = 0;
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float counter_led_reading = 0;
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float counter_led_reading_1 = 0;
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	char* buffer[2];
	int number = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float mean, sum;
	float TEMP = 0;
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float TEMP_LASTVALUE = 0;
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int keep_state = 0;	//判断是否保留上次温度状�??
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint16_t  hadc2_value = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	float hadc2_vol = 0;
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int TEMP_Lock = 0;	//判断第几次温度大幅度变化�????????????????????????????????????????????? 给予缓冲�?????????????????????????????????????????????
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int HYSTERESIS = 0 ;// 温度变化缓冲 0 为初始�?�， 0 为上�????????????????????????????????????????????? 1为下�?????????????????????????????????????????????
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int HYSTERESIS_FAN = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int TIM_4;
	int flag=0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
//	int led_error_mode=0;
	int led_mode_lock=0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f4:	f001 fa32 	bl	800375c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f8:	f000 fda6 	bl	8002e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fc:	f7ff f882 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8002300:	f7ff f862 	bl	80013c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002304:	f7fe ff24 	bl	8001150 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002308:	f7fe ff8e 	bl	8001228 <MX_ADC2_Init>
  MX_TIM2_Init();
 800230c:	f000 ff4c 	bl	80031a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002310:	f000 ffa2 	bl	8003258 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002314:	f7ff f9ea 	bl	80016ec <MX_I2C1_Init>
  MX_TIM4_Init();
 8002318:	f001 f802 	bl	8003320 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800231c:	f001 f92c 	bl	8003578 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002320:	f001 f900 	bl	8003524 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232a:	4862      	ldr	r0, [pc, #392]	; (80024b4 <main+0x23c>)
 800232c:	f002 fcf9 	bl	8004d22 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, adc_buf, 4);//&hadc1, saved in adc_buf, length 3
 8002330:	2204      	movs	r2, #4
 8002332:	4961      	ldr	r1, [pc, #388]	; (80024b8 <main+0x240>)
 8002334:	4861      	ldr	r0, [pc, #388]	; (80024bc <main+0x244>)
 8002336:	f001 fd15 	bl	8003d64 <HAL_ADC_Start_DMA>


  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3); //高频 �?????????????????????????????????????????????? 散热fan PB0
 800233a:	2108      	movs	r1, #8
 800233c:	4860      	ldr	r0, [pc, #384]	; (80024c0 <main+0x248>)
 800233e:	f003 ff73 	bl	8006228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);  //illuminance CHANNEL
 8002342:	2108      	movs	r1, #8
 8002344:	485f      	ldr	r0, [pc, #380]	; (80024c4 <main+0x24c>)
 8002346:	f003 ff6f 	bl	8006228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4); // 高频 黄灯 给heater fan PB1
 800234a:	210c      	movs	r1, #12
 800234c:	485c      	ldr	r0, [pc, #368]	; (80024c0 <main+0x248>)
 800234e:	f003 ff6b 	bl	8006228 <HAL_TIM_PWM_Start>
 // HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);	//motor pwm zheng zhuan
 // HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);	//motor pwm fanzhuan
  lcd_init();
 8002352:	f7ff f979 	bl	8001648 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   key=read_keypad();
 8002356:	f7ff fa35 	bl	80017c4 <read_keypad>
 800235a:	4603      	mov	r3, r0
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <main+0x250>)
 8002360:	701a      	strb	r2, [r3, #0]
	   if(key=='A'||key=='B'||key=='C'||key=='D')
 8002362:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <main+0x250>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b41      	cmp	r3, #65	; 0x41
 8002368:	d00b      	beq.n	8002382 <main+0x10a>
 800236a:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <main+0x250>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b42      	cmp	r3, #66	; 0x42
 8002370:	d007      	beq.n	8002382 <main+0x10a>
 8002372:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <main+0x250>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b43      	cmp	r3, #67	; 0x43
 8002378:	d003      	beq.n	8002382 <main+0x10a>
 800237a:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <main+0x250>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b44      	cmp	r3, #68	; 0x44
 8002380:	d11a      	bne.n	80023b8 <main+0x140>
	   {
		   if(key == 'A')
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <main+0x250>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b41      	cmp	r3, #65	; 0x41
 8002388:	d101      	bne.n	800238e <main+0x116>
		   {
			   set_humidity_mode();
 800238a:	f7ff fc73 	bl	8001c74 <set_humidity_mode>
		   }
		   if(key == 'B')
 800238e:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <main+0x250>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b42      	cmp	r3, #66	; 0x42
 8002394:	d104      	bne.n	80023a0 <main+0x128>
		   {
			   led_mode_lock = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			   set_illuminance_mode();
 800239c:	f7ff fd28 	bl	8001df0 <set_illuminance_mode>
		   }
		   if(key == 'C')
 80023a0:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <main+0x250>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b43      	cmp	r3, #67	; 0x43
 80023a6:	d101      	bne.n	80023ac <main+0x134>
		   {
			   set_position_mode();
 80023a8:	f7ff fdb8 	bl	8001f1c <set_position_mode>
		   }
		   if(key == 'D')
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <main+0x250>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b44      	cmp	r3, #68	; 0x44
 80023b2:	d101      	bne.n	80023b8 <main+0x140>
		   {
			   set_temperature_mode();
 80023b4:	f7ff feca 	bl	800214c <set_temperature_mode>
		   }
	   }

	  if(uwTick%1000==0)//reading section open
 80023b8:	4b44      	ldr	r3, [pc, #272]	; (80024cc <main+0x254>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <main+0x258>)
 80023be:	fba3 1302 	umull	r1, r3, r3, r2
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 8219 	bne.w	8002806 <main+0x58e>
	  {
	  // Distance Sensor Reading to LCD

	  lcd_send_cmd (0x80|0x00);
 80023d4:	2080      	movs	r0, #128	; 0x80
 80023d6:	f7ff f8a3 	bl	8001520 <lcd_send_cmd>
	  lcd_send_string ("Dist= ");
 80023da:	483e      	ldr	r0, [pc, #248]	; (80024d4 <main+0x25c>)
 80023dc:	f7ff f971 	bl	80016c2 <lcd_send_string>
	    sprintf(buffer, "%d", position_flag*4);
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <main+0x260>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ea:	493c      	ldr	r1, [pc, #240]	; (80024dc <main+0x264>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 fee9 	bl	80081c4 <siprintf>
	    lcd_send_string(buffer);
 80023f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f963 	bl	80016c2 <lcd_send_string>
	    lcd_send_string ("cm");
 80023fc:	4838      	ldr	r0, [pc, #224]	; (80024e0 <main+0x268>)
 80023fe:	f7ff f960 	bl	80016c2 <lcd_send_string>

	  //HADC2 读取 LM35
	  	HAL_ADC_Start(&hadc2);
 8002402:	4838      	ldr	r0, [pc, #224]	; (80024e4 <main+0x26c>)
 8002404:	f001 fb06 	bl	8003a14 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc2, 50);
 8002408:	2132      	movs	r1, #50	; 0x32
 800240a:	4836      	ldr	r0, [pc, #216]	; (80024e4 <main+0x26c>)
 800240c:	f001 fbb0 	bl	8003b70 <HAL_ADC_PollForConversion>


	  				//for(int i = 0; i < 10 ; i++)
	  				//{
	  		 	       if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc2), HAL_ADC_STATE_REG_EOC))
 8002410:	4834      	ldr	r0, [pc, #208]	; (80024e4 <main+0x26c>)
 8002412:	f001 fea5 	bl	8004160 <HAL_ADC_GetState>
 8002416:	4603      	mov	r3, r0
 8002418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241c:	2b00      	cmp	r3, #0
 800241e:	d021      	beq.n	8002464 <main+0x1ec>
	  		 	       {
	  		 	    	hadc2_value = HAL_ADC_GetValue(&hadc2);
 8002420:	4830      	ldr	r0, [pc, #192]	; (80024e4 <main+0x26c>)
 8002422:	f001 fd7d 	bl	8003f20 <HAL_ADC_GetValue>
 8002426:	4603      	mov	r3, r0
 8002428:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	  		 	    	hadc2_vol = (float)(hadc2_value * 2.29/4096);
 800242c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd ffe7 	bl	8000404 <__aeabi_i2d>
 8002436:	a31c      	add	r3, pc, #112	; (adr r3, 80024a8 <main+0x230>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fe f84c 	bl	80004d8 <__aeabi_dmul>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	4618      	mov	r0, r3
 8002446:	4621      	mov	r1, r4
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <main+0x270>)
 800244e:	f7fe f96d 	bl	800072c <__aeabi_ddiv>
 8002452:	4603      	mov	r3, r0
 8002454:	460c      	mov	r4, r1
 8002456:	4618      	mov	r0, r3
 8002458:	4621      	mov	r1, r4
 800245a:	f7fe fb35 	bl	8000ac8 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  		 	       }

	  		 		 // float calculate_mean(float PA4)


	  		 		  	if(number == 3)
 8002464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002468:	2b03      	cmp	r3, #3
 800246a:	d143      	bne.n	80024f4 <main+0x27c>
	  		 		  	{
	  		 		  		float mean = sum / 3;
 800246c:	491f      	ldr	r1, [pc, #124]	; (80024ec <main+0x274>)
 800246e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002472:	f7fe fd3b 	bl	8000eec <__aeabi_fdiv>
 8002476:	4603      	mov	r3, r0
 8002478:	67fb      	str	r3, [r7, #124]	; 0x7c
	  		 		  	//	printf("\n mean is %.4f v\t\r\n",mean);
	  		 		  		TEMP = mean;
 800247a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800247c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  		 		  		TEMP = TEMP*100;
 8002480:	491b      	ldr	r1, [pc, #108]	; (80024f0 <main+0x278>)
 8002482:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002486:	f7fe fc7d 	bl	8000d84 <__aeabi_fmul>
 800248a:	4603      	mov	r3, r0
 800248c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  		 		  		//printf("\n TEMP is %.4f v\t\r\n",TEMP);
	  		 		  		number = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  		 		  		sum = 0;
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  		 		  		mean = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024a4:	e034      	b.n	8002510 <main+0x298>
 80024a6:	bf00      	nop
 80024a8:	851eb852 	.word	0x851eb852
 80024ac:	400251eb 	.word	0x400251eb
 80024b0:	437a0000 	.word	0x437a0000
 80024b4:	40010800 	.word	0x40010800
 80024b8:	20000414 	.word	0x20000414
 80024bc:	20000248 	.word	0x20000248
 80024c0:	20000468 	.word	0x20000468
 80024c4:	200004b0 	.word	0x200004b0
 80024c8:	20000311 	.word	0x20000311
 80024cc:	20000578 	.word	0x20000578
 80024d0:	10624dd3 	.word	0x10624dd3
 80024d4:	0800ba64 	.word	0x0800ba64
 80024d8:	20000000 	.word	0x20000000
 80024dc:	0800ba6c 	.word	0x0800ba6c
 80024e0:	0800ba70 	.word	0x0800ba70
 80024e4:	20000218 	.word	0x20000218
 80024e8:	40b00000 	.word	0x40b00000
 80024ec:	40400000 	.word	0x40400000
 80024f0:	42c80000 	.word	0x42c80000
	  		 		  		//HAL_Delay(5000);
	  		 		  	}
	  		 		  	else
	  		 		  	{
	  		 		  		number = number + 1;
 80024f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024f8:	3301      	adds	r3, #1
 80024fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  		 		  		sum = sum + hadc2_vol;
 80024fe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002502:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002506:	f7fe fb35 	bl	8000b74 <__addsf3>
 800250a:	4603      	mov	r3, r0
 800250c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  		 		  		//HAL_Delay(10);
	  		 		  	}
	  				//}
		  		 		// 预防误差读数
		  		 		 if((TEMP_LASTVALUE - TEMP > 1.5) || (TEMP - TEMP_LASTVALUE > 1.5))//如果这次读数和上次读数误差大�?????????????????????????????????????????????2  进入保留上次读数状�??
 8002510:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002514:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002518:	f7fe fb2a 	bl	8000b70 <__aeabi_fsub>
 800251c:	4603      	mov	r3, r0
 800251e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fdea 	bl	80010fc <__aeabi_fcmpgt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10e      	bne.n	800254c <main+0x2d4>
 800252e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002532:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002536:	f7fe fb1b 	bl	8000b70 <__aeabi_fsub>
 800253a:	4603      	mov	r3, r0
 800253c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fddb 	bl	80010fc <__aeabi_fcmpgt>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <main+0x2da>
		  		 		 {
		  		 			keep_state = 1;
 800254c:	2301      	movs	r3, #1
 800254e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		  		 		 }
		  		 		 if((keep_state == 1) && (TEMP_Lock == 0))	 // 如果第一次进入保留上次， 温度等于上次读数�????????????????????????????????????????????? 防止误差程序上锁
 8002552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10c      	bne.n	8002574 <main+0x2fc>
 800255a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <main+0x2fc>
		  		 		 {
		  		 			TEMP = TEMP_LASTVALUE;	//温度保留上次温度状�??
 8002562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		  		 			TEMP_Lock ++;
 800256a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800256e:	3301      	adds	r3, #1
 8002570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		  		 		 }
		  		 		 if((keep_state == 1) && (TEMP_Lock == 5))	//如果第二次进入保留上次状态， 保留状�?�取消，防止误差程序解锁
 8002574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002578:	2b01      	cmp	r3, #1
 800257a:	d109      	bne.n	8002590 <main+0x318>
 800257c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002580:	2b05      	cmp	r3, #5
 8002582:	d105      	bne.n	8002590 <main+0x318>
		  		 		 {
		  		 			keep_state = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		  		 			TEMP_Lock = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		  		 		 }
		  		 		 if((TEMP_Lock == 1) || (TEMP_Lock == 2)|| (TEMP_Lock == 3)|| (TEMP_Lock == 4))
 8002590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002594:	2b01      	cmp	r3, #1
 8002596:	d00b      	beq.n	80025b0 <main+0x338>
 8002598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800259c:	2b02      	cmp	r3, #2
 800259e:	d007      	beq.n	80025b0 <main+0x338>
 80025a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d003      	beq.n	80025b0 <main+0x338>
 80025a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d104      	bne.n	80025ba <main+0x342>
		  		 		 {
		  		 			TEMP_Lock ++;
 80025b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		  		 		 }
		 	  		 	if (keep_state == 0)	//如果保留状�?�无须开启， 则将此次TEMP 存入TEMP_LASTVALUE 共给下次循环使用
 80025ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <main+0x352>
		 	  		 	{
		 	  		 		TEMP_LASTVALUE = TEMP;
 80025c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		 	  		 	}


	  //LCD显示光照参数
	  	lcd_send_cmd (0x80|0x40);
 80025ca:	20c0      	movs	r0, #192	; 0xc0
 80025cc:	f7fe ffa8 	bl	8001520 <lcd_send_cmd>
		sprintf(buffer, "%.1f", PA1*350);
 80025d0:	49cb      	ldr	r1, [pc, #812]	; (8002900 <main+0x688>)
 80025d2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80025d6:	f7fe fbd5 	bl	8000d84 <__aeabi_fmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ff23 	bl	8000428 <__aeabi_f2d>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80025ea:	461a      	mov	r2, r3
 80025ec:	4623      	mov	r3, r4
 80025ee:	49c5      	ldr	r1, [pc, #788]	; (8002904 <main+0x68c>)
 80025f0:	f005 fde8 	bl	80081c4 <siprintf>
		lcd_send_string("LM:");
 80025f4:	48c4      	ldr	r0, [pc, #784]	; (8002908 <main+0x690>)
 80025f6:	f7ff f864 	bl	80016c2 <lcd_send_string>
		lcd_send_string(buffer);
 80025fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f85f 	bl	80016c2 <lcd_send_string>
		//lcd_put_cur(0,0);

		//LCD显示LM35读数


		lcd_send_cmd (0x80|0x14);
 8002604:	2094      	movs	r0, #148	; 0x94
 8002606:	f7fe ff8b 	bl	8001520 <lcd_send_cmd>
		sprintf(buffer, "%.3f", TEMP);
 800260a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800260e:	f7fd ff0b 	bl	8000428 <__aeabi_f2d>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800261a:	461a      	mov	r2, r3
 800261c:	4623      	mov	r3, r4
 800261e:	49bb      	ldr	r1, [pc, #748]	; (800290c <main+0x694>)
 8002620:	f005 fdd0 	bl	80081c4 <siprintf>
		lcd_send_string("TEMP:");
 8002624:	48ba      	ldr	r0, [pc, #744]	; (8002910 <main+0x698>)
 8002626:	f7ff f84c 	bl	80016c2 <lcd_send_string>
		lcd_send_string(buffer);
 800262a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f847 	bl	80016c2 <lcd_send_string>

		//HUMIDITY

		lcd_send_cmd (0x80|0x54);
 8002634:	20d4      	movs	r0, #212	; 0xd4
 8002636:	f7fe ff73 	bl	8001520 <lcd_send_cmd>
		Humidity_Read();
 800263a:	f7ff fa53 	bl	8001ae4 <Humidity_Read>
		lcd_send_string("RH:");
 800263e:	48b5      	ldr	r0, [pc, #724]	; (8002914 <main+0x69c>)
 8002640:	f7ff f83f 	bl	80016c2 <lcd_send_string>
		lcd_send_string(RH);
 8002644:	48b4      	ldr	r0, [pc, #720]	; (8002918 <main+0x6a0>)
 8002646:	f7ff f83c 	bl	80016c2 <lcd_send_string>



			    char data[100];
			    sprintf(data,"%.1f", avg_humidity);
 800264a:	4bb4      	ldr	r3, [pc, #720]	; (800291c <main+0x6a4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd feea 	bl	8000428 <__aeabi_f2d>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	1d38      	adds	r0, r7, #4
 800265a:	461a      	mov	r2, r3
 800265c:	4623      	mov	r3, r4
 800265e:	49a9      	ldr	r1, [pc, #676]	; (8002904 <main+0x68c>)
 8002660:	f005 fdb0 	bl	80081c4 <siprintf>
			  	HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fd72 	bl	8000150 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	1d39      	adds	r1, r7, #4
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	48aa      	ldr	r0, [pc, #680]	; (8002920 <main+0x6a8>)
 8002678:	f004 fb3d 	bl	8006cf6 <HAL_UART_Transmit>
			  	strcpy((char *)cliBufferTX,", " );
 800267c:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <main+0x6ac>)
 800267e:	4aaa      	ldr	r2, [pc, #680]	; (8002928 <main+0x6b0>)
 8002680:	8811      	ldrh	r1, [r2, #0]
 8002682:	7892      	ldrb	r2, [r2, #2]
 8002684:	8019      	strh	r1, [r3, #0]
 8002686:	709a      	strb	r2, [r3, #2]
			  	HAL_UART_Transmit(&huart3,cliBufferTX,strlen((char*)cliBufferTX),200);
 8002688:	48a6      	ldr	r0, [pc, #664]	; (8002924 <main+0x6ac>)
 800268a:	f7fd fd61 	bl	8000150 <strlen>
 800268e:	4603      	mov	r3, r0
 8002690:	b29a      	uxth	r2, r3
 8002692:	23c8      	movs	r3, #200	; 0xc8
 8002694:	49a3      	ldr	r1, [pc, #652]	; (8002924 <main+0x6ac>)
 8002696:	48a2      	ldr	r0, [pc, #648]	; (8002920 <main+0x6a8>)
 8002698:	f004 fb2d 	bl	8006cf6 <HAL_UART_Transmit>

			  	sprintf(data, "%.1f", PA1_Vlotage*140);
 800269c:	49a3      	ldr	r1, [pc, #652]	; (800292c <main+0x6b4>)
 800269e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80026a2:	f7fe fb6f 	bl	8000d84 <__aeabi_fmul>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd febd 	bl	8000428 <__aeabi_f2d>
 80026ae:	4603      	mov	r3, r0
 80026b0:	460c      	mov	r4, r1
 80026b2:	1d38      	adds	r0, r7, #4
 80026b4:	461a      	mov	r2, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	4992      	ldr	r1, [pc, #584]	; (8002904 <main+0x68c>)
 80026ba:	f005 fd83 	bl	80081c4 <siprintf>
			  	HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fd45 	bl	8000150 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	1d39      	adds	r1, r7, #4
 80026cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d0:	4893      	ldr	r0, [pc, #588]	; (8002920 <main+0x6a8>)
 80026d2:	f004 fb10 	bl	8006cf6 <HAL_UART_Transmit>
			  	strcpy((char *)cliBufferTX,", " );
 80026d6:	4b93      	ldr	r3, [pc, #588]	; (8002924 <main+0x6ac>)
 80026d8:	4a93      	ldr	r2, [pc, #588]	; (8002928 <main+0x6b0>)
 80026da:	8811      	ldrh	r1, [r2, #0]
 80026dc:	7892      	ldrb	r2, [r2, #2]
 80026de:	8019      	strh	r1, [r3, #0]
 80026e0:	709a      	strb	r2, [r3, #2]
			  	HAL_UART_Transmit(&huart3,cliBufferTX,strlen((char*)cliBufferTX),200);
 80026e2:	4890      	ldr	r0, [pc, #576]	; (8002924 <main+0x6ac>)
 80026e4:	f7fd fd34 	bl	8000150 <strlen>
 80026e8:	4603      	mov	r3, r0
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	23c8      	movs	r3, #200	; 0xc8
 80026ee:	498d      	ldr	r1, [pc, #564]	; (8002924 <main+0x6ac>)
 80026f0:	488b      	ldr	r0, [pc, #556]	; (8002920 <main+0x6a8>)
 80026f2:	f004 fb00 	bl	8006cf6 <HAL_UART_Transmit>

			  	sprintf(data, "%.1f", TEMP);
 80026f6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80026fa:	f7fd fe95 	bl	8000428 <__aeabi_f2d>
 80026fe:	4603      	mov	r3, r0
 8002700:	460c      	mov	r4, r1
 8002702:	1d38      	adds	r0, r7, #4
 8002704:	461a      	mov	r2, r3
 8002706:	4623      	mov	r3, r4
 8002708:	497e      	ldr	r1, [pc, #504]	; (8002904 <main+0x68c>)
 800270a:	f005 fd5b 	bl	80081c4 <siprintf>
			  	HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fd1d 	bl	8000150 <strlen>
 8002716:	4603      	mov	r3, r0
 8002718:	b29a      	uxth	r2, r3
 800271a:	1d39      	adds	r1, r7, #4
 800271c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002720:	487f      	ldr	r0, [pc, #508]	; (8002920 <main+0x6a8>)
 8002722:	f004 fae8 	bl	8006cf6 <HAL_UART_Transmit>
				strcpy((char *)cliBufferTX,", " );
 8002726:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <main+0x6ac>)
 8002728:	4a7f      	ldr	r2, [pc, #508]	; (8002928 <main+0x6b0>)
 800272a:	8811      	ldrh	r1, [r2, #0]
 800272c:	7892      	ldrb	r2, [r2, #2]
 800272e:	8019      	strh	r1, [r3, #0]
 8002730:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart3,cliBufferTX,strlen((char*)cliBufferTX),200);
 8002732:	487c      	ldr	r0, [pc, #496]	; (8002924 <main+0x6ac>)
 8002734:	f7fd fd0c 	bl	8000150 <strlen>
 8002738:	4603      	mov	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	23c8      	movs	r3, #200	; 0xc8
 800273e:	4979      	ldr	r1, [pc, #484]	; (8002924 <main+0x6ac>)
 8002740:	4877      	ldr	r0, [pc, #476]	; (8002920 <main+0x6a8>)
 8002742:	f004 fad8 	bl	8006cf6 <HAL_UART_Transmit>

			  	sprintf(data, "%.1f", target_RH);
 8002746:	4b7a      	ldr	r3, [pc, #488]	; (8002930 <main+0x6b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fe6c 	bl	8000428 <__aeabi_f2d>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	1d38      	adds	r0, r7, #4
 8002756:	461a      	mov	r2, r3
 8002758:	4623      	mov	r3, r4
 800275a:	496a      	ldr	r1, [pc, #424]	; (8002904 <main+0x68c>)
 800275c:	f005 fd32 	bl	80081c4 <siprintf>
			    HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fcf4 	bl	8000150 <strlen>
 8002768:	4603      	mov	r3, r0
 800276a:	b29a      	uxth	r2, r3
 800276c:	1d39      	adds	r1, r7, #4
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	486b      	ldr	r0, [pc, #428]	; (8002920 <main+0x6a8>)
 8002774:	f004 fabf 	bl	8006cf6 <HAL_UART_Transmit>
			    strcpy((char *)cliBufferTX,", " );
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <main+0x6ac>)
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <main+0x6b0>)
 800277c:	8811      	ldrh	r1, [r2, #0]
 800277e:	7892      	ldrb	r2, [r2, #2]
 8002780:	8019      	strh	r1, [r3, #0]
 8002782:	709a      	strb	r2, [r3, #2]
			    HAL_UART_Transmit(&huart3,cliBufferTX,strlen((char*)cliBufferTX),200);
 8002784:	4867      	ldr	r0, [pc, #412]	; (8002924 <main+0x6ac>)
 8002786:	f7fd fce3 	bl	8000150 <strlen>
 800278a:	4603      	mov	r3, r0
 800278c:	b29a      	uxth	r2, r3
 800278e:	23c8      	movs	r3, #200	; 0xc8
 8002790:	4964      	ldr	r1, [pc, #400]	; (8002924 <main+0x6ac>)
 8002792:	4863      	ldr	r0, [pc, #396]	; (8002920 <main+0x6a8>)
 8002794:	f004 faaf 	bl	8006cf6 <HAL_UART_Transmit>


			    sprintf(data, "%.1f",target_TEMP );
 8002798:	4b66      	ldr	r3, [pc, #408]	; (8002934 <main+0x6bc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fe43 	bl	8000428 <__aeabi_f2d>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	1d38      	adds	r0, r7, #4
 80027a8:	461a      	mov	r2, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	4955      	ldr	r1, [pc, #340]	; (8002904 <main+0x68c>)
 80027ae:	f005 fd09 	bl	80081c4 <siprintf>
			    HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fccb 	bl	8000150 <strlen>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b29a      	uxth	r2, r3
 80027be:	1d39      	adds	r1, r7, #4
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	4856      	ldr	r0, [pc, #344]	; (8002920 <main+0x6a8>)
 80027c6:	f004 fa96 	bl	8006cf6 <HAL_UART_Transmit>
			    strcpy((char *)cliBufferTX,", " );
 80027ca:	4b56      	ldr	r3, [pc, #344]	; (8002924 <main+0x6ac>)
 80027cc:	4a56      	ldr	r2, [pc, #344]	; (8002928 <main+0x6b0>)
 80027ce:	8811      	ldrh	r1, [r2, #0]
 80027d0:	7892      	ldrb	r2, [r2, #2]
 80027d2:	8019      	strh	r1, [r3, #0]
 80027d4:	709a      	strb	r2, [r3, #2]
			    HAL_UART_Transmit(&huart3,cliBufferTX,strlen((char*)cliBufferTX),200);
 80027d6:	4853      	ldr	r0, [pc, #332]	; (8002924 <main+0x6ac>)
 80027d8:	f7fd fcba 	bl	8000150 <strlen>
 80027dc:	4603      	mov	r3, r0
 80027de:	b29a      	uxth	r2, r3
 80027e0:	23c8      	movs	r3, #200	; 0xc8
 80027e2:	4950      	ldr	r1, [pc, #320]	; (8002924 <main+0x6ac>)
 80027e4:	484e      	ldr	r0, [pc, #312]	; (8002920 <main+0x6a8>)
 80027e6:	f004 fa86 	bl	8006cf6 <HAL_UART_Transmit>




			  	strcpy((char *)cliBufferTX,"\r\n " );
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <main+0x6ac>)
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <main+0x6c0>)
 80027ee:	6810      	ldr	r0, [r2, #0]
 80027f0:	6018      	str	r0, [r3, #0]
			  	HAL_UART_Transmit(&huart3,cliBufferTX,strlen((char *)cliBufferTX),200);
 80027f2:	484c      	ldr	r0, [pc, #304]	; (8002924 <main+0x6ac>)
 80027f4:	f7fd fcac 	bl	8000150 <strlen>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	23c8      	movs	r3, #200	; 0xc8
 80027fe:	4949      	ldr	r1, [pc, #292]	; (8002924 <main+0x6ac>)
 8002800:	4847      	ldr	r0, [pc, #284]	; (8002920 <main+0x6a8>)
 8002802:	f004 fa78 	bl	8006cf6 <HAL_UART_Transmit>


	  }//reading section close


	      HAL_UART_Receive_IT(&huart3,cliBufferRX,2);
 8002806:	2202      	movs	r2, #2
 8002808:	494c      	ldr	r1, [pc, #304]	; (800293c <main+0x6c4>)
 800280a:	4845      	ldr	r0, [pc, #276]	; (8002920 <main+0x6a8>)
 800280c:	f004 fb05 	bl	8006e1a <HAL_UART_Receive_IT>
		//PWM led running logic
		  PA0_Vlotage = adc_buf[0]*(3.3/4096);
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <main+0x6c8>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fdf5 	bl	8000404 <__aeabi_i2d>
 800281a:	a337      	add	r3, pc, #220	; (adr r3, 80028f8 <main+0x680>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fe5a 	bl	80004d8 <__aeabi_dmul>
 8002824:	4603      	mov	r3, r0
 8002826:	460c      	mov	r4, r1
 8002828:	4618      	mov	r0, r3
 800282a:	4621      	mov	r1, r4
 800282c:	f7fe f94c 	bl	8000ac8 <__aeabi_d2f>
 8002830:	4603      	mov	r3, r0
 8002832:	67bb      	str	r3, [r7, #120]	; 0x78
		  PA1_Vlotage = adc_buf[1]*(3.3/4096);
 8002834:	4b42      	ldr	r3, [pc, #264]	; (8002940 <main+0x6c8>)
 8002836:	885b      	ldrh	r3, [r3, #2]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fde3 	bl	8000404 <__aeabi_i2d>
 800283e:	a32e      	add	r3, pc, #184	; (adr r3, 80028f8 <main+0x680>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fd fe48 	bl	80004d8 <__aeabi_dmul>
 8002848:	4603      	mov	r3, r0
 800284a:	460c      	mov	r4, r1
 800284c:	4618      	mov	r0, r3
 800284e:	4621      	mov	r1, r4
 8002850:	f7fe f93a 	bl	8000ac8 <__aeabi_d2f>
 8002854:	4603      	mov	r3, r0
 8002856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		 // __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,999);
		 printf("\n PA1 Voltage is %.4f v\t\r\n",PA1);
 800285a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800285e:	f7fd fde3 	bl	8000428 <__aeabi_f2d>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	461a      	mov	r2, r3
 8002868:	4623      	mov	r3, r4
 800286a:	4836      	ldr	r0, [pc, #216]	; (8002944 <main+0x6cc>)
 800286c:	f005 fc8e 	bl	800818c <iprintf>
		 // __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,9999);
		 //printf("\n PA1 Voltage is %.4f v\t\r\n",PA1_Vlotage);
		// HAL_Delay(100);
		 led_current_reading_1 = PA1_Vlotage +  led_current_reading_1;
 8002870:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002874:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002878:	f7fe f97c 	bl	8000b74 <__addsf3>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		 counter_led_reading_1++;
 8002882:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002886:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800288a:	f7fe f973 	bl	8000b74 <__addsf3>
 800288e:	4603      	mov	r3, r0
 8002890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		 if(counter_led_reading_1 == 20)
 8002894:	492c      	ldr	r1, [pc, #176]	; (8002948 <main+0x6d0>)
 8002896:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800289a:	f7fe fc07 	bl	80010ac <__aeabi_fcmpeq>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <main+0x654>
		 {
			 led_current_reading_1 = led_current_reading_1/20;
 80028a4:	4928      	ldr	r1, [pc, #160]	; (8002948 <main+0x6d0>)
 80028a6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80028aa:	f7fe fb1f 	bl	8000eec <__aeabi_fdiv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			 PA1 = led_current_reading_1;
 80028b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			 led_current_reading_1 = 0;
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			 counter_led_reading_1 = 0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		 }
		 if(ilu_mode!=1)
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <main+0x6d4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fbe9 	bl	80010ac <__aeabi_fcmpeq>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <main+0x670>
		 {
			 ilu_mode = 0;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <main+0x6d4>)
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
		 }
		 if(ilu_mode == 0)
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <main+0x6d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	e02d      	b.n	8002950 <main+0x6d8>
 80028f4:	f3af 8000 	nop.w
 80028f8:	66666666 	.word	0x66666666
 80028fc:	3f4a6666 	.word	0x3f4a6666
 8002900:	43af0000 	.word	0x43af0000
 8002904:	0800ba74 	.word	0x0800ba74
 8002908:	0800ba7c 	.word	0x0800ba7c
 800290c:	0800ba80 	.word	0x0800ba80
 8002910:	0800ba88 	.word	0x0800ba88
 8002914:	0800ba90 	.word	0x0800ba90
 8002918:	200003ec 	.word	0x200003ec
 800291c:	200003e8 	.word	0x200003e8
 8002920:	200004f8 	.word	0x200004f8
 8002924:	20000320 	.word	0x20000320
 8002928:	0800ba94 	.word	0x0800ba94
 800292c:	430c0000 	.word	0x430c0000
 8002930:	20000008 	.word	0x20000008
 8002934:	20000004 	.word	0x20000004
 8002938:	0800ba98 	.word	0x0800ba98
 800293c:	20000404 	.word	0x20000404
 8002940:	20000414 	.word	0x20000414
 8002944:	0800ba9c 	.word	0x0800ba9c
 8002948:	41a00000 	.word	0x41a00000
 800294c:	2000041c 	.word	0x2000041c
 8002950:	f7fe fbac 	bl	80010ac <__aeabi_fcmpeq>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03a      	beq.n	80029d0 <main+0x758>
		 {
			 led_current_reading = PA0_Vlotage +  led_current_reading;
 800295a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800295c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002960:	f7fe f908 	bl	8000b74 <__addsf3>
 8002964:	4603      	mov	r3, r0
 8002966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			 counter_led_reading++;
 800296a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800296e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002972:	f7fe f8ff 	bl	8000b74 <__addsf3>
 8002976:	4603      	mov	r3, r0
 8002978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			 if (counter_led_reading == 20)
 800297c:	49b6      	ldr	r1, [pc, #728]	; (8002c58 <main+0x9e0>)
 800297e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002982:	f7fe fb93 	bl	80010ac <__aeabi_fcmpeq>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d021      	beq.n	80029d0 <main+0x758>
			 {

				 led_current_reading=led_current_reading/20;
 800298c:	49b2      	ldr	r1, [pc, #712]	; (8002c58 <main+0x9e0>)
 800298e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002992:	f7fe faab 	bl	8000eec <__aeabi_fdiv>
 8002996:	4603      	mov	r3, r0
 8002998:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,led_current_reading*62000);
 800299c:	49af      	ldr	r1, [pc, #700]	; (8002c5c <main+0x9e4>)
 800299e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80029a2:	f7fe f9ef 	bl	8000d84 <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4bad      	ldr	r3, [pc, #692]	; (8002c60 <main+0x9e8>)
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	4610      	mov	r0, r2
 80029b0:	f7fe fbae 	bl	8001110 <__aeabi_f2uiz>
 80029b4:	4603      	mov	r3, r0
 80029b6:	63e3      	str	r3, [r4, #60]	; 0x3c
				 led_previous_reading = led_current_reading;
 80029b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				 counter_led_reading=0;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				 led_current_reading=0;
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				// HAL_Delay(200);
			 }
		 }
		 if(ilu_mode == 1 && led_mode_lock == 0)
 80029d0:	4ba4      	ldr	r3, [pc, #656]	; (8002c64 <main+0x9ec>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fb67 	bl	80010ac <__aeabi_fcmpeq>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80c7 	beq.w	8002b74 <main+0x8fc>
 80029e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80c2 	bne.w	8002b74 <main+0x8fc>
		 {

			 	char* buffer[2];
			 	 int i=0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 	 int temp=1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 	 int ilu_mode_gear;
			 	 	 	 	 	 	 lcd_clear();
 80029fc:	f7fe fdf0 	bl	80015e0 <lcd_clear>
			 						 lcd_put_cur(0,0);
 8002a00:	2100      	movs	r1, #0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe fe02 	bl	800160c <lcd_put_cur>
			 						 lcd_send_string("set ilu gear");
 8002a08:	4897      	ldr	r0, [pc, #604]	; (8002c68 <main+0x9f0>)
 8002a0a:	f7fe fe5a 	bl	80016c2 <lcd_send_string>
			 						 lcd_put_cur(1,0);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2001      	movs	r0, #1
 8002a12:	f7fe fdfb 	bl	800160c <lcd_put_cur>
			 						 lcd_send_string("enter value:");
 8002a16:	4895      	ldr	r0, [pc, #596]	; (8002c6c <main+0x9f4>)
 8002a18:	f7fe fe53 	bl	80016c2 <lcd_send_string>
			 						  while(key!='*')
 8002a1c:	e06d      	b.n	8002afa <main+0x882>
			 						  {
			 						 	 key=read_keypad();
 8002a1e:	f7fe fed1 	bl	80017c4 <read_keypad>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <main+0x9f8>)
 8002a28:	701a      	strb	r2, [r3, #0]
			 						 	ilu_mode_gear=0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 						 	 if(key!='E')
 8002a30:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <main+0x9f8>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b45      	cmp	r3, #69	; 0x45
 8002a36:	d011      	beq.n	8002a5c <main+0x7e4>
			 						 	  {
			 						 	    lcd_send_data(key);
 8002a38:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <main+0x9f8>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fd9f 	bl	8001580 <lcd_send_data>
			 						 	    set_data[i]=key;
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <main+0x9f8>)
 8002a44:	7819      	ldrb	r1, [r3, #0]
 8002a46:	4a8b      	ldr	r2, [pc, #556]	; (8002c74 <main+0x9fc>)
 8002a48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	460a      	mov	r2, r1
 8002a50:	701a      	strb	r2, [r3, #0]
			 						 	    i++;
 8002a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a56:	3301      	adds	r3, #1
 8002a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 						 	  }
			 						 	  HAL_Delay(100);
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	f000 fedf 	bl	8003820 <HAL_Delay>

			 						 	  if(key=='*')
 8002a62:	4b83      	ldr	r3, [pc, #524]	; (8002c70 <main+0x9f8>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b2a      	cmp	r3, #42	; 0x2a
 8002a68:	d147      	bne.n	8002afa <main+0x882>
			 						 	  {
			 						 	     int counter=0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			 						 	     int flag=0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			 						 	     while(set_data[flag]!='*')
 8002a76:	e009      	b.n	8002a8c <main+0x814>
			 						 	     {
			 						 	    	   flag++;
 8002a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			 						 	    	   counter++;
 8002a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a86:	3301      	adds	r3, #1
 8002a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			 						 	     while(set_data[flag]!='*')
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <main+0x9fc>)
 8002a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b2a      	cmp	r3, #42	; 0x2a
 8002a98:	d1ee      	bne.n	8002a78 <main+0x800>
			 						 	     }
			 						 	    for(int j=0;j<=counter-1;j++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aa0:	e01e      	b.n	8002ae0 <main+0x868>
			 						 	    {
			 						 	    	ilu_mode_gear+=(set_data[counter-1-j]-'0')*temp;
 8002aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa6:	1e5a      	subs	r2, r3, #1
 8002aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <main+0x9fc>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	3b30      	subs	r3, #48	; 0x30
 8002ab4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 						 	    	temp=temp*10;
 8002ac6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 						 	    for(int j=0;j<=counter-1;j++)
 8002ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ada:	3301      	adds	r3, #1
 8002adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002aea:	429a      	cmp	r2, r3
 8002aec:	ddd9      	ble.n	8002aa2 <main+0x82a>
			 						 	    }

			 						 	    	 lcd_clear();
 8002aee:	f7fe fd77 	bl	80015e0 <lcd_clear>
			 						 	    	 lcd_put_cur(0,0);
 8002af2:	2100      	movs	r1, #0
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fd89 	bl	800160c <lcd_put_cur>
			 						  while(key!='*')
 8002afa:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <main+0x9f8>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b2a      	cmp	r3, #42	; 0x2a
 8002b00:	d18d      	bne.n	8002a1e <main+0x7a6>

			 						 	    }
			 						 	   }
			 						 	         HAL_Delay(100);
 8002b02:	2064      	movs	r0, #100	; 0x64
 8002b04:	f000 fe8c 	bl	8003820 <HAL_Delay>
			 						 	         key=' ';
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <main+0x9f8>)
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	701a      	strb	r2, [r3, #0]
			if (ilu_mode_gear==1)
 8002b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <main+0x8aa>
			{
				 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,10000);
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <main+0x9e8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b20:	e025      	b.n	8002b6e <main+0x8f6>
			}
			else if (ilu_mode_gear==2)
 8002b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d105      	bne.n	8002b36 <main+0x8be>
			{
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,9600);
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <main+0x9e8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b34:	e01b      	b.n	8002b6e <main+0x8f6>
			}
			else if (ilu_mode_gear==3)
 8002b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d105      	bne.n	8002b4a <main+0x8d2>
			{
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,7600);
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <main+0x9e8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f641 52b0 	movw	r2, #7600	; 0x1db0
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b48:	e011      	b.n	8002b6e <main+0x8f6>
			}
			else if (ilu_mode_gear==4)
 8002b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d104      	bne.n	8002b5c <main+0x8e4>
			{
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <main+0x9e8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b5a:	e008      	b.n	8002b6e <main+0x8f6>
			}
			else
			{ lcd_clear();
 8002b5c:	f7fe fd40 	bl	80015e0 <lcd_clear>
			 lcd_put_cur(0,0);
 8002b60:	2100      	movs	r1, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe fd52 	bl	800160c <lcd_put_cur>
			 lcd_send_string("Wrong input");
 8002b68:	4843      	ldr	r0, [pc, #268]	; (8002c78 <main+0xa00>)
 8002b6a:	f7fe fdaa 	bl	80016c2 <lcd_send_string>
			}
			led_mode_lock = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		 }

		 humidity_run();
 8002b74:	f7ff f846 	bl	8001c04 <humidity_run>
		 //HAL_Delay(200);

		//

		//PWM HEATER Fan RUNNING 黄灯
		if ((TEMP > target_TEMP-2) && (TEMP < target_TEMP+2)) //温度大于 23 °C 并且小于25 °C PWM 50%
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <main+0xa04>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fff5 	bl	8000b70 <__aeabi_fsub>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002b8e:	f7fe fab5 	bl	80010fc <__aeabi_fcmpgt>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d018      	beq.n	8002bca <main+0x952>
 8002b98:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <main+0xa04>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd ffe7 	bl	8000b74 <__addsf3>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002bae:	f7fe fa87 	bl	80010c0 <__aeabi_fcmplt>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <main+0x952>
		{
			if (HYSTERESIS == 1)
 8002bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d142      	bne.n	8002c46 <main+0x9ce>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,5); // heater 100000HZ
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <main+0xa08>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2205      	movs	r2, #5
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
			if (HYSTERESIS == 1)
 8002bc8:	e03d      	b.n	8002c46 <main+0x9ce>
			}

		}
		else if ((TEMP > target_TEMP-4)&&(TEMP < target_TEMP-2)) //温度大于 21 °C 并且小于23 °C PWM 80%
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <main+0xa04>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd ffcc 	bl	8000b70 <__aeabi_fsub>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002be0:	f7fe fa8c 	bl	80010fc <__aeabi_fcmpgt>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d014      	beq.n	8002c14 <main+0x99c>
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <main+0xa04>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd ffbc 	bl	8000b70 <__aeabi_fsub>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002c00:	f7fe fa5e 	bl	80010c0 <__aeabi_fcmplt>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <main+0x99c>
		{
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,2);
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <main+0xa08>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
 8002c12:	e018      	b.n	8002c46 <main+0x9ce>
		}

		else if (TEMP < target_TEMP-4) //温度小于 21 °C PWM 100%
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <main+0xa04>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd ffa7 	bl	8000b70 <__aeabi_fsub>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002c2a:	f7fe fa49 	bl	80010c0 <__aeabi_fcmplt>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <main+0x9c6>
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <main+0xa08>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3c:	e003      	b.n	8002c46 <main+0x9ce>
				}
		else __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,11); //不工�?????????????????????????????????????????????
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <main+0xa08>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	220b      	movs	r2, #11
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

		//PWM FAN RUNNING 红灯
           // 远程控制风扇开关
           if(fan_flag==1)
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <main+0xa0c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d11c      	bne.n	8002c88 <main+0xa10>
            {
              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);//pwm 100%
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <main+0xa08>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c56:	e09d      	b.n	8002d94 <main+0xb1c>
 8002c58:	41a00000 	.word	0x41a00000
 8002c5c:	47723000 	.word	0x47723000
 8002c60:	200004b0 	.word	0x200004b0
 8002c64:	2000041c 	.word	0x2000041c
 8002c68:	0800bab8 	.word	0x0800bab8
 8002c6c:	0800b91c 	.word	0x0800b91c
 8002c70:	20000311 	.word	0x20000311
 8002c74:	20000314 	.word	0x20000314
 8002c78:	0800bac8 	.word	0x0800bac8
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	20000468 	.word	0x20000468
 8002c84:	20000208 	.word	0x20000208

            }
            else{

				if ((TEMP > target_TEMP) && (TEMP < target_TEMP+2)) //温度大于 25 °C 并且小于27 °C PWM 50%
 8002c88:	4b6b      	ldr	r3, [pc, #428]	; (8002e38 <main+0xbc0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002c92:	f7fe fa33 	bl	80010fc <__aeabi_fcmpgt>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01f      	beq.n	8002cdc <main+0xa64>
 8002c9c:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <main+0xbc0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd ff65 	bl	8000b74 <__addsf3>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002cb2:	f7fe fa05 	bl	80010c0 <__aeabi_fcmplt>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00f      	beq.n	8002cdc <main+0xa64>
				{
					if (HYSTERESIS == 0)
 8002cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d14a      	bne.n	8002d5a <main+0xae2>
					{
						if (HYSTERESIS_FAN == 1)
 8002cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d146      	bne.n	8002d5a <main+0xae2>
						{
						__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,6); // fan 100000HZ
 8002ccc:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <main+0xbc4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2206      	movs	r2, #6
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
							HYSTERESIS_FAN = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					if (HYSTERESIS == 0)
 8002cda:	e03e      	b.n	8002d5a <main+0xae2>
						}
					}
				}
				else if ((TEMP > target_TEMP+2)&&(TEMP < target_TEMP+4)) //温度大于 27 °C 并且小于29 °C PWM 80%
 8002cdc:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <main+0xbc0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd ff45 	bl	8000b74 <__addsf3>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4619      	mov	r1, r3
 8002cee:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002cf2:	f7fe fa03 	bl	80010fc <__aeabi_fcmpgt>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d014      	beq.n	8002d26 <main+0xaae>
 8002cfc:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <main+0xbc0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd ff35 	bl	8000b74 <__addsf3>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d12:	f7fe f9d5 	bl	80010c0 <__aeabi_fcmplt>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <main+0xaae>
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,3);
 8002d1c:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <main+0xbc4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2203      	movs	r2, #3
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d24:	e01a      	b.n	8002d5c <main+0xae4>
				}
				else if (TEMP >= target_TEMP+4) //温度大于 29 °C PWM 100%
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <main+0xbc0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd ff20 	bl	8000b74 <__addsf3>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d3c:	f7fe f9d4 	bl	80010e8 <__aeabi_fcmpge>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <main+0xad8>
						{
							__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <main+0xbc4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d4e:	e005      	b.n	8002d5c <main+0xae4>
						}
				else
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,11);//不工�?????????????????????????????????????????????
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <main+0xbc4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	220b      	movs	r2, #11
 8002d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d58:	e000      	b.n	8002d5c <main+0xae4>
					if (HYSTERESIS == 0)
 8002d5a:	bf00      	nop

				if (TEMP < target_TEMP-1.5) //当温度小�????????????????????????????????????????????? 23.5 ° 风扇 的HYSTERESIS反转
 8002d5c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d60:	f7fd fb62 	bl	8000428 <__aeabi_f2d>
 8002d64:	4604      	mov	r4, r0
 8002d66:	460d      	mov	r5, r1
 8002d68:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <main+0xbc0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fb5b 	bl	8000428 <__aeabi_f2d>
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <main+0xbc8>)
 8002d78:	f7fd f9f6 	bl	8000168 <__aeabi_dsub>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd fe1a 	bl	80009bc <__aeabi_dcmplt>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <main+0xb1c>
				{
					HYSTERESIS_FAN = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				}
			}
				//Heater Running PB0
					if (TEMP < target_TEMP) //温度小于 25 °C HEATER打开
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <main+0xbc0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d9e:	f7fe f98f 	bl	80010c0 <__aeabi_fcmplt>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01e      	beq.n	8002de6 <main+0xb6e>
					{
						if (((HYSTERESIS == 0) && (TEMP < target_TEMP-2)))
 8002da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f aad2 	bne.w	8002356 <main+0xde>
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <main+0xbc0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fed8 	bl	8000b70 <__aeabi_fsub>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002dc8:	f7fe f97a 	bl	80010c0 <__aeabi_fcmplt>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d030      	beq.n	8002e34 <main+0xbbc>
						{
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);  // 打开PC5 蓝灯 高于27°关闭 低于23°打开
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	481b      	ldr	r0, [pc, #108]	; (8002e44 <main+0xbcc>)
 8002dd8:	f001 ffa3 	bl	8004d22 <HAL_GPIO_WritePin>

							HYSTERESIS = 1;//等待温度上升�????????????????????????????????????????????? HEATER�?????????????????????????????????????????????�?????????????????????????????????????????????
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002de2:	f7ff bab8 	b.w	8002356 <main+0xde>
						}

					}
							else if (TEMP > target_TEMP)// 温度大于25 HEATER关闭
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <main+0xbc0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002df0:	f7fe f984 	bl	80010fc <__aeabi_fcmpgt>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01c      	beq.n	8002e34 <main+0xbbc>
							{
								if ((HYSTERESIS == 1) && (TEMP > target_TEMP+2))
 8002dfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f47f aaa9 	bne.w	8002356 <main+0xde>
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <main+0xbc0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd feb1 	bl	8000b74 <__addsf3>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002e1a:	f7fe f96f 	bl	80010fc <__aeabi_fcmpgt>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <main+0xbbc>
								{
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //关闭PC5
 8002e24:	2200      	movs	r2, #0
 8002e26:	2120      	movs	r1, #32
 8002e28:	4806      	ldr	r0, [pc, #24]	; (8002e44 <main+0xbcc>)
 8002e2a:	f001 ff7a 	bl	8004d22 <HAL_GPIO_WritePin>
									HYSTERESIS = 0;//等待温度下降�????????????????????????????????????????????? HEATER关闭
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  {
 8002e34:	f7ff ba8f 	b.w	8002356 <main+0xde>
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	20000468 	.word	0x20000468
 8002e40:	3ff80000 	.word	0x3ff80000
 8002e44:	40011000 	.word	0x40011000

08002e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b094      	sub	sp, #80	; 0x50
 8002e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e52:	2228      	movs	r2, #40	; 0x28
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fb60 	bl	800751c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e86:	2301      	movs	r3, #1
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fb96 	bl	80055d0 <HAL_RCC_OscConfig>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002eaa:	f000 f861 	bl	8002f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eae:	230f      	movs	r3, #15
 8002eb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ebe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fe00 	bl	8005ad0 <HAL_RCC_ClockConfig>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002ed6:	f000 f84b 	bl	8002f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002eda:	2302      	movs	r3, #2
 8002edc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 ff8e 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002ef2:	f000 f83d 	bl	8002f70 <Error_Handler>
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3750      	adds	r7, #80	; 0x50
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <initialization>:

/* USER CODE BEGIN 4 */

void initialization()
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	e007      	b.n	8002f1c <initialization+0x1c>
	{
		cliBufferRX[i]=0;
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <initialization+0x2c>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	ddf4      	ble.n	8002f0c <initialization+0xc>

	}
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20000404 	.word	0x20000404

08002f30 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	char delims[] = ",";
 8002f38:	232c      	movs	r3, #44	; 0x2c
 8002f3a:	81bb      	strh	r3, [r7, #12]
    }*/


    	//result2 =  strtok( cliBufferRX, delims );

    	p_flag=cliBufferRX[0];
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_UART_RxCpltCallback+0x34>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
    	pump_flag=p_flag-'0';
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3b30      	subs	r3, #48	; 0x30
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_UART_RxCpltCallback+0x38>)
 8002f48:	6013      	str	r3, [r2, #0]

    	f_flag = cliBufferRX[1];
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_UART_RxCpltCallback+0x34>)
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	613b      	str	r3, [r7, #16]
    	fan_flag=f_flag-'0';
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	3b30      	subs	r3, #48	; 0x30
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_UART_RxCpltCallback+0x3c>)
 8002f56:	6013      	str	r3, [r2, #0]


         initialization();
 8002f58:	f7ff ffd2 	bl	8002f00 <initialization>

    /*result2 = strtok( NULL, delims );
    set_value=atof(result2);*/
}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000404 	.word	0x20000404
 8002f68:	20000204 	.word	0x20000204
 8002f6c:	20000208 	.word	0x20000208

08002f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_MspInit+0x5c>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_MspInit+0x5c>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6193      	str	r3, [r2, #24]
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_MspInit+0x5c>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_MspInit+0x5c>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_MspInit+0x5c>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_MspInit+0x5c>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_MspInit+0x60>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_MspInit+0x60>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40010000 	.word	0x40010000

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <HardFault_Handler+0x4>

08002ff2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <MemManage_Handler+0x4>

08002ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <BusFault_Handler+0x4>

08002ffe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <UsageFault_Handler+0x4>

08003004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800302c:	f000 fbdc 	bl	80037e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}

08003034 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003038:	4802      	ldr	r0, [pc, #8]	; (8003044 <DMA1_Channel1_IRQHandler+0x10>)
 800303a:	f001 fbcd 	bl	80047d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000278 	.word	0x20000278

08003048 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <USART3_IRQHandler+0x10>)
 800304e:	f003 ff39 	bl	8006ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200004f8 	.word	0x200004f8

0800305c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e00a      	b.n	8003084 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800306e:	f3af 8000 	nop.w
 8003072:	4601      	mov	r1, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	60ba      	str	r2, [r7, #8]
 800307a:	b2ca      	uxtb	r2, r1
 800307c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	3301      	adds	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	dbf0      	blt.n	800306e <_read+0x12>
	}

return len;
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e009      	b.n	80030bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	60ba      	str	r2, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fd05 	bl	8001ac0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3301      	adds	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	dbf1      	blt.n	80030a8 <_write+0x12>
	}
	return len;
 80030c4:	687b      	ldr	r3, [r7, #4]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <_close>:

int _close(int file)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
	return -1;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030f4:	605a      	str	r2, [r3, #4]
	return 0;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <_isatty>:

int _isatty(int file)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
	return 1;
 800310a:	2301      	movs	r3, #1
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
	return 0;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
	...

08003130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <_sbrk+0x5c>)
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <_sbrk+0x60>)
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <_sbrk+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <_sbrk+0x64>)
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <_sbrk+0x68>)
 8003150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	d207      	bcs.n	8003170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003160:	f004 f9b2 	bl	80074c8 <__errno>
 8003164:	4602      	mov	r2, r0
 8003166:	230c      	movs	r3, #12
 8003168:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	e009      	b.n	8003184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <_sbrk+0x64>)
 8003180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20005000 	.word	0x20005000
 8003190:	00000400 	.word	0x00000400
 8003194:	2000020c 	.word	0x2000020c
 8003198:	20000580 	.word	0x20000580

0800319c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ae:	f107 0320 	add.w	r3, r7, #32
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <MX_TIM2_Init+0xac>)
 80031cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <MX_TIM2_Init+0xac>)
 80031d4:	2247      	movs	r2, #71	; 0x47
 80031d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <MX_TIM2_Init+0xac>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <MX_TIM2_Init+0xac>)
 80031e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80031e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <MX_TIM2_Init+0xac>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <MX_TIM2_Init+0xac>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031f2:	4818      	ldr	r0, [pc, #96]	; (8003254 <MX_TIM2_Init+0xac>)
 80031f4:	f002 ffc9 	bl	800618a <HAL_TIM_PWM_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80031fe:	f7ff feb7 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	4619      	mov	r1, r3
 8003210:	4810      	ldr	r0, [pc, #64]	; (8003254 <MX_TIM2_Init+0xac>)
 8003212:	f003 fcc5 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800321c:	f7ff fea8 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003220:	2360      	movs	r3, #96	; 0x60
 8003222:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003228:	2302      	movs	r3, #2
 800322a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	2208      	movs	r2, #8
 8003234:	4619      	mov	r1, r3
 8003236:	4807      	ldr	r0, [pc, #28]	; (8003254 <MX_TIM2_Init+0xac>)
 8003238:	f003 f898 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003242:	f7ff fe95 	bl	8002f70 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003246:	4803      	ldr	r0, [pc, #12]	; (8003254 <MX_TIM2_Init+0xac>)
 8003248:	f000 f906 	bl	8003458 <HAL_TIM_MspPostInit>

}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200004b0 	.word	0x200004b0

08003258 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325e:	f107 0320 	add.w	r3, r7, #32
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	615a      	str	r2, [r3, #20]
 8003278:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <MX_TIM3_Init+0xc0>)
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <MX_TIM3_Init+0xc4>)
 800327e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <MX_TIM3_Init+0xc0>)
 8003282:	2247      	movs	r2, #71	; 0x47
 8003284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <MX_TIM3_Init+0xc0>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800328c:	4b22      	ldr	r3, [pc, #136]	; (8003318 <MX_TIM3_Init+0xc0>)
 800328e:	220a      	movs	r2, #10
 8003290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <MX_TIM3_Init+0xc0>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <MX_TIM3_Init+0xc0>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800329e:	481e      	ldr	r0, [pc, #120]	; (8003318 <MX_TIM3_Init+0xc0>)
 80032a0:	f002 ff73 	bl	800618a <HAL_TIM_PWM_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80032aa:	f7ff fe61 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032b6:	f107 0320 	add.w	r3, r7, #32
 80032ba:	4619      	mov	r1, r3
 80032bc:	4816      	ldr	r0, [pc, #88]	; (8003318 <MX_TIM3_Init+0xc0>)
 80032be:	f003 fc6f 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80032c8:	f7ff fe52 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032cc:	2360      	movs	r3, #96	; 0x60
 80032ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80032d4:	2302      	movs	r3, #2
 80032d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2208      	movs	r2, #8
 80032e0:	4619      	mov	r1, r3
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <MX_TIM3_Init+0xc0>)
 80032e4:	f003 f842 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80032ee:	f7ff fe3f 	bl	8002f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	220c      	movs	r2, #12
 80032f6:	4619      	mov	r1, r3
 80032f8:	4807      	ldr	r0, [pc, #28]	; (8003318 <MX_TIM3_Init+0xc0>)
 80032fa:	f003 f837 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003304:	f7ff fe34 	bl	8002f70 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003308:	4803      	ldr	r0, [pc, #12]	; (8003318 <MX_TIM3_Init+0xc0>)
 800330a:	f000 f8a5 	bl	8003458 <HAL_TIM_MspPostInit>

}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000468 	.word	0x20000468
 800331c:	40000400 	.word	0x40000400

08003320 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003334:	463b      	mov	r3, r7
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <MX_TIM4_Init+0x94>)
 800333e:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <MX_TIM4_Init+0x98>)
 8003340:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <MX_TIM4_Init+0x94>)
 8003344:	2247      	movs	r2, #71	; 0x47
 8003346:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <MX_TIM4_Init+0x94>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800334e:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <MX_TIM4_Init+0x94>)
 8003350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003354:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <MX_TIM4_Init+0x94>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335c:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <MX_TIM4_Init+0x94>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003362:	4814      	ldr	r0, [pc, #80]	; (80033b4 <MX_TIM4_Init+0x94>)
 8003364:	f002 fec2 	bl	80060ec <HAL_TIM_Base_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800336e:	f7ff fdff 	bl	8002f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003378:	f107 0308 	add.w	r3, r7, #8
 800337c:	4619      	mov	r1, r3
 800337e:	480d      	ldr	r0, [pc, #52]	; (80033b4 <MX_TIM4_Init+0x94>)
 8003380:	f003 f8b2 	bl	80064e8 <HAL_TIM_ConfigClockSource>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800338a:	f7ff fdf1 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003396:	463b      	mov	r3, r7
 8003398:	4619      	mov	r1, r3
 800339a:	4806      	ldr	r0, [pc, #24]	; (80033b4 <MX_TIM4_Init+0x94>)
 800339c:	f003 fc00 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80033a6:	f7ff fde3 	bl	8002f70 <Error_Handler>
  }

}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000420 	.word	0x20000420
 80033b8:	40000800 	.word	0x40000800

080033bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_TIM_PWM_MspInit+0x58>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_TIM_PWM_MspInit+0x58>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	61d3      	str	r3, [r2, #28]
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_TIM_PWM_MspInit+0x58>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033e6:	e010      	b.n	800340a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_TIM_PWM_MspInit+0x5c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10b      	bne.n	800340a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_TIM_PWM_MspInit+0x58>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_TIM_PWM_MspInit+0x58>)
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	61d3      	str	r3, [r2, #28]
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_TIM_PWM_MspInit+0x58>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40021000 	.word	0x40021000
 8003418:	40000400 	.word	0x40000400

0800341c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_TIM_Base_MspInit+0x34>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10b      	bne.n	8003446 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_TIM_Base_MspInit+0x38>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_TIM_Base_MspInit+0x38>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	61d3      	str	r3, [r2, #28]
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_TIM_Base_MspInit+0x38>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr
 8003450:	40000800 	.word	0x40000800
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d12b      	bne.n	80034d0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_TIM_MspPostInit+0xbc>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_TIM_MspPostInit+0xbc>)
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_TIM_MspPostInit+0xbc>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2302      	movs	r3, #2
 800349c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	481c      	ldr	r0, [pc, #112]	; (8003518 <HAL_TIM_MspPostInit+0xc0>)
 80034a6:	f001 facb 	bl	8004a40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034ce:	e01c      	b.n	800350a <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIM_MspPostInit+0xc8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d117      	bne.n	800350a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_TIM_MspPostInit+0xbc>)
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_TIM_MspPostInit+0xbc>)
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	6193      	str	r3, [r2, #24]
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_TIM_MspPostInit+0xbc>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034f2:	2303      	movs	r3, #3
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2302      	movs	r3, #2
 80034fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <HAL_TIM_MspPostInit+0xc0>)
 8003506:	f001 fa9b 	bl	8004a40 <HAL_GPIO_Init>
}
 800350a:	bf00      	nop
 800350c:	3728      	adds	r7, #40	; 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40010c00 	.word	0x40010c00
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400

08003524 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <MX_USART2_UART_Init+0x50>)
 800352c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 8003530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 800354a:	220c      	movs	r2, #12
 800354c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800355a:	4805      	ldr	r0, [pc, #20]	; (8003570 <MX_USART2_UART_Init+0x4c>)
 800355c:	f003 fb7e 	bl	8006c5c <HAL_UART_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003566:	f7ff fd03 	bl	8002f70 <Error_Handler>
  }

}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000538 	.word	0x20000538
 8003574:	40004400 	.word	0x40004400

08003578 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <MX_USART3_UART_Init+0x50>)
 8003580:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 8003584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003588:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 800358c:	2200      	movs	r2, #0
 800358e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 8003598:	2200      	movs	r2, #0
 800359a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 800359e:	220c      	movs	r2, #12
 80035a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035ae:	4805      	ldr	r0, [pc, #20]	; (80035c4 <MX_USART3_UART_Init+0x4c>)
 80035b0:	f003 fb54 	bl	8006c5c <HAL_UART_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035ba:	f7ff fcd9 	bl	8002f70 <Error_Handler>
  }

}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200004f8 	.word	0x200004f8
 80035c8:	40004800 	.word	0x40004800

080035cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 031c 	add.w	r3, r7, #28
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a44      	ldr	r2, [pc, #272]	; (80036f8 <HAL_UART_MspInit+0x12c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d130      	bne.n	800364e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_UART_MspInit+0x130>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a42      	ldr	r2, [pc, #264]	; (80036fc <HAL_UART_MspInit+0x130>)
 80035f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f6:	61d3      	str	r3, [r2, #28]
 80035f8:	4b40      	ldr	r3, [pc, #256]	; (80036fc <HAL_UART_MspInit+0x130>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_UART_MspInit+0x130>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <HAL_UART_MspInit+0x130>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6193      	str	r3, [r2, #24]
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_UART_MspInit+0x130>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800361c:	2304      	movs	r3, #4
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	f107 031c 	add.w	r3, r7, #28
 800362c:	4619      	mov	r1, r3
 800362e:	4834      	ldr	r0, [pc, #208]	; (8003700 <HAL_UART_MspInit+0x134>)
 8003630:	f001 fa06 	bl	8004a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003634:	2308      	movs	r3, #8
 8003636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003640:	f107 031c 	add.w	r3, r7, #28
 8003644:	4619      	mov	r1, r3
 8003646:	482e      	ldr	r0, [pc, #184]	; (8003700 <HAL_UART_MspInit+0x134>)
 8003648:	f001 f9fa 	bl	8004a40 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800364c:	e050      	b.n	80036f0 <HAL_UART_MspInit+0x124>
  else if(uartHandle->Instance==USART3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <HAL_UART_MspInit+0x138>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d14b      	bne.n	80036f0 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_UART_MspInit+0x130>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	4a27      	ldr	r2, [pc, #156]	; (80036fc <HAL_UART_MspInit+0x130>)
 800365e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003662:	61d3      	str	r3, [r2, #28]
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_UART_MspInit+0x130>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_UART_MspInit+0x130>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_UART_MspInit+0x130>)
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	6193      	str	r3, [r2, #24]
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_UART_MspInit+0x130>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003696:	f107 031c 	add.w	r3, r7, #28
 800369a:	4619      	mov	r1, r3
 800369c:	481a      	ldr	r0, [pc, #104]	; (8003708 <HAL_UART_MspInit+0x13c>)
 800369e:	f001 f9cf 	bl	8004a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b0:	f107 031c 	add.w	r3, r7, #28
 80036b4:	4619      	mov	r1, r3
 80036b6:	4814      	ldr	r0, [pc, #80]	; (8003708 <HAL_UART_MspInit+0x13c>)
 80036b8:	f001 f9c2 	bl	8004a40 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_UART_MspInit+0x140>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	f043 0310 	orr.w	r3, r3, #16
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <HAL_UART_MspInit+0x140>)
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	2027      	movs	r0, #39	; 0x27
 80036e6:	f000 ff10 	bl	800450a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036ea:	2027      	movs	r0, #39	; 0x27
 80036ec:	f000 ff29 	bl	8004542 <HAL_NVIC_EnableIRQ>
}
 80036f0:	bf00      	nop
 80036f2:	3730      	adds	r7, #48	; 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40004400 	.word	0x40004400
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010800 	.word	0x40010800
 8003704:	40004800 	.word	0x40004800
 8003708:	40011000 	.word	0x40011000
 800370c:	40010000 	.word	0x40010000

08003710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003710:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003712:	e003      	b.n	800371c <LoopCopyDataInit>

08003714 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003716:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003718:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800371a:	3104      	adds	r1, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800371c:	480a      	ldr	r0, [pc, #40]	; (8003748 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003720:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003722:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003724:	d3f6      	bcc.n	8003714 <CopyDataInit>
  ldr r2, =_sbss
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003728:	e002      	b.n	8003730 <LoopFillZerobss>

0800372a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800372a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800372c:	f842 3b04 	str.w	r3, [r2], #4

08003730 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003732:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003734:	d3f9      	bcc.n	800372a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003736:	f7ff fd31 	bl	800319c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800373a:	f003 fecb 	bl	80074d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800373e:	f7fe fd9b 	bl	8002278 <main>
  bx lr
 8003742:	4770      	bx	lr
  ldr r3, =_sidata
 8003744:	0800be40 	.word	0x0800be40
  ldr r0, =_sdata
 8003748:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800374c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8003750:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8003754:	20000580 	.word	0x20000580

08003758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC1_2_IRQHandler>
	...

0800375c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_Init+0x28>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a07      	ldr	r2, [pc, #28]	; (8003784 <HAL_Init+0x28>)
 8003766:	f043 0310 	orr.w	r3, r3, #16
 800376a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800376c:	2003      	movs	r0, #3
 800376e:	f000 fec1 	bl	80044f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003772:	2000      	movs	r0, #0
 8003774:	f000 f808 	bl	8003788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003778:	f7ff fc00 	bl	8002f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40022000 	.word	0x40022000

08003788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_InitTick+0x54>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_InitTick+0x58>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379e:	fbb3 f3f1 	udiv	r3, r3, r1
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fed9 	bl	800455e <HAL_SYSTICK_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00e      	b.n	80037d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d80a      	bhi.n	80037d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037bc:	2200      	movs	r2, #0
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f000 fea1 	bl	800450a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c8:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <HAL_InitTick+0x5c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	20000014 	.word	0x20000014
 80037e4:	20000010 	.word	0x20000010

080037e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_IncTick+0x1c>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_IncTick+0x20>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	4a03      	ldr	r2, [pc, #12]	; (8003808 <HAL_IncTick+0x20>)
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	20000014 	.word	0x20000014
 8003808:	20000578 	.word	0x20000578

0800380c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return uwTick;
 8003810:	4b02      	ldr	r3, [pc, #8]	; (800381c <HAL_GetTick+0x10>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	20000578 	.word	0x20000578

08003820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff fff0 	bl	800380c <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d005      	beq.n	8003846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_Delay+0x40>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003846:	bf00      	nop
 8003848:	f7ff ffe0 	bl	800380c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d8f7      	bhi.n	8003848 <HAL_Delay+0x28>
  {
  }
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000014 	.word	0x20000014

08003864 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0be      	b.n	8003a04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d109      	bne.n	80038a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fcfe 	bl	80012a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fcb7 	bl	800421c <ADC_ConversionStop_Disable>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 8099 	bne.w	80039f2 <HAL_ADC_Init+0x18e>
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 8095 	bne.w	80039f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	f043 0202 	orr.w	r2, r3, #2
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7b1b      	ldrb	r3, [r3, #12]
 80038ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d003      	beq.n	8003906 <HAL_ADC_Init+0xa2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_ADC_Init+0xa8>
 8003906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800390a:	e000      	b.n	800390e <HAL_ADC_Init+0xaa>
 800390c:	2300      	movs	r3, #0
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7d1b      	ldrb	r3, [r3, #20]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d119      	bne.n	8003950 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7b1b      	ldrb	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	3b01      	subs	r3, #1
 800392a:	035a      	lsls	r2, r3, #13
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e00b      	b.n	8003950 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_ADC_Init+0x1a8>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003980:	d003      	beq.n	800398a <HAL_ADC_Init+0x126>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d104      	bne.n	8003994 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	3b01      	subs	r3, #1
 8003990:	051b      	lsls	r3, r3, #20
 8003992:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_ADC_Init+0x1ac>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10b      	bne.n	80039d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039ce:	e018      	b.n	8003a02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	f023 0312 	bic.w	r3, r3, #18
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039f0:	e007      	b.n	8003a02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f043 0210 	orr.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	ffe1f7fd 	.word	0xffe1f7fd
 8003a10:	ff1f0efe 	.word	0xff1f0efe

08003a14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Start+0x1a>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e098      	b.n	8003b60 <HAL_ADC_Start+0x14c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fb9e 	bl	8004178 <ADC_Enable>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 8087 	bne.w	8003b56 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a41      	ldr	r2, [pc, #260]	; (8003b68 <HAL_ADC_Start+0x154>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d105      	bne.n	8003a72 <HAL_ADC_Start+0x5e>
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_ADC_Start+0x158>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d115      	bne.n	8003a9e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d026      	beq.n	8003ada <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a9c:	e01d      	b.n	8003ada <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <HAL_ADC_Start+0x158>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_ADC_Start+0xaa>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <HAL_ADC_Start+0x154>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10d      	bne.n	8003ada <HAL_ADC_Start+0xc6>
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_ADC_Start+0x158>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ad2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f023 0206 	bic.w	r2, r3, #6
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003af2:	e002      	b.n	8003afa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0202 	mvn.w	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b1a:	d113      	bne.n	8003b44 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b20:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <HAL_ADC_Start+0x154>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_ADC_Start+0x158>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	e00c      	b.n	8003b5e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40012800 	.word	0x40012800
 8003b6c:	40012400 	.word	0x40012400

08003b70 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b86:	f7ff fe41 	bl	800380c <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0c8      	b.n	8003d44 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d12a      	bne.n	8003c16 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d123      	bne.n	8003c16 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003bce:	e01a      	b.n	8003c06 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d016      	beq.n	8003c06 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_ADC_PollForConversion+0x7e>
 8003bde:	f7ff fe15 	bl	800380c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20b      	bcs.n	8003c06 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	f043 0204 	orr.w	r2, r3, #4
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e09e      	b.n	8003d44 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0dd      	beq.n	8003bd0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003c14:	e06c      	b.n	8003cf0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c16:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_ADC_PollForConversion+0x1dc>)
 8003c18:	681c      	ldr	r4, [r3, #0]
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	f002 f9aa 	bl	8005f74 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c20:	4603      	mov	r3, r0
 8003c22:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6919      	ldr	r1, [r3, #16]
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_ADC_PollForConversion+0x1e0>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d118      	bne.n	8003c66 <HAL_ADC_PollForConversion+0xf6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68d9      	ldr	r1, [r3, #12]
 8003c3a:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_ADC_PollForConversion+0x1e4>)
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d111      	bne.n	8003c66 <HAL_ADC_PollForConversion+0xf6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6919      	ldr	r1, [r3, #16]
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_ADC_PollForConversion+0x1e8>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <HAL_ADC_PollForConversion+0xf2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68d9      	ldr	r1, [r3, #12]
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_ADC_PollForConversion+0x1ec>)
 8003c58:	400b      	ands	r3, r1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_ADC_PollForConversion+0xf2>
 8003c5e:	2314      	movs	r3, #20
 8003c60:	e020      	b.n	8003ca4 <HAL_ADC_PollForConversion+0x134>
 8003c62:	2329      	movs	r3, #41	; 0x29
 8003c64:	e01e      	b.n	8003ca4 <HAL_ADC_PollForConversion+0x134>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6919      	ldr	r1, [r3, #16]
 8003c6c:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <HAL_ADC_PollForConversion+0x1e8>)
 8003c6e:	400b      	ands	r3, r1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_ADC_PollForConversion+0x112>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68d9      	ldr	r1, [r3, #12]
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_ADC_PollForConversion+0x1ec>)
 8003c7c:	400b      	ands	r3, r1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <HAL_ADC_PollForConversion+0x12e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6919      	ldr	r1, [r3, #16]
 8003c88:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <HAL_ADC_PollForConversion+0x1f0>)
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <HAL_ADC_PollForConversion+0x132>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68d9      	ldr	r1, [r3, #12]
 8003c96:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_ADC_PollForConversion+0x1f0>)
 8003c98:	400b      	ands	r3, r1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_PollForConversion+0x132>
 8003c9e:	2354      	movs	r3, #84	; 0x54
 8003ca0:	e000      	b.n	8003ca4 <HAL_ADC_PollForConversion+0x134>
 8003ca2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003caa:	e01d      	b.n	8003ce8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d016      	beq.n	8003ce2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_ADC_PollForConversion+0x15a>
 8003cba:	f7ff fda7 	bl	800380c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d20b      	bcs.n	8003ce2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e030      	b.n	8003d44 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d8dd      	bhi.n	8003cac <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0212 	mvn.w	r2, #18
 8003cf8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d14:	d115      	bne.n	8003d42 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d111      	bne.n	8003d42 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	f043 0201 	orr.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	24924924 	.word	0x24924924
 8003d54:	00924924 	.word	0x00924924
 8003d58:	12492492 	.word	0x12492492
 8003d5c:	00492492 	.word	0x00492492
 8003d60:	00249249 	.word	0x00249249

08003d64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a64      	ldr	r2, [pc, #400]	; (8003f0c <HAL_ADC_Start_DMA+0x1a8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_ADC_Start_DMA+0x24>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a63      	ldr	r2, [pc, #396]	; (8003f10 <HAL_ADC_Start_DMA+0x1ac>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d106      	bne.n	8003d96 <HAL_ADC_Start_DMA+0x32>
 8003d88:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <HAL_ADC_Start_DMA+0x1a8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 80b3 	bne.w	8003efc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_Start_DMA+0x40>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0ae      	b.n	8003f02 <HAL_ADC_Start_DMA+0x19e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f9e3 	bl	8004178 <ADC_Enable>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 809a 	bne.w	8003ef2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4e      	ldr	r2, [pc, #312]	; (8003f10 <HAL_ADC_Start_DMA+0x1ac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d105      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x84>
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <HAL_ADC_Start_DMA+0x1a8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d115      	bne.n	8003e14 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d026      	beq.n	8003e50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e12:	e01d      	b.n	8003e50 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a39      	ldr	r2, [pc, #228]	; (8003f0c <HAL_ADC_Start_DMA+0x1a8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_ADC_Start_DMA+0xd0>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a38      	ldr	r2, [pc, #224]	; (8003f10 <HAL_ADC_Start_DMA+0x1ac>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10d      	bne.n	8003e50 <HAL_ADC_Start_DMA+0xec>
 8003e34:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <HAL_ADC_Start_DMA+0x1a8>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d006      	beq.n	8003e6a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	f023 0206 	bic.w	r2, r3, #6
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e68:	e002      	b.n	8003e70 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <HAL_ADC_Start_DMA+0x1b0>)
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <HAL_ADC_Start_DMA+0x1b4>)
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_ADC_Start_DMA+0x1b8>)
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0202 	mvn.w	r2, #2
 8003e98:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a18      	ldr	r0, [r3, #32]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	334c      	adds	r3, #76	; 0x4c
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f000 fbb7 	bl	800462c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ec8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ecc:	d108      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003edc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ede:	e00f      	b.n	8003f00 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003eee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ef0:	e006      	b.n	8003f00 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003efa:	e001      	b.n	8003f00 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40012400 	.word	0x40012400
 8003f10:	40012800 	.word	0x40012800
 8003f14:	08004291 	.word	0x08004291
 8003f18:	0800430d 	.word	0x0800430d
 8003f1c:	08004329 	.word	0x08004329

08003f20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x20>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e0dc      	b.n	800414a <HAL_ADC_ConfigChannel+0x1da>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d81c      	bhi.n	8003fda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	3b05      	subs	r3, #5
 8003fb2:	221f      	movs	r2, #31
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	4019      	ands	r1, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	3b05      	subs	r3, #5
 8003fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd8:	e03c      	b.n	8004054 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d81c      	bhi.n	800401c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3b23      	subs	r3, #35	; 0x23
 8003ff4:	221f      	movs	r2, #31
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	4019      	ands	r1, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	3b23      	subs	r3, #35	; 0x23
 800400e:	fa00 f203 	lsl.w	r2, r0, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
 800401a:	e01b      	b.n	8004054 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b41      	subs	r3, #65	; 0x41
 800402e:	221f      	movs	r2, #31
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	4019      	ands	r1, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	3b41      	subs	r3, #65	; 0x41
 8004048:	fa00 f203 	lsl.w	r2, r0, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b09      	cmp	r3, #9
 800405a:	d91c      	bls.n	8004096 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	3b1e      	subs	r3, #30
 800406e:	2207      	movs	r2, #7
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	4019      	ands	r1, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6898      	ldr	r0, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	3b1e      	subs	r3, #30
 8004088:	fa00 f203 	lsl.w	r2, r0, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	e019      	b.n	80040ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6919      	ldr	r1, [r3, #16]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	2207      	movs	r2, #7
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	4019      	ands	r1, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6898      	ldr	r0, [r3, #8]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	fa00 f203 	lsl.w	r2, r0, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d003      	beq.n	80040da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040d6:	2b11      	cmp	r3, #17
 80040d8:	d132      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_ADC_ConfigChannel+0x1e4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d125      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d126      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004100:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d11a      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_ADC_ConfigChannel+0x1e8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <HAL_ADC_ConfigChannel+0x1ec>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	0c9a      	lsrs	r2, r3, #18
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004120:	e002      	b.n	8004128 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x1b2>
 800412e:	e007      	b.n	8004140 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40012400 	.word	0x40012400
 8004158:	2000000c 	.word	0x2000000c
 800415c:	431bde83 	.word	0x431bde83

08004160 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
	...

08004178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d039      	beq.n	800420a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <ADC_Enable+0x9c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <ADC_Enable+0xa0>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	0c9b      	lsrs	r3, r3, #18
 80041b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041b4:	e002      	b.n	80041bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f9      	bne.n	80041b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041c2:	f7ff fb23 	bl	800380c <HAL_GetTick>
 80041c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80041c8:	e018      	b.n	80041fc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041ca:	f7ff fb1f 	bl	800380c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d911      	bls.n	80041fc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	f043 0210 	orr.w	r2, r3, #16
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d1df      	bne.n	80041ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2000000c 	.word	0x2000000c
 8004218:	431bde83 	.word	0x431bde83

0800421c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d127      	bne.n	8004286 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004246:	f7ff fae1 	bl	800380c <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800424c:	e014      	b.n	8004278 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800424e:	f7ff fadd 	bl	800380c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d90d      	bls.n	8004278 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f043 0210 	orr.w	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e007      	b.n	8004288 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d0e3      	beq.n	800424e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d127      	bne.n	80042fa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80042c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042c4:	d115      	bne.n	80042f2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d111      	bne.n	80042f2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fe20 	bl	8003f38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80042f8:	e004      	b.n	8004304 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fe15 	bl	8003f4a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f043 0204 	orr.w	r2, r3, #4
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff fe04 	bl	8003f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <__NVIC_SetPriorityGrouping+0x44>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004378:	4013      	ands	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800438e:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	60d3      	str	r3, [r2, #12]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <__NVIC_GetPriorityGrouping+0x18>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	f003 0307 	and.w	r3, r3, #7
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db0b      	blt.n	80043ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4906      	ldr	r1, [pc, #24]	; (80043f4 <__NVIC_EnableIRQ+0x34>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2001      	movs	r0, #1
 80043e2:	fa00 f202 	lsl.w	r2, r0, r2
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	e000e100 	.word	0xe000e100

080043f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	2b00      	cmp	r3, #0
 800440a:	db0a      	blt.n	8004422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	490c      	ldr	r1, [pc, #48]	; (8004444 <__NVIC_SetPriority+0x4c>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	440b      	add	r3, r1
 800441c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004420:	e00a      	b.n	8004438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4908      	ldr	r1, [pc, #32]	; (8004448 <__NVIC_SetPriority+0x50>)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	3b04      	subs	r3, #4
 8004430:	0112      	lsls	r2, r2, #4
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	440b      	add	r3, r1
 8004436:	761a      	strb	r2, [r3, #24]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f1c3 0307 	rsb	r3, r3, #7
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf28      	it	cs
 800446a:	2304      	movcs	r3, #4
 800446c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3304      	adds	r3, #4
 8004472:	2b06      	cmp	r3, #6
 8004474:	d902      	bls.n	800447c <NVIC_EncodePriority+0x30>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3b03      	subs	r3, #3
 800447a:	e000      	b.n	800447e <NVIC_EncodePriority+0x32>
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	401a      	ands	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004494:	f04f 31ff 	mov.w	r1, #4294967295
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	43d9      	mvns	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	4313      	orrs	r3, r2
         );
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3724      	adds	r7, #36	; 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044c0:	d301      	bcc.n	80044c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c2:	2301      	movs	r3, #1
 80044c4:	e00f      	b.n	80044e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <SysTick_Config+0x40>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ce:	210f      	movs	r1, #15
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	f7ff ff90 	bl	80043f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <SysTick_Config+0x40>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044de:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <SysTick_Config+0x40>)
 80044e0:	2207      	movs	r2, #7
 80044e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	e000e010 	.word	0xe000e010

080044f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff2d 	bl	800435c <__NVIC_SetPriorityGrouping>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	4603      	mov	r3, r0
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800451c:	f7ff ff42 	bl	80043a4 <__NVIC_GetPriorityGrouping>
 8004520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f7ff ff90 	bl	800444c <NVIC_EncodePriority>
 800452c:	4602      	mov	r2, r0
 800452e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff5f 	bl	80043f8 <__NVIC_SetPriority>
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff35 	bl	80043c0 <__NVIC_EnableIRQ>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff ffa2 	bl	80044b0 <SysTick_Config>
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e043      	b.n	8004616 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <HAL_DMA_Init+0xa8>)
 8004596:	4413      	add	r3, r2
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <HAL_DMA_Init+0xac>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	009a      	lsls	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1f      	ldr	r2, [pc, #124]	; (8004628 <HAL_DMA_Init+0xb0>)
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80045c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80045d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	bffdfff8 	.word	0xbffdfff8
 8004624:	cccccccd 	.word	0xcccccccd
 8004628:	40020000 	.word	0x40020000

0800462c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_DMA_Start_IT+0x20>
 8004648:	2302      	movs	r3, #2
 800464a:	e04a      	b.n	80046e2 <HAL_DMA_Start_IT+0xb6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800465a:	2b01      	cmp	r3, #1
 800465c:	d13a      	bne.n	80046d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f9ae 	bl	80049e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 020e 	orr.w	r2, r2, #14
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e00f      	b.n	80046c2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0204 	bic.w	r2, r2, #4
 80046b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 020a 	orr.w	r2, r2, #10
 80046c0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e005      	b.n	80046e0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
 80046de:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d005      	beq.n	800470e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2204      	movs	r2, #4
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e051      	b.n	80047b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 020e 	bic.w	r2, r2, #14
 800471c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <HAL_DMA_Abort_IT+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d029      	beq.n	800478c <HAL_DMA_Abort_IT+0xa0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <HAL_DMA_Abort_IT+0xd4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <HAL_DMA_Abort_IT+0x9c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <HAL_DMA_Abort_IT+0xd8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01a      	beq.n	8004782 <HAL_DMA_Abort_IT+0x96>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <HAL_DMA_Abort_IT+0xdc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d012      	beq.n	800477c <HAL_DMA_Abort_IT+0x90>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_DMA_Abort_IT+0xe0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00a      	beq.n	8004776 <HAL_DMA_Abort_IT+0x8a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <HAL_DMA_Abort_IT+0xe4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d102      	bne.n	8004770 <HAL_DMA_Abort_IT+0x84>
 800476a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800476e:	e00e      	b.n	800478e <HAL_DMA_Abort_IT+0xa2>
 8004770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004774:	e00b      	b.n	800478e <HAL_DMA_Abort_IT+0xa2>
 8004776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800477a:	e008      	b.n	800478e <HAL_DMA_Abort_IT+0xa2>
 800477c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004780:	e005      	b.n	800478e <HAL_DMA_Abort_IT+0xa2>
 8004782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004786:	e002      	b.n	800478e <HAL_DMA_Abort_IT+0xa2>
 8004788:	2310      	movs	r3, #16
 800478a:	e000      	b.n	800478e <HAL_DMA_Abort_IT+0xa2>
 800478c:	2301      	movs	r3, #1
 800478e:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <HAL_DMA_Abort_IT+0xe8>)
 8004790:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
    } 
  }
  return status;
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40020008 	.word	0x40020008
 80047c0:	4002001c 	.word	0x4002001c
 80047c4:	40020030 	.word	0x40020030
 80047c8:	40020044 	.word	0x40020044
 80047cc:	40020058 	.word	0x40020058
 80047d0:	4002006c 	.word	0x4002006c
 80047d4:	40020000 	.word	0x40020000

080047d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2204      	movs	r2, #4
 80047f6:	409a      	lsls	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d04f      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xc8>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d04a      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a66      	ldr	r2, [pc, #408]	; (80049c8 <HAL_DMA_IRQHandler+0x1f0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d029      	beq.n	8004886 <HAL_DMA_IRQHandler+0xae>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a65      	ldr	r2, [pc, #404]	; (80049cc <HAL_DMA_IRQHandler+0x1f4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_DMA_IRQHandler+0xaa>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a63      	ldr	r2, [pc, #396]	; (80049d0 <HAL_DMA_IRQHandler+0x1f8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01a      	beq.n	800487c <HAL_DMA_IRQHandler+0xa4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a62      	ldr	r2, [pc, #392]	; (80049d4 <HAL_DMA_IRQHandler+0x1fc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d012      	beq.n	8004876 <HAL_DMA_IRQHandler+0x9e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a60      	ldr	r2, [pc, #384]	; (80049d8 <HAL_DMA_IRQHandler+0x200>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x98>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5f      	ldr	r2, [pc, #380]	; (80049dc <HAL_DMA_IRQHandler+0x204>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d102      	bne.n	800486a <HAL_DMA_IRQHandler+0x92>
 8004864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004868:	e00e      	b.n	8004888 <HAL_DMA_IRQHandler+0xb0>
 800486a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800486e:	e00b      	b.n	8004888 <HAL_DMA_IRQHandler+0xb0>
 8004870:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004874:	e008      	b.n	8004888 <HAL_DMA_IRQHandler+0xb0>
 8004876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800487a:	e005      	b.n	8004888 <HAL_DMA_IRQHandler+0xb0>
 800487c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004880:	e002      	b.n	8004888 <HAL_DMA_IRQHandler+0xb0>
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	e000      	b.n	8004888 <HAL_DMA_IRQHandler+0xb0>
 8004886:	2304      	movs	r3, #4
 8004888:	4a55      	ldr	r2, [pc, #340]	; (80049e0 <HAL_DMA_IRQHandler+0x208>)
 800488a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8094 	beq.w	80049be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800489e:	e08e      	b.n	80049be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2202      	movs	r2, #2
 80048a6:	409a      	lsls	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d056      	beq.n	800495e <HAL_DMA_IRQHandler+0x186>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d051      	beq.n	800495e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 020a 	bic.w	r2, r2, #10
 80048d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a38      	ldr	r2, [pc, #224]	; (80049c8 <HAL_DMA_IRQHandler+0x1f0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d029      	beq.n	800493e <HAL_DMA_IRQHandler+0x166>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a37      	ldr	r2, [pc, #220]	; (80049cc <HAL_DMA_IRQHandler+0x1f4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d022      	beq.n	800493a <HAL_DMA_IRQHandler+0x162>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <HAL_DMA_IRQHandler+0x1f8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01a      	beq.n	8004934 <HAL_DMA_IRQHandler+0x15c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <HAL_DMA_IRQHandler+0x1fc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d012      	beq.n	800492e <HAL_DMA_IRQHandler+0x156>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a32      	ldr	r2, [pc, #200]	; (80049d8 <HAL_DMA_IRQHandler+0x200>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00a      	beq.n	8004928 <HAL_DMA_IRQHandler+0x150>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a31      	ldr	r2, [pc, #196]	; (80049dc <HAL_DMA_IRQHandler+0x204>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d102      	bne.n	8004922 <HAL_DMA_IRQHandler+0x14a>
 800491c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004920:	e00e      	b.n	8004940 <HAL_DMA_IRQHandler+0x168>
 8004922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004926:	e00b      	b.n	8004940 <HAL_DMA_IRQHandler+0x168>
 8004928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800492c:	e008      	b.n	8004940 <HAL_DMA_IRQHandler+0x168>
 800492e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004932:	e005      	b.n	8004940 <HAL_DMA_IRQHandler+0x168>
 8004934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004938:	e002      	b.n	8004940 <HAL_DMA_IRQHandler+0x168>
 800493a:	2320      	movs	r3, #32
 800493c:	e000      	b.n	8004940 <HAL_DMA_IRQHandler+0x168>
 800493e:	2302      	movs	r3, #2
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_DMA_IRQHandler+0x208>)
 8004942:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d034      	beq.n	80049be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800495c:	e02f      	b.n	80049be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	2208      	movs	r2, #8
 8004964:	409a      	lsls	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d028      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x1e8>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 020e 	bic.w	r2, r2, #14
 8004986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f202 	lsl.w	r2, r1, r2
 8004996:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
    }
  }
  return;
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
}
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40020008 	.word	0x40020008
 80049cc:	4002001c 	.word	0x4002001c
 80049d0:	40020030 	.word	0x40020030
 80049d4:	40020044 	.word	0x40020044
 80049d8:	40020058 	.word	0x40020058
 80049dc:	4002006c 	.word	0x4002006c
 80049e0:	40020000 	.word	0x40020000

080049e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d108      	bne.n	8004a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a22:	e007      	b.n	8004a34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b08b      	sub	sp, #44	; 0x2c
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a52:	e127      	b.n	8004ca4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a54:	2201      	movs	r2, #1
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	f040 8116 	bne.w	8004c9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b12      	cmp	r3, #18
 8004a78:	d034      	beq.n	8004ae4 <HAL_GPIO_Init+0xa4>
 8004a7a:	2b12      	cmp	r3, #18
 8004a7c:	d80d      	bhi.n	8004a9a <HAL_GPIO_Init+0x5a>
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d02b      	beq.n	8004ada <HAL_GPIO_Init+0x9a>
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d804      	bhi.n	8004a90 <HAL_GPIO_Init+0x50>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d031      	beq.n	8004aee <HAL_GPIO_Init+0xae>
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d01c      	beq.n	8004ac8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a8e:	e048      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d043      	beq.n	8004b1c <HAL_GPIO_Init+0xdc>
 8004a94:	2b11      	cmp	r3, #17
 8004a96:	d01b      	beq.n	8004ad0 <HAL_GPIO_Init+0x90>
          break;
 8004a98:	e043      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a9a:	4a89      	ldr	r2, [pc, #548]	; (8004cc0 <HAL_GPIO_Init+0x280>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d026      	beq.n	8004aee <HAL_GPIO_Init+0xae>
 8004aa0:	4a87      	ldr	r2, [pc, #540]	; (8004cc0 <HAL_GPIO_Init+0x280>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d806      	bhi.n	8004ab4 <HAL_GPIO_Init+0x74>
 8004aa6:	4a87      	ldr	r2, [pc, #540]	; (8004cc4 <HAL_GPIO_Init+0x284>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d020      	beq.n	8004aee <HAL_GPIO_Init+0xae>
 8004aac:	4a86      	ldr	r2, [pc, #536]	; (8004cc8 <HAL_GPIO_Init+0x288>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01d      	beq.n	8004aee <HAL_GPIO_Init+0xae>
          break;
 8004ab2:	e036      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004ab4:	4a85      	ldr	r2, [pc, #532]	; (8004ccc <HAL_GPIO_Init+0x28c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d019      	beq.n	8004aee <HAL_GPIO_Init+0xae>
 8004aba:	4a85      	ldr	r2, [pc, #532]	; (8004cd0 <HAL_GPIO_Init+0x290>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d016      	beq.n	8004aee <HAL_GPIO_Init+0xae>
 8004ac0:	4a84      	ldr	r2, [pc, #528]	; (8004cd4 <HAL_GPIO_Init+0x294>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_GPIO_Init+0xae>
          break;
 8004ac6:	e02c      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	623b      	str	r3, [r7, #32]
          break;
 8004ace:	e028      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	623b      	str	r3, [r7, #32]
          break;
 8004ad8:	e023      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	623b      	str	r3, [r7, #32]
          break;
 8004ae2:	e01e      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	623b      	str	r3, [r7, #32]
          break;
 8004aec:	e019      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004af6:	2304      	movs	r3, #4
 8004af8:	623b      	str	r3, [r7, #32]
          break;
 8004afa:	e012      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b04:	2308      	movs	r3, #8
 8004b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	611a      	str	r2, [r3, #16]
          break;
 8004b0e:	e008      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b10:	2308      	movs	r3, #8
 8004b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	615a      	str	r2, [r3, #20]
          break;
 8004b1a:	e002      	b.n	8004b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	623b      	str	r3, [r7, #32]
          break;
 8004b20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2bff      	cmp	r3, #255	; 0xff
 8004b26:	d801      	bhi.n	8004b2c <HAL_GPIO_Init+0xec>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	e001      	b.n	8004b30 <HAL_GPIO_Init+0xf0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2bff      	cmp	r3, #255	; 0xff
 8004b36:	d802      	bhi.n	8004b3e <HAL_GPIO_Init+0xfe>
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	e002      	b.n	8004b44 <HAL_GPIO_Init+0x104>
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	3b08      	subs	r3, #8
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	210f      	movs	r1, #15
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	401a      	ands	r2, r3
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8096 	beq.w	8004c9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b72:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_GPIO_Init+0x298>)
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <HAL_GPIO_Init+0x298>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6193      	str	r3, [r2, #24]
 8004b7e:	4b56      	ldr	r3, [pc, #344]	; (8004cd8 <HAL_GPIO_Init+0x298>)
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b8a:	4a54      	ldr	r2, [pc, #336]	; (8004cdc <HAL_GPIO_Init+0x29c>)
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	3302      	adds	r3, #2
 8004b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	220f      	movs	r2, #15
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a4b      	ldr	r2, [pc, #300]	; (8004ce0 <HAL_GPIO_Init+0x2a0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_GPIO_Init+0x19e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a4a      	ldr	r2, [pc, #296]	; (8004ce4 <HAL_GPIO_Init+0x2a4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00d      	beq.n	8004bda <HAL_GPIO_Init+0x19a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a49      	ldr	r2, [pc, #292]	; (8004ce8 <HAL_GPIO_Init+0x2a8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <HAL_GPIO_Init+0x196>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a48      	ldr	r2, [pc, #288]	; (8004cec <HAL_GPIO_Init+0x2ac>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <HAL_GPIO_Init+0x192>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e006      	b.n	8004be0 <HAL_GPIO_Init+0x1a0>
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	e004      	b.n	8004be0 <HAL_GPIO_Init+0x1a0>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e002      	b.n	8004be0 <HAL_GPIO_Init+0x1a0>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_GPIO_Init+0x1a0>
 8004bde:	2300      	movs	r3, #0
 8004be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be2:	f002 0203 	and.w	r2, r2, #3
 8004be6:	0092      	lsls	r2, r2, #2
 8004be8:	4093      	lsls	r3, r2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bf0:	493a      	ldr	r1, [pc, #232]	; (8004cdc <HAL_GPIO_Init+0x29c>)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c0a:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4938      	ldr	r1, [pc, #224]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
 8004c16:	e006      	b.n	8004c26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c18:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	4933      	ldr	r1, [pc, #204]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c32:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	492e      	ldr	r1, [pc, #184]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
 8004c3e:	e006      	b.n	8004c4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	43db      	mvns	r3, r3
 8004c48:	4929      	ldr	r1, [pc, #164]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	4924      	ldr	r1, [pc, #144]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
 8004c66:	e006      	b.n	8004c76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	491f      	ldr	r1, [pc, #124]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d006      	beq.n	8004c90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	491a      	ldr	r1, [pc, #104]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
 8004c8e:	e006      	b.n	8004c9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	4915      	ldr	r1, [pc, #84]	; (8004cf0 <HAL_GPIO_Init+0x2b0>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f47f aed0 	bne.w	8004a54 <HAL_GPIO_Init+0x14>
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	372c      	adds	r7, #44	; 0x2c
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	10210000 	.word	0x10210000
 8004cc4:	10110000 	.word	0x10110000
 8004cc8:	10120000 	.word	0x10120000
 8004ccc:	10310000 	.word	0x10310000
 8004cd0:	10320000 	.word	0x10320000
 8004cd4:	10220000 	.word	0x10220000
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40010800 	.word	0x40010800
 8004ce4:	40010c00 	.word	0x40010c00
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	40010400 	.word	0x40010400

08004cf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e001      	b.n	8004d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d32:	787b      	ldrb	r3, [r7, #1]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d38:	887a      	ldrh	r2, [r7, #2]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d3e:	e003      	b.n	8004d48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d40:	887b      	ldrh	r3, [r7, #2]
 8004d42:	041a      	lsls	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	611a      	str	r2, [r3, #16]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e11f      	b.n	8004fa6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fc fce4 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	; 0x24
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004db8:	f000 ffe0 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8004dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4a7b      	ldr	r2, [pc, #492]	; (8004fb0 <HAL_I2C_Init+0x25c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d807      	bhi.n	8004dd8 <HAL_I2C_Init+0x84>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a7a      	ldr	r2, [pc, #488]	; (8004fb4 <HAL_I2C_Init+0x260>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bf94      	ite	ls
 8004dd0:	2301      	movls	r3, #1
 8004dd2:	2300      	movhi	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e006      	b.n	8004de6 <HAL_I2C_Init+0x92>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <HAL_I2C_Init+0x264>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	bf94      	ite	ls
 8004de0:	2301      	movls	r3, #1
 8004de2:	2300      	movhi	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0db      	b.n	8004fa6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a72      	ldr	r2, [pc, #456]	; (8004fbc <HAL_I2C_Init+0x268>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	0c9b      	lsrs	r3, r3, #18
 8004df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a64      	ldr	r2, [pc, #400]	; (8004fb0 <HAL_I2C_Init+0x25c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d802      	bhi.n	8004e28 <HAL_I2C_Init+0xd4>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	3301      	adds	r3, #1
 8004e26:	e009      	b.n	8004e3c <HAL_I2C_Init+0xe8>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	4a63      	ldr	r2, [pc, #396]	; (8004fc0 <HAL_I2C_Init+0x26c>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4956      	ldr	r1, [pc, #344]	; (8004fb0 <HAL_I2C_Init+0x25c>)
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	d80d      	bhi.n	8004e78 <HAL_I2C_Init+0x124>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e59      	subs	r1, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	bf38      	it	cc
 8004e74:	2304      	movcc	r3, #4
 8004e76:	e04f      	b.n	8004f18 <HAL_I2C_Init+0x1c4>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d111      	bne.n	8004ea4 <HAL_I2C_Init+0x150>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	440b      	add	r3, r1
 8004e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e92:	3301      	adds	r3, #1
 8004e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e012      	b.n	8004eca <HAL_I2C_Init+0x176>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1e58      	subs	r0, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	0099      	lsls	r1, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Init+0x17e>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e022      	b.n	8004f18 <HAL_I2C_Init+0x1c4>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_I2C_Init+0x1a4>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1e58      	subs	r0, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	440b      	add	r3, r1
 8004ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eec:	3301      	adds	r3, #1
 8004eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	e00f      	b.n	8004f18 <HAL_I2C_Init+0x1c4>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1e58      	subs	r0, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	0099      	lsls	r1, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f0e:	3301      	adds	r3, #1
 8004f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6911      	ldr	r1, [r2, #16]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	4311      	orrs	r1, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	000186a0 	.word	0x000186a0
 8004fb4:	001e847f 	.word	0x001e847f
 8004fb8:	003d08ff 	.word	0x003d08ff
 8004fbc:	431bde83 	.word	0x431bde83
 8004fc0:	10624dd3 	.word	0x10624dd3

08004fc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	817b      	strh	r3, [r7, #10]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fd8:	f7fe fc18 	bl	800380c <HAL_GetTick>
 8004fdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	f040 80e0 	bne.w	80051ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2319      	movs	r3, #25
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4970      	ldr	r1, [pc, #448]	; (80051b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f964 	bl	80052c4 <I2C_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
 8005004:	e0d3      	b.n	80051ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_I2C_Master_Transmit+0x50>
 8005010:	2302      	movs	r3, #2
 8005012:	e0cc      	b.n	80051ae <HAL_I2C_Master_Transmit+0x1ea>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d007      	beq.n	800503a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2221      	movs	r2, #33	; 0x21
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2210      	movs	r2, #16
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	893a      	ldrh	r2, [r7, #8]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a50      	ldr	r2, [pc, #320]	; (80051bc <HAL_I2C_Master_Transmit+0x1f8>)
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800507c:	8979      	ldrh	r1, [r7, #10]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f89c 	bl	80051c0 <I2C_MasterRequestWrite>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e08d      	b.n	80051ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050a8:	e066      	b.n	8005178 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	6a39      	ldr	r1, [r7, #32]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f9de 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d107      	bne.n	80050d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e06b      	b.n	80051ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d11b      	bne.n	800514c <HAL_I2C_Master_Transmit+0x188>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005118:	2b00      	cmp	r3, #0
 800511a:	d017      	beq.n	800514c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	6a39      	ldr	r1, [r7, #32]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f9ce 	bl	80054f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00d      	beq.n	8005178 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	2b04      	cmp	r3, #4
 8005162:	d107      	bne.n	8005174 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e01a      	b.n	80051ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d194      	bne.n	80050aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e000      	b.n	80051ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051ac:	2302      	movs	r3, #2
  }
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	00100002 	.word	0x00100002
 80051bc:	ffff0000 	.word	0xffff0000

080051c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	460b      	mov	r3, r1
 80051ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d006      	beq.n	80051ea <I2C_MasterRequestWrite+0x2a>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d003      	beq.n	80051ea <I2C_MasterRequestWrite+0x2a>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051e8:	d108      	bne.n	80051fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e00b      	b.n	8005214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	2b12      	cmp	r3, #18
 8005202:	d107      	bne.n	8005214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f84f 	bl	80052c4 <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	d103      	bne.n	8005244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e035      	b.n	80052b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005250:	d108      	bne.n	8005264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005252:	897b      	ldrh	r3, [r7, #10]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	e01b      	b.n	800529c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	11db      	asrs	r3, r3, #7
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f063 030f 	orn	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	490e      	ldr	r1, [pc, #56]	; (80052bc <I2C_MasterRequestWrite+0xfc>)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f875 	bl	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e010      	b.n	80052b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005292:	897b      	ldrh	r3, [r7, #10]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4907      	ldr	r1, [pc, #28]	; (80052c0 <I2C_MasterRequestWrite+0x100>)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f865 	bl	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	00010008 	.word	0x00010008
 80052c0:	00010002 	.word	0x00010002

080052c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d4:	e025      	b.n	8005322 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d021      	beq.n	8005322 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fe fa95 	bl	800380c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d116      	bne.n	8005322 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e023      	b.n	800536a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10d      	bne.n	8005348 <I2C_WaitOnFlagUntilTimeout+0x84>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	e00c      	b.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	43da      	mvns	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	429a      	cmp	r2, r3
 8005366:	d0b6      	beq.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005380:	e051      	b.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d123      	bne.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0204 	orr.w	r2, r3, #4
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e046      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d021      	beq.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe fa13 	bl	800380c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e020      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10c      	bne.n	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e00b      	b.n	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	43da      	mvns	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d18d      	bne.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547c:	e02d      	b.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f878 	bl	8005574 <I2C_IsAcknowledgeFailed>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e02d      	b.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d021      	beq.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fe f9b9 	bl	800380c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d116      	bne.n	80054da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e007      	b.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b80      	cmp	r3, #128	; 0x80
 80054e6:	d1ca      	bne.n	800547e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054fe:	e02d      	b.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f837 	bl	8005574 <I2C_IsAcknowledgeFailed>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e02d      	b.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d021      	beq.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005518:	f7fe f978 	bl	800380c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d302      	bcc.n	800552e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d116      	bne.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e007      	b.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d1ca      	bne.n	8005500 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558a:	d11b      	bne.n	80055c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005594:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f043 0204 	orr.w	r2, r3, #4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e26c      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8087 	beq.w	80056fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055f0:	4b92      	ldr	r3, [pc, #584]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d00c      	beq.n	8005616 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055fc:	4b8f      	ldr	r3, [pc, #572]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	2b08      	cmp	r3, #8
 8005606:	d112      	bne.n	800562e <HAL_RCC_OscConfig+0x5e>
 8005608:	4b8c      	ldr	r3, [pc, #560]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005614:	d10b      	bne.n	800562e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005616:	4b89      	ldr	r3, [pc, #548]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d06c      	beq.n	80056fc <HAL_RCC_OscConfig+0x12c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d168      	bne.n	80056fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e246      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005636:	d106      	bne.n	8005646 <HAL_RCC_OscConfig+0x76>
 8005638:	4b80      	ldr	r3, [pc, #512]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a7f      	ldr	r2, [pc, #508]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800563e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e02e      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0x98>
 800564e:	4b7b      	ldr	r3, [pc, #492]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a7a      	ldr	r2, [pc, #488]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b78      	ldr	r3, [pc, #480]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a77      	ldr	r2, [pc, #476]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e01d      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0xbc>
 8005672:	4b72      	ldr	r3, [pc, #456]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a71      	ldr	r2, [pc, #452]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4b6f      	ldr	r3, [pc, #444]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a6e      	ldr	r2, [pc, #440]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 800568c:	4b6b      	ldr	r3, [pc, #428]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6a      	ldr	r2, [pc, #424]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b68      	ldr	r3, [pc, #416]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a67      	ldr	r2, [pc, #412]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800569e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d013      	beq.n	80056d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe f8ae 	bl	800380c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fe f8aa 	bl	800380c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	; 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1fa      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	4b5d      	ldr	r3, [pc, #372]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0xe4>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fe f89a 	bl	800380c <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fe f896 	bl	800380c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	; 0x64
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1e6      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	4b53      	ldr	r3, [pc, #332]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x10c>
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d063      	beq.n	80057d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800570a:	4b4c      	ldr	r3, [pc, #304]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005716:	4b49      	ldr	r3, [pc, #292]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b08      	cmp	r3, #8
 8005720:	d11c      	bne.n	800575c <HAL_RCC_OscConfig+0x18c>
 8005722:	4b46      	ldr	r3, [pc, #280]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d116      	bne.n	800575c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572e:	4b43      	ldr	r3, [pc, #268]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_RCC_OscConfig+0x176>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e1ba      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005746:	4b3d      	ldr	r3, [pc, #244]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4939      	ldr	r1, [pc, #228]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	e03a      	b.n	80057d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d020      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005764:	4b36      	ldr	r3, [pc, #216]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7fe f84f 	bl	800380c <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005772:	f7fe f84b 	bl	800380c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e19b      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	4b2d      	ldr	r3, [pc, #180]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005790:	4b2a      	ldr	r3, [pc, #168]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4927      	ldr	r1, [pc, #156]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]
 80057a4:	e015      	b.n	80057d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a6:	4b26      	ldr	r3, [pc, #152]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fe f82e 	bl	800380c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b4:	f7fe f82a 	bl	800380c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e17a      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d03a      	beq.n	8005854 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e6:	4b17      	ldr	r3, [pc, #92]	; (8005844 <HAL_RCC_OscConfig+0x274>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ec:	f7fe f80e 	bl	800380c <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f4:	f7fe f80a 	bl	800380c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e15a      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <HAL_RCC_OscConfig+0x26c>)
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005812:	2001      	movs	r0, #1
 8005814:	f000 fada 	bl	8005dcc <RCC_Delay>
 8005818:	e01c      	b.n	8005854 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <HAL_RCC_OscConfig+0x274>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005820:	f7fd fff4 	bl	800380c <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005826:	e00f      	b.n	8005848 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005828:	f7fd fff0 	bl	800380c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d908      	bls.n	8005848 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e140      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	42420000 	.word	0x42420000
 8005844:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005848:	4b9e      	ldr	r3, [pc, #632]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e9      	bne.n	8005828 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80a6 	beq.w	80059ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005866:	4b97      	ldr	r3, [pc, #604]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	4b94      	ldr	r3, [pc, #592]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4a93      	ldr	r2, [pc, #588]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587c:	61d3      	str	r3, [r2, #28]
 800587e:	4b91      	ldr	r3, [pc, #580]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588e:	4b8e      	ldr	r3, [pc, #568]	; (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005896:	2b00      	cmp	r3, #0
 8005898:	d118      	bne.n	80058cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800589a:	4b8b      	ldr	r3, [pc, #556]	; (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a8a      	ldr	r2, [pc, #552]	; (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a6:	f7fd ffb1 	bl	800380c <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ae:	f7fd ffad 	bl	800380c <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b64      	cmp	r3, #100	; 0x64
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e0fd      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c0:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <HAL_RCC_OscConfig+0x4f8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d106      	bne.n	80058e2 <HAL_RCC_OscConfig+0x312>
 80058d4:	4b7b      	ldr	r3, [pc, #492]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	4a7a      	ldr	r2, [pc, #488]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	6213      	str	r3, [r2, #32]
 80058e0:	e02d      	b.n	800593e <HAL_RCC_OscConfig+0x36e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x334>
 80058ea:	4b76      	ldr	r3, [pc, #472]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	4a75      	ldr	r2, [pc, #468]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6213      	str	r3, [r2, #32]
 80058f6:	4b73      	ldr	r3, [pc, #460]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4a72      	ldr	r2, [pc, #456]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	6213      	str	r3, [r2, #32]
 8005902:	e01c      	b.n	800593e <HAL_RCC_OscConfig+0x36e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b05      	cmp	r3, #5
 800590a:	d10c      	bne.n	8005926 <HAL_RCC_OscConfig+0x356>
 800590c:	4b6d      	ldr	r3, [pc, #436]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	4a6c      	ldr	r2, [pc, #432]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005912:	f043 0304 	orr.w	r3, r3, #4
 8005916:	6213      	str	r3, [r2, #32]
 8005918:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	4a69      	ldr	r2, [pc, #420]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6213      	str	r3, [r2, #32]
 8005924:	e00b      	b.n	800593e <HAL_RCC_OscConfig+0x36e>
 8005926:	4b67      	ldr	r3, [pc, #412]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	4a66      	ldr	r2, [pc, #408]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	6213      	str	r3, [r2, #32]
 8005932:	4b64      	ldr	r3, [pc, #400]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	4a63      	ldr	r2, [pc, #396]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d015      	beq.n	8005972 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005946:	f7fd ff61 	bl	800380c <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594e:	f7fd ff5d 	bl	800380c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	f241 3288 	movw	r2, #5000	; 0x1388
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0ab      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005964:	4b57      	ldr	r3, [pc, #348]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0ee      	beq.n	800594e <HAL_RCC_OscConfig+0x37e>
 8005970:	e014      	b.n	800599c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005972:	f7fd ff4b 	bl	800380c <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fd ff47 	bl	800380c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f241 3288 	movw	r2, #5000	; 0x1388
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e095      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005990:	4b4c      	ldr	r3, [pc, #304]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ee      	bne.n	800597a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d105      	bne.n	80059ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a2:	4b48      	ldr	r3, [pc, #288]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	4a47      	ldr	r2, [pc, #284]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80059a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8081 	beq.w	8005aba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b8:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 030c 	and.w	r3, r3, #12
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d061      	beq.n	8005a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d146      	bne.n	8005a5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059cc:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <HAL_RCC_OscConfig+0x4fc>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d2:	f7fd ff1b 	bl	800380c <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059da:	f7fd ff17 	bl	800380c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e067      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ec:	4b35      	ldr	r3, [pc, #212]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d108      	bne.n	8005a14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a02:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	492d      	ldr	r1, [pc, #180]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a14:	4b2b      	ldr	r3, [pc, #172]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a19      	ldr	r1, [r3, #32]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	430b      	orrs	r3, r1
 8005a26:	4927      	ldr	r1, [pc, #156]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a2c:	4b27      	ldr	r3, [pc, #156]	; (8005acc <HAL_RCC_OscConfig+0x4fc>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a32:	f7fd feeb 	bl	800380c <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fd fee7 	bl	800380c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e037      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x46a>
 8005a58:	e02f      	b.n	8005aba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_RCC_OscConfig+0x4fc>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fd fed4 	bl	800380c <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fd fed0 	bl	800380c <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e020      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x498>
 8005a86:	e018      	b.n	8005aba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e013      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_RCC_OscConfig+0x4f4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40007000 	.word	0x40007000
 8005acc:	42420060 	.word	0x42420060

08005ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0d0      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b6a      	ldr	r3, [pc, #424]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d910      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 0207 	bic.w	r2, r3, #7
 8005afa:	4965      	ldr	r1, [pc, #404]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b63      	ldr	r3, [pc, #396]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0b8      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b2c:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a58      	ldr	r2, [pc, #352]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b44:	4b53      	ldr	r3, [pc, #332]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a52      	ldr	r2, [pc, #328]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b50:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	494d      	ldr	r1, [pc, #308]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d040      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d115      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e07f      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e073      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9e:	4b3d      	ldr	r3, [pc, #244]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06b      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bae:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f023 0203 	bic.w	r2, r3, #3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4936      	ldr	r1, [pc, #216]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bc0:	f7fd fe24 	bl	800380c <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc8:	f7fd fe20 	bl	800380c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e053      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bde:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 020c 	and.w	r2, r3, #12
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1eb      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b27      	ldr	r3, [pc, #156]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d210      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	4922      	ldr	r1, [pc, #136]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e032      	b.n	8005c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4916      	ldr	r1, [pc, #88]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	490e      	ldr	r1, [pc, #56]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c5e:	f000 f821 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8005c62:	4601      	mov	r1, r0
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c70:	5cd3      	ldrb	r3, [r2, r3]
 8005c72:	fa21 f303 	lsr.w	r3, r1, r3
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <HAL_RCC_ClockConfig+0x1cc>)
 8005c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fd fd82 	bl	8003788 <HAL_InitTick>

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40021000 	.word	0x40021000
 8005c98:	0800bafc 	.word	0x0800bafc
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	20000010 	.word	0x20000010

08005ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca4:	b490      	push	{r4, r7}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005caa:	4b2a      	ldr	r3, [pc, #168]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005cac:	1d3c      	adds	r4, r7, #4
 8005cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005cb4:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d002      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_GetSysClockFreq+0x46>
 8005ce2:	e02d      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ce4:	4b1e      	ldr	r3, [pc, #120]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ce6:	623b      	str	r3, [r7, #32]
      break;
 8005ce8:	e02d      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	0c9b      	lsrs	r3, r3, #18
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005cfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0c5b      	lsrs	r3, r3, #17
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d16:	4413      	add	r3, r2
 8005d18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4a0f      	ldr	r2, [pc, #60]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d22:	fb02 f203 	mul.w	r2, r2, r3
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2e:	e004      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d34:	fb02 f303 	mul.w	r3, r2, r3
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	623b      	str	r3, [r7, #32]
      break;
 8005d3e:	e002      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d42:	623b      	str	r3, [r7, #32]
      break;
 8005d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d46:	6a3b      	ldr	r3, [r7, #32]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc90      	pop	{r4, r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	0800bad4 	.word	0x0800bad4
 8005d58:	0800bae4 	.word	0x0800bae4
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	007a1200 	.word	0x007a1200
 8005d64:	003d0900 	.word	0x003d0900

08005d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d6c:	4b02      	ldr	r3, [pc, #8]	; (8005d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr
 8005d78:	2000000c 	.word	0x2000000c

08005d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d80:	f7ff fff2 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005d84:	4601      	mov	r1, r0
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	4a03      	ldr	r2, [pc, #12]	; (8005da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d92:	5cd3      	ldrb	r3, [r2, r3]
 8005d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	0800bb0c 	.word	0x0800bb0c

08005da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005da8:	f7ff ffde 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	0adb      	lsrs	r3, r3, #11
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	4a03      	ldr	r2, [pc, #12]	; (8005dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dba:	5cd3      	ldrb	r3, [r2, r3]
 8005dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	0800bb0c 	.word	0x0800bb0c

08005dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <RCC_Delay+0x34>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <RCC_Delay+0x38>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a5b      	lsrs	r3, r3, #9
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005de8:	bf00      	nop
  }
  while (Delay --);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	60fa      	str	r2, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f9      	bne.n	8005de8 <RCC_Delay+0x1c>
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	2000000c 	.word	0x2000000c
 8005e04:	10624dd3 	.word	0x10624dd3

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d07d      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005e24:	2300      	movs	r3, #0
 8005e26:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e28:	4b4f      	ldr	r3, [pc, #316]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e34:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	4a4b      	ldr	r2, [pc, #300]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	61d3      	str	r3, [r2, #28]
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e50:	4b46      	ldr	r3, [pc, #280]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d118      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5c:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e68:	f7fd fcd0 	bl	800380c <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6e:	e008      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e70:	f7fd fccc 	bl	800380c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	; 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e06d      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e82:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e8e:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02e      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d027      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d014      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed2:	f7fd fc9b 	bl	800380c <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fd fc97 	bl	800380c <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e036      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0ee      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4917      	ldr	r1, [pc, #92]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	490b      	ldr	r1, [pc, #44]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4904      	ldr	r1, [pc, #16]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	42420440 	.word	0x42420440

08005f74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b08d      	sub	sp, #52	; 0x34
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f7c:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f7e:	f107 040c 	add.w	r4, r7, #12
 8005f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f88:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	2300      	movs	r3, #0
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	2300      	movs	r3, #0
 8005f98:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d07f      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d002      	beq.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d048      	beq.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005fb0:	e08b      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005fb8:	4b48      	ldr	r3, [pc, #288]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d07f      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	0c9b      	lsrs	r3, r3, #18
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005fd6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d018      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fe2:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	0c5b      	lsrs	r3, r3, #17
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006002:	4a37      	ldr	r2, [pc, #220]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	fbb2 f2f3 	udiv	r2, r2, r3
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	fb02 f303 	mul.w	r3, r2, r3
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006012:	e004      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	4a33      	ldr	r2, [pc, #204]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800601e:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602a:	d102      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006030:	e048      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4a2c      	ldr	r2, [pc, #176]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006038:	fba2 2303 	umull	r2, r3, r2, r3
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006040:	e040      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006052:	d108      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
 8006064:	e01f      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006070:	d109      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800607e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
 8006084:	e00f      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006090:	d11a      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d014      	beq.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800609e:	f24f 4324 	movw	r3, #62500	; 0xf424
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80060a4:	e010      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80060a6:	e00f      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80060a8:	f7ff fe7c 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 80060ac:	4602      	mov	r2, r0
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	0b9b      	lsrs	r3, r3, #14
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	3301      	adds	r3, #1
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80060c2:	e002      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80060c8:	bf00      	nop
    }
  }
  return (frequency);
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3734      	adds	r7, #52	; 0x34
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}
 80060d4:	0800bae8 	.word	0x0800bae8
 80060d8:	0800baf8 	.word	0x0800baf8
 80060dc:	40021000 	.word	0x40021000
 80060e0:	007a1200 	.word	0x007a1200
 80060e4:	003d0900 	.word	0x003d0900
 80060e8:	aaaaaaab 	.word	0xaaaaaaab

080060ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e041      	b.n	8006182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fd f982 	bl	800341c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f000 fa94 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e041      	b.n	8006220 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fd f903 	bl	80033bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f000 fa45 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start+0x24>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e022      	b.n	8006292 <HAL_TIM_PWM_Start+0x6a>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d109      	bne.n	8006266 <HAL_TIM_PWM_Start+0x3e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e015      	b.n	8006292 <HAL_TIM_PWM_Start+0x6a>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d109      	bne.n	8006280 <HAL_TIM_PWM_Start+0x58>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e008      	b.n	8006292 <HAL_TIM_PWM_Start+0x6a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e05e      	b.n	8006358 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Start+0x82>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a8:	e013      	b.n	80062d2 <HAL_TIM_PWM_Start+0xaa>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_PWM_Start+0x92>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b8:	e00b      	b.n	80062d2 <HAL_TIM_PWM_Start+0xaa>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c8:	e003      	b.n	80062d2 <HAL_TIM_PWM_Start+0xaa>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2202      	movs	r2, #2
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2201      	movs	r2, #1
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fc3c 	bl	8006b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_TIM_PWM_Start+0x138>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d107      	bne.n	80062fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_TIM_PWM_Start+0x138>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_TIM_PWM_Start+0xfa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630c:	d009      	beq.n	8006322 <HAL_TIM_PWM_Start+0xfa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_TIM_PWM_Start+0x13c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_TIM_PWM_Start+0xfa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a12      	ldr	r2, [pc, #72]	; (8006368 <HAL_TIM_PWM_Start+0x140>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d111      	bne.n	8006346 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b06      	cmp	r3, #6
 8006332:	d010      	beq.n	8006356 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006344:	e007      	b.n	8006356 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800

0800636c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ac      	b.n	80064e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	f200 809f 	bhi.w	80064d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080064d5 	.word	0x080064d5
 80063a4:	080064d5 	.word	0x080064d5
 80063a8:	080064d5 	.word	0x080064d5
 80063ac:	08006411 	.word	0x08006411
 80063b0:	080064d5 	.word	0x080064d5
 80063b4:	080064d5 	.word	0x080064d5
 80063b8:	080064d5 	.word	0x080064d5
 80063bc:	08006453 	.word	0x08006453
 80063c0:	080064d5 	.word	0x080064d5
 80063c4:	080064d5 	.word	0x080064d5
 80063c8:	080064d5 	.word	0x080064d5
 80063cc:	08006493 	.word	0x08006493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f9a0 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	619a      	str	r2, [r3, #24]
      break;
 800640e:	e062      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f9e6 	bl	80067e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800642a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6999      	ldr	r1, [r3, #24]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	619a      	str	r2, [r3, #24]
      break;
 8006450:	e041      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fa2f 	bl	80068bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0208 	orr.w	r2, r2, #8
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0204 	bic.w	r2, r2, #4
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	61da      	str	r2, [r3, #28]
      break;
 8006490:	e021      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fa79 	bl	8006990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69d9      	ldr	r1, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	021a      	lsls	r2, r3, #8
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	61da      	str	r2, [r3, #28]
      break;
 80064d2:	e000      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80064d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_TIM_ConfigClockSource+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e0a6      	b.n	800664e <HAL_TIM_ConfigClockSource+0x166>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800651e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006526:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d067      	beq.n	8006608 <HAL_TIM_ConfigClockSource+0x120>
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d80b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x6c>
 800653c:	2b10      	cmp	r3, #16
 800653e:	d073      	beq.n	8006628 <HAL_TIM_ConfigClockSource+0x140>
 8006540:	2b10      	cmp	r3, #16
 8006542:	d802      	bhi.n	800654a <HAL_TIM_ConfigClockSource+0x62>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d06f      	beq.n	8006628 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006548:	e078      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800654a:	2b20      	cmp	r3, #32
 800654c:	d06c      	beq.n	8006628 <HAL_TIM_ConfigClockSource+0x140>
 800654e:	2b30      	cmp	r3, #48	; 0x30
 8006550:	d06a      	beq.n	8006628 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006552:	e073      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006554:	2b70      	cmp	r3, #112	; 0x70
 8006556:	d00d      	beq.n	8006574 <HAL_TIM_ConfigClockSource+0x8c>
 8006558:	2b70      	cmp	r3, #112	; 0x70
 800655a:	d804      	bhi.n	8006566 <HAL_TIM_ConfigClockSource+0x7e>
 800655c:	2b50      	cmp	r3, #80	; 0x50
 800655e:	d033      	beq.n	80065c8 <HAL_TIM_ConfigClockSource+0xe0>
 8006560:	2b60      	cmp	r3, #96	; 0x60
 8006562:	d041      	beq.n	80065e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006564:	e06a      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	d066      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x152>
 800656c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006570:	d017      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006572:	e063      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f000 fac9 	bl	8006b1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006596:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	609a      	str	r2, [r3, #8]
      break;
 80065a0:	e04c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6899      	ldr	r1, [r3, #8]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f000 fab2 	bl	8006b1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065c4:	609a      	str	r2, [r3, #8]
      break;
 80065c6:	e039      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	461a      	mov	r2, r3
 80065d6:	f000 fa29 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2150      	movs	r1, #80	; 0x50
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fa80 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80065e6:	e029      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	6859      	ldr	r1, [r3, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	461a      	mov	r2, r3
 80065f6:	f000 fa47 	bl	8006a88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2160      	movs	r1, #96	; 0x60
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fa70 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8006606:	e019      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	461a      	mov	r2, r3
 8006616:	f000 fa09 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2140      	movs	r1, #64	; 0x40
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fa60 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8006626:	e009      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f000 fa57 	bl	8006ae6 <TIM_ITRx_SetConfig>
        break;
 8006638:	e000      	b.n	800663c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800663a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a29      	ldr	r2, [pc, #164]	; (8006710 <TIM_Base_SetConfig+0xb8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00b      	beq.n	8006688 <TIM_Base_SetConfig+0x30>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006676:	d007      	beq.n	8006688 <TIM_Base_SetConfig+0x30>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a26      	ldr	r2, [pc, #152]	; (8006714 <TIM_Base_SetConfig+0xbc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0x30>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a25      	ldr	r2, [pc, #148]	; (8006718 <TIM_Base_SetConfig+0xc0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <TIM_Base_SetConfig+0xb8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00b      	beq.n	80066ba <TIM_Base_SetConfig+0x62>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d007      	beq.n	80066ba <TIM_Base_SetConfig+0x62>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <TIM_Base_SetConfig+0xbc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d003      	beq.n	80066ba <TIM_Base_SetConfig+0x62>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a18      	ldr	r2, [pc, #96]	; (8006718 <TIM_Base_SetConfig+0xc0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d108      	bne.n	80066cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a07      	ldr	r2, [pc, #28]	; (8006710 <TIM_Base_SetConfig+0xb8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d103      	bne.n	8006700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	615a      	str	r2, [r3, #20]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <TIM_OC1_SetConfig+0xc8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10c      	bne.n	8006792 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0308 	bic.w	r3, r3, #8
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f023 0304 	bic.w	r3, r3, #4
 8006790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <TIM_OC1_SetConfig+0xc8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d111      	bne.n	80067be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	621a      	str	r2, [r3, #32]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00

080067e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0210 	bic.w	r2, r3, #16
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <TIM_OC2_SetConfig+0xd0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10d      	bne.n	8006864 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <TIM_OC2_SetConfig+0xd0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d113      	bne.n	8006894 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00

080068bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1d      	ldr	r2, [pc, #116]	; (800698c <TIM_OC3_SetConfig+0xd0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d10d      	bne.n	8006936 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <TIM_OC3_SetConfig+0xd0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d113      	bne.n	8006966 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800694c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00

08006990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	031b      	lsls	r3, r3, #12
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a0f      	ldr	r2, [pc, #60]	; (8006a28 <TIM_OC4_SetConfig+0x98>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d109      	bne.n	8006a04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	019b      	lsls	r3, r3, #6
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr
 8006a28:	40012c00 	.word	0x40012c00

08006a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 030a 	bic.w	r3, r3, #10
 8006a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f023 0210 	bic.w	r2, r3, #16
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	031b      	lsls	r3, r3, #12
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	621a      	str	r2, [r3, #32]
}
 8006adc:	bf00      	nop
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f043 0307 	orr.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	021a      	lsls	r2, r3, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	609a      	str	r2, [r3, #8]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a1a      	ldr	r2, [r3, #32]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1a      	ldr	r2, [r3, #32]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	431a      	orrs	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e046      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800

08006c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e03f      	b.n	8006cee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fc fca2 	bl	80035cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb83 	bl	80073ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695a      	ldr	r2, [r3, #20]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b08a      	sub	sp, #40	; 0x28
 8006cfa:	af02      	add	r7, sp, #8
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d17c      	bne.n	8006e10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <HAL_UART_Transmit+0x2c>
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e075      	b.n	8006e12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_UART_Transmit+0x3e>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e06e      	b.n	8006e12 <HAL_UART_Transmit+0x11c>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2221      	movs	r2, #33	; 0x21
 8006d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d4a:	f7fc fd5f 	bl	800380c <HAL_GetTick>
 8006d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	88fa      	ldrh	r2, [r7, #6]
 8006d5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d108      	bne.n	8006d78 <HAL_UART_Transmit+0x82>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	e003      	b.n	8006d80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006d88:	e02a      	b.n	8006de0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f9a7 	bl	80070e8 <UART_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e036      	b.n	8006e12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e007      	b.n	8006dd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1cf      	bne.n	8006d8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2200      	movs	r2, #0
 8006df2:	2140      	movs	r1, #64	; 0x40
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f977 	bl	80070e8 <UART_WaitOnFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e006      	b.n	8006e12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e000      	b.n	8006e12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3720      	adds	r7, #32
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d140      	bne.n	8006eb6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_UART_Receive_IT+0x26>
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e039      	b.n	8006eb8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Receive_IT+0x38>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e032      	b.n	8006eb8 <HAL_UART_Receive_IT+0x9e>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	88fa      	ldrh	r2, [r7, #6]
 8006e64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2222      	movs	r2, #34	; 0x22
 8006e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e90:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0201 	orr.w	r2, r2, #1
 8006ea0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0220 	orr.w	r2, r2, #32
 8006eb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006eb6:	2302      	movs	r3, #2
  }
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_UART_IRQHandler+0x52>
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9cc 	bl	80072ac <UART_Receive_IT>
      return;
 8006f14:	e0d1      	b.n	80070ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80b0 	beq.w	800707e <HAL_UART_IRQHandler+0x1ba>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <HAL_UART_IRQHandler+0x70>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a5 	beq.w	800707e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_UART_IRQHandler+0x90>
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	f043 0201 	orr.w	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <HAL_UART_IRQHandler+0xb0>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	f043 0202 	orr.w	r2, r3, #2
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <HAL_UART_IRQHandler+0xd0>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	f043 0204 	orr.w	r2, r3, #4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <HAL_UART_IRQHandler+0xfa>
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_UART_IRQHandler+0xee>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	f043 0208 	orr.w	r2, r3, #8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d078      	beq.n	80070b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x11c>
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f966 	bl	80072ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bf14      	ite	ne
 8006fee:	2301      	movne	r3, #1
 8006ff0:	2300      	moveq	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <HAL_UART_IRQHandler+0x144>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d031      	beq.n	800706c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8b7 	bl	800717c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	d023      	beq.n	8007064 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695a      	ldr	r2, [r3, #20]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	2b00      	cmp	r3, #0
 8007032:	d013      	beq.n	800705c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	4a21      	ldr	r2, [pc, #132]	; (80070c0 <HAL_UART_IRQHandler+0x1fc>)
 800703a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007040:	4618      	mov	r0, r3
 8007042:	f7fd fb53 	bl	80046ec <HAL_DMA_Abort_IT>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d016      	beq.n	800707a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007056:	4610      	mov	r0, r2
 8007058:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705a:	e00e      	b.n	800707a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f83a 	bl	80070d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007062:	e00a      	b.n	800707a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f836 	bl	80070d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706a:	e006      	b.n	800707a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f832 	bl	80070d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007078:	e01e      	b.n	80070b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707a:	bf00      	nop
    return;
 800707c:	e01c      	b.n	80070b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_UART_IRQHandler+0x1d6>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8a3 	bl	80071de <UART_Transmit_IT>
    return;
 8007098:	e00f      	b.n	80070ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <HAL_UART_IRQHandler+0x1f6>
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f8e4 	bl	800727c <UART_EndTransmit_IT>
    return;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80070b8:	bf00      	nop
  }
}
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	080071b7 	.word	0x080071b7

080070c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f8:	e02c      	b.n	8007154 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d028      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d007      	beq.n	8007118 <UART_WaitOnFlagUntilTimeout+0x30>
 8007108:	f7fc fb80 	bl	800380c <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	429a      	cmp	r2, r3
 8007116:	d21d      	bcs.n	8007154 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007126:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e00f      	b.n	8007174 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	429a      	cmp	r2, r3
 8007170:	d0c3      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007192:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr

080071b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7ff ff80 	bl	80070d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b21      	cmp	r3, #33	; 0x21
 80071f0:	d13e      	bne.n	8007270 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fa:	d114      	bne.n	8007226 <UART_Transmit_IT+0x48>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d110      	bne.n	8007226 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007218:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	1c9a      	adds	r2, r3, #2
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	621a      	str	r2, [r3, #32]
 8007224:	e008      	b.n	8007238 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	1c59      	adds	r1, r3, #1
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6211      	str	r1, [r2, #32]
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29b      	uxth	r3, r3
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4619      	mov	r1, r3
 8007246:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10f      	bne.n	800726c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800725a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800726a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e000      	b.n	8007272 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007292:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff ff11 	bl	80070c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b22      	cmp	r3, #34	; 0x22
 80072be:	d170      	bne.n	80073a2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c8:	d117      	bne.n	80072fa <UART_Receive_IT+0x4e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d113      	bne.n	80072fa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	1c9a      	adds	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
 80072f8:	e026      	b.n	8007348 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730c:	d007      	beq.n	800731e <UART_Receive_IT+0x72>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <UART_Receive_IT+0x80>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e008      	b.n	800733e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007338:	b2da      	uxtb	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29b      	uxth	r3, r3
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4619      	mov	r1, r3
 8007356:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007358:	2b00      	cmp	r3, #0
 800735a:	d120      	bne.n	800739e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0220 	bic.w	r2, r2, #32
 800736a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800737a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695a      	ldr	r2, [r3, #20]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7fb fdcb 	bl	8002f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e002      	b.n	80073a4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073e6:	f023 030c 	bic.w	r3, r3, #12
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	430b      	orrs	r3, r1
 80073f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <UART_SetConfig+0x114>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d103      	bne.n	800741c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fe fcc6 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	e002      	b.n	8007422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800741c:	f7fe fcae 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8007420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009a      	lsls	r2, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <UART_SetConfig+0x118>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	0119      	lsls	r1, r3, #4
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009a      	lsls	r2, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	fbb2 f2f3 	udiv	r2, r2, r3
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <UART_SetConfig+0x118>)
 800745a:	fba3 0302 	umull	r0, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	2064      	movs	r0, #100	; 0x64
 8007462:	fb00 f303 	mul.w	r3, r0, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	3332      	adds	r3, #50	; 0x32
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <UART_SetConfig+0x118>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007478:	4419      	add	r1, r3
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009a      	lsls	r2, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <UART_SetConfig+0x118>)
 8007492:	fba3 0302 	umull	r0, r3, r3, r2
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2064      	movs	r0, #100	; 0x64
 800749a:	fb00 f303 	mul.w	r3, r0, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	3332      	adds	r3, #50	; 0x32
 80074a4:	4a07      	ldr	r2, [pc, #28]	; (80074c4 <UART_SetConfig+0x118>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f003 020f 	and.w	r2, r3, #15
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	440a      	add	r2, r1
 80074b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40013800 	.word	0x40013800
 80074c4:	51eb851f 	.word	0x51eb851f

080074c8 <__errno>:
 80074c8:	4b01      	ldr	r3, [pc, #4]	; (80074d0 <__errno+0x8>)
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000018 	.word	0x20000018

080074d4 <__libc_init_array>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	2500      	movs	r5, #0
 80074d8:	4e0c      	ldr	r6, [pc, #48]	; (800750c <__libc_init_array+0x38>)
 80074da:	4c0d      	ldr	r4, [pc, #52]	; (8007510 <__libc_init_array+0x3c>)
 80074dc:	1ba4      	subs	r4, r4, r6
 80074de:	10a4      	asrs	r4, r4, #2
 80074e0:	42a5      	cmp	r5, r4
 80074e2:	d109      	bne.n	80074f8 <__libc_init_array+0x24>
 80074e4:	f004 fa00 	bl	800b8e8 <_init>
 80074e8:	2500      	movs	r5, #0
 80074ea:	4e0a      	ldr	r6, [pc, #40]	; (8007514 <__libc_init_array+0x40>)
 80074ec:	4c0a      	ldr	r4, [pc, #40]	; (8007518 <__libc_init_array+0x44>)
 80074ee:	1ba4      	subs	r4, r4, r6
 80074f0:	10a4      	asrs	r4, r4, #2
 80074f2:	42a5      	cmp	r5, r4
 80074f4:	d105      	bne.n	8007502 <__libc_init_array+0x2e>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074fc:	4798      	blx	r3
 80074fe:	3501      	adds	r5, #1
 8007500:	e7ee      	b.n	80074e0 <__libc_init_array+0xc>
 8007502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007506:	4798      	blx	r3
 8007508:	3501      	adds	r5, #1
 800750a:	e7f2      	b.n	80074f2 <__libc_init_array+0x1e>
 800750c:	0800be38 	.word	0x0800be38
 8007510:	0800be38 	.word	0x0800be38
 8007514:	0800be38 	.word	0x0800be38
 8007518:	0800be3c 	.word	0x0800be3c

0800751c <memset>:
 800751c:	4603      	mov	r3, r0
 800751e:	4402      	add	r2, r0
 8007520:	4293      	cmp	r3, r2
 8007522:	d100      	bne.n	8007526 <memset+0xa>
 8007524:	4770      	bx	lr
 8007526:	f803 1b01 	strb.w	r1, [r3], #1
 800752a:	e7f9      	b.n	8007520 <memset+0x4>

0800752c <__cvt>:
 800752c:	2b00      	cmp	r3, #0
 800752e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007532:	461e      	mov	r6, r3
 8007534:	bfbb      	ittet	lt
 8007536:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800753a:	461e      	movlt	r6, r3
 800753c:	2300      	movge	r3, #0
 800753e:	232d      	movlt	r3, #45	; 0x2d
 8007540:	b088      	sub	sp, #32
 8007542:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007544:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007548:	f027 0720 	bic.w	r7, r7, #32
 800754c:	2f46      	cmp	r7, #70	; 0x46
 800754e:	4614      	mov	r4, r2
 8007550:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007552:	700b      	strb	r3, [r1, #0]
 8007554:	d004      	beq.n	8007560 <__cvt+0x34>
 8007556:	2f45      	cmp	r7, #69	; 0x45
 8007558:	d100      	bne.n	800755c <__cvt+0x30>
 800755a:	3501      	adds	r5, #1
 800755c:	2302      	movs	r3, #2
 800755e:	e000      	b.n	8007562 <__cvt+0x36>
 8007560:	2303      	movs	r3, #3
 8007562:	aa07      	add	r2, sp, #28
 8007564:	9204      	str	r2, [sp, #16]
 8007566:	aa06      	add	r2, sp, #24
 8007568:	e9cd a202 	strd	sl, r2, [sp, #8]
 800756c:	e9cd 3500 	strd	r3, r5, [sp]
 8007570:	4622      	mov	r2, r4
 8007572:	4633      	mov	r3, r6
 8007574:	f001 fd94 	bl	80090a0 <_dtoa_r>
 8007578:	2f47      	cmp	r7, #71	; 0x47
 800757a:	4680      	mov	r8, r0
 800757c:	d102      	bne.n	8007584 <__cvt+0x58>
 800757e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007580:	07db      	lsls	r3, r3, #31
 8007582:	d526      	bpl.n	80075d2 <__cvt+0xa6>
 8007584:	2f46      	cmp	r7, #70	; 0x46
 8007586:	eb08 0905 	add.w	r9, r8, r5
 800758a:	d111      	bne.n	80075b0 <__cvt+0x84>
 800758c:	f898 3000 	ldrb.w	r3, [r8]
 8007590:	2b30      	cmp	r3, #48	; 0x30
 8007592:	d10a      	bne.n	80075aa <__cvt+0x7e>
 8007594:	2200      	movs	r2, #0
 8007596:	2300      	movs	r3, #0
 8007598:	4620      	mov	r0, r4
 800759a:	4631      	mov	r1, r6
 800759c:	f7f9 fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80075a0:	b918      	cbnz	r0, 80075aa <__cvt+0x7e>
 80075a2:	f1c5 0501 	rsb	r5, r5, #1
 80075a6:	f8ca 5000 	str.w	r5, [sl]
 80075aa:	f8da 3000 	ldr.w	r3, [sl]
 80075ae:	4499      	add	r9, r3
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	4620      	mov	r0, r4
 80075b6:	4631      	mov	r1, r6
 80075b8:	f7f9 f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80075bc:	b938      	cbnz	r0, 80075ce <__cvt+0xa2>
 80075be:	2230      	movs	r2, #48	; 0x30
 80075c0:	9b07      	ldr	r3, [sp, #28]
 80075c2:	454b      	cmp	r3, r9
 80075c4:	d205      	bcs.n	80075d2 <__cvt+0xa6>
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	9107      	str	r1, [sp, #28]
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	e7f8      	b.n	80075c0 <__cvt+0x94>
 80075ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80075d2:	4640      	mov	r0, r8
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075d8:	eba3 0308 	sub.w	r3, r3, r8
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	b008      	add	sp, #32
 80075e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080075e4 <__exponent>:
 80075e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e6:	2900      	cmp	r1, #0
 80075e8:	bfb4      	ite	lt
 80075ea:	232d      	movlt	r3, #45	; 0x2d
 80075ec:	232b      	movge	r3, #43	; 0x2b
 80075ee:	4604      	mov	r4, r0
 80075f0:	bfb8      	it	lt
 80075f2:	4249      	neglt	r1, r1
 80075f4:	2909      	cmp	r1, #9
 80075f6:	f804 2b02 	strb.w	r2, [r4], #2
 80075fa:	7043      	strb	r3, [r0, #1]
 80075fc:	dd21      	ble.n	8007642 <__exponent+0x5e>
 80075fe:	f10d 0307 	add.w	r3, sp, #7
 8007602:	461f      	mov	r7, r3
 8007604:	260a      	movs	r6, #10
 8007606:	fb91 f5f6 	sdiv	r5, r1, r6
 800760a:	fb06 1115 	mls	r1, r6, r5, r1
 800760e:	2d09      	cmp	r5, #9
 8007610:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007614:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007618:	f103 32ff 	add.w	r2, r3, #4294967295
 800761c:	4629      	mov	r1, r5
 800761e:	dc09      	bgt.n	8007634 <__exponent+0x50>
 8007620:	3130      	adds	r1, #48	; 0x30
 8007622:	3b02      	subs	r3, #2
 8007624:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007628:	42bb      	cmp	r3, r7
 800762a:	4622      	mov	r2, r4
 800762c:	d304      	bcc.n	8007638 <__exponent+0x54>
 800762e:	1a10      	subs	r0, r2, r0
 8007630:	b003      	add	sp, #12
 8007632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007634:	4613      	mov	r3, r2
 8007636:	e7e6      	b.n	8007606 <__exponent+0x22>
 8007638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800763c:	f804 2b01 	strb.w	r2, [r4], #1
 8007640:	e7f2      	b.n	8007628 <__exponent+0x44>
 8007642:	2330      	movs	r3, #48	; 0x30
 8007644:	4419      	add	r1, r3
 8007646:	7083      	strb	r3, [r0, #2]
 8007648:	1d02      	adds	r2, r0, #4
 800764a:	70c1      	strb	r1, [r0, #3]
 800764c:	e7ef      	b.n	800762e <__exponent+0x4a>
	...

08007650 <_printf_float>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	b091      	sub	sp, #68	; 0x44
 8007656:	460c      	mov	r4, r1
 8007658:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800765a:	4693      	mov	fp, r2
 800765c:	461e      	mov	r6, r3
 800765e:	4605      	mov	r5, r0
 8007660:	f002 feca 	bl	800a3f8 <_localeconv_r>
 8007664:	6803      	ldr	r3, [r0, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	9309      	str	r3, [sp, #36]	; 0x24
 800766a:	f7f8 fd71 	bl	8000150 <strlen>
 800766e:	2300      	movs	r3, #0
 8007670:	930e      	str	r3, [sp, #56]	; 0x38
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	900a      	str	r0, [sp, #40]	; 0x28
 8007676:	3307      	adds	r3, #7
 8007678:	f023 0307 	bic.w	r3, r3, #7
 800767c:	f103 0208 	add.w	r2, r3, #8
 8007680:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007684:	f8d4 a000 	ldr.w	sl, [r4]
 8007688:	603a      	str	r2, [r7, #0]
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007692:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800769a:	930b      	str	r3, [sp, #44]	; 0x2c
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	4ba6      	ldr	r3, [pc, #664]	; (800793c <_printf_float+0x2ec>)
 80076a2:	4638      	mov	r0, r7
 80076a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076a6:	f7f9 f9b1 	bl	8000a0c <__aeabi_dcmpun>
 80076aa:	bb68      	cbnz	r0, 8007708 <_printf_float+0xb8>
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295
 80076b0:	4ba2      	ldr	r3, [pc, #648]	; (800793c <_printf_float+0x2ec>)
 80076b2:	4638      	mov	r0, r7
 80076b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076b6:	f7f9 f98b 	bl	80009d0 <__aeabi_dcmple>
 80076ba:	bb28      	cbnz	r0, 8007708 <_printf_float+0xb8>
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	4638      	mov	r0, r7
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 f97a 	bl	80009bc <__aeabi_dcmplt>
 80076c8:	b110      	cbz	r0, 80076d0 <_printf_float+0x80>
 80076ca:	232d      	movs	r3, #45	; 0x2d
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d0:	4f9b      	ldr	r7, [pc, #620]	; (8007940 <_printf_float+0x2f0>)
 80076d2:	4b9c      	ldr	r3, [pc, #624]	; (8007944 <_printf_float+0x2f4>)
 80076d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076d8:	bf98      	it	ls
 80076da:	461f      	movls	r7, r3
 80076dc:	2303      	movs	r3, #3
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	f02a 0304 	bic.w	r3, sl, #4
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	9600      	str	r6, [sp, #0]
 80076ec:	465b      	mov	r3, fp
 80076ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80076f0:	4621      	mov	r1, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f9e2 	bl	8007abc <_printf_common>
 80076f8:	3001      	adds	r0, #1
 80076fa:	f040 8090 	bne.w	800781e <_printf_float+0x1ce>
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	b011      	add	sp, #68	; 0x44
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	463a      	mov	r2, r7
 800770a:	464b      	mov	r3, r9
 800770c:	4638      	mov	r0, r7
 800770e:	4649      	mov	r1, r9
 8007710:	f7f9 f97c 	bl	8000a0c <__aeabi_dcmpun>
 8007714:	b110      	cbz	r0, 800771c <_printf_float+0xcc>
 8007716:	4f8c      	ldr	r7, [pc, #560]	; (8007948 <_printf_float+0x2f8>)
 8007718:	4b8c      	ldr	r3, [pc, #560]	; (800794c <_printf_float+0x2fc>)
 800771a:	e7db      	b.n	80076d4 <_printf_float+0x84>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007722:	1c59      	adds	r1, r3, #1
 8007724:	a80d      	add	r0, sp, #52	; 0x34
 8007726:	a90e      	add	r1, sp, #56	; 0x38
 8007728:	d140      	bne.n	80077ac <_printf_float+0x15c>
 800772a:	2306      	movs	r3, #6
 800772c:	6063      	str	r3, [r4, #4]
 800772e:	f04f 0c00 	mov.w	ip, #0
 8007732:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007736:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	6022      	str	r2, [r4, #0]
 800773e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	463a      	mov	r2, r7
 8007746:	464b      	mov	r3, r9
 8007748:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff feed 	bl	800752c <__cvt>
 8007752:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007756:	2b47      	cmp	r3, #71	; 0x47
 8007758:	4607      	mov	r7, r0
 800775a:	d109      	bne.n	8007770 <_printf_float+0x120>
 800775c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775e:	1cd8      	adds	r0, r3, #3
 8007760:	db02      	blt.n	8007768 <_printf_float+0x118>
 8007762:	6862      	ldr	r2, [r4, #4]
 8007764:	4293      	cmp	r3, r2
 8007766:	dd47      	ble.n	80077f8 <_printf_float+0x1a8>
 8007768:	f1a8 0802 	sub.w	r8, r8, #2
 800776c:	fa5f f888 	uxtb.w	r8, r8
 8007770:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007774:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007776:	d824      	bhi.n	80077c2 <_printf_float+0x172>
 8007778:	3901      	subs	r1, #1
 800777a:	4642      	mov	r2, r8
 800777c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007780:	910d      	str	r1, [sp, #52]	; 0x34
 8007782:	f7ff ff2f 	bl	80075e4 <__exponent>
 8007786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007788:	4681      	mov	r9, r0
 800778a:	1813      	adds	r3, r2, r0
 800778c:	2a01      	cmp	r2, #1
 800778e:	6123      	str	r3, [r4, #16]
 8007790:	dc02      	bgt.n	8007798 <_printf_float+0x148>
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	07d1      	lsls	r1, r2, #31
 8007796:	d501      	bpl.n	800779c <_printf_float+0x14c>
 8007798:	3301      	adds	r3, #1
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0a2      	beq.n	80076ea <_printf_float+0x9a>
 80077a4:	232d      	movs	r3, #45	; 0x2d
 80077a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077aa:	e79e      	b.n	80076ea <_printf_float+0x9a>
 80077ac:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80077b0:	f000 816e 	beq.w	8007a90 <_printf_float+0x440>
 80077b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077b8:	d1b9      	bne.n	800772e <_printf_float+0xde>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1b7      	bne.n	800772e <_printf_float+0xde>
 80077be:	2301      	movs	r3, #1
 80077c0:	e7b4      	b.n	800772c <_printf_float+0xdc>
 80077c2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80077c6:	d119      	bne.n	80077fc <_printf_float+0x1ac>
 80077c8:	2900      	cmp	r1, #0
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	dd0c      	ble.n	80077e8 <_printf_float+0x198>
 80077ce:	6121      	str	r1, [r4, #16]
 80077d0:	b913      	cbnz	r3, 80077d8 <_printf_float+0x188>
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	07d2      	lsls	r2, r2, #31
 80077d6:	d502      	bpl.n	80077de <_printf_float+0x18e>
 80077d8:	3301      	adds	r3, #1
 80077da:	440b      	add	r3, r1
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e0:	f04f 0900 	mov.w	r9, #0
 80077e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80077e6:	e7d9      	b.n	800779c <_printf_float+0x14c>
 80077e8:	b913      	cbnz	r3, 80077f0 <_printf_float+0x1a0>
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	07d0      	lsls	r0, r2, #31
 80077ee:	d501      	bpl.n	80077f4 <_printf_float+0x1a4>
 80077f0:	3302      	adds	r3, #2
 80077f2:	e7f3      	b.n	80077dc <_printf_float+0x18c>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e7f1      	b.n	80077dc <_printf_float+0x18c>
 80077f8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80077fc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007800:	4293      	cmp	r3, r2
 8007802:	db05      	blt.n	8007810 <_printf_float+0x1c0>
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	07d1      	lsls	r1, r2, #31
 800780a:	d5e8      	bpl.n	80077de <_printf_float+0x18e>
 800780c:	3301      	adds	r3, #1
 800780e:	e7e5      	b.n	80077dc <_printf_float+0x18c>
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfcc      	ite	gt
 8007814:	2301      	movgt	r3, #1
 8007816:	f1c3 0302 	rsble	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	e7de      	b.n	80077dc <_printf_float+0x18c>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	055a      	lsls	r2, r3, #21
 8007822:	d407      	bmi.n	8007834 <_printf_float+0x1e4>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	463a      	mov	r2, r7
 8007828:	4659      	mov	r1, fp
 800782a:	4628      	mov	r0, r5
 800782c:	47b0      	blx	r6
 800782e:	3001      	adds	r0, #1
 8007830:	d129      	bne.n	8007886 <_printf_float+0x236>
 8007832:	e764      	b.n	80076fe <_printf_float+0xae>
 8007834:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007838:	f240 80d7 	bls.w	80079ea <_printf_float+0x39a>
 800783c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007840:	2200      	movs	r2, #0
 8007842:	2300      	movs	r3, #0
 8007844:	f7f9 f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8007848:	b388      	cbz	r0, 80078ae <_printf_float+0x25e>
 800784a:	2301      	movs	r3, #1
 800784c:	4a40      	ldr	r2, [pc, #256]	; (8007950 <_printf_float+0x300>)
 800784e:	4659      	mov	r1, fp
 8007850:	4628      	mov	r0, r5
 8007852:	47b0      	blx	r6
 8007854:	3001      	adds	r0, #1
 8007856:	f43f af52 	beq.w	80076fe <_printf_float+0xae>
 800785a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800785e:	429a      	cmp	r2, r3
 8007860:	db02      	blt.n	8007868 <_printf_float+0x218>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	07d8      	lsls	r0, r3, #31
 8007866:	d50e      	bpl.n	8007886 <_printf_float+0x236>
 8007868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800786c:	4659      	mov	r1, fp
 800786e:	4628      	mov	r0, r5
 8007870:	47b0      	blx	r6
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af43 	beq.w	80076fe <_printf_float+0xae>
 8007878:	2700      	movs	r7, #0
 800787a:	f104 081a 	add.w	r8, r4, #26
 800787e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007880:	3b01      	subs	r3, #1
 8007882:	42bb      	cmp	r3, r7
 8007884:	dc09      	bgt.n	800789a <_printf_float+0x24a>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	079f      	lsls	r7, r3, #30
 800788a:	f100 80fd 	bmi.w	8007a88 <_printf_float+0x438>
 800788e:	68e0      	ldr	r0, [r4, #12]
 8007890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007892:	4298      	cmp	r0, r3
 8007894:	bfb8      	it	lt
 8007896:	4618      	movlt	r0, r3
 8007898:	e733      	b.n	8007702 <_printf_float+0xb2>
 800789a:	2301      	movs	r3, #1
 800789c:	4642      	mov	r2, r8
 800789e:	4659      	mov	r1, fp
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b0      	blx	r6
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f af2a 	beq.w	80076fe <_printf_float+0xae>
 80078aa:	3701      	adds	r7, #1
 80078ac:	e7e7      	b.n	800787e <_printf_float+0x22e>
 80078ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc2b      	bgt.n	800790c <_printf_float+0x2bc>
 80078b4:	2301      	movs	r3, #1
 80078b6:	4a26      	ldr	r2, [pc, #152]	; (8007950 <_printf_float+0x300>)
 80078b8:	4659      	mov	r1, fp
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b0      	blx	r6
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f af1d 	beq.w	80076fe <_printf_float+0xae>
 80078c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c6:	b923      	cbnz	r3, 80078d2 <_printf_float+0x282>
 80078c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ca:	b913      	cbnz	r3, 80078d2 <_printf_float+0x282>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	07d9      	lsls	r1, r3, #31
 80078d0:	d5d9      	bpl.n	8007886 <_printf_float+0x236>
 80078d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078d6:	4659      	mov	r1, fp
 80078d8:	4628      	mov	r0, r5
 80078da:	47b0      	blx	r6
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f af0e 	beq.w	80076fe <_printf_float+0xae>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	f104 091a 	add.w	r9, r4, #26
 80078ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ec:	425b      	negs	r3, r3
 80078ee:	4543      	cmp	r3, r8
 80078f0:	dc01      	bgt.n	80078f6 <_printf_float+0x2a6>
 80078f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f4:	e797      	b.n	8007826 <_printf_float+0x1d6>
 80078f6:	2301      	movs	r3, #1
 80078f8:	464a      	mov	r2, r9
 80078fa:	4659      	mov	r1, fp
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b0      	blx	r6
 8007900:	3001      	adds	r0, #1
 8007902:	f43f aefc 	beq.w	80076fe <_printf_float+0xae>
 8007906:	f108 0801 	add.w	r8, r8, #1
 800790a:	e7ee      	b.n	80078ea <_printf_float+0x29a>
 800790c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800790e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007910:	429a      	cmp	r2, r3
 8007912:	bfa8      	it	ge
 8007914:	461a      	movge	r2, r3
 8007916:	2a00      	cmp	r2, #0
 8007918:	4690      	mov	r8, r2
 800791a:	dd07      	ble.n	800792c <_printf_float+0x2dc>
 800791c:	4613      	mov	r3, r2
 800791e:	4659      	mov	r1, fp
 8007920:	463a      	mov	r2, r7
 8007922:	4628      	mov	r0, r5
 8007924:	47b0      	blx	r6
 8007926:	3001      	adds	r0, #1
 8007928:	f43f aee9 	beq.w	80076fe <_printf_float+0xae>
 800792c:	f104 031a 	add.w	r3, r4, #26
 8007930:	f04f 0a00 	mov.w	sl, #0
 8007934:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007938:	930b      	str	r3, [sp, #44]	; 0x2c
 800793a:	e015      	b.n	8007968 <_printf_float+0x318>
 800793c:	7fefffff 	.word	0x7fefffff
 8007940:	0800bb1c 	.word	0x0800bb1c
 8007944:	0800bb18 	.word	0x0800bb18
 8007948:	0800bb24 	.word	0x0800bb24
 800794c:	0800bb20 	.word	0x0800bb20
 8007950:	0800bb28 	.word	0x0800bb28
 8007954:	2301      	movs	r3, #1
 8007956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007958:	4659      	mov	r1, fp
 800795a:	4628      	mov	r0, r5
 800795c:	47b0      	blx	r6
 800795e:	3001      	adds	r0, #1
 8007960:	f43f aecd 	beq.w	80076fe <_printf_float+0xae>
 8007964:	f10a 0a01 	add.w	sl, sl, #1
 8007968:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800796c:	eba9 0308 	sub.w	r3, r9, r8
 8007970:	4553      	cmp	r3, sl
 8007972:	dcef      	bgt.n	8007954 <_printf_float+0x304>
 8007974:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007978:	429a      	cmp	r2, r3
 800797a:	444f      	add	r7, r9
 800797c:	db14      	blt.n	80079a8 <_printf_float+0x358>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	07da      	lsls	r2, r3, #31
 8007982:	d411      	bmi.n	80079a8 <_printf_float+0x358>
 8007984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007986:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007988:	eba3 0209 	sub.w	r2, r3, r9
 800798c:	eba3 0901 	sub.w	r9, r3, r1
 8007990:	4591      	cmp	r9, r2
 8007992:	bfa8      	it	ge
 8007994:	4691      	movge	r9, r2
 8007996:	f1b9 0f00 	cmp.w	r9, #0
 800799a:	dc0d      	bgt.n	80079b8 <_printf_float+0x368>
 800799c:	2700      	movs	r7, #0
 800799e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079a2:	f104 081a 	add.w	r8, r4, #26
 80079a6:	e018      	b.n	80079da <_printf_float+0x38a>
 80079a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ac:	4659      	mov	r1, fp
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b0      	blx	r6
 80079b2:	3001      	adds	r0, #1
 80079b4:	d1e6      	bne.n	8007984 <_printf_float+0x334>
 80079b6:	e6a2      	b.n	80076fe <_printf_float+0xae>
 80079b8:	464b      	mov	r3, r9
 80079ba:	463a      	mov	r2, r7
 80079bc:	4659      	mov	r1, fp
 80079be:	4628      	mov	r0, r5
 80079c0:	47b0      	blx	r6
 80079c2:	3001      	adds	r0, #1
 80079c4:	d1ea      	bne.n	800799c <_printf_float+0x34c>
 80079c6:	e69a      	b.n	80076fe <_printf_float+0xae>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4642      	mov	r2, r8
 80079cc:	4659      	mov	r1, fp
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b0      	blx	r6
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f ae93 	beq.w	80076fe <_printf_float+0xae>
 80079d8:	3701      	adds	r7, #1
 80079da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	eba3 0309 	sub.w	r3, r3, r9
 80079e4:	42bb      	cmp	r3, r7
 80079e6:	dcef      	bgt.n	80079c8 <_printf_float+0x378>
 80079e8:	e74d      	b.n	8007886 <_printf_float+0x236>
 80079ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ec:	2a01      	cmp	r2, #1
 80079ee:	dc01      	bgt.n	80079f4 <_printf_float+0x3a4>
 80079f0:	07db      	lsls	r3, r3, #31
 80079f2:	d538      	bpl.n	8007a66 <_printf_float+0x416>
 80079f4:	2301      	movs	r3, #1
 80079f6:	463a      	mov	r2, r7
 80079f8:	4659      	mov	r1, fp
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b0      	blx	r6
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f ae7d 	beq.w	80076fe <_printf_float+0xae>
 8007a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a08:	4659      	mov	r1, fp
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b0      	blx	r6
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f107 0701 	add.w	r7, r7, #1
 8007a14:	f43f ae73 	beq.w	80076fe <_printf_float+0xae>
 8007a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f103 38ff 	add.w	r8, r3, #4294967295
 8007a24:	2300      	movs	r3, #0
 8007a26:	f7f8 ffbf 	bl	80009a8 <__aeabi_dcmpeq>
 8007a2a:	b9c0      	cbnz	r0, 8007a5e <_printf_float+0x40e>
 8007a2c:	4643      	mov	r3, r8
 8007a2e:	463a      	mov	r2, r7
 8007a30:	4659      	mov	r1, fp
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b0      	blx	r6
 8007a36:	3001      	adds	r0, #1
 8007a38:	d10d      	bne.n	8007a56 <_printf_float+0x406>
 8007a3a:	e660      	b.n	80076fe <_printf_float+0xae>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4642      	mov	r2, r8
 8007a40:	4659      	mov	r1, fp
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b0      	blx	r6
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f ae59 	beq.w	80076fe <_printf_float+0xae>
 8007a4c:	3701      	adds	r7, #1
 8007a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a50:	3b01      	subs	r3, #1
 8007a52:	42bb      	cmp	r3, r7
 8007a54:	dcf2      	bgt.n	8007a3c <_printf_float+0x3ec>
 8007a56:	464b      	mov	r3, r9
 8007a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a5c:	e6e4      	b.n	8007828 <_printf_float+0x1d8>
 8007a5e:	2700      	movs	r7, #0
 8007a60:	f104 081a 	add.w	r8, r4, #26
 8007a64:	e7f3      	b.n	8007a4e <_printf_float+0x3fe>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7e1      	b.n	8007a2e <_printf_float+0x3de>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	4659      	mov	r1, fp
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f ae42 	beq.w	80076fe <_printf_float+0xae>
 8007a7a:	3701      	adds	r7, #1
 8007a7c:	68e3      	ldr	r3, [r4, #12]
 8007a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	dcf1      	bgt.n	8007a6a <_printf_float+0x41a>
 8007a86:	e702      	b.n	800788e <_printf_float+0x23e>
 8007a88:	2700      	movs	r7, #0
 8007a8a:	f104 0819 	add.w	r8, r4, #25
 8007a8e:	e7f5      	b.n	8007a7c <_printf_float+0x42c>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f43f ae94 	beq.w	80077be <_printf_float+0x16e>
 8007a96:	f04f 0c00 	mov.w	ip, #0
 8007a9a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007a9e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007aa8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	463a      	mov	r2, r7
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f7ff fd3a 	bl	800752c <__cvt>
 8007ab8:	4607      	mov	r7, r0
 8007aba:	e64f      	b.n	800775c <_printf_float+0x10c>

08007abc <_printf_common>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	688a      	ldr	r2, [r1, #8]
 8007ac6:	690b      	ldr	r3, [r1, #16]
 8007ac8:	4606      	mov	r6, r0
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bfb8      	it	lt
 8007ace:	4613      	movlt	r3, r2
 8007ad0:	f8c9 3000 	str.w	r3, [r9]
 8007ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad8:	460c      	mov	r4, r1
 8007ada:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ade:	b112      	cbz	r2, 8007ae6 <_printf_common+0x2a>
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f8c9 3000 	str.w	r3, [r9]
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	0699      	lsls	r1, r3, #26
 8007aea:	bf42      	ittt	mi
 8007aec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007af0:	3302      	addmi	r3, #2
 8007af2:	f8c9 3000 	strmi.w	r3, [r9]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	f015 0506 	ands.w	r5, r5, #6
 8007afc:	d107      	bne.n	8007b0e <_printf_common+0x52>
 8007afe:	f104 0a19 	add.w	sl, r4, #25
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	f8d9 2000 	ldr.w	r2, [r9]
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	dc29      	bgt.n	8007b62 <_printf_common+0xa6>
 8007b0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	3300      	adds	r3, #0
 8007b16:	bf18      	it	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	0692      	lsls	r2, r2, #26
 8007b1c:	d42e      	bmi.n	8007b7c <_printf_common+0xc0>
 8007b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b22:	4639      	mov	r1, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	47c0      	blx	r8
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d021      	beq.n	8007b70 <_printf_common+0xb4>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	68e5      	ldr	r5, [r4, #12]
 8007b30:	f003 0306 	and.w	r3, r3, #6
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	bf18      	it	ne
 8007b38:	2500      	movne	r5, #0
 8007b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	bf08      	it	eq
 8007b44:	1aad      	subeq	r5, r5, r2
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	6922      	ldr	r2, [r4, #16]
 8007b4a:	bf08      	it	eq
 8007b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b50:	4293      	cmp	r3, r2
 8007b52:	bfc4      	itt	gt
 8007b54:	1a9b      	subgt	r3, r3, r2
 8007b56:	18ed      	addgt	r5, r5, r3
 8007b58:	341a      	adds	r4, #26
 8007b5a:	454d      	cmp	r5, r9
 8007b5c:	d11a      	bne.n	8007b94 <_printf_common+0xd8>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e008      	b.n	8007b74 <_printf_common+0xb8>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4652      	mov	r2, sl
 8007b66:	4639      	mov	r1, r7
 8007b68:	4630      	mov	r0, r6
 8007b6a:	47c0      	blx	r8
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d103      	bne.n	8007b78 <_printf_common+0xbc>
 8007b70:	f04f 30ff 	mov.w	r0, #4294967295
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	3501      	adds	r5, #1
 8007b7a:	e7c2      	b.n	8007b02 <_printf_common+0x46>
 8007b7c:	2030      	movs	r0, #48	; 0x30
 8007b7e:	18e1      	adds	r1, r4, r3
 8007b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b8a:	4422      	add	r2, r4
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b92:	e7c4      	b.n	8007b1e <_printf_common+0x62>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4622      	mov	r2, r4
 8007b98:	4639      	mov	r1, r7
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	47c0      	blx	r8
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d0e6      	beq.n	8007b70 <_printf_common+0xb4>
 8007ba2:	f109 0901 	add.w	r9, r9, #1
 8007ba6:	e7d8      	b.n	8007b5a <_printf_common+0x9e>

08007ba8 <_printf_i>:
 8007ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	7e09      	ldrb	r1, [r1, #24]
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	296e      	cmp	r1, #110	; 0x6e
 8007bb8:	4617      	mov	r7, r2
 8007bba:	4606      	mov	r6, r0
 8007bbc:	4698      	mov	r8, r3
 8007bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bc0:	f000 80b3 	beq.w	8007d2a <_printf_i+0x182>
 8007bc4:	d822      	bhi.n	8007c0c <_printf_i+0x64>
 8007bc6:	2963      	cmp	r1, #99	; 0x63
 8007bc8:	d036      	beq.n	8007c38 <_printf_i+0x90>
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x3a>
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	f000 80b9 	beq.w	8007d44 <_printf_i+0x19c>
 8007bd2:	2958      	cmp	r1, #88	; 0x58
 8007bd4:	f000 8083 	beq.w	8007cde <_printf_i+0x136>
 8007bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007be0:	e032      	b.n	8007c48 <_printf_i+0xa0>
 8007be2:	2964      	cmp	r1, #100	; 0x64
 8007be4:	d001      	beq.n	8007bea <_printf_i+0x42>
 8007be6:	2969      	cmp	r1, #105	; 0x69
 8007be8:	d1f6      	bne.n	8007bd8 <_printf_i+0x30>
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	6813      	ldr	r3, [r2, #0]
 8007bee:	0605      	lsls	r5, r0, #24
 8007bf0:	f103 0104 	add.w	r1, r3, #4
 8007bf4:	d52a      	bpl.n	8007c4c <_printf_i+0xa4>
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6011      	str	r1, [r2, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da03      	bge.n	8007c06 <_printf_i+0x5e>
 8007bfe:	222d      	movs	r2, #45	; 0x2d
 8007c00:	425b      	negs	r3, r3
 8007c02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c06:	486f      	ldr	r0, [pc, #444]	; (8007dc4 <_printf_i+0x21c>)
 8007c08:	220a      	movs	r2, #10
 8007c0a:	e039      	b.n	8007c80 <_printf_i+0xd8>
 8007c0c:	2973      	cmp	r1, #115	; 0x73
 8007c0e:	f000 809d 	beq.w	8007d4c <_printf_i+0x1a4>
 8007c12:	d808      	bhi.n	8007c26 <_printf_i+0x7e>
 8007c14:	296f      	cmp	r1, #111	; 0x6f
 8007c16:	d020      	beq.n	8007c5a <_printf_i+0xb2>
 8007c18:	2970      	cmp	r1, #112	; 0x70
 8007c1a:	d1dd      	bne.n	8007bd8 <_printf_i+0x30>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	f043 0320 	orr.w	r3, r3, #32
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	e003      	b.n	8007c2e <_printf_i+0x86>
 8007c26:	2975      	cmp	r1, #117	; 0x75
 8007c28:	d017      	beq.n	8007c5a <_printf_i+0xb2>
 8007c2a:	2978      	cmp	r1, #120	; 0x78
 8007c2c:	d1d4      	bne.n	8007bd8 <_printf_i+0x30>
 8007c2e:	2378      	movs	r3, #120	; 0x78
 8007c30:	4865      	ldr	r0, [pc, #404]	; (8007dc8 <_printf_i+0x220>)
 8007c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c36:	e055      	b.n	8007ce4 <_printf_i+0x13c>
 8007c38:	6813      	ldr	r3, [r2, #0]
 8007c3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c3e:	1d19      	adds	r1, r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6011      	str	r1, [r2, #0]
 8007c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e08c      	b.n	8007d66 <_printf_i+0x1be>
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c52:	6011      	str	r1, [r2, #0]
 8007c54:	bf18      	it	ne
 8007c56:	b21b      	sxthne	r3, r3
 8007c58:	e7cf      	b.n	8007bfa <_printf_i+0x52>
 8007c5a:	6813      	ldr	r3, [r2, #0]
 8007c5c:	6825      	ldr	r5, [r4, #0]
 8007c5e:	1d18      	adds	r0, r3, #4
 8007c60:	6010      	str	r0, [r2, #0]
 8007c62:	0628      	lsls	r0, r5, #24
 8007c64:	d501      	bpl.n	8007c6a <_printf_i+0xc2>
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	e002      	b.n	8007c70 <_printf_i+0xc8>
 8007c6a:	0668      	lsls	r0, r5, #25
 8007c6c:	d5fb      	bpl.n	8007c66 <_printf_i+0xbe>
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	296f      	cmp	r1, #111	; 0x6f
 8007c72:	bf14      	ite	ne
 8007c74:	220a      	movne	r2, #10
 8007c76:	2208      	moveq	r2, #8
 8007c78:	4852      	ldr	r0, [pc, #328]	; (8007dc4 <_printf_i+0x21c>)
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c80:	6865      	ldr	r5, [r4, #4]
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	60a5      	str	r5, [r4, #8]
 8007c86:	f2c0 8095 	blt.w	8007db4 <_printf_i+0x20c>
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	f021 0104 	bic.w	r1, r1, #4
 8007c90:	6021      	str	r1, [r4, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d13d      	bne.n	8007d12 <_printf_i+0x16a>
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	f040 808e 	bne.w	8007db8 <_printf_i+0x210>
 8007c9c:	4665      	mov	r5, ip
 8007c9e:	2a08      	cmp	r2, #8
 8007ca0:	d10b      	bne.n	8007cba <_printf_i+0x112>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	07db      	lsls	r3, r3, #31
 8007ca6:	d508      	bpl.n	8007cba <_printf_i+0x112>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	6862      	ldr	r2, [r4, #4]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	bfde      	ittt	le
 8007cb0:	2330      	movle	r3, #48	; 0x30
 8007cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cba:	ebac 0305 	sub.w	r3, ip, r5
 8007cbe:	6123      	str	r3, [r4, #16]
 8007cc0:	f8cd 8000 	str.w	r8, [sp]
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	aa03      	add	r2, sp, #12
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff fef6 	bl	8007abc <_printf_common>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d14d      	bne.n	8007d70 <_printf_i+0x1c8>
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	b005      	add	sp, #20
 8007cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cde:	4839      	ldr	r0, [pc, #228]	; (8007dc4 <_printf_i+0x21c>)
 8007ce0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ce4:	6813      	ldr	r3, [r2, #0]
 8007ce6:	6821      	ldr	r1, [r4, #0]
 8007ce8:	1d1d      	adds	r5, r3, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6015      	str	r5, [r2, #0]
 8007cee:	060a      	lsls	r2, r1, #24
 8007cf0:	d50b      	bpl.n	8007d0a <_printf_i+0x162>
 8007cf2:	07ca      	lsls	r2, r1, #31
 8007cf4:	bf44      	itt	mi
 8007cf6:	f041 0120 	orrmi.w	r1, r1, #32
 8007cfa:	6021      	strmi	r1, [r4, #0]
 8007cfc:	b91b      	cbnz	r3, 8007d06 <_printf_i+0x15e>
 8007cfe:	6822      	ldr	r2, [r4, #0]
 8007d00:	f022 0220 	bic.w	r2, r2, #32
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	2210      	movs	r2, #16
 8007d08:	e7b7      	b.n	8007c7a <_printf_i+0xd2>
 8007d0a:	064d      	lsls	r5, r1, #25
 8007d0c:	bf48      	it	mi
 8007d0e:	b29b      	uxthmi	r3, r3
 8007d10:	e7ef      	b.n	8007cf2 <_printf_i+0x14a>
 8007d12:	4665      	mov	r5, ip
 8007d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d18:	fb02 3311 	mls	r3, r2, r1, r3
 8007d1c:	5cc3      	ldrb	r3, [r0, r3]
 8007d1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d22:	460b      	mov	r3, r1
 8007d24:	2900      	cmp	r1, #0
 8007d26:	d1f5      	bne.n	8007d14 <_printf_i+0x16c>
 8007d28:	e7b9      	b.n	8007c9e <_printf_i+0xf6>
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	6825      	ldr	r5, [r4, #0]
 8007d2e:	1d18      	adds	r0, r3, #4
 8007d30:	6961      	ldr	r1, [r4, #20]
 8007d32:	6010      	str	r0, [r2, #0]
 8007d34:	0628      	lsls	r0, r5, #24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	d501      	bpl.n	8007d3e <_printf_i+0x196>
 8007d3a:	6019      	str	r1, [r3, #0]
 8007d3c:	e002      	b.n	8007d44 <_printf_i+0x19c>
 8007d3e:	066a      	lsls	r2, r5, #25
 8007d40:	d5fb      	bpl.n	8007d3a <_printf_i+0x192>
 8007d42:	8019      	strh	r1, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	4665      	mov	r5, ip
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	e7b9      	b.n	8007cc0 <_printf_i+0x118>
 8007d4c:	6813      	ldr	r3, [r2, #0]
 8007d4e:	1d19      	adds	r1, r3, #4
 8007d50:	6011      	str	r1, [r2, #0]
 8007d52:	681d      	ldr	r5, [r3, #0]
 8007d54:	6862      	ldr	r2, [r4, #4]
 8007d56:	2100      	movs	r1, #0
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f002 fb75 	bl	800a448 <memchr>
 8007d5e:	b108      	cbz	r0, 8007d64 <_printf_i+0x1bc>
 8007d60:	1b40      	subs	r0, r0, r5
 8007d62:	6060      	str	r0, [r4, #4]
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6e:	e7a7      	b.n	8007cc0 <_printf_i+0x118>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	462a      	mov	r2, r5
 8007d74:	4639      	mov	r1, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d0aa      	beq.n	8007cd4 <_printf_i+0x12c>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	079b      	lsls	r3, r3, #30
 8007d82:	d413      	bmi.n	8007dac <_printf_i+0x204>
 8007d84:	68e0      	ldr	r0, [r4, #12]
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	4298      	cmp	r0, r3
 8007d8a:	bfb8      	it	lt
 8007d8c:	4618      	movlt	r0, r3
 8007d8e:	e7a3      	b.n	8007cd8 <_printf_i+0x130>
 8007d90:	2301      	movs	r3, #1
 8007d92:	464a      	mov	r2, r9
 8007d94:	4639      	mov	r1, r7
 8007d96:	4630      	mov	r0, r6
 8007d98:	47c0      	blx	r8
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d09a      	beq.n	8007cd4 <_printf_i+0x12c>
 8007d9e:	3501      	adds	r5, #1
 8007da0:	68e3      	ldr	r3, [r4, #12]
 8007da2:	9a03      	ldr	r2, [sp, #12]
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	42ab      	cmp	r3, r5
 8007da8:	dcf2      	bgt.n	8007d90 <_printf_i+0x1e8>
 8007daa:	e7eb      	b.n	8007d84 <_printf_i+0x1dc>
 8007dac:	2500      	movs	r5, #0
 8007dae:	f104 0919 	add.w	r9, r4, #25
 8007db2:	e7f5      	b.n	8007da0 <_printf_i+0x1f8>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1ac      	bne.n	8007d12 <_printf_i+0x16a>
 8007db8:	7803      	ldrb	r3, [r0, #0]
 8007dba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc2:	e76c      	b.n	8007c9e <_printf_i+0xf6>
 8007dc4:	0800bb2a 	.word	0x0800bb2a
 8007dc8:	0800bb3b 	.word	0x0800bb3b

08007dcc <_scanf_float>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	469a      	mov	sl, r3
 8007dd2:	688b      	ldr	r3, [r1, #8]
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ddc:	bf88      	it	hi
 8007dde:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007de2:	b087      	sub	sp, #28
 8007de4:	bf85      	ittet	hi
 8007de6:	189b      	addhi	r3, r3, r2
 8007de8:	9301      	strhi	r3, [sp, #4]
 8007dea:	2300      	movls	r3, #0
 8007dec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007df0:	4688      	mov	r8, r1
 8007df2:	f04f 0b00 	mov.w	fp, #0
 8007df6:	bf8c      	ite	hi
 8007df8:	608b      	strhi	r3, [r1, #8]
 8007dfa:	9301      	strls	r3, [sp, #4]
 8007dfc:	680b      	ldr	r3, [r1, #0]
 8007dfe:	4607      	mov	r7, r0
 8007e00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e04:	f848 3b1c 	str.w	r3, [r8], #28
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4645      	mov	r5, r8
 8007e0c:	465a      	mov	r2, fp
 8007e0e:	46d9      	mov	r9, fp
 8007e10:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007e14:	f8cd b008 	str.w	fp, [sp, #8]
 8007e18:	68a1      	ldr	r1, [r4, #8]
 8007e1a:	b181      	cbz	r1, 8007e3e <_scanf_float+0x72>
 8007e1c:	6833      	ldr	r3, [r6, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b49      	cmp	r3, #73	; 0x49
 8007e22:	d071      	beq.n	8007f08 <_scanf_float+0x13c>
 8007e24:	d84d      	bhi.n	8007ec2 <_scanf_float+0xf6>
 8007e26:	2b39      	cmp	r3, #57	; 0x39
 8007e28:	d840      	bhi.n	8007eac <_scanf_float+0xe0>
 8007e2a:	2b31      	cmp	r3, #49	; 0x31
 8007e2c:	f080 8088 	bcs.w	8007f40 <_scanf_float+0x174>
 8007e30:	2b2d      	cmp	r3, #45	; 0x2d
 8007e32:	f000 8090 	beq.w	8007f56 <_scanf_float+0x18a>
 8007e36:	d815      	bhi.n	8007e64 <_scanf_float+0x98>
 8007e38:	2b2b      	cmp	r3, #43	; 0x2b
 8007e3a:	f000 808c 	beq.w	8007f56 <_scanf_float+0x18a>
 8007e3e:	f1b9 0f00 	cmp.w	r9, #0
 8007e42:	d003      	beq.n	8007e4c <_scanf_float+0x80>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	3a01      	subs	r2, #1
 8007e4e:	2a01      	cmp	r2, #1
 8007e50:	f200 80ea 	bhi.w	8008028 <_scanf_float+0x25c>
 8007e54:	4545      	cmp	r5, r8
 8007e56:	f200 80dc 	bhi.w	8008012 <_scanf_float+0x246>
 8007e5a:	2601      	movs	r6, #1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	b007      	add	sp, #28
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e64:	2b2e      	cmp	r3, #46	; 0x2e
 8007e66:	f000 809f 	beq.w	8007fa8 <_scanf_float+0x1dc>
 8007e6a:	2b30      	cmp	r3, #48	; 0x30
 8007e6c:	d1e7      	bne.n	8007e3e <_scanf_float+0x72>
 8007e6e:	6820      	ldr	r0, [r4, #0]
 8007e70:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007e74:	d064      	beq.n	8007f40 <_scanf_float+0x174>
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007e7c:	6020      	str	r0, [r4, #0]
 8007e7e:	f109 0901 	add.w	r9, r9, #1
 8007e82:	b11b      	cbz	r3, 8007e8c <_scanf_float+0xc0>
 8007e84:	3b01      	subs	r3, #1
 8007e86:	3101      	adds	r1, #1
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	60a1      	str	r1, [r4, #8]
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	3301      	adds	r3, #1
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	6873      	ldr	r3, [r6, #4]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	6073      	str	r3, [r6, #4]
 8007ea0:	f340 80ac 	ble.w	8007ffc <_scanf_float+0x230>
 8007ea4:	6833      	ldr	r3, [r6, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	6033      	str	r3, [r6, #0]
 8007eaa:	e7b5      	b.n	8007e18 <_scanf_float+0x4c>
 8007eac:	2b45      	cmp	r3, #69	; 0x45
 8007eae:	f000 8085 	beq.w	8007fbc <_scanf_float+0x1f0>
 8007eb2:	2b46      	cmp	r3, #70	; 0x46
 8007eb4:	d06a      	beq.n	8007f8c <_scanf_float+0x1c0>
 8007eb6:	2b41      	cmp	r3, #65	; 0x41
 8007eb8:	d1c1      	bne.n	8007e3e <_scanf_float+0x72>
 8007eba:	2a01      	cmp	r2, #1
 8007ebc:	d1bf      	bne.n	8007e3e <_scanf_float+0x72>
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	e046      	b.n	8007f50 <_scanf_float+0x184>
 8007ec2:	2b65      	cmp	r3, #101	; 0x65
 8007ec4:	d07a      	beq.n	8007fbc <_scanf_float+0x1f0>
 8007ec6:	d818      	bhi.n	8007efa <_scanf_float+0x12e>
 8007ec8:	2b54      	cmp	r3, #84	; 0x54
 8007eca:	d066      	beq.n	8007f9a <_scanf_float+0x1ce>
 8007ecc:	d811      	bhi.n	8007ef2 <_scanf_float+0x126>
 8007ece:	2b4e      	cmp	r3, #78	; 0x4e
 8007ed0:	d1b5      	bne.n	8007e3e <_scanf_float+0x72>
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	d146      	bne.n	8007f64 <_scanf_float+0x198>
 8007ed6:	f1b9 0f00 	cmp.w	r9, #0
 8007eda:	d145      	bne.n	8007f68 <_scanf_float+0x19c>
 8007edc:	6821      	ldr	r1, [r4, #0]
 8007ede:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007ee2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007ee6:	d13f      	bne.n	8007f68 <_scanf_float+0x19c>
 8007ee8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007eec:	6021      	str	r1, [r4, #0]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	e02e      	b.n	8007f50 <_scanf_float+0x184>
 8007ef2:	2b59      	cmp	r3, #89	; 0x59
 8007ef4:	d01e      	beq.n	8007f34 <_scanf_float+0x168>
 8007ef6:	2b61      	cmp	r3, #97	; 0x61
 8007ef8:	e7de      	b.n	8007eb8 <_scanf_float+0xec>
 8007efa:	2b6e      	cmp	r3, #110	; 0x6e
 8007efc:	d0e9      	beq.n	8007ed2 <_scanf_float+0x106>
 8007efe:	d815      	bhi.n	8007f2c <_scanf_float+0x160>
 8007f00:	2b66      	cmp	r3, #102	; 0x66
 8007f02:	d043      	beq.n	8007f8c <_scanf_float+0x1c0>
 8007f04:	2b69      	cmp	r3, #105	; 0x69
 8007f06:	d19a      	bne.n	8007e3e <_scanf_float+0x72>
 8007f08:	f1bb 0f00 	cmp.w	fp, #0
 8007f0c:	d138      	bne.n	8007f80 <_scanf_float+0x1b4>
 8007f0e:	f1b9 0f00 	cmp.w	r9, #0
 8007f12:	d197      	bne.n	8007e44 <_scanf_float+0x78>
 8007f14:	6821      	ldr	r1, [r4, #0]
 8007f16:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007f1a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007f1e:	d195      	bne.n	8007e4c <_scanf_float+0x80>
 8007f20:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007f24:	6021      	str	r1, [r4, #0]
 8007f26:	f04f 0b01 	mov.w	fp, #1
 8007f2a:	e011      	b.n	8007f50 <_scanf_float+0x184>
 8007f2c:	2b74      	cmp	r3, #116	; 0x74
 8007f2e:	d034      	beq.n	8007f9a <_scanf_float+0x1ce>
 8007f30:	2b79      	cmp	r3, #121	; 0x79
 8007f32:	d184      	bne.n	8007e3e <_scanf_float+0x72>
 8007f34:	f1bb 0f07 	cmp.w	fp, #7
 8007f38:	d181      	bne.n	8007e3e <_scanf_float+0x72>
 8007f3a:	f04f 0b08 	mov.w	fp, #8
 8007f3e:	e007      	b.n	8007f50 <_scanf_float+0x184>
 8007f40:	eb12 0f0b 	cmn.w	r2, fp
 8007f44:	f47f af7b 	bne.w	8007e3e <_scanf_float+0x72>
 8007f48:	6821      	ldr	r1, [r4, #0]
 8007f4a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007f4e:	6021      	str	r1, [r4, #0]
 8007f50:	702b      	strb	r3, [r5, #0]
 8007f52:	3501      	adds	r5, #1
 8007f54:	e79a      	b.n	8007e8c <_scanf_float+0xc0>
 8007f56:	6821      	ldr	r1, [r4, #0]
 8007f58:	0608      	lsls	r0, r1, #24
 8007f5a:	f57f af70 	bpl.w	8007e3e <_scanf_float+0x72>
 8007f5e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f62:	e7f4      	b.n	8007f4e <_scanf_float+0x182>
 8007f64:	2a02      	cmp	r2, #2
 8007f66:	d047      	beq.n	8007ff8 <_scanf_float+0x22c>
 8007f68:	f1bb 0f01 	cmp.w	fp, #1
 8007f6c:	d003      	beq.n	8007f76 <_scanf_float+0x1aa>
 8007f6e:	f1bb 0f04 	cmp.w	fp, #4
 8007f72:	f47f af64 	bne.w	8007e3e <_scanf_float+0x72>
 8007f76:	f10b 0b01 	add.w	fp, fp, #1
 8007f7a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f7e:	e7e7      	b.n	8007f50 <_scanf_float+0x184>
 8007f80:	f1bb 0f03 	cmp.w	fp, #3
 8007f84:	d0f7      	beq.n	8007f76 <_scanf_float+0x1aa>
 8007f86:	f1bb 0f05 	cmp.w	fp, #5
 8007f8a:	e7f2      	b.n	8007f72 <_scanf_float+0x1a6>
 8007f8c:	f1bb 0f02 	cmp.w	fp, #2
 8007f90:	f47f af55 	bne.w	8007e3e <_scanf_float+0x72>
 8007f94:	f04f 0b03 	mov.w	fp, #3
 8007f98:	e7da      	b.n	8007f50 <_scanf_float+0x184>
 8007f9a:	f1bb 0f06 	cmp.w	fp, #6
 8007f9e:	f47f af4e 	bne.w	8007e3e <_scanf_float+0x72>
 8007fa2:	f04f 0b07 	mov.w	fp, #7
 8007fa6:	e7d3      	b.n	8007f50 <_scanf_float+0x184>
 8007fa8:	6821      	ldr	r1, [r4, #0]
 8007faa:	0588      	lsls	r0, r1, #22
 8007fac:	f57f af47 	bpl.w	8007e3e <_scanf_float+0x72>
 8007fb0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007fb4:	6021      	str	r1, [r4, #0]
 8007fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fba:	e7c9      	b.n	8007f50 <_scanf_float+0x184>
 8007fbc:	6821      	ldr	r1, [r4, #0]
 8007fbe:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007fc2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007fc6:	d006      	beq.n	8007fd6 <_scanf_float+0x20a>
 8007fc8:	0548      	lsls	r0, r1, #21
 8007fca:	f57f af38 	bpl.w	8007e3e <_scanf_float+0x72>
 8007fce:	f1b9 0f00 	cmp.w	r9, #0
 8007fd2:	f43f af3b 	beq.w	8007e4c <_scanf_float+0x80>
 8007fd6:	0588      	lsls	r0, r1, #22
 8007fd8:	bf58      	it	pl
 8007fda:	9802      	ldrpl	r0, [sp, #8]
 8007fdc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007fe0:	bf58      	it	pl
 8007fe2:	eba9 0000 	subpl.w	r0, r9, r0
 8007fe6:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007fea:	bf58      	it	pl
 8007fec:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007ff0:	6021      	str	r1, [r4, #0]
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	e7ab      	b.n	8007f50 <_scanf_float+0x184>
 8007ff8:	2203      	movs	r2, #3
 8007ffa:	e7a9      	b.n	8007f50 <_scanf_float+0x184>
 8007ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008000:	4631      	mov	r1, r6
 8008002:	4638      	mov	r0, r7
 8008004:	9205      	str	r2, [sp, #20]
 8008006:	4798      	blx	r3
 8008008:	9a05      	ldr	r2, [sp, #20]
 800800a:	2800      	cmp	r0, #0
 800800c:	f43f af04 	beq.w	8007e18 <_scanf_float+0x4c>
 8008010:	e715      	b.n	8007e3e <_scanf_float+0x72>
 8008012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008016:	4632      	mov	r2, r6
 8008018:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800801c:	4638      	mov	r0, r7
 800801e:	4798      	blx	r3
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	3b01      	subs	r3, #1
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	e715      	b.n	8007e54 <_scanf_float+0x88>
 8008028:	f10b 33ff 	add.w	r3, fp, #4294967295
 800802c:	2b06      	cmp	r3, #6
 800802e:	d80a      	bhi.n	8008046 <_scanf_float+0x27a>
 8008030:	f1bb 0f02 	cmp.w	fp, #2
 8008034:	d967      	bls.n	8008106 <_scanf_float+0x33a>
 8008036:	f1ab 0b03 	sub.w	fp, fp, #3
 800803a:	fa5f fb8b 	uxtb.w	fp, fp
 800803e:	eba5 0b0b 	sub.w	fp, r5, fp
 8008042:	455d      	cmp	r5, fp
 8008044:	d14a      	bne.n	80080dc <_scanf_float+0x310>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	05da      	lsls	r2, r3, #23
 800804a:	d51f      	bpl.n	800808c <_scanf_float+0x2c0>
 800804c:	055b      	lsls	r3, r3, #21
 800804e:	d467      	bmi.n	8008120 <_scanf_float+0x354>
 8008050:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	2965      	cmp	r1, #101	; 0x65
 8008058:	f103 33ff 	add.w	r3, r3, #4294967295
 800805c:	f105 3bff 	add.w	fp, r5, #4294967295
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	d00d      	beq.n	8008080 <_scanf_float+0x2b4>
 8008064:	2945      	cmp	r1, #69	; 0x45
 8008066:	d00b      	beq.n	8008080 <_scanf_float+0x2b4>
 8008068:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800806c:	4632      	mov	r2, r6
 800806e:	4638      	mov	r0, r7
 8008070:	4798      	blx	r3
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008078:	3b01      	subs	r3, #1
 800807a:	f1a5 0b02 	sub.w	fp, r5, #2
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008084:	4632      	mov	r2, r6
 8008086:	4638      	mov	r0, r7
 8008088:	4798      	blx	r3
 800808a:	465d      	mov	r5, fp
 800808c:	6826      	ldr	r6, [r4, #0]
 800808e:	f016 0610 	ands.w	r6, r6, #16
 8008092:	d176      	bne.n	8008182 <_scanf_float+0x3b6>
 8008094:	702e      	strb	r6, [r5, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800809c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a0:	d141      	bne.n	8008126 <_scanf_float+0x35a>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	eba9 0303 	sub.w	r3, r9, r3
 80080a8:	425a      	negs	r2, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d148      	bne.n	8008140 <_scanf_float+0x374>
 80080ae:	4641      	mov	r1, r8
 80080b0:	2200      	movs	r2, #0
 80080b2:	4638      	mov	r0, r7
 80080b4:	f000 fec8 	bl	8008e48 <_strtod_r>
 80080b8:	6825      	ldr	r5, [r4, #0]
 80080ba:	4680      	mov	r8, r0
 80080bc:	f015 0f02 	tst.w	r5, #2
 80080c0:	4689      	mov	r9, r1
 80080c2:	f8da 3000 	ldr.w	r3, [sl]
 80080c6:	d046      	beq.n	8008156 <_scanf_float+0x38a>
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	f8ca 2000 	str.w	r2, [sl]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	e9c3 8900 	strd	r8, r9, [r3]
 80080d4:	68e3      	ldr	r3, [r4, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60e3      	str	r3, [r4, #12]
 80080da:	e6bf      	b.n	8007e5c <_scanf_float+0x90>
 80080dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080e0:	4632      	mov	r2, r6
 80080e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80080e6:	4638      	mov	r0, r7
 80080e8:	4798      	blx	r3
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	e7a7      	b.n	8008042 <_scanf_float+0x276>
 80080f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080f6:	4632      	mov	r2, r6
 80080f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80080fc:	4638      	mov	r0, r7
 80080fe:	4798      	blx	r3
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	3b01      	subs	r3, #1
 8008104:	6123      	str	r3, [r4, #16]
 8008106:	4545      	cmp	r5, r8
 8008108:	d8f3      	bhi.n	80080f2 <_scanf_float+0x326>
 800810a:	e6a6      	b.n	8007e5a <_scanf_float+0x8e>
 800810c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008110:	4632      	mov	r2, r6
 8008112:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008116:	4638      	mov	r0, r7
 8008118:	4798      	blx	r3
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	3b01      	subs	r3, #1
 800811e:	6123      	str	r3, [r4, #16]
 8008120:	4545      	cmp	r5, r8
 8008122:	d8f3      	bhi.n	800810c <_scanf_float+0x340>
 8008124:	e699      	b.n	8007e5a <_scanf_float+0x8e>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0c0      	beq.n	80080ae <_scanf_float+0x2e2>
 800812c:	9904      	ldr	r1, [sp, #16]
 800812e:	230a      	movs	r3, #10
 8008130:	4632      	mov	r2, r6
 8008132:	3101      	adds	r1, #1
 8008134:	4638      	mov	r0, r7
 8008136:	f000 ff13 	bl	8008f60 <_strtol_r>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	9d04      	ldr	r5, [sp, #16]
 800813e:	1ac2      	subs	r2, r0, r3
 8008140:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008144:	429d      	cmp	r5, r3
 8008146:	bf28      	it	cs
 8008148:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800814c:	490e      	ldr	r1, [pc, #56]	; (8008188 <_scanf_float+0x3bc>)
 800814e:	4628      	mov	r0, r5
 8008150:	f000 f838 	bl	80081c4 <siprintf>
 8008154:	e7ab      	b.n	80080ae <_scanf_float+0x2e2>
 8008156:	1d1f      	adds	r7, r3, #4
 8008158:	f015 0504 	ands.w	r5, r5, #4
 800815c:	f8ca 7000 	str.w	r7, [sl]
 8008160:	d1b5      	bne.n	80080ce <_scanf_float+0x302>
 8008162:	681f      	ldr	r7, [r3, #0]
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	f7f8 fc50 	bl	8000a0c <__aeabi_dcmpun>
 800816c:	b120      	cbz	r0, 8008178 <_scanf_float+0x3ac>
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f824 	bl	80081bc <nanf>
 8008174:	6038      	str	r0, [r7, #0]
 8008176:	e7ad      	b.n	80080d4 <_scanf_float+0x308>
 8008178:	4640      	mov	r0, r8
 800817a:	4649      	mov	r1, r9
 800817c:	f7f8 fca4 	bl	8000ac8 <__aeabi_d2f>
 8008180:	e7f8      	b.n	8008174 <_scanf_float+0x3a8>
 8008182:	2600      	movs	r6, #0
 8008184:	e66a      	b.n	8007e5c <_scanf_float+0x90>
 8008186:	bf00      	nop
 8008188:	0800bb4c 	.word	0x0800bb4c

0800818c <iprintf>:
 800818c:	b40f      	push	{r0, r1, r2, r3}
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <iprintf+0x2c>)
 8008190:	b513      	push	{r0, r1, r4, lr}
 8008192:	681c      	ldr	r4, [r3, #0]
 8008194:	b124      	cbz	r4, 80081a0 <iprintf+0x14>
 8008196:	69a3      	ldr	r3, [r4, #24]
 8008198:	b913      	cbnz	r3, 80081a0 <iprintf+0x14>
 800819a:	4620      	mov	r0, r4
 800819c:	f001 fd74 	bl	8009c88 <__sinit>
 80081a0:	ab05      	add	r3, sp, #20
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	68a1      	ldr	r1, [r4, #8]
 80081a6:	4620      	mov	r0, r4
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	f002 ff8d 	bl	800b0c8 <_vfiprintf_r>
 80081ae:	b002      	add	sp, #8
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	b004      	add	sp, #16
 80081b6:	4770      	bx	lr
 80081b8:	20000018 	.word	0x20000018

080081bc <nanf>:
 80081bc:	4800      	ldr	r0, [pc, #0]	; (80081c0 <nanf+0x4>)
 80081be:	4770      	bx	lr
 80081c0:	7fc00000 	.word	0x7fc00000

080081c4 <siprintf>:
 80081c4:	b40e      	push	{r1, r2, r3}
 80081c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081ca:	b500      	push	{lr}
 80081cc:	b09c      	sub	sp, #112	; 0x70
 80081ce:	ab1d      	add	r3, sp, #116	; 0x74
 80081d0:	9002      	str	r0, [sp, #8]
 80081d2:	9006      	str	r0, [sp, #24]
 80081d4:	9107      	str	r1, [sp, #28]
 80081d6:	9104      	str	r1, [sp, #16]
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <siprintf+0x38>)
 80081da:	4909      	ldr	r1, [pc, #36]	; (8008200 <siprintf+0x3c>)
 80081dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e0:	9105      	str	r1, [sp, #20]
 80081e2:	6800      	ldr	r0, [r0, #0]
 80081e4:	a902      	add	r1, sp, #8
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	f002 fe4e 	bl	800ae88 <_svfiprintf_r>
 80081ec:	2200      	movs	r2, #0
 80081ee:	9b02      	ldr	r3, [sp, #8]
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	b01c      	add	sp, #112	; 0x70
 80081f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081f8:	b003      	add	sp, #12
 80081fa:	4770      	bx	lr
 80081fc:	20000018 	.word	0x20000018
 8008200:	ffff0208 	.word	0xffff0208

08008204 <sulp>:
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	460f      	mov	r7, r1
 800820a:	4690      	mov	r8, r2
 800820c:	f002 fc00 	bl	800aa10 <__ulp>
 8008210:	4604      	mov	r4, r0
 8008212:	460d      	mov	r5, r1
 8008214:	f1b8 0f00 	cmp.w	r8, #0
 8008218:	d011      	beq.n	800823e <sulp+0x3a>
 800821a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800821e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008222:	2b00      	cmp	r3, #0
 8008224:	dd0b      	ble.n	800823e <sulp+0x3a>
 8008226:	2400      	movs	r4, #0
 8008228:	051b      	lsls	r3, r3, #20
 800822a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800822e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008232:	4622      	mov	r2, r4
 8008234:	462b      	mov	r3, r5
 8008236:	f7f8 f94f 	bl	80004d8 <__aeabi_dmul>
 800823a:	4604      	mov	r4, r0
 800823c:	460d      	mov	r5, r1
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008248 <_strtod_l>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	461f      	mov	r7, r3
 800824e:	2300      	movs	r3, #0
 8008250:	b0a1      	sub	sp, #132	; 0x84
 8008252:	4683      	mov	fp, r0
 8008254:	4638      	mov	r0, r7
 8008256:	460e      	mov	r6, r1
 8008258:	9217      	str	r2, [sp, #92]	; 0x5c
 800825a:	931c      	str	r3, [sp, #112]	; 0x70
 800825c:	f002 f8c9 	bl	800a3f2 <__localeconv_l>
 8008260:	4680      	mov	r8, r0
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	f7f7 ff74 	bl	8000150 <strlen>
 8008268:	f04f 0900 	mov.w	r9, #0
 800826c:	4604      	mov	r4, r0
 800826e:	f04f 0a00 	mov.w	sl, #0
 8008272:	961b      	str	r6, [sp, #108]	; 0x6c
 8008274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008276:	781a      	ldrb	r2, [r3, #0]
 8008278:	2a0d      	cmp	r2, #13
 800827a:	d832      	bhi.n	80082e2 <_strtod_l+0x9a>
 800827c:	2a09      	cmp	r2, #9
 800827e:	d236      	bcs.n	80082ee <_strtod_l+0xa6>
 8008280:	2a00      	cmp	r2, #0
 8008282:	d03e      	beq.n	8008302 <_strtod_l+0xba>
 8008284:	2300      	movs	r3, #0
 8008286:	930d      	str	r3, [sp, #52]	; 0x34
 8008288:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800828a:	782b      	ldrb	r3, [r5, #0]
 800828c:	2b30      	cmp	r3, #48	; 0x30
 800828e:	f040 80ac 	bne.w	80083ea <_strtod_l+0x1a2>
 8008292:	786b      	ldrb	r3, [r5, #1]
 8008294:	2b58      	cmp	r3, #88	; 0x58
 8008296:	d001      	beq.n	800829c <_strtod_l+0x54>
 8008298:	2b78      	cmp	r3, #120	; 0x78
 800829a:	d167      	bne.n	800836c <_strtod_l+0x124>
 800829c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829e:	9702      	str	r7, [sp, #8]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	ab1c      	add	r3, sp, #112	; 0x70
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	4a89      	ldr	r2, [pc, #548]	; (80084cc <_strtod_l+0x284>)
 80082a8:	ab1d      	add	r3, sp, #116	; 0x74
 80082aa:	a91b      	add	r1, sp, #108	; 0x6c
 80082ac:	4658      	mov	r0, fp
 80082ae:	f001 fdc5 	bl	8009e3c <__gethex>
 80082b2:	f010 0407 	ands.w	r4, r0, #7
 80082b6:	4606      	mov	r6, r0
 80082b8:	d005      	beq.n	80082c6 <_strtod_l+0x7e>
 80082ba:	2c06      	cmp	r4, #6
 80082bc:	d12b      	bne.n	8008316 <_strtod_l+0xce>
 80082be:	2300      	movs	r3, #0
 80082c0:	3501      	adds	r5, #1
 80082c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80082c4:	930d      	str	r3, [sp, #52]	; 0x34
 80082c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f040 85a6 	bne.w	8008e1a <_strtod_l+0xbd2>
 80082ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d0:	b1e3      	cbz	r3, 800830c <_strtod_l+0xc4>
 80082d2:	464a      	mov	r2, r9
 80082d4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80082d8:	4610      	mov	r0, r2
 80082da:	4619      	mov	r1, r3
 80082dc:	b021      	add	sp, #132	; 0x84
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	2a2b      	cmp	r2, #43	; 0x2b
 80082e4:	d015      	beq.n	8008312 <_strtod_l+0xca>
 80082e6:	2a2d      	cmp	r2, #45	; 0x2d
 80082e8:	d004      	beq.n	80082f4 <_strtod_l+0xac>
 80082ea:	2a20      	cmp	r2, #32
 80082ec:	d1ca      	bne.n	8008284 <_strtod_l+0x3c>
 80082ee:	3301      	adds	r3, #1
 80082f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80082f2:	e7bf      	b.n	8008274 <_strtod_l+0x2c>
 80082f4:	2201      	movs	r2, #1
 80082f6:	920d      	str	r2, [sp, #52]	; 0x34
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1c2      	bne.n	8008288 <_strtod_l+0x40>
 8008302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008304:	961b      	str	r6, [sp, #108]	; 0x6c
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 8585 	bne.w	8008e16 <_strtod_l+0xbce>
 800830c:	464a      	mov	r2, r9
 800830e:	4653      	mov	r3, sl
 8008310:	e7e2      	b.n	80082d8 <_strtod_l+0x90>
 8008312:	2200      	movs	r2, #0
 8008314:	e7ef      	b.n	80082f6 <_strtod_l+0xae>
 8008316:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008318:	b13a      	cbz	r2, 800832a <_strtod_l+0xe2>
 800831a:	2135      	movs	r1, #53	; 0x35
 800831c:	a81e      	add	r0, sp, #120	; 0x78
 800831e:	f002 fc6a 	bl	800abf6 <__copybits>
 8008322:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008324:	4658      	mov	r0, fp
 8008326:	f002 f8dc 	bl	800a4e2 <_Bfree>
 800832a:	3c01      	subs	r4, #1
 800832c:	2c04      	cmp	r4, #4
 800832e:	d806      	bhi.n	800833e <_strtod_l+0xf6>
 8008330:	e8df f004 	tbb	[pc, r4]
 8008334:	1714030a 	.word	0x1714030a
 8008338:	0a          	.byte	0x0a
 8008339:	00          	.byte	0x00
 800833a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800833e:	0731      	lsls	r1, r6, #28
 8008340:	d5c1      	bpl.n	80082c6 <_strtod_l+0x7e>
 8008342:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8008346:	e7be      	b.n	80082c6 <_strtod_l+0x7e>
 8008348:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800834a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800834e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008352:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008356:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800835a:	e7f0      	b.n	800833e <_strtod_l+0xf6>
 800835c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80084d0 <_strtod_l+0x288>
 8008360:	e7ed      	b.n	800833e <_strtod_l+0xf6>
 8008362:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8008366:	f04f 39ff 	mov.w	r9, #4294967295
 800836a:	e7e8      	b.n	800833e <_strtod_l+0xf6>
 800836c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	921b      	str	r2, [sp, #108]	; 0x6c
 8008372:	785b      	ldrb	r3, [r3, #1]
 8008374:	2b30      	cmp	r3, #48	; 0x30
 8008376:	d0f9      	beq.n	800836c <_strtod_l+0x124>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0a4      	beq.n	80082c6 <_strtod_l+0x7e>
 800837c:	2301      	movs	r3, #1
 800837e:	2500      	movs	r5, #0
 8008380:	220a      	movs	r2, #10
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008386:	9506      	str	r5, [sp, #24]
 8008388:	9308      	str	r3, [sp, #32]
 800838a:	9504      	str	r5, [sp, #16]
 800838c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800838e:	7807      	ldrb	r7, [r0, #0]
 8008390:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008394:	b2d9      	uxtb	r1, r3
 8008396:	2909      	cmp	r1, #9
 8008398:	d929      	bls.n	80083ee <_strtod_l+0x1a6>
 800839a:	4622      	mov	r2, r4
 800839c:	f8d8 1000 	ldr.w	r1, [r8]
 80083a0:	f002 fffb 	bl	800b39a <strncmp>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d031      	beq.n	800840c <_strtod_l+0x1c4>
 80083a8:	2000      	movs	r0, #0
 80083aa:	463b      	mov	r3, r7
 80083ac:	4602      	mov	r2, r0
 80083ae:	9c04      	ldr	r4, [sp, #16]
 80083b0:	9005      	str	r0, [sp, #20]
 80083b2:	2b65      	cmp	r3, #101	; 0x65
 80083b4:	d001      	beq.n	80083ba <_strtod_l+0x172>
 80083b6:	2b45      	cmp	r3, #69	; 0x45
 80083b8:	d114      	bne.n	80083e4 <_strtod_l+0x19c>
 80083ba:	b924      	cbnz	r4, 80083c6 <_strtod_l+0x17e>
 80083bc:	b910      	cbnz	r0, 80083c4 <_strtod_l+0x17c>
 80083be:	9b07      	ldr	r3, [sp, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d09e      	beq.n	8008302 <_strtod_l+0xba>
 80083c4:	2400      	movs	r4, #0
 80083c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80083c8:	1c73      	adds	r3, r6, #1
 80083ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80083cc:	7873      	ldrb	r3, [r6, #1]
 80083ce:	2b2b      	cmp	r3, #43	; 0x2b
 80083d0:	d078      	beq.n	80084c4 <_strtod_l+0x27c>
 80083d2:	2b2d      	cmp	r3, #45	; 0x2d
 80083d4:	d070      	beq.n	80084b8 <_strtod_l+0x270>
 80083d6:	f04f 0c00 	mov.w	ip, #0
 80083da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80083de:	2f09      	cmp	r7, #9
 80083e0:	d97c      	bls.n	80084dc <_strtod_l+0x294>
 80083e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80083e4:	f04f 0e00 	mov.w	lr, #0
 80083e8:	e09a      	b.n	8008520 <_strtod_l+0x2d8>
 80083ea:	2300      	movs	r3, #0
 80083ec:	e7c7      	b.n	800837e <_strtod_l+0x136>
 80083ee:	9904      	ldr	r1, [sp, #16]
 80083f0:	3001      	adds	r0, #1
 80083f2:	2908      	cmp	r1, #8
 80083f4:	bfd7      	itett	le
 80083f6:	9906      	ldrle	r1, [sp, #24]
 80083f8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80083fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008400:	9306      	strle	r3, [sp, #24]
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	901b      	str	r0, [sp, #108]	; 0x6c
 8008406:	3301      	adds	r3, #1
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	e7bf      	b.n	800838c <_strtod_l+0x144>
 800840c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800840e:	191a      	adds	r2, r3, r4
 8008410:	921b      	str	r2, [sp, #108]	; 0x6c
 8008412:	9a04      	ldr	r2, [sp, #16]
 8008414:	5d1b      	ldrb	r3, [r3, r4]
 8008416:	2a00      	cmp	r2, #0
 8008418:	d037      	beq.n	800848a <_strtod_l+0x242>
 800841a:	4602      	mov	r2, r0
 800841c:	9c04      	ldr	r4, [sp, #16]
 800841e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008422:	2909      	cmp	r1, #9
 8008424:	d913      	bls.n	800844e <_strtod_l+0x206>
 8008426:	2101      	movs	r1, #1
 8008428:	9105      	str	r1, [sp, #20]
 800842a:	e7c2      	b.n	80083b2 <_strtod_l+0x16a>
 800842c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800842e:	3001      	adds	r0, #1
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	921b      	str	r2, [sp, #108]	; 0x6c
 8008434:	785b      	ldrb	r3, [r3, #1]
 8008436:	2b30      	cmp	r3, #48	; 0x30
 8008438:	d0f8      	beq.n	800842c <_strtod_l+0x1e4>
 800843a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800843e:	2a08      	cmp	r2, #8
 8008440:	f200 84f0 	bhi.w	8008e24 <_strtod_l+0xbdc>
 8008444:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008446:	9208      	str	r2, [sp, #32]
 8008448:	4602      	mov	r2, r0
 800844a:	2000      	movs	r0, #0
 800844c:	4604      	mov	r4, r0
 800844e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008452:	f100 0101 	add.w	r1, r0, #1
 8008456:	d012      	beq.n	800847e <_strtod_l+0x236>
 8008458:	440a      	add	r2, r1
 800845a:	270a      	movs	r7, #10
 800845c:	4621      	mov	r1, r4
 800845e:	eb00 0c04 	add.w	ip, r0, r4
 8008462:	458c      	cmp	ip, r1
 8008464:	d113      	bne.n	800848e <_strtod_l+0x246>
 8008466:	1821      	adds	r1, r4, r0
 8008468:	2908      	cmp	r1, #8
 800846a:	f104 0401 	add.w	r4, r4, #1
 800846e:	4404      	add	r4, r0
 8008470:	dc19      	bgt.n	80084a6 <_strtod_l+0x25e>
 8008472:	210a      	movs	r1, #10
 8008474:	9b06      	ldr	r3, [sp, #24]
 8008476:	fb01 e303 	mla	r3, r1, r3, lr
 800847a:	9306      	str	r3, [sp, #24]
 800847c:	2100      	movs	r1, #0
 800847e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008480:	1c58      	adds	r0, r3, #1
 8008482:	901b      	str	r0, [sp, #108]	; 0x6c
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	4608      	mov	r0, r1
 8008488:	e7c9      	b.n	800841e <_strtod_l+0x1d6>
 800848a:	9804      	ldr	r0, [sp, #16]
 800848c:	e7d3      	b.n	8008436 <_strtod_l+0x1ee>
 800848e:	2908      	cmp	r1, #8
 8008490:	f101 0101 	add.w	r1, r1, #1
 8008494:	dc03      	bgt.n	800849e <_strtod_l+0x256>
 8008496:	9b06      	ldr	r3, [sp, #24]
 8008498:	437b      	muls	r3, r7
 800849a:	9306      	str	r3, [sp, #24]
 800849c:	e7e1      	b.n	8008462 <_strtod_l+0x21a>
 800849e:	2910      	cmp	r1, #16
 80084a0:	bfd8      	it	le
 80084a2:	437d      	mulle	r5, r7
 80084a4:	e7dd      	b.n	8008462 <_strtod_l+0x21a>
 80084a6:	2c10      	cmp	r4, #16
 80084a8:	bfdc      	itt	le
 80084aa:	210a      	movle	r1, #10
 80084ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80084b0:	e7e4      	b.n	800847c <_strtod_l+0x234>
 80084b2:	2301      	movs	r3, #1
 80084b4:	9305      	str	r3, [sp, #20]
 80084b6:	e781      	b.n	80083bc <_strtod_l+0x174>
 80084b8:	f04f 0c01 	mov.w	ip, #1
 80084bc:	1cb3      	adds	r3, r6, #2
 80084be:	931b      	str	r3, [sp, #108]	; 0x6c
 80084c0:	78b3      	ldrb	r3, [r6, #2]
 80084c2:	e78a      	b.n	80083da <_strtod_l+0x192>
 80084c4:	f04f 0c00 	mov.w	ip, #0
 80084c8:	e7f8      	b.n	80084bc <_strtod_l+0x274>
 80084ca:	bf00      	nop
 80084cc:	0800bb54 	.word	0x0800bb54
 80084d0:	7ff00000 	.word	0x7ff00000
 80084d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084d6:	1c5f      	adds	r7, r3, #1
 80084d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b30      	cmp	r3, #48	; 0x30
 80084de:	d0f9      	beq.n	80084d4 <_strtod_l+0x28c>
 80084e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80084e4:	2f08      	cmp	r7, #8
 80084e6:	f63f af7d 	bhi.w	80083e4 <_strtod_l+0x19c>
 80084ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80084ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084f0:	9309      	str	r3, [sp, #36]	; 0x24
 80084f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084f4:	1c5f      	adds	r7, r3, #1
 80084f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80084fe:	f1b8 0f09 	cmp.w	r8, #9
 8008502:	d937      	bls.n	8008574 <_strtod_l+0x32c>
 8008504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008506:	1a7f      	subs	r7, r7, r1
 8008508:	2f08      	cmp	r7, #8
 800850a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800850e:	dc37      	bgt.n	8008580 <_strtod_l+0x338>
 8008510:	45be      	cmp	lr, r7
 8008512:	bfa8      	it	ge
 8008514:	46be      	movge	lr, r7
 8008516:	f1bc 0f00 	cmp.w	ip, #0
 800851a:	d001      	beq.n	8008520 <_strtod_l+0x2d8>
 800851c:	f1ce 0e00 	rsb	lr, lr, #0
 8008520:	2c00      	cmp	r4, #0
 8008522:	d151      	bne.n	80085c8 <_strtod_l+0x380>
 8008524:	2800      	cmp	r0, #0
 8008526:	f47f aece 	bne.w	80082c6 <_strtod_l+0x7e>
 800852a:	9a07      	ldr	r2, [sp, #28]
 800852c:	2a00      	cmp	r2, #0
 800852e:	f47f aeca 	bne.w	80082c6 <_strtod_l+0x7e>
 8008532:	9a05      	ldr	r2, [sp, #20]
 8008534:	2a00      	cmp	r2, #0
 8008536:	f47f aee4 	bne.w	8008302 <_strtod_l+0xba>
 800853a:	2b4e      	cmp	r3, #78	; 0x4e
 800853c:	d027      	beq.n	800858e <_strtod_l+0x346>
 800853e:	dc21      	bgt.n	8008584 <_strtod_l+0x33c>
 8008540:	2b49      	cmp	r3, #73	; 0x49
 8008542:	f47f aede 	bne.w	8008302 <_strtod_l+0xba>
 8008546:	49a4      	ldr	r1, [pc, #656]	; (80087d8 <_strtod_l+0x590>)
 8008548:	a81b      	add	r0, sp, #108	; 0x6c
 800854a:	f001 feab 	bl	800a2a4 <__match>
 800854e:	2800      	cmp	r0, #0
 8008550:	f43f aed7 	beq.w	8008302 <_strtod_l+0xba>
 8008554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008556:	49a1      	ldr	r1, [pc, #644]	; (80087dc <_strtod_l+0x594>)
 8008558:	3b01      	subs	r3, #1
 800855a:	a81b      	add	r0, sp, #108	; 0x6c
 800855c:	931b      	str	r3, [sp, #108]	; 0x6c
 800855e:	f001 fea1 	bl	800a2a4 <__match>
 8008562:	b910      	cbnz	r0, 800856a <_strtod_l+0x322>
 8008564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008566:	3301      	adds	r3, #1
 8008568:	931b      	str	r3, [sp, #108]	; 0x6c
 800856a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80087f0 <_strtod_l+0x5a8>
 800856e:	f04f 0900 	mov.w	r9, #0
 8008572:	e6a8      	b.n	80082c6 <_strtod_l+0x7e>
 8008574:	210a      	movs	r1, #10
 8008576:	fb01 3e0e 	mla	lr, r1, lr, r3
 800857a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800857e:	e7b8      	b.n	80084f2 <_strtod_l+0x2aa>
 8008580:	46be      	mov	lr, r7
 8008582:	e7c8      	b.n	8008516 <_strtod_l+0x2ce>
 8008584:	2b69      	cmp	r3, #105	; 0x69
 8008586:	d0de      	beq.n	8008546 <_strtod_l+0x2fe>
 8008588:	2b6e      	cmp	r3, #110	; 0x6e
 800858a:	f47f aeba 	bne.w	8008302 <_strtod_l+0xba>
 800858e:	4994      	ldr	r1, [pc, #592]	; (80087e0 <_strtod_l+0x598>)
 8008590:	a81b      	add	r0, sp, #108	; 0x6c
 8008592:	f001 fe87 	bl	800a2a4 <__match>
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f aeb3 	beq.w	8008302 <_strtod_l+0xba>
 800859c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b28      	cmp	r3, #40	; 0x28
 80085a2:	d10e      	bne.n	80085c2 <_strtod_l+0x37a>
 80085a4:	aa1e      	add	r2, sp, #120	; 0x78
 80085a6:	498f      	ldr	r1, [pc, #572]	; (80087e4 <_strtod_l+0x59c>)
 80085a8:	a81b      	add	r0, sp, #108	; 0x6c
 80085aa:	f001 fe8f 	bl	800a2cc <__hexnan>
 80085ae:	2805      	cmp	r0, #5
 80085b0:	d107      	bne.n	80085c2 <_strtod_l+0x37a>
 80085b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085b4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80085b8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80085bc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80085c0:	e681      	b.n	80082c6 <_strtod_l+0x7e>
 80085c2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80087f8 <_strtod_l+0x5b0>
 80085c6:	e7d2      	b.n	800856e <_strtod_l+0x326>
 80085c8:	ebae 0302 	sub.w	r3, lr, r2
 80085cc:	9307      	str	r3, [sp, #28]
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	9806      	ldr	r0, [sp, #24]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bf08      	it	eq
 80085d6:	4623      	moveq	r3, r4
 80085d8:	2c10      	cmp	r4, #16
 80085da:	9304      	str	r3, [sp, #16]
 80085dc:	46a0      	mov	r8, r4
 80085de:	bfa8      	it	ge
 80085e0:	f04f 0810 	movge.w	r8, #16
 80085e4:	f7f7 fefe 	bl	80003e4 <__aeabi_ui2d>
 80085e8:	2c09      	cmp	r4, #9
 80085ea:	4681      	mov	r9, r0
 80085ec:	468a      	mov	sl, r1
 80085ee:	dc13      	bgt.n	8008618 <_strtod_l+0x3d0>
 80085f0:	9b07      	ldr	r3, [sp, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f43f ae67 	beq.w	80082c6 <_strtod_l+0x7e>
 80085f8:	9b07      	ldr	r3, [sp, #28]
 80085fa:	dd7e      	ble.n	80086fa <_strtod_l+0x4b2>
 80085fc:	2b16      	cmp	r3, #22
 80085fe:	dc65      	bgt.n	80086cc <_strtod_l+0x484>
 8008600:	4a79      	ldr	r2, [pc, #484]	; (80087e8 <_strtod_l+0x5a0>)
 8008602:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008606:	464a      	mov	r2, r9
 8008608:	e9de 0100 	ldrd	r0, r1, [lr]
 800860c:	4653      	mov	r3, sl
 800860e:	f7f7 ff63 	bl	80004d8 <__aeabi_dmul>
 8008612:	4681      	mov	r9, r0
 8008614:	468a      	mov	sl, r1
 8008616:	e656      	b.n	80082c6 <_strtod_l+0x7e>
 8008618:	4b73      	ldr	r3, [pc, #460]	; (80087e8 <_strtod_l+0x5a0>)
 800861a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800861e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008622:	f7f7 ff59 	bl	80004d8 <__aeabi_dmul>
 8008626:	4606      	mov	r6, r0
 8008628:	4628      	mov	r0, r5
 800862a:	460f      	mov	r7, r1
 800862c:	f7f7 feda 	bl	80003e4 <__aeabi_ui2d>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f7 fd98 	bl	800016c <__adddf3>
 800863c:	2c0f      	cmp	r4, #15
 800863e:	4681      	mov	r9, r0
 8008640:	468a      	mov	sl, r1
 8008642:	ddd5      	ble.n	80085f0 <_strtod_l+0x3a8>
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	eba4 0808 	sub.w	r8, r4, r8
 800864a:	4498      	add	r8, r3
 800864c:	f1b8 0f00 	cmp.w	r8, #0
 8008650:	f340 809a 	ble.w	8008788 <_strtod_l+0x540>
 8008654:	f018 030f 	ands.w	r3, r8, #15
 8008658:	d00a      	beq.n	8008670 <_strtod_l+0x428>
 800865a:	4963      	ldr	r1, [pc, #396]	; (80087e8 <_strtod_l+0x5a0>)
 800865c:	464a      	mov	r2, r9
 800865e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008666:	4653      	mov	r3, sl
 8008668:	f7f7 ff36 	bl	80004d8 <__aeabi_dmul>
 800866c:	4681      	mov	r9, r0
 800866e:	468a      	mov	sl, r1
 8008670:	f038 080f 	bics.w	r8, r8, #15
 8008674:	d077      	beq.n	8008766 <_strtod_l+0x51e>
 8008676:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800867a:	dd4b      	ble.n	8008714 <_strtod_l+0x4cc>
 800867c:	f04f 0800 	mov.w	r8, #0
 8008680:	f8cd 8010 	str.w	r8, [sp, #16]
 8008684:	f8cd 8020 	str.w	r8, [sp, #32]
 8008688:	f8cd 8018 	str.w	r8, [sp, #24]
 800868c:	2322      	movs	r3, #34	; 0x22
 800868e:	f04f 0900 	mov.w	r9, #0
 8008692:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80087f0 <_strtod_l+0x5a8>
 8008696:	f8cb 3000 	str.w	r3, [fp]
 800869a:	9b08      	ldr	r3, [sp, #32]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f43f ae12 	beq.w	80082c6 <_strtod_l+0x7e>
 80086a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086a4:	4658      	mov	r0, fp
 80086a6:	f001 ff1c 	bl	800a4e2 <_Bfree>
 80086aa:	9906      	ldr	r1, [sp, #24]
 80086ac:	4658      	mov	r0, fp
 80086ae:	f001 ff18 	bl	800a4e2 <_Bfree>
 80086b2:	9904      	ldr	r1, [sp, #16]
 80086b4:	4658      	mov	r0, fp
 80086b6:	f001 ff14 	bl	800a4e2 <_Bfree>
 80086ba:	9908      	ldr	r1, [sp, #32]
 80086bc:	4658      	mov	r0, fp
 80086be:	f001 ff10 	bl	800a4e2 <_Bfree>
 80086c2:	4641      	mov	r1, r8
 80086c4:	4658      	mov	r0, fp
 80086c6:	f001 ff0c 	bl	800a4e2 <_Bfree>
 80086ca:	e5fc      	b.n	80082c6 <_strtod_l+0x7e>
 80086cc:	9a07      	ldr	r2, [sp, #28]
 80086ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80086d2:	4293      	cmp	r3, r2
 80086d4:	dbb6      	blt.n	8008644 <_strtod_l+0x3fc>
 80086d6:	4d44      	ldr	r5, [pc, #272]	; (80087e8 <_strtod_l+0x5a0>)
 80086d8:	f1c4 040f 	rsb	r4, r4, #15
 80086dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80086e0:	464a      	mov	r2, r9
 80086e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e6:	4653      	mov	r3, sl
 80086e8:	f7f7 fef6 	bl	80004d8 <__aeabi_dmul>
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	1b1c      	subs	r4, r3, r4
 80086f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80086f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086f8:	e789      	b.n	800860e <_strtod_l+0x3c6>
 80086fa:	f113 0f16 	cmn.w	r3, #22
 80086fe:	dba1      	blt.n	8008644 <_strtod_l+0x3fc>
 8008700:	4a39      	ldr	r2, [pc, #228]	; (80087e8 <_strtod_l+0x5a0>)
 8008702:	4648      	mov	r0, r9
 8008704:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008708:	e9d2 2300 	ldrd	r2, r3, [r2]
 800870c:	4651      	mov	r1, sl
 800870e:	f7f8 f80d 	bl	800072c <__aeabi_ddiv>
 8008712:	e77e      	b.n	8008612 <_strtod_l+0x3ca>
 8008714:	2300      	movs	r3, #0
 8008716:	4648      	mov	r0, r9
 8008718:	4651      	mov	r1, sl
 800871a:	461d      	mov	r5, r3
 800871c:	4e33      	ldr	r6, [pc, #204]	; (80087ec <_strtod_l+0x5a4>)
 800871e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008722:	f1b8 0f01 	cmp.w	r8, #1
 8008726:	dc21      	bgt.n	800876c <_strtod_l+0x524>
 8008728:	b10b      	cbz	r3, 800872e <_strtod_l+0x4e6>
 800872a:	4681      	mov	r9, r0
 800872c:	468a      	mov	sl, r1
 800872e:	4b2f      	ldr	r3, [pc, #188]	; (80087ec <_strtod_l+0x5a4>)
 8008730:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008734:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008738:	464a      	mov	r2, r9
 800873a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800873e:	4653      	mov	r3, sl
 8008740:	f7f7 feca 	bl	80004d8 <__aeabi_dmul>
 8008744:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <_strtod_l+0x5a8>)
 8008746:	460a      	mov	r2, r1
 8008748:	400b      	ands	r3, r1
 800874a:	492a      	ldr	r1, [pc, #168]	; (80087f4 <_strtod_l+0x5ac>)
 800874c:	4681      	mov	r9, r0
 800874e:	428b      	cmp	r3, r1
 8008750:	d894      	bhi.n	800867c <_strtod_l+0x434>
 8008752:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008756:	428b      	cmp	r3, r1
 8008758:	bf86      	itte	hi
 800875a:	f04f 39ff 	movhi.w	r9, #4294967295
 800875e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80087fc <_strtod_l+0x5b4>
 8008762:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8008766:	2300      	movs	r3, #0
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	e07b      	b.n	8008864 <_strtod_l+0x61c>
 800876c:	f018 0f01 	tst.w	r8, #1
 8008770:	d006      	beq.n	8008780 <_strtod_l+0x538>
 8008772:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f7f7 fead 	bl	80004d8 <__aeabi_dmul>
 800877e:	2301      	movs	r3, #1
 8008780:	3501      	adds	r5, #1
 8008782:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008786:	e7cc      	b.n	8008722 <_strtod_l+0x4da>
 8008788:	d0ed      	beq.n	8008766 <_strtod_l+0x51e>
 800878a:	f1c8 0800 	rsb	r8, r8, #0
 800878e:	f018 020f 	ands.w	r2, r8, #15
 8008792:	d00a      	beq.n	80087aa <_strtod_l+0x562>
 8008794:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <_strtod_l+0x5a0>)
 8008796:	4648      	mov	r0, r9
 8008798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800879c:	4651      	mov	r1, sl
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 ffc3 	bl	800072c <__aeabi_ddiv>
 80087a6:	4681      	mov	r9, r0
 80087a8:	468a      	mov	sl, r1
 80087aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80087ae:	d0da      	beq.n	8008766 <_strtod_l+0x51e>
 80087b0:	f1b8 0f1f 	cmp.w	r8, #31
 80087b4:	dd24      	ble.n	8008800 <_strtod_l+0x5b8>
 80087b6:	f04f 0800 	mov.w	r8, #0
 80087ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80087be:	f8cd 8020 	str.w	r8, [sp, #32]
 80087c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c6:	2322      	movs	r3, #34	; 0x22
 80087c8:	f04f 0900 	mov.w	r9, #0
 80087cc:	f04f 0a00 	mov.w	sl, #0
 80087d0:	f8cb 3000 	str.w	r3, [fp]
 80087d4:	e761      	b.n	800869a <_strtod_l+0x452>
 80087d6:	bf00      	nop
 80087d8:	0800bb1d 	.word	0x0800bb1d
 80087dc:	0800bbab 	.word	0x0800bbab
 80087e0:	0800bb25 	.word	0x0800bb25
 80087e4:	0800bb68 	.word	0x0800bb68
 80087e8:	0800bc50 	.word	0x0800bc50
 80087ec:	0800bc28 	.word	0x0800bc28
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	7ca00000 	.word	0x7ca00000
 80087f8:	fff80000 	.word	0xfff80000
 80087fc:	7fefffff 	.word	0x7fefffff
 8008800:	f018 0310 	ands.w	r3, r8, #16
 8008804:	bf18      	it	ne
 8008806:	236a      	movne	r3, #106	; 0x6a
 8008808:	4648      	mov	r0, r9
 800880a:	9305      	str	r3, [sp, #20]
 800880c:	4651      	mov	r1, sl
 800880e:	2300      	movs	r3, #0
 8008810:	4da1      	ldr	r5, [pc, #644]	; (8008a98 <_strtod_l+0x850>)
 8008812:	f1b8 0f00 	cmp.w	r8, #0
 8008816:	f300 8113 	bgt.w	8008a40 <_strtod_l+0x7f8>
 800881a:	b10b      	cbz	r3, 8008820 <_strtod_l+0x5d8>
 800881c:	4681      	mov	r9, r0
 800881e:	468a      	mov	sl, r1
 8008820:	9b05      	ldr	r3, [sp, #20]
 8008822:	b1bb      	cbz	r3, 8008854 <_strtod_l+0x60c>
 8008824:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008828:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800882c:	2b00      	cmp	r3, #0
 800882e:	4651      	mov	r1, sl
 8008830:	dd10      	ble.n	8008854 <_strtod_l+0x60c>
 8008832:	2b1f      	cmp	r3, #31
 8008834:	f340 8110 	ble.w	8008a58 <_strtod_l+0x810>
 8008838:	2b34      	cmp	r3, #52	; 0x34
 800883a:	bfd8      	it	le
 800883c:	f04f 32ff 	movle.w	r2, #4294967295
 8008840:	f04f 0900 	mov.w	r9, #0
 8008844:	bfcf      	iteee	gt
 8008846:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800884a:	3b20      	suble	r3, #32
 800884c:	fa02 f303 	lslle.w	r3, r2, r3
 8008850:	ea03 0a01 	andle.w	sl, r3, r1
 8008854:	2200      	movs	r2, #0
 8008856:	2300      	movs	r3, #0
 8008858:	4648      	mov	r0, r9
 800885a:	4651      	mov	r1, sl
 800885c:	f7f8 f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8008860:	2800      	cmp	r0, #0
 8008862:	d1a8      	bne.n	80087b6 <_strtod_l+0x56e>
 8008864:	9b06      	ldr	r3, [sp, #24]
 8008866:	9a04      	ldr	r2, [sp, #16]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	9908      	ldr	r1, [sp, #32]
 800886c:	4623      	mov	r3, r4
 800886e:	4658      	mov	r0, fp
 8008870:	f001 fe89 	bl	800a586 <__s2b>
 8008874:	9008      	str	r0, [sp, #32]
 8008876:	2800      	cmp	r0, #0
 8008878:	f43f af00 	beq.w	800867c <_strtod_l+0x434>
 800887c:	9a07      	ldr	r2, [sp, #28]
 800887e:	9b07      	ldr	r3, [sp, #28]
 8008880:	2a00      	cmp	r2, #0
 8008882:	f1c3 0300 	rsb	r3, r3, #0
 8008886:	bfa8      	it	ge
 8008888:	2300      	movge	r3, #0
 800888a:	f04f 0800 	mov.w	r8, #0
 800888e:	930e      	str	r3, [sp, #56]	; 0x38
 8008890:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008894:	9316      	str	r3, [sp, #88]	; 0x58
 8008896:	f8cd 8010 	str.w	r8, [sp, #16]
 800889a:	9b08      	ldr	r3, [sp, #32]
 800889c:	4658      	mov	r0, fp
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	f001 fdeb 	bl	800a47a <_Balloc>
 80088a4:	9006      	str	r0, [sp, #24]
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f43f aef0 	beq.w	800868c <_strtod_l+0x444>
 80088ac:	9b08      	ldr	r3, [sp, #32]
 80088ae:	300c      	adds	r0, #12
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	f103 010c 	add.w	r1, r3, #12
 80088b6:	3202      	adds	r2, #2
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	f001 fdd3 	bl	800a464 <memcpy>
 80088be:	ab1e      	add	r3, sp, #120	; 0x78
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	ab1d      	add	r3, sp, #116	; 0x74
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	464a      	mov	r2, r9
 80088c8:	4653      	mov	r3, sl
 80088ca:	4658      	mov	r0, fp
 80088cc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80088d0:	f002 f914 	bl	800aafc <__d2b>
 80088d4:	901c      	str	r0, [sp, #112]	; 0x70
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f aed8 	beq.w	800868c <_strtod_l+0x444>
 80088dc:	2101      	movs	r1, #1
 80088de:	4658      	mov	r0, fp
 80088e0:	f001 fedd 	bl	800a69e <__i2b>
 80088e4:	9004      	str	r0, [sp, #16]
 80088e6:	4603      	mov	r3, r0
 80088e8:	2800      	cmp	r0, #0
 80088ea:	f43f aecf 	beq.w	800868c <_strtod_l+0x444>
 80088ee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80088f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	bfab      	itete	ge
 80088f6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80088f8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80088fa:	18ee      	addge	r6, r5, r3
 80088fc:	1b5c      	sublt	r4, r3, r5
 80088fe:	9b05      	ldr	r3, [sp, #20]
 8008900:	bfa8      	it	ge
 8008902:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008904:	eba5 0503 	sub.w	r5, r5, r3
 8008908:	4415      	add	r5, r2
 800890a:	4b64      	ldr	r3, [pc, #400]	; (8008a9c <_strtod_l+0x854>)
 800890c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008910:	bfb8      	it	lt
 8008912:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008914:	429d      	cmp	r5, r3
 8008916:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800891a:	f280 80af 	bge.w	8008a7c <_strtod_l+0x834>
 800891e:	1b5b      	subs	r3, r3, r5
 8008920:	2b1f      	cmp	r3, #31
 8008922:	eba2 0203 	sub.w	r2, r2, r3
 8008926:	f04f 0701 	mov.w	r7, #1
 800892a:	f300 809c 	bgt.w	8008a66 <_strtod_l+0x81e>
 800892e:	2500      	movs	r5, #0
 8008930:	fa07 f303 	lsl.w	r3, r7, r3
 8008934:	930f      	str	r3, [sp, #60]	; 0x3c
 8008936:	18b7      	adds	r7, r6, r2
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	42be      	cmp	r6, r7
 800893c:	4414      	add	r4, r2
 800893e:	441c      	add	r4, r3
 8008940:	4633      	mov	r3, r6
 8008942:	bfa8      	it	ge
 8008944:	463b      	movge	r3, r7
 8008946:	42a3      	cmp	r3, r4
 8008948:	bfa8      	it	ge
 800894a:	4623      	movge	r3, r4
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfc2      	ittt	gt
 8008950:	1aff      	subgt	r7, r7, r3
 8008952:	1ae4      	subgt	r4, r4, r3
 8008954:	1af6      	subgt	r6, r6, r3
 8008956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008958:	b1bb      	cbz	r3, 800898a <_strtod_l+0x742>
 800895a:	461a      	mov	r2, r3
 800895c:	9904      	ldr	r1, [sp, #16]
 800895e:	4658      	mov	r0, fp
 8008960:	f001 ff3c 	bl	800a7dc <__pow5mult>
 8008964:	9004      	str	r0, [sp, #16]
 8008966:	2800      	cmp	r0, #0
 8008968:	f43f ae90 	beq.w	800868c <_strtod_l+0x444>
 800896c:	4601      	mov	r1, r0
 800896e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008970:	4658      	mov	r0, fp
 8008972:	f001 fe9d 	bl	800a6b0 <__multiply>
 8008976:	9009      	str	r0, [sp, #36]	; 0x24
 8008978:	2800      	cmp	r0, #0
 800897a:	f43f ae87 	beq.w	800868c <_strtod_l+0x444>
 800897e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008980:	4658      	mov	r0, fp
 8008982:	f001 fdae 	bl	800a4e2 <_Bfree>
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	931c      	str	r3, [sp, #112]	; 0x70
 800898a:	2f00      	cmp	r7, #0
 800898c:	dc7a      	bgt.n	8008a84 <_strtod_l+0x83c>
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dd08      	ble.n	80089a6 <_strtod_l+0x75e>
 8008994:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008996:	9906      	ldr	r1, [sp, #24]
 8008998:	4658      	mov	r0, fp
 800899a:	f001 ff1f 	bl	800a7dc <__pow5mult>
 800899e:	9006      	str	r0, [sp, #24]
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f43f ae73 	beq.w	800868c <_strtod_l+0x444>
 80089a6:	2c00      	cmp	r4, #0
 80089a8:	dd08      	ble.n	80089bc <_strtod_l+0x774>
 80089aa:	4622      	mov	r2, r4
 80089ac:	9906      	ldr	r1, [sp, #24]
 80089ae:	4658      	mov	r0, fp
 80089b0:	f001 ff62 	bl	800a878 <__lshift>
 80089b4:	9006      	str	r0, [sp, #24]
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f ae68 	beq.w	800868c <_strtod_l+0x444>
 80089bc:	2e00      	cmp	r6, #0
 80089be:	dd08      	ble.n	80089d2 <_strtod_l+0x78a>
 80089c0:	4632      	mov	r2, r6
 80089c2:	9904      	ldr	r1, [sp, #16]
 80089c4:	4658      	mov	r0, fp
 80089c6:	f001 ff57 	bl	800a878 <__lshift>
 80089ca:	9004      	str	r0, [sp, #16]
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f43f ae5d 	beq.w	800868c <_strtod_l+0x444>
 80089d2:	9a06      	ldr	r2, [sp, #24]
 80089d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089d6:	4658      	mov	r0, fp
 80089d8:	f001 ffbc 	bl	800a954 <__mdiff>
 80089dc:	4680      	mov	r8, r0
 80089de:	2800      	cmp	r0, #0
 80089e0:	f43f ae54 	beq.w	800868c <_strtod_l+0x444>
 80089e4:	2400      	movs	r4, #0
 80089e6:	68c3      	ldr	r3, [r0, #12]
 80089e8:	9904      	ldr	r1, [sp, #16]
 80089ea:	60c4      	str	r4, [r0, #12]
 80089ec:	930c      	str	r3, [sp, #48]	; 0x30
 80089ee:	f001 ff97 	bl	800a920 <__mcmp>
 80089f2:	42a0      	cmp	r0, r4
 80089f4:	da54      	bge.n	8008aa0 <_strtod_l+0x858>
 80089f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089f8:	b9f3      	cbnz	r3, 8008a38 <_strtod_l+0x7f0>
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	d11b      	bne.n	8008a38 <_strtod_l+0x7f0>
 8008a00:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008a04:	b9c3      	cbnz	r3, 8008a38 <_strtod_l+0x7f0>
 8008a06:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008a0a:	0d1b      	lsrs	r3, r3, #20
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a12:	d911      	bls.n	8008a38 <_strtod_l+0x7f0>
 8008a14:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008a18:	b91b      	cbnz	r3, 8008a22 <_strtod_l+0x7da>
 8008a1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	dd0a      	ble.n	8008a38 <_strtod_l+0x7f0>
 8008a22:	4641      	mov	r1, r8
 8008a24:	2201      	movs	r2, #1
 8008a26:	4658      	mov	r0, fp
 8008a28:	f001 ff26 	bl	800a878 <__lshift>
 8008a2c:	9904      	ldr	r1, [sp, #16]
 8008a2e:	4680      	mov	r8, r0
 8008a30:	f001 ff76 	bl	800a920 <__mcmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	dc68      	bgt.n	8008b0a <_strtod_l+0x8c2>
 8008a38:	9b05      	ldr	r3, [sp, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d172      	bne.n	8008b24 <_strtod_l+0x8dc>
 8008a3e:	e630      	b.n	80086a2 <_strtod_l+0x45a>
 8008a40:	f018 0f01 	tst.w	r8, #1
 8008a44:	d004      	beq.n	8008a50 <_strtod_l+0x808>
 8008a46:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a4a:	f7f7 fd45 	bl	80004d8 <__aeabi_dmul>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a54:	3508      	adds	r5, #8
 8008a56:	e6dc      	b.n	8008812 <_strtod_l+0x5ca>
 8008a58:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	ea03 0909 	and.w	r9, r3, r9
 8008a64:	e6f6      	b.n	8008854 <_strtod_l+0x60c>
 8008a66:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008a6a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008a6e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008a72:	35e2      	adds	r5, #226	; 0xe2
 8008a74:	fa07 f505 	lsl.w	r5, r7, r5
 8008a78:	970f      	str	r7, [sp, #60]	; 0x3c
 8008a7a:	e75c      	b.n	8008936 <_strtod_l+0x6ee>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	2500      	movs	r5, #0
 8008a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a82:	e758      	b.n	8008936 <_strtod_l+0x6ee>
 8008a84:	463a      	mov	r2, r7
 8008a86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a88:	4658      	mov	r0, fp
 8008a8a:	f001 fef5 	bl	800a878 <__lshift>
 8008a8e:	901c      	str	r0, [sp, #112]	; 0x70
 8008a90:	2800      	cmp	r0, #0
 8008a92:	f47f af7c 	bne.w	800898e <_strtod_l+0x746>
 8008a96:	e5f9      	b.n	800868c <_strtod_l+0x444>
 8008a98:	0800bb80 	.word	0x0800bb80
 8008a9c:	fffffc02 	.word	0xfffffc02
 8008aa0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008aa4:	f040 8089 	bne.w	8008bba <_strtod_l+0x972>
 8008aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aaa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008aae:	b342      	cbz	r2, 8008b02 <_strtod_l+0x8ba>
 8008ab0:	4aaf      	ldr	r2, [pc, #700]	; (8008d70 <_strtod_l+0xb28>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d156      	bne.n	8008b64 <_strtod_l+0x91c>
 8008ab6:	9b05      	ldr	r3, [sp, #20]
 8008ab8:	4648      	mov	r0, r9
 8008aba:	b1eb      	cbz	r3, 8008af8 <_strtod_l+0x8b0>
 8008abc:	4653      	mov	r3, sl
 8008abe:	4aad      	ldr	r2, [pc, #692]	; (8008d74 <_strtod_l+0xb2c>)
 8008ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ac4:	401a      	ands	r2, r3
 8008ac6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008aca:	d818      	bhi.n	8008afe <_strtod_l+0x8b6>
 8008acc:	0d12      	lsrs	r2, r2, #20
 8008ace:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad6:	4298      	cmp	r0, r3
 8008ad8:	d144      	bne.n	8008b64 <_strtod_l+0x91c>
 8008ada:	4ba7      	ldr	r3, [pc, #668]	; (8008d78 <_strtod_l+0xb30>)
 8008adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d102      	bne.n	8008ae8 <_strtod_l+0x8a0>
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f43f add2 	beq.w	800868c <_strtod_l+0x444>
 8008ae8:	4ba2      	ldr	r3, [pc, #648]	; (8008d74 <_strtod_l+0xb2c>)
 8008aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aec:	f04f 0900 	mov.w	r9, #0
 8008af0:	401a      	ands	r2, r3
 8008af2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008af6:	e79f      	b.n	8008a38 <_strtod_l+0x7f0>
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	e7eb      	b.n	8008ad6 <_strtod_l+0x88e>
 8008afe:	460b      	mov	r3, r1
 8008b00:	e7e9      	b.n	8008ad6 <_strtod_l+0x88e>
 8008b02:	bb7b      	cbnz	r3, 8008b64 <_strtod_l+0x91c>
 8008b04:	f1b9 0f00 	cmp.w	r9, #0
 8008b08:	d12c      	bne.n	8008b64 <_strtod_l+0x91c>
 8008b0a:	9905      	ldr	r1, [sp, #20]
 8008b0c:	4653      	mov	r3, sl
 8008b0e:	4a99      	ldr	r2, [pc, #612]	; (8008d74 <_strtod_l+0xb2c>)
 8008b10:	b1f1      	cbz	r1, 8008b50 <_strtod_l+0x908>
 8008b12:	ea02 010a 	and.w	r1, r2, sl
 8008b16:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b1a:	dc19      	bgt.n	8008b50 <_strtod_l+0x908>
 8008b1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b20:	f77f ae51 	ble.w	80087c6 <_strtod_l+0x57e>
 8008b24:	2300      	movs	r3, #0
 8008b26:	4a95      	ldr	r2, [pc, #596]	; (8008d7c <_strtod_l+0xb34>)
 8008b28:	4648      	mov	r0, r9
 8008b2a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008b2e:	4651      	mov	r1, sl
 8008b30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b34:	f7f7 fcd0 	bl	80004d8 <__aeabi_dmul>
 8008b38:	4681      	mov	r9, r0
 8008b3a:	468a      	mov	sl, r1
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	f47f adb0 	bne.w	80086a2 <_strtod_l+0x45a>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f47f adad 	bne.w	80086a2 <_strtod_l+0x45a>
 8008b48:	2322      	movs	r3, #34	; 0x22
 8008b4a:	f8cb 3000 	str.w	r3, [fp]
 8008b4e:	e5a8      	b.n	80086a2 <_strtod_l+0x45a>
 8008b50:	4013      	ands	r3, r2
 8008b52:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b56:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008b5a:	f04f 39ff 	mov.w	r9, #4294967295
 8008b5e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008b62:	e769      	b.n	8008a38 <_strtod_l+0x7f0>
 8008b64:	b19d      	cbz	r5, 8008b8e <_strtod_l+0x946>
 8008b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b68:	421d      	tst	r5, r3
 8008b6a:	f43f af65 	beq.w	8008a38 <_strtod_l+0x7f0>
 8008b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b70:	9a05      	ldr	r2, [sp, #20]
 8008b72:	4648      	mov	r0, r9
 8008b74:	4651      	mov	r1, sl
 8008b76:	b173      	cbz	r3, 8008b96 <_strtod_l+0x94e>
 8008b78:	f7ff fb44 	bl	8008204 <sulp>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b84:	f7f7 faf2 	bl	800016c <__adddf3>
 8008b88:	4681      	mov	r9, r0
 8008b8a:	468a      	mov	sl, r1
 8008b8c:	e754      	b.n	8008a38 <_strtod_l+0x7f0>
 8008b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b90:	ea13 0f09 	tst.w	r3, r9
 8008b94:	e7e9      	b.n	8008b6a <_strtod_l+0x922>
 8008b96:	f7ff fb35 	bl	8008204 <sulp>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ba2:	f7f7 fae1 	bl	8000168 <__aeabi_dsub>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4681      	mov	r9, r0
 8008bac:	468a      	mov	sl, r1
 8008bae:	f7f7 fefb 	bl	80009a8 <__aeabi_dcmpeq>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f47f ae07 	bne.w	80087c6 <_strtod_l+0x57e>
 8008bb8:	e73e      	b.n	8008a38 <_strtod_l+0x7f0>
 8008bba:	9904      	ldr	r1, [sp, #16]
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	f001 ffec 	bl	800ab9a <__ratio>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bc8:	4606      	mov	r6, r0
 8008bca:	460f      	mov	r7, r1
 8008bcc:	f7f7 ff00 	bl	80009d0 <__aeabi_dcmple>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d075      	beq.n	8008cc0 <_strtod_l+0xa78>
 8008bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d047      	beq.n	8008c6a <_strtod_l+0xa22>
 8008bda:	2600      	movs	r6, #0
 8008bdc:	4f68      	ldr	r7, [pc, #416]	; (8008d80 <_strtod_l+0xb38>)
 8008bde:	4d68      	ldr	r5, [pc, #416]	; (8008d80 <_strtod_l+0xb38>)
 8008be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be6:	0d1b      	lsrs	r3, r3, #20
 8008be8:	051b      	lsls	r3, r3, #20
 8008bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bee:	4b65      	ldr	r3, [pc, #404]	; (8008d84 <_strtod_l+0xb3c>)
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	f040 80cf 	bne.w	8008d94 <_strtod_l+0xb4c>
 8008bf6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bfa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c00:	4648      	mov	r0, r9
 8008c02:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008c06:	4651      	mov	r1, sl
 8008c08:	f001 ff02 	bl	800aa10 <__ulp>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fc60 	bl	80004d8 <__aeabi_dmul>
 8008c18:	464a      	mov	r2, r9
 8008c1a:	4653      	mov	r3, sl
 8008c1c:	f7f7 faa6 	bl	800016c <__adddf3>
 8008c20:	460b      	mov	r3, r1
 8008c22:	4954      	ldr	r1, [pc, #336]	; (8008d74 <_strtod_l+0xb2c>)
 8008c24:	4a58      	ldr	r2, [pc, #352]	; (8008d88 <_strtod_l+0xb40>)
 8008c26:	4019      	ands	r1, r3
 8008c28:	4291      	cmp	r1, r2
 8008c2a:	4681      	mov	r9, r0
 8008c2c:	d95e      	bls.n	8008cec <_strtod_l+0xaa4>
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c30:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d103      	bne.n	8008c40 <_strtod_l+0x9f8>
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f43f ad26 	beq.w	800868c <_strtod_l+0x444>
 8008c40:	f04f 39ff 	mov.w	r9, #4294967295
 8008c44:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008d78 <_strtod_l+0xb30>
 8008c48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f001 fc49 	bl	800a4e2 <_Bfree>
 8008c50:	9906      	ldr	r1, [sp, #24]
 8008c52:	4658      	mov	r0, fp
 8008c54:	f001 fc45 	bl	800a4e2 <_Bfree>
 8008c58:	9904      	ldr	r1, [sp, #16]
 8008c5a:	4658      	mov	r0, fp
 8008c5c:	f001 fc41 	bl	800a4e2 <_Bfree>
 8008c60:	4641      	mov	r1, r8
 8008c62:	4658      	mov	r0, fp
 8008c64:	f001 fc3d 	bl	800a4e2 <_Bfree>
 8008c68:	e617      	b.n	800889a <_strtod_l+0x652>
 8008c6a:	f1b9 0f00 	cmp.w	r9, #0
 8008c6e:	d119      	bne.n	8008ca4 <_strtod_l+0xa5c>
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c76:	b9e3      	cbnz	r3, 8008cb2 <_strtod_l+0xa6a>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4b41      	ldr	r3, [pc, #260]	; (8008d80 <_strtod_l+0xb38>)
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 fe9c 	bl	80009bc <__aeabi_dcmplt>
 8008c84:	b9c8      	cbnz	r0, 8008cba <_strtod_l+0xa72>
 8008c86:	2200      	movs	r2, #0
 8008c88:	4b40      	ldr	r3, [pc, #256]	; (8008d8c <_strtod_l+0xb44>)
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	f7f7 fc23 	bl	80004d8 <__aeabi_dmul>
 8008c92:	4604      	mov	r4, r0
 8008c94:	460d      	mov	r5, r1
 8008c96:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008c9a:	9418      	str	r4, [sp, #96]	; 0x60
 8008c9c:	9319      	str	r3, [sp, #100]	; 0x64
 8008c9e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008ca2:	e79d      	b.n	8008be0 <_strtod_l+0x998>
 8008ca4:	f1b9 0f01 	cmp.w	r9, #1
 8008ca8:	d103      	bne.n	8008cb2 <_strtod_l+0xa6a>
 8008caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f43f ad8a 	beq.w	80087c6 <_strtod_l+0x57e>
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	4f36      	ldr	r7, [pc, #216]	; (8008d90 <_strtod_l+0xb48>)
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	e791      	b.n	8008bde <_strtod_l+0x996>
 8008cba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008cbc:	4d33      	ldr	r5, [pc, #204]	; (8008d8c <_strtod_l+0xb44>)
 8008cbe:	e7ea      	b.n	8008c96 <_strtod_l+0xa4e>
 8008cc0:	4b32      	ldr	r3, [pc, #200]	; (8008d8c <_strtod_l+0xb44>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 fc06 	bl	80004d8 <__aeabi_dmul>
 8008ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	b933      	cbnz	r3, 8008ce2 <_strtod_l+0xa9a>
 8008cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd8:	9010      	str	r0, [sp, #64]	; 0x40
 8008cda:	9311      	str	r3, [sp, #68]	; 0x44
 8008cdc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008ce0:	e77e      	b.n	8008be0 <_strtod_l+0x998>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008cea:	e7f7      	b.n	8008cdc <_strtod_l+0xa94>
 8008cec:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008cf0:	9b05      	ldr	r3, [sp, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1a8      	bne.n	8008c48 <_strtod_l+0xa00>
 8008cf6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008cfa:	0d1b      	lsrs	r3, r3, #20
 8008cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cfe:	051b      	lsls	r3, r3, #20
 8008d00:	429a      	cmp	r2, r3
 8008d02:	4656      	mov	r6, sl
 8008d04:	d1a0      	bne.n	8008c48 <_strtod_l+0xa00>
 8008d06:	4629      	mov	r1, r5
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f7f7 fe95 	bl	8000a38 <__aeabi_d2iz>
 8008d0e:	f7f7 fb79 	bl	8000404 <__aeabi_i2d>
 8008d12:	460b      	mov	r3, r1
 8008d14:	4602      	mov	r2, r0
 8008d16:	4629      	mov	r1, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7f7 fa25 	bl	8000168 <__aeabi_dsub>
 8008d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	b933      	cbnz	r3, 8008d34 <_strtod_l+0xaec>
 8008d26:	f1b9 0f00 	cmp.w	r9, #0
 8008d2a:	d103      	bne.n	8008d34 <_strtod_l+0xaec>
 8008d2c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	d06a      	beq.n	8008e0a <_strtod_l+0xbc2>
 8008d34:	a30a      	add	r3, pc, #40	; (adr r3, 8008d60 <_strtod_l+0xb18>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	f47f acad 	bne.w	80086a2 <_strtod_l+0x45a>
 8008d48:	a307      	add	r3, pc, #28	; (adr r3, 8008d68 <_strtod_l+0xb20>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fe51 	bl	80009f8 <__aeabi_dcmpgt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f43f af76 	beq.w	8008c48 <_strtod_l+0xa00>
 8008d5c:	e4a1      	b.n	80086a2 <_strtod_l+0x45a>
 8008d5e:	bf00      	nop
 8008d60:	94a03595 	.word	0x94a03595
 8008d64:	3fdfffff 	.word	0x3fdfffff
 8008d68:	35afe535 	.word	0x35afe535
 8008d6c:	3fe00000 	.word	0x3fe00000
 8008d70:	000fffff 	.word	0x000fffff
 8008d74:	7ff00000 	.word	0x7ff00000
 8008d78:	7fefffff 	.word	0x7fefffff
 8008d7c:	39500000 	.word	0x39500000
 8008d80:	3ff00000 	.word	0x3ff00000
 8008d84:	7fe00000 	.word	0x7fe00000
 8008d88:	7c9fffff 	.word	0x7c9fffff
 8008d8c:	3fe00000 	.word	0x3fe00000
 8008d90:	bff00000 	.word	0xbff00000
 8008d94:	9b05      	ldr	r3, [sp, #20]
 8008d96:	b313      	cbz	r3, 8008dde <_strtod_l+0xb96>
 8008d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d9e:	d81e      	bhi.n	8008dde <_strtod_l+0xb96>
 8008da0:	a325      	add	r3, pc, #148	; (adr r3, 8008e38 <_strtod_l+0xbf0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	4620      	mov	r0, r4
 8008da8:	4629      	mov	r1, r5
 8008daa:	f7f7 fe11 	bl	80009d0 <__aeabi_dcmple>
 8008dae:	b190      	cbz	r0, 8008dd6 <_strtod_l+0xb8e>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4620      	mov	r0, r4
 8008db4:	f7f7 fe68 	bl	8000a88 <__aeabi_d2uiz>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	bf08      	it	eq
 8008dbc:	2001      	moveq	r0, #1
 8008dbe:	f7f7 fb11 	bl	80003e4 <__aeabi_ui2d>
 8008dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	b9d3      	cbnz	r3, 8008e00 <_strtod_l+0xbb8>
 8008dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dce:	9012      	str	r0, [sp, #72]	; 0x48
 8008dd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008dd2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dd8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008ddc:	1a9f      	subs	r7, r3, r2
 8008dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008de2:	f001 fe15 	bl	800aa10 <__ulp>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fb73 	bl	80004d8 <__aeabi_dmul>
 8008df2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008df6:	f7f7 f9b9 	bl	800016c <__adddf3>
 8008dfa:	4681      	mov	r9, r0
 8008dfc:	468a      	mov	sl, r1
 8008dfe:	e777      	b.n	8008cf0 <_strtod_l+0xaa8>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008e08:	e7e3      	b.n	8008dd2 <_strtod_l+0xb8a>
 8008e0a:	a30d      	add	r3, pc, #52	; (adr r3, 8008e40 <_strtod_l+0xbf8>)
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f7f7 fdd4 	bl	80009bc <__aeabi_dcmplt>
 8008e14:	e79f      	b.n	8008d56 <_strtod_l+0xb0e>
 8008e16:	2300      	movs	r3, #0
 8008e18:	930d      	str	r3, [sp, #52]	; 0x34
 8008e1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	f7ff ba55 	b.w	80082ce <_strtod_l+0x86>
 8008e24:	2b65      	cmp	r3, #101	; 0x65
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	f43f ab42 	beq.w	80084b2 <_strtod_l+0x26a>
 8008e2e:	2101      	movs	r1, #1
 8008e30:	4614      	mov	r4, r2
 8008e32:	9105      	str	r1, [sp, #20]
 8008e34:	f7ff babf 	b.w	80083b6 <_strtod_l+0x16e>
 8008e38:	ffc00000 	.word	0xffc00000
 8008e3c:	41dfffff 	.word	0x41dfffff
 8008e40:	94a03595 	.word	0x94a03595
 8008e44:	3fcfffff 	.word	0x3fcfffff

08008e48 <_strtod_r>:
 8008e48:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <_strtod_r+0x18>)
 8008e4a:	b410      	push	{r4}
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4c05      	ldr	r4, [pc, #20]	; (8008e64 <_strtod_r+0x1c>)
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bf08      	it	eq
 8008e56:	4623      	moveq	r3, r4
 8008e58:	bc10      	pop	{r4}
 8008e5a:	f7ff b9f5 	b.w	8008248 <_strtod_l>
 8008e5e:	bf00      	nop
 8008e60:	20000018 	.word	0x20000018
 8008e64:	2000007c 	.word	0x2000007c

08008e68 <_strtol_l.isra.0>:
 8008e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	4689      	mov	r9, r1
 8008e70:	4692      	mov	sl, r2
 8008e72:	461e      	mov	r6, r3
 8008e74:	460f      	mov	r7, r1
 8008e76:	463d      	mov	r5, r7
 8008e78:	9808      	ldr	r0, [sp, #32]
 8008e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e7e:	f001 fab5 	bl	800a3ec <__locale_ctype_ptr_l>
 8008e82:	4420      	add	r0, r4
 8008e84:	7843      	ldrb	r3, [r0, #1]
 8008e86:	f013 0308 	ands.w	r3, r3, #8
 8008e8a:	d132      	bne.n	8008ef2 <_strtol_l.isra.0+0x8a>
 8008e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e8e:	d132      	bne.n	8008ef6 <_strtol_l.isra.0+0x8e>
 8008e90:	2201      	movs	r2, #1
 8008e92:	787c      	ldrb	r4, [r7, #1]
 8008e94:	1cbd      	adds	r5, r7, #2
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	d05d      	beq.n	8008f56 <_strtol_l.isra.0+0xee>
 8008e9a:	2e10      	cmp	r6, #16
 8008e9c:	d109      	bne.n	8008eb2 <_strtol_l.isra.0+0x4a>
 8008e9e:	2c30      	cmp	r4, #48	; 0x30
 8008ea0:	d107      	bne.n	8008eb2 <_strtol_l.isra.0+0x4a>
 8008ea2:	782b      	ldrb	r3, [r5, #0]
 8008ea4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ea8:	2b58      	cmp	r3, #88	; 0x58
 8008eaa:	d14f      	bne.n	8008f4c <_strtol_l.isra.0+0xe4>
 8008eac:	2610      	movs	r6, #16
 8008eae:	786c      	ldrb	r4, [r5, #1]
 8008eb0:	3502      	adds	r5, #2
 8008eb2:	2a00      	cmp	r2, #0
 8008eb4:	bf14      	ite	ne
 8008eb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008eba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008ebe:	2700      	movs	r7, #0
 8008ec0:	fbb1 fcf6 	udiv	ip, r1, r6
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008eca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	d817      	bhi.n	8008f02 <_strtol_l.isra.0+0x9a>
 8008ed2:	461c      	mov	r4, r3
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	dd23      	ble.n	8008f20 <_strtol_l.isra.0+0xb8>
 8008ed8:	1c7b      	adds	r3, r7, #1
 8008eda:	d007      	beq.n	8008eec <_strtol_l.isra.0+0x84>
 8008edc:	4584      	cmp	ip, r0
 8008ede:	d31c      	bcc.n	8008f1a <_strtol_l.isra.0+0xb2>
 8008ee0:	d101      	bne.n	8008ee6 <_strtol_l.isra.0+0x7e>
 8008ee2:	45a6      	cmp	lr, r4
 8008ee4:	db19      	blt.n	8008f1a <_strtol_l.isra.0+0xb2>
 8008ee6:	2701      	movs	r7, #1
 8008ee8:	fb00 4006 	mla	r0, r0, r6, r4
 8008eec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ef0:	e7eb      	b.n	8008eca <_strtol_l.isra.0+0x62>
 8008ef2:	462f      	mov	r7, r5
 8008ef4:	e7bf      	b.n	8008e76 <_strtol_l.isra.0+0xe>
 8008ef6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ef8:	bf04      	itt	eq
 8008efa:	1cbd      	addeq	r5, r7, #2
 8008efc:	787c      	ldrbeq	r4, [r7, #1]
 8008efe:	461a      	mov	r2, r3
 8008f00:	e7c9      	b.n	8008e96 <_strtol_l.isra.0+0x2e>
 8008f02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008f06:	2b19      	cmp	r3, #25
 8008f08:	d801      	bhi.n	8008f0e <_strtol_l.isra.0+0xa6>
 8008f0a:	3c37      	subs	r4, #55	; 0x37
 8008f0c:	e7e2      	b.n	8008ed4 <_strtol_l.isra.0+0x6c>
 8008f0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008f12:	2b19      	cmp	r3, #25
 8008f14:	d804      	bhi.n	8008f20 <_strtol_l.isra.0+0xb8>
 8008f16:	3c57      	subs	r4, #87	; 0x57
 8008f18:	e7dc      	b.n	8008ed4 <_strtol_l.isra.0+0x6c>
 8008f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f1e:	e7e5      	b.n	8008eec <_strtol_l.isra.0+0x84>
 8008f20:	1c7b      	adds	r3, r7, #1
 8008f22:	d108      	bne.n	8008f36 <_strtol_l.isra.0+0xce>
 8008f24:	2322      	movs	r3, #34	; 0x22
 8008f26:	4608      	mov	r0, r1
 8008f28:	f8c8 3000 	str.w	r3, [r8]
 8008f2c:	f1ba 0f00 	cmp.w	sl, #0
 8008f30:	d107      	bne.n	8008f42 <_strtol_l.isra.0+0xda>
 8008f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f36:	b102      	cbz	r2, 8008f3a <_strtol_l.isra.0+0xd2>
 8008f38:	4240      	negs	r0, r0
 8008f3a:	f1ba 0f00 	cmp.w	sl, #0
 8008f3e:	d0f8      	beq.n	8008f32 <_strtol_l.isra.0+0xca>
 8008f40:	b10f      	cbz	r7, 8008f46 <_strtol_l.isra.0+0xde>
 8008f42:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f46:	f8ca 9000 	str.w	r9, [sl]
 8008f4a:	e7f2      	b.n	8008f32 <_strtol_l.isra.0+0xca>
 8008f4c:	2430      	movs	r4, #48	; 0x30
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	d1af      	bne.n	8008eb2 <_strtol_l.isra.0+0x4a>
 8008f52:	2608      	movs	r6, #8
 8008f54:	e7ad      	b.n	8008eb2 <_strtol_l.isra.0+0x4a>
 8008f56:	2c30      	cmp	r4, #48	; 0x30
 8008f58:	d0a3      	beq.n	8008ea2 <_strtol_l.isra.0+0x3a>
 8008f5a:	260a      	movs	r6, #10
 8008f5c:	e7a9      	b.n	8008eb2 <_strtol_l.isra.0+0x4a>
	...

08008f60 <_strtol_r>:
 8008f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f62:	4c06      	ldr	r4, [pc, #24]	; (8008f7c <_strtol_r+0x1c>)
 8008f64:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_strtol_r+0x20>)
 8008f66:	6824      	ldr	r4, [r4, #0]
 8008f68:	6a24      	ldr	r4, [r4, #32]
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	bf08      	it	eq
 8008f6e:	462c      	moveq	r4, r5
 8008f70:	9400      	str	r4, [sp, #0]
 8008f72:	f7ff ff79 	bl	8008e68 <_strtol_l.isra.0>
 8008f76:	b003      	add	sp, #12
 8008f78:	bd30      	pop	{r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000018 	.word	0x20000018
 8008f80:	2000007c 	.word	0x2000007c

08008f84 <quorem>:
 8008f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	6903      	ldr	r3, [r0, #16]
 8008f8a:	690c      	ldr	r4, [r1, #16]
 8008f8c:	4680      	mov	r8, r0
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	f2c0 8084 	blt.w	800909c <quorem+0x118>
 8008f94:	3c01      	subs	r4, #1
 8008f96:	f101 0714 	add.w	r7, r1, #20
 8008f9a:	f100 0614 	add.w	r6, r0, #20
 8008f9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008fa2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008fa6:	3501      	adds	r5, #1
 8008fa8:	fbb0 f5f5 	udiv	r5, r0, r5
 8008fac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008fb0:	eb06 030c 	add.w	r3, r6, ip
 8008fb4:	eb07 090c 	add.w	r9, r7, ip
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	b39d      	cbz	r5, 8009024 <quorem+0xa0>
 8008fbc:	f04f 0a00 	mov.w	sl, #0
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	46b6      	mov	lr, r6
 8008fc4:	46d3      	mov	fp, sl
 8008fc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fca:	b293      	uxth	r3, r2
 8008fcc:	fb05 a303 	mla	r3, r5, r3, sl
 8008fd0:	0c12      	lsrs	r2, r2, #16
 8008fd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fd6:	fb05 a202 	mla	r2, r5, r2, sl
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	ebab 0303 	sub.w	r3, fp, r3
 8008fe0:	f8de b000 	ldr.w	fp, [lr]
 8008fe4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008fe8:	fa1f fb8b 	uxth.w	fp, fp
 8008fec:	445b      	add	r3, fp
 8008fee:	fa1f fb82 	uxth.w	fp, r2
 8008ff2:	f8de 2000 	ldr.w	r2, [lr]
 8008ff6:	4581      	cmp	r9, r0
 8008ff8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008ffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009000:	b29b      	uxth	r3, r3
 8009002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009006:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800900a:	f84e 3b04 	str.w	r3, [lr], #4
 800900e:	d2da      	bcs.n	8008fc6 <quorem+0x42>
 8009010:	f856 300c 	ldr.w	r3, [r6, ip]
 8009014:	b933      	cbnz	r3, 8009024 <quorem+0xa0>
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	3b04      	subs	r3, #4
 800901a:	429e      	cmp	r6, r3
 800901c:	461a      	mov	r2, r3
 800901e:	d331      	bcc.n	8009084 <quorem+0x100>
 8009020:	f8c8 4010 	str.w	r4, [r8, #16]
 8009024:	4640      	mov	r0, r8
 8009026:	f001 fc7b 	bl	800a920 <__mcmp>
 800902a:	2800      	cmp	r0, #0
 800902c:	db26      	blt.n	800907c <quorem+0xf8>
 800902e:	4630      	mov	r0, r6
 8009030:	f04f 0c00 	mov.w	ip, #0
 8009034:	3501      	adds	r5, #1
 8009036:	f857 1b04 	ldr.w	r1, [r7], #4
 800903a:	f8d0 e000 	ldr.w	lr, [r0]
 800903e:	b28b      	uxth	r3, r1
 8009040:	ebac 0303 	sub.w	r3, ip, r3
 8009044:	fa1f f28e 	uxth.w	r2, lr
 8009048:	4413      	add	r3, r2
 800904a:	0c0a      	lsrs	r2, r1, #16
 800904c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009054:	b29b      	uxth	r3, r3
 8009056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800905a:	45b9      	cmp	r9, r7
 800905c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009060:	f840 3b04 	str.w	r3, [r0], #4
 8009064:	d2e7      	bcs.n	8009036 <quorem+0xb2>
 8009066:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800906a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800906e:	b92a      	cbnz	r2, 800907c <quorem+0xf8>
 8009070:	3b04      	subs	r3, #4
 8009072:	429e      	cmp	r6, r3
 8009074:	461a      	mov	r2, r3
 8009076:	d30b      	bcc.n	8009090 <quorem+0x10c>
 8009078:	f8c8 4010 	str.w	r4, [r8, #16]
 800907c:	4628      	mov	r0, r5
 800907e:	b003      	add	sp, #12
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	3b04      	subs	r3, #4
 8009088:	2a00      	cmp	r2, #0
 800908a:	d1c9      	bne.n	8009020 <quorem+0x9c>
 800908c:	3c01      	subs	r4, #1
 800908e:	e7c4      	b.n	800901a <quorem+0x96>
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	3b04      	subs	r3, #4
 8009094:	2a00      	cmp	r2, #0
 8009096:	d1ef      	bne.n	8009078 <quorem+0xf4>
 8009098:	3c01      	subs	r4, #1
 800909a:	e7ea      	b.n	8009072 <quorem+0xee>
 800909c:	2000      	movs	r0, #0
 800909e:	e7ee      	b.n	800907e <quorem+0xfa>

080090a0 <_dtoa_r>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	4616      	mov	r6, r2
 80090a6:	461f      	mov	r7, r3
 80090a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090aa:	b095      	sub	sp, #84	; 0x54
 80090ac:	4604      	mov	r4, r0
 80090ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80090b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80090b6:	b93d      	cbnz	r5, 80090c8 <_dtoa_r+0x28>
 80090b8:	2010      	movs	r0, #16
 80090ba:	f001 f9ab 	bl	800a414 <malloc>
 80090be:	6260      	str	r0, [r4, #36]	; 0x24
 80090c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090c4:	6005      	str	r5, [r0, #0]
 80090c6:	60c5      	str	r5, [r0, #12]
 80090c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ca:	6819      	ldr	r1, [r3, #0]
 80090cc:	b151      	cbz	r1, 80090e4 <_dtoa_r+0x44>
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	2301      	movs	r3, #1
 80090d2:	4093      	lsls	r3, r2
 80090d4:	604a      	str	r2, [r1, #4]
 80090d6:	608b      	str	r3, [r1, #8]
 80090d8:	4620      	mov	r0, r4
 80090da:	f001 fa02 	bl	800a4e2 <_Bfree>
 80090de:	2200      	movs	r2, #0
 80090e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	1e3b      	subs	r3, r7, #0
 80090e6:	bfaf      	iteee	ge
 80090e8:	2300      	movge	r3, #0
 80090ea:	2201      	movlt	r2, #1
 80090ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090f0:	9303      	strlt	r3, [sp, #12]
 80090f2:	bfac      	ite	ge
 80090f4:	f8c8 3000 	strge.w	r3, [r8]
 80090f8:	f8c8 2000 	strlt.w	r2, [r8]
 80090fc:	4bae      	ldr	r3, [pc, #696]	; (80093b8 <_dtoa_r+0x318>)
 80090fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009102:	ea33 0308 	bics.w	r3, r3, r8
 8009106:	d11b      	bne.n	8009140 <_dtoa_r+0xa0>
 8009108:	f242 730f 	movw	r3, #9999	; 0x270f
 800910c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	b923      	cbnz	r3, 800911e <_dtoa_r+0x7e>
 8009114:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009118:	2800      	cmp	r0, #0
 800911a:	f000 8545 	beq.w	8009ba8 <_dtoa_r+0xb08>
 800911e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009120:	b953      	cbnz	r3, 8009138 <_dtoa_r+0x98>
 8009122:	4ba6      	ldr	r3, [pc, #664]	; (80093bc <_dtoa_r+0x31c>)
 8009124:	e021      	b.n	800916a <_dtoa_r+0xca>
 8009126:	4ba6      	ldr	r3, [pc, #664]	; (80093c0 <_dtoa_r+0x320>)
 8009128:	9306      	str	r3, [sp, #24]
 800912a:	3308      	adds	r3, #8
 800912c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	9806      	ldr	r0, [sp, #24]
 8009132:	b015      	add	sp, #84	; 0x54
 8009134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009138:	4ba0      	ldr	r3, [pc, #640]	; (80093bc <_dtoa_r+0x31c>)
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	3303      	adds	r3, #3
 800913e:	e7f5      	b.n	800912c <_dtoa_r+0x8c>
 8009140:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 8009150:	4682      	mov	sl, r0
 8009152:	b160      	cbz	r0, 800916e <_dtoa_r+0xce>
 8009154:	2301      	movs	r3, #1
 8009156:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 8520 	beq.w	8009ba2 <_dtoa_r+0xb02>
 8009162:	4b98      	ldr	r3, [pc, #608]	; (80093c4 <_dtoa_r+0x324>)
 8009164:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	3b01      	subs	r3, #1
 800916a:	9306      	str	r3, [sp, #24]
 800916c:	e7e0      	b.n	8009130 <_dtoa_r+0x90>
 800916e:	ab12      	add	r3, sp, #72	; 0x48
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	ab13      	add	r3, sp, #76	; 0x4c
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	4620      	mov	r0, r4
 800917c:	f001 fcbe 	bl	800aafc <__d2b>
 8009180:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009184:	4683      	mov	fp, r0
 8009186:	2d00      	cmp	r5, #0
 8009188:	d07d      	beq.n	8009286 <_dtoa_r+0x1e6>
 800918a:	46b0      	mov	r8, r6
 800918c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009190:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009194:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009198:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800919c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80091a0:	2200      	movs	r2, #0
 80091a2:	4b89      	ldr	r3, [pc, #548]	; (80093c8 <_dtoa_r+0x328>)
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f6 ffde 	bl	8000168 <__aeabi_dsub>
 80091ac:	a37c      	add	r3, pc, #496	; (adr r3, 80093a0 <_dtoa_r+0x300>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 f991 	bl	80004d8 <__aeabi_dmul>
 80091b6:	a37c      	add	r3, pc, #496	; (adr r3, 80093a8 <_dtoa_r+0x308>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f7f6 ffd6 	bl	800016c <__adddf3>
 80091c0:	4606      	mov	r6, r0
 80091c2:	4628      	mov	r0, r5
 80091c4:	460f      	mov	r7, r1
 80091c6:	f7f7 f91d 	bl	8000404 <__aeabi_i2d>
 80091ca:	a379      	add	r3, pc, #484	; (adr r3, 80093b0 <_dtoa_r+0x310>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 f982 	bl	80004d8 <__aeabi_dmul>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f6 ffc6 	bl	800016c <__adddf3>
 80091e0:	4606      	mov	r6, r0
 80091e2:	460f      	mov	r7, r1
 80091e4:	f7f7 fc28 	bl	8000a38 <__aeabi_d2iz>
 80091e8:	2200      	movs	r2, #0
 80091ea:	4682      	mov	sl, r0
 80091ec:	2300      	movs	r3, #0
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 fbe3 	bl	80009bc <__aeabi_dcmplt>
 80091f6:	b148      	cbz	r0, 800920c <_dtoa_r+0x16c>
 80091f8:	4650      	mov	r0, sl
 80091fa:	f7f7 f903 	bl	8000404 <__aeabi_i2d>
 80091fe:	4632      	mov	r2, r6
 8009200:	463b      	mov	r3, r7
 8009202:	f7f7 fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 8009206:	b908      	cbnz	r0, 800920c <_dtoa_r+0x16c>
 8009208:	f10a 3aff 	add.w	sl, sl, #4294967295
 800920c:	f1ba 0f16 	cmp.w	sl, #22
 8009210:	d85a      	bhi.n	80092c8 <_dtoa_r+0x228>
 8009212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009216:	496d      	ldr	r1, [pc, #436]	; (80093cc <_dtoa_r+0x32c>)
 8009218:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800921c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009220:	f7f7 fbea 	bl	80009f8 <__aeabi_dcmpgt>
 8009224:	2800      	cmp	r0, #0
 8009226:	d051      	beq.n	80092cc <_dtoa_r+0x22c>
 8009228:	2300      	movs	r3, #0
 800922a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800922e:	930d      	str	r3, [sp, #52]	; 0x34
 8009230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009232:	1b5d      	subs	r5, r3, r5
 8009234:	1e6b      	subs	r3, r5, #1
 8009236:	9307      	str	r3, [sp, #28]
 8009238:	bf43      	ittte	mi
 800923a:	2300      	movmi	r3, #0
 800923c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009240:	9307      	strmi	r3, [sp, #28]
 8009242:	f04f 0900 	movpl.w	r9, #0
 8009246:	f1ba 0f00 	cmp.w	sl, #0
 800924a:	db41      	blt.n	80092d0 <_dtoa_r+0x230>
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009252:	4453      	add	r3, sl
 8009254:	9307      	str	r3, [sp, #28]
 8009256:	2300      	movs	r3, #0
 8009258:	9308      	str	r3, [sp, #32]
 800925a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800925c:	2b09      	cmp	r3, #9
 800925e:	f200 808f 	bhi.w	8009380 <_dtoa_r+0x2e0>
 8009262:	2b05      	cmp	r3, #5
 8009264:	bfc4      	itt	gt
 8009266:	3b04      	subgt	r3, #4
 8009268:	931e      	strgt	r3, [sp, #120]	; 0x78
 800926a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800926c:	bfc8      	it	gt
 800926e:	2500      	movgt	r5, #0
 8009270:	f1a3 0302 	sub.w	r3, r3, #2
 8009274:	bfd8      	it	le
 8009276:	2501      	movle	r5, #1
 8009278:	2b03      	cmp	r3, #3
 800927a:	f200 808d 	bhi.w	8009398 <_dtoa_r+0x2f8>
 800927e:	e8df f003 	tbb	[pc, r3]
 8009282:	7d7b      	.short	0x7d7b
 8009284:	6f2f      	.short	0x6f2f
 8009286:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800928a:	441d      	add	r5, r3
 800928c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009290:	2820      	cmp	r0, #32
 8009292:	dd13      	ble.n	80092bc <_dtoa_r+0x21c>
 8009294:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	fa08 f800 	lsl.w	r8, r8, r0
 800929e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80092a2:	fa23 f000 	lsr.w	r0, r3, r0
 80092a6:	ea48 0000 	orr.w	r0, r8, r0
 80092aa:	f7f7 f89b 	bl	80003e4 <__aeabi_ui2d>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4680      	mov	r8, r0
 80092b2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80092b6:	3d01      	subs	r5, #1
 80092b8:	9310      	str	r3, [sp, #64]	; 0x40
 80092ba:	e771      	b.n	80091a0 <_dtoa_r+0x100>
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	f1c0 0020 	rsb	r0, r0, #32
 80092c2:	fa03 f000 	lsl.w	r0, r3, r0
 80092c6:	e7f0      	b.n	80092aa <_dtoa_r+0x20a>
 80092c8:	2301      	movs	r3, #1
 80092ca:	e7b0      	b.n	800922e <_dtoa_r+0x18e>
 80092cc:	900d      	str	r0, [sp, #52]	; 0x34
 80092ce:	e7af      	b.n	8009230 <_dtoa_r+0x190>
 80092d0:	f1ca 0300 	rsb	r3, sl, #0
 80092d4:	9308      	str	r3, [sp, #32]
 80092d6:	2300      	movs	r3, #0
 80092d8:	eba9 090a 	sub.w	r9, r9, sl
 80092dc:	930c      	str	r3, [sp, #48]	; 0x30
 80092de:	e7bc      	b.n	800925a <_dtoa_r+0x1ba>
 80092e0:	2301      	movs	r3, #1
 80092e2:	9309      	str	r3, [sp, #36]	; 0x24
 80092e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	dd74      	ble.n	80093d4 <_dtoa_r+0x334>
 80092ea:	4698      	mov	r8, r3
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	2200      	movs	r2, #0
 80092f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092f2:	6072      	str	r2, [r6, #4]
 80092f4:	2204      	movs	r2, #4
 80092f6:	f102 0014 	add.w	r0, r2, #20
 80092fa:	4298      	cmp	r0, r3
 80092fc:	6871      	ldr	r1, [r6, #4]
 80092fe:	d96e      	bls.n	80093de <_dtoa_r+0x33e>
 8009300:	4620      	mov	r0, r4
 8009302:	f001 f8ba 	bl	800a47a <_Balloc>
 8009306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009308:	6030      	str	r0, [r6, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f1b8 0f0e 	cmp.w	r8, #14
 8009310:	9306      	str	r3, [sp, #24]
 8009312:	f200 80ed 	bhi.w	80094f0 <_dtoa_r+0x450>
 8009316:	2d00      	cmp	r5, #0
 8009318:	f000 80ea 	beq.w	80094f0 <_dtoa_r+0x450>
 800931c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009320:	f1ba 0f00 	cmp.w	sl, #0
 8009324:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009328:	dd77      	ble.n	800941a <_dtoa_r+0x37a>
 800932a:	4a28      	ldr	r2, [pc, #160]	; (80093cc <_dtoa_r+0x32c>)
 800932c:	f00a 030f 	and.w	r3, sl, #15
 8009330:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009338:	06f0      	lsls	r0, r6, #27
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009342:	d568      	bpl.n	8009416 <_dtoa_r+0x376>
 8009344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009348:	4b21      	ldr	r3, [pc, #132]	; (80093d0 <_dtoa_r+0x330>)
 800934a:	2503      	movs	r5, #3
 800934c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009350:	f7f7 f9ec 	bl	800072c <__aeabi_ddiv>
 8009354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009358:	f006 060f 	and.w	r6, r6, #15
 800935c:	4f1c      	ldr	r7, [pc, #112]	; (80093d0 <_dtoa_r+0x330>)
 800935e:	e04f      	b.n	8009400 <_dtoa_r+0x360>
 8009360:	2301      	movs	r3, #1
 8009362:	9309      	str	r3, [sp, #36]	; 0x24
 8009364:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009366:	4453      	add	r3, sl
 8009368:	f103 0801 	add.w	r8, r3, #1
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	4643      	mov	r3, r8
 8009370:	2b01      	cmp	r3, #1
 8009372:	bfb8      	it	lt
 8009374:	2301      	movlt	r3, #1
 8009376:	e7ba      	b.n	80092ee <_dtoa_r+0x24e>
 8009378:	2300      	movs	r3, #0
 800937a:	e7b2      	b.n	80092e2 <_dtoa_r+0x242>
 800937c:	2300      	movs	r3, #0
 800937e:	e7f0      	b.n	8009362 <_dtoa_r+0x2c2>
 8009380:	2501      	movs	r5, #1
 8009382:	2300      	movs	r3, #0
 8009384:	9509      	str	r5, [sp, #36]	; 0x24
 8009386:	931e      	str	r3, [sp, #120]	; 0x78
 8009388:	f04f 33ff 	mov.w	r3, #4294967295
 800938c:	2200      	movs	r2, #0
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	4698      	mov	r8, r3
 8009392:	2312      	movs	r3, #18
 8009394:	921f      	str	r2, [sp, #124]	; 0x7c
 8009396:	e7aa      	b.n	80092ee <_dtoa_r+0x24e>
 8009398:	2301      	movs	r3, #1
 800939a:	9309      	str	r3, [sp, #36]	; 0x24
 800939c:	e7f4      	b.n	8009388 <_dtoa_r+0x2e8>
 800939e:	bf00      	nop
 80093a0:	636f4361 	.word	0x636f4361
 80093a4:	3fd287a7 	.word	0x3fd287a7
 80093a8:	8b60c8b3 	.word	0x8b60c8b3
 80093ac:	3fc68a28 	.word	0x3fc68a28
 80093b0:	509f79fb 	.word	0x509f79fb
 80093b4:	3fd34413 	.word	0x3fd34413
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	0800bbb1 	.word	0x0800bbb1
 80093c0:	0800bba8 	.word	0x0800bba8
 80093c4:	0800bb29 	.word	0x0800bb29
 80093c8:	3ff80000 	.word	0x3ff80000
 80093cc:	0800bc50 	.word	0x0800bc50
 80093d0:	0800bc28 	.word	0x0800bc28
 80093d4:	2301      	movs	r3, #1
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	4698      	mov	r8, r3
 80093da:	461a      	mov	r2, r3
 80093dc:	e7da      	b.n	8009394 <_dtoa_r+0x2f4>
 80093de:	3101      	adds	r1, #1
 80093e0:	6071      	str	r1, [r6, #4]
 80093e2:	0052      	lsls	r2, r2, #1
 80093e4:	e787      	b.n	80092f6 <_dtoa_r+0x256>
 80093e6:	07f1      	lsls	r1, r6, #31
 80093e8:	d508      	bpl.n	80093fc <_dtoa_r+0x35c>
 80093ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f2:	f7f7 f871 	bl	80004d8 <__aeabi_dmul>
 80093f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093fa:	3501      	adds	r5, #1
 80093fc:	1076      	asrs	r6, r6, #1
 80093fe:	3708      	adds	r7, #8
 8009400:	2e00      	cmp	r6, #0
 8009402:	d1f0      	bne.n	80093e6 <_dtoa_r+0x346>
 8009404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940c:	f7f7 f98e 	bl	800072c <__aeabi_ddiv>
 8009410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009414:	e01b      	b.n	800944e <_dtoa_r+0x3ae>
 8009416:	2502      	movs	r5, #2
 8009418:	e7a0      	b.n	800935c <_dtoa_r+0x2bc>
 800941a:	f000 80a4 	beq.w	8009566 <_dtoa_r+0x4c6>
 800941e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009422:	f1ca 0600 	rsb	r6, sl, #0
 8009426:	4ba0      	ldr	r3, [pc, #640]	; (80096a8 <_dtoa_r+0x608>)
 8009428:	f006 020f 	and.w	r2, r6, #15
 800942c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f7 f850 	bl	80004d8 <__aeabi_dmul>
 8009438:	2502      	movs	r5, #2
 800943a:	2300      	movs	r3, #0
 800943c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009440:	4f9a      	ldr	r7, [pc, #616]	; (80096ac <_dtoa_r+0x60c>)
 8009442:	1136      	asrs	r6, r6, #4
 8009444:	2e00      	cmp	r6, #0
 8009446:	f040 8083 	bne.w	8009550 <_dtoa_r+0x4b0>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e0      	bne.n	8009410 <_dtoa_r+0x370>
 800944e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 808a 	beq.w	800956a <_dtoa_r+0x4ca>
 8009456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800945a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800945e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009462:	2200      	movs	r2, #0
 8009464:	4b92      	ldr	r3, [pc, #584]	; (80096b0 <_dtoa_r+0x610>)
 8009466:	f7f7 faa9 	bl	80009bc <__aeabi_dcmplt>
 800946a:	2800      	cmp	r0, #0
 800946c:	d07d      	beq.n	800956a <_dtoa_r+0x4ca>
 800946e:	f1b8 0f00 	cmp.w	r8, #0
 8009472:	d07a      	beq.n	800956a <_dtoa_r+0x4ca>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd36      	ble.n	80094e8 <_dtoa_r+0x448>
 800947a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800947e:	2200      	movs	r2, #0
 8009480:	4b8c      	ldr	r3, [pc, #560]	; (80096b4 <_dtoa_r+0x614>)
 8009482:	f7f7 f829 	bl	80004d8 <__aeabi_dmul>
 8009486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800948a:	9e04      	ldr	r6, [sp, #16]
 800948c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009490:	3501      	adds	r5, #1
 8009492:	4628      	mov	r0, r5
 8009494:	f7f6 ffb6 	bl	8000404 <__aeabi_i2d>
 8009498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800949c:	f7f7 f81c 	bl	80004d8 <__aeabi_dmul>
 80094a0:	2200      	movs	r2, #0
 80094a2:	4b85      	ldr	r3, [pc, #532]	; (80096b8 <_dtoa_r+0x618>)
 80094a4:	f7f6 fe62 	bl	800016c <__adddf3>
 80094a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80094ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80094b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80094b2:	2e00      	cmp	r6, #0
 80094b4:	d15c      	bne.n	8009570 <_dtoa_r+0x4d0>
 80094b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ba:	2200      	movs	r2, #0
 80094bc:	4b7f      	ldr	r3, [pc, #508]	; (80096bc <_dtoa_r+0x61c>)
 80094be:	f7f6 fe53 	bl	8000168 <__aeabi_dsub>
 80094c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c4:	462b      	mov	r3, r5
 80094c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ca:	f7f7 fa95 	bl	80009f8 <__aeabi_dcmpgt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f040 8281 	bne.w	80099d6 <_dtoa_r+0x936>
 80094d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80094de:	f7f7 fa6d 	bl	80009bc <__aeabi_dcmplt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f040 8275 	bne.w	80099d2 <_dtoa_r+0x932>
 80094e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80094ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f2c0 814b 	blt.w	800978e <_dtoa_r+0x6ee>
 80094f8:	f1ba 0f0e 	cmp.w	sl, #14
 80094fc:	f300 8147 	bgt.w	800978e <_dtoa_r+0x6ee>
 8009500:	4b69      	ldr	r3, [pc, #420]	; (80096a8 <_dtoa_r+0x608>)
 8009502:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800950e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009510:	2b00      	cmp	r3, #0
 8009512:	f280 80d7 	bge.w	80096c4 <_dtoa_r+0x624>
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	f300 80d3 	bgt.w	80096c4 <_dtoa_r+0x624>
 800951e:	f040 8257 	bne.w	80099d0 <_dtoa_r+0x930>
 8009522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009526:	2200      	movs	r2, #0
 8009528:	4b64      	ldr	r3, [pc, #400]	; (80096bc <_dtoa_r+0x61c>)
 800952a:	f7f6 ffd5 	bl	80004d8 <__aeabi_dmul>
 800952e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009532:	f7f7 fa57 	bl	80009e4 <__aeabi_dcmpge>
 8009536:	4646      	mov	r6, r8
 8009538:	4647      	mov	r7, r8
 800953a:	2800      	cmp	r0, #0
 800953c:	f040 822d 	bne.w	800999a <_dtoa_r+0x8fa>
 8009540:	9b06      	ldr	r3, [sp, #24]
 8009542:	9a06      	ldr	r2, [sp, #24]
 8009544:	1c5d      	adds	r5, r3, #1
 8009546:	2331      	movs	r3, #49	; 0x31
 8009548:	f10a 0a01 	add.w	sl, sl, #1
 800954c:	7013      	strb	r3, [r2, #0]
 800954e:	e228      	b.n	80099a2 <_dtoa_r+0x902>
 8009550:	07f2      	lsls	r2, r6, #31
 8009552:	d505      	bpl.n	8009560 <_dtoa_r+0x4c0>
 8009554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009558:	f7f6 ffbe 	bl	80004d8 <__aeabi_dmul>
 800955c:	2301      	movs	r3, #1
 800955e:	3501      	adds	r5, #1
 8009560:	1076      	asrs	r6, r6, #1
 8009562:	3708      	adds	r7, #8
 8009564:	e76e      	b.n	8009444 <_dtoa_r+0x3a4>
 8009566:	2502      	movs	r5, #2
 8009568:	e771      	b.n	800944e <_dtoa_r+0x3ae>
 800956a:	4657      	mov	r7, sl
 800956c:	4646      	mov	r6, r8
 800956e:	e790      	b.n	8009492 <_dtoa_r+0x3f2>
 8009570:	4b4d      	ldr	r3, [pc, #308]	; (80096a8 <_dtoa_r+0x608>)
 8009572:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009576:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800957a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d048      	beq.n	8009612 <_dtoa_r+0x572>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	2000      	movs	r0, #0
 8009586:	494e      	ldr	r1, [pc, #312]	; (80096c0 <_dtoa_r+0x620>)
 8009588:	f7f7 f8d0 	bl	800072c <__aeabi_ddiv>
 800958c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009590:	f7f6 fdea 	bl	8000168 <__aeabi_dsub>
 8009594:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009598:	9d06      	ldr	r5, [sp, #24]
 800959a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959e:	f7f7 fa4b 	bl	8000a38 <__aeabi_d2iz>
 80095a2:	9011      	str	r0, [sp, #68]	; 0x44
 80095a4:	f7f6 ff2e 	bl	8000404 <__aeabi_i2d>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b0:	f7f6 fdda 	bl	8000168 <__aeabi_dsub>
 80095b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ba:	3330      	adds	r3, #48	; 0x30
 80095bc:	f805 3b01 	strb.w	r3, [r5], #1
 80095c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095c4:	f7f7 f9fa 	bl	80009bc <__aeabi_dcmplt>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d163      	bne.n	8009694 <_dtoa_r+0x5f4>
 80095cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d0:	2000      	movs	r0, #0
 80095d2:	4937      	ldr	r1, [pc, #220]	; (80096b0 <_dtoa_r+0x610>)
 80095d4:	f7f6 fdc8 	bl	8000168 <__aeabi_dsub>
 80095d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095dc:	f7f7 f9ee 	bl	80009bc <__aeabi_dcmplt>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	f040 80b5 	bne.w	8009750 <_dtoa_r+0x6b0>
 80095e6:	9b06      	ldr	r3, [sp, #24]
 80095e8:	1aeb      	subs	r3, r5, r3
 80095ea:	429e      	cmp	r6, r3
 80095ec:	f77f af7c 	ble.w	80094e8 <_dtoa_r+0x448>
 80095f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095f4:	2200      	movs	r2, #0
 80095f6:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <_dtoa_r+0x614>)
 80095f8:	f7f6 ff6e 	bl	80004d8 <__aeabi_dmul>
 80095fc:	2200      	movs	r2, #0
 80095fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009606:	4b2b      	ldr	r3, [pc, #172]	; (80096b4 <_dtoa_r+0x614>)
 8009608:	f7f6 ff66 	bl	80004d8 <__aeabi_dmul>
 800960c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009610:	e7c3      	b.n	800959a <_dtoa_r+0x4fa>
 8009612:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009616:	f7f6 ff5f 	bl	80004d8 <__aeabi_dmul>
 800961a:	9b06      	ldr	r3, [sp, #24]
 800961c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009620:	199d      	adds	r5, r3, r6
 8009622:	461e      	mov	r6, r3
 8009624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009628:	f7f7 fa06 	bl	8000a38 <__aeabi_d2iz>
 800962c:	9011      	str	r0, [sp, #68]	; 0x44
 800962e:	f7f6 fee9 	bl	8000404 <__aeabi_i2d>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800963a:	f7f6 fd95 	bl	8000168 <__aeabi_dsub>
 800963e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009644:	3330      	adds	r3, #48	; 0x30
 8009646:	f806 3b01 	strb.w	r3, [r6], #1
 800964a:	42ae      	cmp	r6, r5
 800964c:	f04f 0200 	mov.w	r2, #0
 8009650:	d124      	bne.n	800969c <_dtoa_r+0x5fc>
 8009652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009656:	4b1a      	ldr	r3, [pc, #104]	; (80096c0 <_dtoa_r+0x620>)
 8009658:	f7f6 fd88 	bl	800016c <__adddf3>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009664:	f7f7 f9c8 	bl	80009f8 <__aeabi_dcmpgt>
 8009668:	2800      	cmp	r0, #0
 800966a:	d171      	bne.n	8009750 <_dtoa_r+0x6b0>
 800966c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009670:	2000      	movs	r0, #0
 8009672:	4913      	ldr	r1, [pc, #76]	; (80096c0 <_dtoa_r+0x620>)
 8009674:	f7f6 fd78 	bl	8000168 <__aeabi_dsub>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009680:	f7f7 f99c 	bl	80009bc <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	f43f af2f 	beq.w	80094e8 <_dtoa_r+0x448>
 800968a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800968e:	1e6a      	subs	r2, r5, #1
 8009690:	2b30      	cmp	r3, #48	; 0x30
 8009692:	d001      	beq.n	8009698 <_dtoa_r+0x5f8>
 8009694:	46ba      	mov	sl, r7
 8009696:	e04a      	b.n	800972e <_dtoa_r+0x68e>
 8009698:	4615      	mov	r5, r2
 800969a:	e7f6      	b.n	800968a <_dtoa_r+0x5ea>
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <_dtoa_r+0x614>)
 800969e:	f7f6 ff1b 	bl	80004d8 <__aeabi_dmul>
 80096a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a6:	e7bd      	b.n	8009624 <_dtoa_r+0x584>
 80096a8:	0800bc50 	.word	0x0800bc50
 80096ac:	0800bc28 	.word	0x0800bc28
 80096b0:	3ff00000 	.word	0x3ff00000
 80096b4:	40240000 	.word	0x40240000
 80096b8:	401c0000 	.word	0x401c0000
 80096bc:	40140000 	.word	0x40140000
 80096c0:	3fe00000 	.word	0x3fe00000
 80096c4:	9d06      	ldr	r5, [sp, #24]
 80096c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ce:	4630      	mov	r0, r6
 80096d0:	4639      	mov	r1, r7
 80096d2:	f7f7 f82b 	bl	800072c <__aeabi_ddiv>
 80096d6:	f7f7 f9af 	bl	8000a38 <__aeabi_d2iz>
 80096da:	4681      	mov	r9, r0
 80096dc:	f7f6 fe92 	bl	8000404 <__aeabi_i2d>
 80096e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e4:	f7f6 fef8 	bl	80004d8 <__aeabi_dmul>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f6 fd3a 	bl	8000168 <__aeabi_dsub>
 80096f4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80096f8:	f805 6b01 	strb.w	r6, [r5], #1
 80096fc:	9e06      	ldr	r6, [sp, #24]
 80096fe:	4602      	mov	r2, r0
 8009700:	1bae      	subs	r6, r5, r6
 8009702:	45b0      	cmp	r8, r6
 8009704:	460b      	mov	r3, r1
 8009706:	d135      	bne.n	8009774 <_dtoa_r+0x6d4>
 8009708:	f7f6 fd30 	bl	800016c <__adddf3>
 800970c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	f7f7 f970 	bl	80009f8 <__aeabi_dcmpgt>
 8009718:	b9c8      	cbnz	r0, 800974e <_dtoa_r+0x6ae>
 800971a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	f7f7 f941 	bl	80009a8 <__aeabi_dcmpeq>
 8009726:	b110      	cbz	r0, 800972e <_dtoa_r+0x68e>
 8009728:	f019 0f01 	tst.w	r9, #1
 800972c:	d10f      	bne.n	800974e <_dtoa_r+0x6ae>
 800972e:	4659      	mov	r1, fp
 8009730:	4620      	mov	r0, r4
 8009732:	f000 fed6 	bl	800a4e2 <_Bfree>
 8009736:	2300      	movs	r3, #0
 8009738:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800973a:	702b      	strb	r3, [r5, #0]
 800973c:	f10a 0301 	add.w	r3, sl, #1
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009744:	2b00      	cmp	r3, #0
 8009746:	f43f acf3 	beq.w	8009130 <_dtoa_r+0x90>
 800974a:	601d      	str	r5, [r3, #0]
 800974c:	e4f0      	b.n	8009130 <_dtoa_r+0x90>
 800974e:	4657      	mov	r7, sl
 8009750:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009754:	1e6b      	subs	r3, r5, #1
 8009756:	2a39      	cmp	r2, #57	; 0x39
 8009758:	d106      	bne.n	8009768 <_dtoa_r+0x6c8>
 800975a:	9a06      	ldr	r2, [sp, #24]
 800975c:	429a      	cmp	r2, r3
 800975e:	d107      	bne.n	8009770 <_dtoa_r+0x6d0>
 8009760:	2330      	movs	r3, #48	; 0x30
 8009762:	7013      	strb	r3, [r2, #0]
 8009764:	4613      	mov	r3, r2
 8009766:	3701      	adds	r7, #1
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	3201      	adds	r2, #1
 800976c:	701a      	strb	r2, [r3, #0]
 800976e:	e791      	b.n	8009694 <_dtoa_r+0x5f4>
 8009770:	461d      	mov	r5, r3
 8009772:	e7ed      	b.n	8009750 <_dtoa_r+0x6b0>
 8009774:	2200      	movs	r2, #0
 8009776:	4b99      	ldr	r3, [pc, #612]	; (80099dc <_dtoa_r+0x93c>)
 8009778:	f7f6 feae 	bl	80004d8 <__aeabi_dmul>
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4606      	mov	r6, r0
 8009782:	460f      	mov	r7, r1
 8009784:	f7f7 f910 	bl	80009a8 <__aeabi_dcmpeq>
 8009788:	2800      	cmp	r0, #0
 800978a:	d09e      	beq.n	80096ca <_dtoa_r+0x62a>
 800978c:	e7cf      	b.n	800972e <_dtoa_r+0x68e>
 800978e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009790:	2a00      	cmp	r2, #0
 8009792:	f000 8088 	beq.w	80098a6 <_dtoa_r+0x806>
 8009796:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009798:	2a01      	cmp	r2, #1
 800979a:	dc6d      	bgt.n	8009878 <_dtoa_r+0x7d8>
 800979c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800979e:	2a00      	cmp	r2, #0
 80097a0:	d066      	beq.n	8009870 <_dtoa_r+0x7d0>
 80097a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097a6:	464d      	mov	r5, r9
 80097a8:	9e08      	ldr	r6, [sp, #32]
 80097aa:	9a07      	ldr	r2, [sp, #28]
 80097ac:	2101      	movs	r1, #1
 80097ae:	441a      	add	r2, r3
 80097b0:	4620      	mov	r0, r4
 80097b2:	4499      	add	r9, r3
 80097b4:	9207      	str	r2, [sp, #28]
 80097b6:	f000 ff72 	bl	800a69e <__i2b>
 80097ba:	4607      	mov	r7, r0
 80097bc:	2d00      	cmp	r5, #0
 80097be:	dd0b      	ble.n	80097d8 <_dtoa_r+0x738>
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dd08      	ble.n	80097d8 <_dtoa_r+0x738>
 80097c6:	42ab      	cmp	r3, r5
 80097c8:	bfa8      	it	ge
 80097ca:	462b      	movge	r3, r5
 80097cc:	9a07      	ldr	r2, [sp, #28]
 80097ce:	eba9 0903 	sub.w	r9, r9, r3
 80097d2:	1aed      	subs	r5, r5, r3
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	9307      	str	r3, [sp, #28]
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	b1eb      	cbz	r3, 8009818 <_dtoa_r+0x778>
 80097dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d065      	beq.n	80098ae <_dtoa_r+0x80e>
 80097e2:	b18e      	cbz	r6, 8009808 <_dtoa_r+0x768>
 80097e4:	4639      	mov	r1, r7
 80097e6:	4632      	mov	r2, r6
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fff7 	bl	800a7dc <__pow5mult>
 80097ee:	465a      	mov	r2, fp
 80097f0:	4601      	mov	r1, r0
 80097f2:	4607      	mov	r7, r0
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 ff5b 	bl	800a6b0 <__multiply>
 80097fa:	4659      	mov	r1, fp
 80097fc:	900a      	str	r0, [sp, #40]	; 0x28
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 fe6f 	bl	800a4e2 <_Bfree>
 8009804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009806:	469b      	mov	fp, r3
 8009808:	9b08      	ldr	r3, [sp, #32]
 800980a:	1b9a      	subs	r2, r3, r6
 800980c:	d004      	beq.n	8009818 <_dtoa_r+0x778>
 800980e:	4659      	mov	r1, fp
 8009810:	4620      	mov	r0, r4
 8009812:	f000 ffe3 	bl	800a7dc <__pow5mult>
 8009816:	4683      	mov	fp, r0
 8009818:	2101      	movs	r1, #1
 800981a:	4620      	mov	r0, r4
 800981c:	f000 ff3f 	bl	800a69e <__i2b>
 8009820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009822:	4606      	mov	r6, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 81c6 	beq.w	8009bb6 <_dtoa_r+0xb16>
 800982a:	461a      	mov	r2, r3
 800982c:	4601      	mov	r1, r0
 800982e:	4620      	mov	r0, r4
 8009830:	f000 ffd4 	bl	800a7dc <__pow5mult>
 8009834:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009836:	4606      	mov	r6, r0
 8009838:	2b01      	cmp	r3, #1
 800983a:	dc3e      	bgt.n	80098ba <_dtoa_r+0x81a>
 800983c:	9b02      	ldr	r3, [sp, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d137      	bne.n	80098b2 <_dtoa_r+0x812>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009848:	2b00      	cmp	r3, #0
 800984a:	d134      	bne.n	80098b6 <_dtoa_r+0x816>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009852:	0d1b      	lsrs	r3, r3, #20
 8009854:	051b      	lsls	r3, r3, #20
 8009856:	b12b      	cbz	r3, 8009864 <_dtoa_r+0x7c4>
 8009858:	9b07      	ldr	r3, [sp, #28]
 800985a:	f109 0901 	add.w	r9, r9, #1
 800985e:	3301      	adds	r3, #1
 8009860:	9307      	str	r3, [sp, #28]
 8009862:	2301      	movs	r3, #1
 8009864:	9308      	str	r3, [sp, #32]
 8009866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009868:	2b00      	cmp	r3, #0
 800986a:	d128      	bne.n	80098be <_dtoa_r+0x81e>
 800986c:	2001      	movs	r0, #1
 800986e:	e02e      	b.n	80098ce <_dtoa_r+0x82e>
 8009870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009872:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009876:	e796      	b.n	80097a6 <_dtoa_r+0x706>
 8009878:	9b08      	ldr	r3, [sp, #32]
 800987a:	f108 36ff 	add.w	r6, r8, #4294967295
 800987e:	42b3      	cmp	r3, r6
 8009880:	bfb7      	itett	lt
 8009882:	9b08      	ldrlt	r3, [sp, #32]
 8009884:	1b9e      	subge	r6, r3, r6
 8009886:	1af2      	sublt	r2, r6, r3
 8009888:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800988a:	bfbf      	itttt	lt
 800988c:	9608      	strlt	r6, [sp, #32]
 800988e:	189b      	addlt	r3, r3, r2
 8009890:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009892:	2600      	movlt	r6, #0
 8009894:	f1b8 0f00 	cmp.w	r8, #0
 8009898:	bfb9      	ittee	lt
 800989a:	eba9 0508 	sublt.w	r5, r9, r8
 800989e:	2300      	movlt	r3, #0
 80098a0:	464d      	movge	r5, r9
 80098a2:	4643      	movge	r3, r8
 80098a4:	e781      	b.n	80097aa <_dtoa_r+0x70a>
 80098a6:	9e08      	ldr	r6, [sp, #32]
 80098a8:	464d      	mov	r5, r9
 80098aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80098ac:	e786      	b.n	80097bc <_dtoa_r+0x71c>
 80098ae:	9a08      	ldr	r2, [sp, #32]
 80098b0:	e7ad      	b.n	800980e <_dtoa_r+0x76e>
 80098b2:	2300      	movs	r3, #0
 80098b4:	e7d6      	b.n	8009864 <_dtoa_r+0x7c4>
 80098b6:	9b02      	ldr	r3, [sp, #8]
 80098b8:	e7d4      	b.n	8009864 <_dtoa_r+0x7c4>
 80098ba:	2300      	movs	r3, #0
 80098bc:	9308      	str	r3, [sp, #32]
 80098be:	6933      	ldr	r3, [r6, #16]
 80098c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098c4:	6918      	ldr	r0, [r3, #16]
 80098c6:	f000 fe9c 	bl	800a602 <__hi0bits>
 80098ca:	f1c0 0020 	rsb	r0, r0, #32
 80098ce:	9b07      	ldr	r3, [sp, #28]
 80098d0:	4418      	add	r0, r3
 80098d2:	f010 001f 	ands.w	r0, r0, #31
 80098d6:	d047      	beq.n	8009968 <_dtoa_r+0x8c8>
 80098d8:	f1c0 0320 	rsb	r3, r0, #32
 80098dc:	2b04      	cmp	r3, #4
 80098de:	dd3b      	ble.n	8009958 <_dtoa_r+0x8b8>
 80098e0:	9b07      	ldr	r3, [sp, #28]
 80098e2:	f1c0 001c 	rsb	r0, r0, #28
 80098e6:	4481      	add	r9, r0
 80098e8:	4405      	add	r5, r0
 80098ea:	4403      	add	r3, r0
 80098ec:	9307      	str	r3, [sp, #28]
 80098ee:	f1b9 0f00 	cmp.w	r9, #0
 80098f2:	dd05      	ble.n	8009900 <_dtoa_r+0x860>
 80098f4:	4659      	mov	r1, fp
 80098f6:	464a      	mov	r2, r9
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 ffbd 	bl	800a878 <__lshift>
 80098fe:	4683      	mov	fp, r0
 8009900:	9b07      	ldr	r3, [sp, #28]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dd05      	ble.n	8009912 <_dtoa_r+0x872>
 8009906:	4631      	mov	r1, r6
 8009908:	461a      	mov	r2, r3
 800990a:	4620      	mov	r0, r4
 800990c:	f000 ffb4 	bl	800a878 <__lshift>
 8009910:	4606      	mov	r6, r0
 8009912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009914:	b353      	cbz	r3, 800996c <_dtoa_r+0x8cc>
 8009916:	4631      	mov	r1, r6
 8009918:	4658      	mov	r0, fp
 800991a:	f001 f801 	bl	800a920 <__mcmp>
 800991e:	2800      	cmp	r0, #0
 8009920:	da24      	bge.n	800996c <_dtoa_r+0x8cc>
 8009922:	2300      	movs	r3, #0
 8009924:	4659      	mov	r1, fp
 8009926:	220a      	movs	r2, #10
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fdf1 	bl	800a510 <__multadd>
 800992e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009930:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009934:	4683      	mov	fp, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8144 	beq.w	8009bc4 <_dtoa_r+0xb24>
 800993c:	2300      	movs	r3, #0
 800993e:	4639      	mov	r1, r7
 8009940:	220a      	movs	r2, #10
 8009942:	4620      	mov	r0, r4
 8009944:	f000 fde4 	bl	800a510 <__multadd>
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	4607      	mov	r7, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	dc4d      	bgt.n	80099ec <_dtoa_r+0x94c>
 8009950:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009952:	2b02      	cmp	r3, #2
 8009954:	dd4a      	ble.n	80099ec <_dtoa_r+0x94c>
 8009956:	e011      	b.n	800997c <_dtoa_r+0x8dc>
 8009958:	d0c9      	beq.n	80098ee <_dtoa_r+0x84e>
 800995a:	9a07      	ldr	r2, [sp, #28]
 800995c:	331c      	adds	r3, #28
 800995e:	441a      	add	r2, r3
 8009960:	4499      	add	r9, r3
 8009962:	441d      	add	r5, r3
 8009964:	4613      	mov	r3, r2
 8009966:	e7c1      	b.n	80098ec <_dtoa_r+0x84c>
 8009968:	4603      	mov	r3, r0
 800996a:	e7f6      	b.n	800995a <_dtoa_r+0x8ba>
 800996c:	f1b8 0f00 	cmp.w	r8, #0
 8009970:	dc36      	bgt.n	80099e0 <_dtoa_r+0x940>
 8009972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009974:	2b02      	cmp	r3, #2
 8009976:	dd33      	ble.n	80099e0 <_dtoa_r+0x940>
 8009978:	f8cd 8010 	str.w	r8, [sp, #16]
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	b963      	cbnz	r3, 800999a <_dtoa_r+0x8fa>
 8009980:	4631      	mov	r1, r6
 8009982:	2205      	movs	r2, #5
 8009984:	4620      	mov	r0, r4
 8009986:	f000 fdc3 	bl	800a510 <__multadd>
 800998a:	4601      	mov	r1, r0
 800998c:	4606      	mov	r6, r0
 800998e:	4658      	mov	r0, fp
 8009990:	f000 ffc6 	bl	800a920 <__mcmp>
 8009994:	2800      	cmp	r0, #0
 8009996:	f73f add3 	bgt.w	8009540 <_dtoa_r+0x4a0>
 800999a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800999c:	9d06      	ldr	r5, [sp, #24]
 800999e:	ea6f 0a03 	mvn.w	sl, r3
 80099a2:	f04f 0900 	mov.w	r9, #0
 80099a6:	4631      	mov	r1, r6
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fd9a 	bl	800a4e2 <_Bfree>
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	f43f aebd 	beq.w	800972e <_dtoa_r+0x68e>
 80099b4:	f1b9 0f00 	cmp.w	r9, #0
 80099b8:	d005      	beq.n	80099c6 <_dtoa_r+0x926>
 80099ba:	45b9      	cmp	r9, r7
 80099bc:	d003      	beq.n	80099c6 <_dtoa_r+0x926>
 80099be:	4649      	mov	r1, r9
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fd8e 	bl	800a4e2 <_Bfree>
 80099c6:	4639      	mov	r1, r7
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fd8a 	bl	800a4e2 <_Bfree>
 80099ce:	e6ae      	b.n	800972e <_dtoa_r+0x68e>
 80099d0:	2600      	movs	r6, #0
 80099d2:	4637      	mov	r7, r6
 80099d4:	e7e1      	b.n	800999a <_dtoa_r+0x8fa>
 80099d6:	46ba      	mov	sl, r7
 80099d8:	4637      	mov	r7, r6
 80099da:	e5b1      	b.n	8009540 <_dtoa_r+0x4a0>
 80099dc:	40240000 	.word	0x40240000
 80099e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80f3 	beq.w	8009bd2 <_dtoa_r+0xb32>
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	dd05      	ble.n	80099fc <_dtoa_r+0x95c>
 80099f0:	4639      	mov	r1, r7
 80099f2:	462a      	mov	r2, r5
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 ff3f 	bl	800a878 <__lshift>
 80099fa:	4607      	mov	r7, r0
 80099fc:	9b08      	ldr	r3, [sp, #32]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d04c      	beq.n	8009a9c <_dtoa_r+0x9fc>
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fd38 	bl	800a47a <_Balloc>
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	f107 010c 	add.w	r1, r7, #12
 8009a12:	3202      	adds	r2, #2
 8009a14:	0092      	lsls	r2, r2, #2
 8009a16:	300c      	adds	r0, #12
 8009a18:	f000 fd24 	bl	800a464 <memcpy>
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 ff29 	bl	800a878 <__lshift>
 8009a26:	46b9      	mov	r9, r7
 8009a28:	4607      	mov	r7, r0
 8009a2a:	9b06      	ldr	r3, [sp, #24]
 8009a2c:	9307      	str	r3, [sp, #28]
 8009a2e:	9b02      	ldr	r3, [sp, #8]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	9308      	str	r3, [sp, #32]
 8009a36:	4631      	mov	r1, r6
 8009a38:	4658      	mov	r0, fp
 8009a3a:	f7ff faa3 	bl	8008f84 <quorem>
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4605      	mov	r5, r0
 8009a42:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a46:	4658      	mov	r0, fp
 8009a48:	f000 ff6a 	bl	800a920 <__mcmp>
 8009a4c:	463a      	mov	r2, r7
 8009a4e:	9002      	str	r0, [sp, #8]
 8009a50:	4631      	mov	r1, r6
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 ff7e 	bl	800a954 <__mdiff>
 8009a58:	68c3      	ldr	r3, [r0, #12]
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	bb03      	cbnz	r3, 8009aa0 <_dtoa_r+0xa00>
 8009a5e:	4601      	mov	r1, r0
 8009a60:	9009      	str	r0, [sp, #36]	; 0x24
 8009a62:	4658      	mov	r0, fp
 8009a64:	f000 ff5c 	bl	800a920 <__mcmp>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4620      	mov	r0, r4
 8009a70:	9309      	str	r3, [sp, #36]	; 0x24
 8009a72:	f000 fd36 	bl	800a4e2 <_Bfree>
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	b9a3      	cbnz	r3, 8009aa4 <_dtoa_r+0xa04>
 8009a7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a7c:	b992      	cbnz	r2, 8009aa4 <_dtoa_r+0xa04>
 8009a7e:	9a08      	ldr	r2, [sp, #32]
 8009a80:	b982      	cbnz	r2, 8009aa4 <_dtoa_r+0xa04>
 8009a82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a86:	d029      	beq.n	8009adc <_dtoa_r+0xa3c>
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	dd01      	ble.n	8009a92 <_dtoa_r+0x9f2>
 8009a8e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009a92:	9b07      	ldr	r3, [sp, #28]
 8009a94:	1c5d      	adds	r5, r3, #1
 8009a96:	f883 8000 	strb.w	r8, [r3]
 8009a9a:	e784      	b.n	80099a6 <_dtoa_r+0x906>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	e7c2      	b.n	8009a26 <_dtoa_r+0x986>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7e3      	b.n	8009a6c <_dtoa_r+0x9cc>
 8009aa4:	9a02      	ldr	r2, [sp, #8]
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	db04      	blt.n	8009ab4 <_dtoa_r+0xa14>
 8009aaa:	d123      	bne.n	8009af4 <_dtoa_r+0xa54>
 8009aac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009aae:	bb0a      	cbnz	r2, 8009af4 <_dtoa_r+0xa54>
 8009ab0:	9a08      	ldr	r2, [sp, #32]
 8009ab2:	b9fa      	cbnz	r2, 8009af4 <_dtoa_r+0xa54>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	ddec      	ble.n	8009a92 <_dtoa_r+0x9f2>
 8009ab8:	4659      	mov	r1, fp
 8009aba:	2201      	movs	r2, #1
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fedb 	bl	800a878 <__lshift>
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4683      	mov	fp, r0
 8009ac6:	f000 ff2b 	bl	800a920 <__mcmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	dc03      	bgt.n	8009ad6 <_dtoa_r+0xa36>
 8009ace:	d1e0      	bne.n	8009a92 <_dtoa_r+0x9f2>
 8009ad0:	f018 0f01 	tst.w	r8, #1
 8009ad4:	d0dd      	beq.n	8009a92 <_dtoa_r+0x9f2>
 8009ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ada:	d1d8      	bne.n	8009a8e <_dtoa_r+0x9ee>
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	9a07      	ldr	r2, [sp, #28]
 8009ae0:	1c5d      	adds	r5, r3, #1
 8009ae2:	2339      	movs	r3, #57	; 0x39
 8009ae4:	7013      	strb	r3, [r2, #0]
 8009ae6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009aea:	1e6a      	subs	r2, r5, #1
 8009aec:	2b39      	cmp	r3, #57	; 0x39
 8009aee:	d04d      	beq.n	8009b8c <_dtoa_r+0xaec>
 8009af0:	3301      	adds	r3, #1
 8009af2:	e052      	b.n	8009b9a <_dtoa_r+0xafa>
 8009af4:	9a07      	ldr	r2, [sp, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f102 0501 	add.w	r5, r2, #1
 8009afc:	dd06      	ble.n	8009b0c <_dtoa_r+0xa6c>
 8009afe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b02:	d0eb      	beq.n	8009adc <_dtoa_r+0xa3c>
 8009b04:	f108 0801 	add.w	r8, r8, #1
 8009b08:	9b07      	ldr	r3, [sp, #28]
 8009b0a:	e7c4      	b.n	8009a96 <_dtoa_r+0x9f6>
 8009b0c:	9b06      	ldr	r3, [sp, #24]
 8009b0e:	9a04      	ldr	r2, [sp, #16]
 8009b10:	1aeb      	subs	r3, r5, r3
 8009b12:	4293      	cmp	r3, r2
 8009b14:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009b18:	d021      	beq.n	8009b5e <_dtoa_r+0xabe>
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	220a      	movs	r2, #10
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fcf5 	bl	800a510 <__multadd>
 8009b26:	45b9      	cmp	r9, r7
 8009b28:	4683      	mov	fp, r0
 8009b2a:	f04f 0300 	mov.w	r3, #0
 8009b2e:	f04f 020a 	mov.w	r2, #10
 8009b32:	4649      	mov	r1, r9
 8009b34:	4620      	mov	r0, r4
 8009b36:	d105      	bne.n	8009b44 <_dtoa_r+0xaa4>
 8009b38:	f000 fcea 	bl	800a510 <__multadd>
 8009b3c:	4681      	mov	r9, r0
 8009b3e:	4607      	mov	r7, r0
 8009b40:	9507      	str	r5, [sp, #28]
 8009b42:	e778      	b.n	8009a36 <_dtoa_r+0x996>
 8009b44:	f000 fce4 	bl	800a510 <__multadd>
 8009b48:	4639      	mov	r1, r7
 8009b4a:	4681      	mov	r9, r0
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	220a      	movs	r2, #10
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fcdd 	bl	800a510 <__multadd>
 8009b56:	4607      	mov	r7, r0
 8009b58:	e7f2      	b.n	8009b40 <_dtoa_r+0xaa0>
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	4659      	mov	r1, fp
 8009b60:	2201      	movs	r2, #1
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 fe88 	bl	800a878 <__lshift>
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4683      	mov	fp, r0
 8009b6c:	f000 fed8 	bl	800a920 <__mcmp>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	dcb8      	bgt.n	8009ae6 <_dtoa_r+0xa46>
 8009b74:	d102      	bne.n	8009b7c <_dtoa_r+0xadc>
 8009b76:	f018 0f01 	tst.w	r8, #1
 8009b7a:	d1b4      	bne.n	8009ae6 <_dtoa_r+0xa46>
 8009b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b80:	1e6a      	subs	r2, r5, #1
 8009b82:	2b30      	cmp	r3, #48	; 0x30
 8009b84:	f47f af0f 	bne.w	80099a6 <_dtoa_r+0x906>
 8009b88:	4615      	mov	r5, r2
 8009b8a:	e7f7      	b.n	8009b7c <_dtoa_r+0xadc>
 8009b8c:	9b06      	ldr	r3, [sp, #24]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d105      	bne.n	8009b9e <_dtoa_r+0xafe>
 8009b92:	2331      	movs	r3, #49	; 0x31
 8009b94:	9a06      	ldr	r2, [sp, #24]
 8009b96:	f10a 0a01 	add.w	sl, sl, #1
 8009b9a:	7013      	strb	r3, [r2, #0]
 8009b9c:	e703      	b.n	80099a6 <_dtoa_r+0x906>
 8009b9e:	4615      	mov	r5, r2
 8009ba0:	e7a1      	b.n	8009ae6 <_dtoa_r+0xa46>
 8009ba2:	4b17      	ldr	r3, [pc, #92]	; (8009c00 <_dtoa_r+0xb60>)
 8009ba4:	f7ff bae1 	b.w	800916a <_dtoa_r+0xca>
 8009ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f47f aabb 	bne.w	8009126 <_dtoa_r+0x86>
 8009bb0:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <_dtoa_r+0xb64>)
 8009bb2:	f7ff bada 	b.w	800916a <_dtoa_r+0xca>
 8009bb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	f77f ae3f 	ble.w	800983c <_dtoa_r+0x79c>
 8009bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bc0:	9308      	str	r3, [sp, #32]
 8009bc2:	e653      	b.n	800986c <_dtoa_r+0x7cc>
 8009bc4:	9b04      	ldr	r3, [sp, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dc03      	bgt.n	8009bd2 <_dtoa_r+0xb32>
 8009bca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	f73f aed5 	bgt.w	800997c <_dtoa_r+0x8dc>
 8009bd2:	9d06      	ldr	r5, [sp, #24]
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4658      	mov	r0, fp
 8009bd8:	f7ff f9d4 	bl	8008f84 <quorem>
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009be2:	f805 8b01 	strb.w	r8, [r5], #1
 8009be6:	9a04      	ldr	r2, [sp, #16]
 8009be8:	1aeb      	subs	r3, r5, r3
 8009bea:	429a      	cmp	r2, r3
 8009bec:	ddb5      	ble.n	8009b5a <_dtoa_r+0xaba>
 8009bee:	4659      	mov	r1, fp
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 fc8b 	bl	800a510 <__multadd>
 8009bfa:	4683      	mov	fp, r0
 8009bfc:	e7ea      	b.n	8009bd4 <_dtoa_r+0xb34>
 8009bfe:	bf00      	nop
 8009c00:	0800bb28 	.word	0x0800bb28
 8009c04:	0800bba8 	.word	0x0800bba8

08009c08 <std>:
 8009c08:	2300      	movs	r3, #0
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c12:	6083      	str	r3, [r0, #8]
 8009c14:	8181      	strh	r1, [r0, #12]
 8009c16:	6643      	str	r3, [r0, #100]	; 0x64
 8009c18:	81c2      	strh	r2, [r0, #14]
 8009c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c1e:	6183      	str	r3, [r0, #24]
 8009c20:	4619      	mov	r1, r3
 8009c22:	2208      	movs	r2, #8
 8009c24:	305c      	adds	r0, #92	; 0x5c
 8009c26:	f7fd fc79 	bl	800751c <memset>
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <std+0x38>)
 8009c2c:	6224      	str	r4, [r4, #32]
 8009c2e:	6263      	str	r3, [r4, #36]	; 0x24
 8009c30:	4b04      	ldr	r3, [pc, #16]	; (8009c44 <std+0x3c>)
 8009c32:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <std+0x40>)
 8009c36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <std+0x44>)
 8009c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c3c:	bd10      	pop	{r4, pc}
 8009c3e:	bf00      	nop
 8009c40:	0800b315 	.word	0x0800b315
 8009c44:	0800b337 	.word	0x0800b337
 8009c48:	0800b36f 	.word	0x0800b36f
 8009c4c:	0800b393 	.word	0x0800b393

08009c50 <_cleanup_r>:
 8009c50:	4901      	ldr	r1, [pc, #4]	; (8009c58 <_cleanup_r+0x8>)
 8009c52:	f000 b885 	b.w	8009d60 <_fwalk_reent>
 8009c56:	bf00      	nop
 8009c58:	0800b6ad 	.word	0x0800b6ad

08009c5c <__sfmoreglue>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	2568      	movs	r5, #104	; 0x68
 8009c60:	1e4a      	subs	r2, r1, #1
 8009c62:	4355      	muls	r5, r2
 8009c64:	460e      	mov	r6, r1
 8009c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c6a:	f001 f859 	bl	800ad20 <_malloc_r>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	b140      	cbz	r0, 8009c84 <__sfmoreglue+0x28>
 8009c72:	2100      	movs	r1, #0
 8009c74:	e9c0 1600 	strd	r1, r6, [r0]
 8009c78:	300c      	adds	r0, #12
 8009c7a:	60a0      	str	r0, [r4, #8]
 8009c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c80:	f7fd fc4c 	bl	800751c <memset>
 8009c84:	4620      	mov	r0, r4
 8009c86:	bd70      	pop	{r4, r5, r6, pc}

08009c88 <__sinit>:
 8009c88:	6983      	ldr	r3, [r0, #24]
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	bb33      	cbnz	r3, 8009cde <__sinit+0x56>
 8009c90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009c94:	6503      	str	r3, [r0, #80]	; 0x50
 8009c96:	4b12      	ldr	r3, [pc, #72]	; (8009ce0 <__sinit+0x58>)
 8009c98:	4a12      	ldr	r2, [pc, #72]	; (8009ce4 <__sinit+0x5c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6282      	str	r2, [r0, #40]	; 0x28
 8009c9e:	4298      	cmp	r0, r3
 8009ca0:	bf04      	itt	eq
 8009ca2:	2301      	moveq	r3, #1
 8009ca4:	6183      	streq	r3, [r0, #24]
 8009ca6:	f000 f81f 	bl	8009ce8 <__sfp>
 8009caa:	6060      	str	r0, [r4, #4]
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 f81b 	bl	8009ce8 <__sfp>
 8009cb2:	60a0      	str	r0, [r4, #8]
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 f817 	bl	8009ce8 <__sfp>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	60e0      	str	r0, [r4, #12]
 8009cbe:	2104      	movs	r1, #4
 8009cc0:	6860      	ldr	r0, [r4, #4]
 8009cc2:	f7ff ffa1 	bl	8009c08 <std>
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	2109      	movs	r1, #9
 8009cca:	68a0      	ldr	r0, [r4, #8]
 8009ccc:	f7ff ff9c 	bl	8009c08 <std>
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	2112      	movs	r1, #18
 8009cd4:	68e0      	ldr	r0, [r4, #12]
 8009cd6:	f7ff ff97 	bl	8009c08 <std>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	61a3      	str	r3, [r4, #24]
 8009cde:	bd10      	pop	{r4, pc}
 8009ce0:	0800bb14 	.word	0x0800bb14
 8009ce4:	08009c51 	.word	0x08009c51

08009ce8 <__sfp>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	4b1b      	ldr	r3, [pc, #108]	; (8009d58 <__sfp+0x70>)
 8009cec:	4607      	mov	r7, r0
 8009cee:	681e      	ldr	r6, [r3, #0]
 8009cf0:	69b3      	ldr	r3, [r6, #24]
 8009cf2:	b913      	cbnz	r3, 8009cfa <__sfp+0x12>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f7ff ffc7 	bl	8009c88 <__sinit>
 8009cfa:	3648      	adds	r6, #72	; 0x48
 8009cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	d503      	bpl.n	8009d0c <__sfp+0x24>
 8009d04:	6833      	ldr	r3, [r6, #0]
 8009d06:	b133      	cbz	r3, 8009d16 <__sfp+0x2e>
 8009d08:	6836      	ldr	r6, [r6, #0]
 8009d0a:	e7f7      	b.n	8009cfc <__sfp+0x14>
 8009d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d10:	b16d      	cbz	r5, 8009d2e <__sfp+0x46>
 8009d12:	3468      	adds	r4, #104	; 0x68
 8009d14:	e7f4      	b.n	8009d00 <__sfp+0x18>
 8009d16:	2104      	movs	r1, #4
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff ff9f 	bl	8009c5c <__sfmoreglue>
 8009d1e:	6030      	str	r0, [r6, #0]
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d1f1      	bne.n	8009d08 <__sfp+0x20>
 8009d24:	230c      	movs	r3, #12
 8009d26:	4604      	mov	r4, r0
 8009d28:	603b      	str	r3, [r7, #0]
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2e:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <__sfp+0x74>)
 8009d30:	6665      	str	r5, [r4, #100]	; 0x64
 8009d32:	e9c4 5500 	strd	r5, r5, [r4]
 8009d36:	60a5      	str	r5, [r4, #8]
 8009d38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009d3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009d40:	2208      	movs	r2, #8
 8009d42:	4629      	mov	r1, r5
 8009d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d48:	f7fd fbe8 	bl	800751c <memset>
 8009d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d54:	e7e9      	b.n	8009d2a <__sfp+0x42>
 8009d56:	bf00      	nop
 8009d58:	0800bb14 	.word	0x0800bb14
 8009d5c:	ffff0001 	.word	0xffff0001

08009d60 <_fwalk_reent>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4680      	mov	r8, r0
 8009d66:	4689      	mov	r9, r1
 8009d68:	2600      	movs	r6, #0
 8009d6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d6e:	b914      	cbnz	r4, 8009d76 <_fwalk_reent+0x16>
 8009d70:	4630      	mov	r0, r6
 8009d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009d7a:	3f01      	subs	r7, #1
 8009d7c:	d501      	bpl.n	8009d82 <_fwalk_reent+0x22>
 8009d7e:	6824      	ldr	r4, [r4, #0]
 8009d80:	e7f5      	b.n	8009d6e <_fwalk_reent+0xe>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d907      	bls.n	8009d98 <_fwalk_reent+0x38>
 8009d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	d003      	beq.n	8009d98 <_fwalk_reent+0x38>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4640      	mov	r0, r8
 8009d94:	47c8      	blx	r9
 8009d96:	4306      	orrs	r6, r0
 8009d98:	3568      	adds	r5, #104	; 0x68
 8009d9a:	e7ee      	b.n	8009d7a <_fwalk_reent+0x1a>

08009d9c <rshift>:
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	6906      	ldr	r6, [r0, #16]
 8009da0:	114b      	asrs	r3, r1, #5
 8009da2:	429e      	cmp	r6, r3
 8009da4:	f100 0414 	add.w	r4, r0, #20
 8009da8:	dd31      	ble.n	8009e0e <rshift+0x72>
 8009daa:	f011 011f 	ands.w	r1, r1, #31
 8009dae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009db2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009db6:	d108      	bne.n	8009dca <rshift+0x2e>
 8009db8:	4621      	mov	r1, r4
 8009dba:	42b2      	cmp	r2, r6
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	d211      	bcs.n	8009de4 <rshift+0x48>
 8009dc0:	f852 3b04 	ldr.w	r3, [r2], #4
 8009dc4:	f841 3b04 	str.w	r3, [r1], #4
 8009dc8:	e7f7      	b.n	8009dba <rshift+0x1e>
 8009dca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009dce:	4623      	mov	r3, r4
 8009dd0:	f1c1 0c20 	rsb	ip, r1, #32
 8009dd4:	40cd      	lsrs	r5, r1
 8009dd6:	3204      	adds	r2, #4
 8009dd8:	42b2      	cmp	r2, r6
 8009dda:	4617      	mov	r7, r2
 8009ddc:	d30d      	bcc.n	8009dfa <rshift+0x5e>
 8009dde:	601d      	str	r5, [r3, #0]
 8009de0:	b105      	cbz	r5, 8009de4 <rshift+0x48>
 8009de2:	3304      	adds	r3, #4
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	eba3 0204 	sub.w	r2, r3, r4
 8009dea:	bf08      	it	eq
 8009dec:	2300      	moveq	r3, #0
 8009dee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009df2:	6102      	str	r2, [r0, #16]
 8009df4:	bf08      	it	eq
 8009df6:	6143      	streq	r3, [r0, #20]
 8009df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfa:	683f      	ldr	r7, [r7, #0]
 8009dfc:	fa07 f70c 	lsl.w	r7, r7, ip
 8009e00:	433d      	orrs	r5, r7
 8009e02:	f843 5b04 	str.w	r5, [r3], #4
 8009e06:	f852 5b04 	ldr.w	r5, [r2], #4
 8009e0a:	40cd      	lsrs	r5, r1
 8009e0c:	e7e4      	b.n	8009dd8 <rshift+0x3c>
 8009e0e:	4623      	mov	r3, r4
 8009e10:	e7e8      	b.n	8009de4 <rshift+0x48>

08009e12 <__hexdig_fun>:
 8009e12:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e16:	2b09      	cmp	r3, #9
 8009e18:	d802      	bhi.n	8009e20 <__hexdig_fun+0xe>
 8009e1a:	3820      	subs	r0, #32
 8009e1c:	b2c0      	uxtb	r0, r0
 8009e1e:	4770      	bx	lr
 8009e20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d801      	bhi.n	8009e2c <__hexdig_fun+0x1a>
 8009e28:	3847      	subs	r0, #71	; 0x47
 8009e2a:	e7f7      	b.n	8009e1c <__hexdig_fun+0xa>
 8009e2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	d801      	bhi.n	8009e38 <__hexdig_fun+0x26>
 8009e34:	3827      	subs	r0, #39	; 0x27
 8009e36:	e7f1      	b.n	8009e1c <__hexdig_fun+0xa>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	4770      	bx	lr

08009e3c <__gethex>:
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	b08b      	sub	sp, #44	; 0x2c
 8009e42:	9002      	str	r0, [sp, #8]
 8009e44:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009e46:	468a      	mov	sl, r1
 8009e48:	4690      	mov	r8, r2
 8009e4a:	9306      	str	r3, [sp, #24]
 8009e4c:	f000 fad1 	bl	800a3f2 <__localeconv_l>
 8009e50:	6803      	ldr	r3, [r0, #0]
 8009e52:	f04f 0b00 	mov.w	fp, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	f7f6 f979 	bl	8000150 <strlen>
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	9001      	str	r0, [sp, #4]
 8009e62:	4403      	add	r3, r0
 8009e64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009e68:	9307      	str	r3, [sp, #28]
 8009e6a:	f8da 3000 	ldr.w	r3, [sl]
 8009e6e:	3302      	adds	r3, #2
 8009e70:	461f      	mov	r7, r3
 8009e72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e76:	2830      	cmp	r0, #48	; 0x30
 8009e78:	d06c      	beq.n	8009f54 <__gethex+0x118>
 8009e7a:	f7ff ffca 	bl	8009e12 <__hexdig_fun>
 8009e7e:	4604      	mov	r4, r0
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d16a      	bne.n	8009f5a <__gethex+0x11e>
 8009e84:	9a01      	ldr	r2, [sp, #4]
 8009e86:	9903      	ldr	r1, [sp, #12]
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f001 fa86 	bl	800b39a <strncmp>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d166      	bne.n	8009f60 <__gethex+0x124>
 8009e92:	9b01      	ldr	r3, [sp, #4]
 8009e94:	5cf8      	ldrb	r0, [r7, r3]
 8009e96:	18fe      	adds	r6, r7, r3
 8009e98:	f7ff ffbb 	bl	8009e12 <__hexdig_fun>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d062      	beq.n	8009f66 <__gethex+0x12a>
 8009ea0:	4633      	mov	r3, r6
 8009ea2:	7818      	ldrb	r0, [r3, #0]
 8009ea4:	461f      	mov	r7, r3
 8009ea6:	2830      	cmp	r0, #48	; 0x30
 8009ea8:	f103 0301 	add.w	r3, r3, #1
 8009eac:	d0f9      	beq.n	8009ea2 <__gethex+0x66>
 8009eae:	f7ff ffb0 	bl	8009e12 <__hexdig_fun>
 8009eb2:	fab0 f580 	clz	r5, r0
 8009eb6:	4634      	mov	r4, r6
 8009eb8:	f04f 0b01 	mov.w	fp, #1
 8009ebc:	096d      	lsrs	r5, r5, #5
 8009ebe:	463a      	mov	r2, r7
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	7830      	ldrb	r0, [r6, #0]
 8009ec4:	3201      	adds	r2, #1
 8009ec6:	f7ff ffa4 	bl	8009e12 <__hexdig_fun>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d1f8      	bne.n	8009ec0 <__gethex+0x84>
 8009ece:	9a01      	ldr	r2, [sp, #4]
 8009ed0:	9903      	ldr	r1, [sp, #12]
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f001 fa61 	bl	800b39a <strncmp>
 8009ed8:	b950      	cbnz	r0, 8009ef0 <__gethex+0xb4>
 8009eda:	b954      	cbnz	r4, 8009ef2 <__gethex+0xb6>
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	18f4      	adds	r4, r6, r3
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	4616      	mov	r6, r2
 8009ee4:	7830      	ldrb	r0, [r6, #0]
 8009ee6:	3201      	adds	r2, #1
 8009ee8:	f7ff ff93 	bl	8009e12 <__hexdig_fun>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d1f8      	bne.n	8009ee2 <__gethex+0xa6>
 8009ef0:	b10c      	cbz	r4, 8009ef6 <__gethex+0xba>
 8009ef2:	1ba4      	subs	r4, r4, r6
 8009ef4:	00a4      	lsls	r4, r4, #2
 8009ef6:	7833      	ldrb	r3, [r6, #0]
 8009ef8:	2b50      	cmp	r3, #80	; 0x50
 8009efa:	d001      	beq.n	8009f00 <__gethex+0xc4>
 8009efc:	2b70      	cmp	r3, #112	; 0x70
 8009efe:	d140      	bne.n	8009f82 <__gethex+0x146>
 8009f00:	7873      	ldrb	r3, [r6, #1]
 8009f02:	2b2b      	cmp	r3, #43	; 0x2b
 8009f04:	d031      	beq.n	8009f6a <__gethex+0x12e>
 8009f06:	2b2d      	cmp	r3, #45	; 0x2d
 8009f08:	d033      	beq.n	8009f72 <__gethex+0x136>
 8009f0a:	f04f 0900 	mov.w	r9, #0
 8009f0e:	1c71      	adds	r1, r6, #1
 8009f10:	7808      	ldrb	r0, [r1, #0]
 8009f12:	f7ff ff7e 	bl	8009e12 <__hexdig_fun>
 8009f16:	1e43      	subs	r3, r0, #1
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b18      	cmp	r3, #24
 8009f1c:	d831      	bhi.n	8009f82 <__gethex+0x146>
 8009f1e:	f1a0 0210 	sub.w	r2, r0, #16
 8009f22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f26:	f7ff ff74 	bl	8009e12 <__hexdig_fun>
 8009f2a:	1e43      	subs	r3, r0, #1
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b18      	cmp	r3, #24
 8009f30:	d922      	bls.n	8009f78 <__gethex+0x13c>
 8009f32:	f1b9 0f00 	cmp.w	r9, #0
 8009f36:	d000      	beq.n	8009f3a <__gethex+0xfe>
 8009f38:	4252      	negs	r2, r2
 8009f3a:	4414      	add	r4, r2
 8009f3c:	f8ca 1000 	str.w	r1, [sl]
 8009f40:	b30d      	cbz	r5, 8009f86 <__gethex+0x14a>
 8009f42:	f1bb 0f00 	cmp.w	fp, #0
 8009f46:	bf0c      	ite	eq
 8009f48:	2706      	moveq	r7, #6
 8009f4a:	2700      	movne	r7, #0
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	b00b      	add	sp, #44	; 0x2c
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	f10b 0b01 	add.w	fp, fp, #1
 8009f58:	e78a      	b.n	8009e70 <__gethex+0x34>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	462c      	mov	r4, r5
 8009f5e:	e7ae      	b.n	8009ebe <__gethex+0x82>
 8009f60:	463e      	mov	r6, r7
 8009f62:	2501      	movs	r5, #1
 8009f64:	e7c7      	b.n	8009ef6 <__gethex+0xba>
 8009f66:	4604      	mov	r4, r0
 8009f68:	e7fb      	b.n	8009f62 <__gethex+0x126>
 8009f6a:	f04f 0900 	mov.w	r9, #0
 8009f6e:	1cb1      	adds	r1, r6, #2
 8009f70:	e7ce      	b.n	8009f10 <__gethex+0xd4>
 8009f72:	f04f 0901 	mov.w	r9, #1
 8009f76:	e7fa      	b.n	8009f6e <__gethex+0x132>
 8009f78:	230a      	movs	r3, #10
 8009f7a:	fb03 0202 	mla	r2, r3, r2, r0
 8009f7e:	3a10      	subs	r2, #16
 8009f80:	e7cf      	b.n	8009f22 <__gethex+0xe6>
 8009f82:	4631      	mov	r1, r6
 8009f84:	e7da      	b.n	8009f3c <__gethex+0x100>
 8009f86:	4629      	mov	r1, r5
 8009f88:	1bf3      	subs	r3, r6, r7
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	2b07      	cmp	r3, #7
 8009f8e:	dc49      	bgt.n	800a024 <__gethex+0x1e8>
 8009f90:	9802      	ldr	r0, [sp, #8]
 8009f92:	f000 fa72 	bl	800a47a <_Balloc>
 8009f96:	f04f 0b00 	mov.w	fp, #0
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	46da      	mov	sl, fp
 8009f9e:	9b01      	ldr	r3, [sp, #4]
 8009fa0:	f100 0914 	add.w	r9, r0, #20
 8009fa4:	f1c3 0301 	rsb	r3, r3, #1
 8009fa8:	f8cd 9010 	str.w	r9, [sp, #16]
 8009fac:	9308      	str	r3, [sp, #32]
 8009fae:	42b7      	cmp	r7, r6
 8009fb0:	d33b      	bcc.n	800a02a <__gethex+0x1ee>
 8009fb2:	9804      	ldr	r0, [sp, #16]
 8009fb4:	f840 ab04 	str.w	sl, [r0], #4
 8009fb8:	eba0 0009 	sub.w	r0, r0, r9
 8009fbc:	1080      	asrs	r0, r0, #2
 8009fbe:	6128      	str	r0, [r5, #16]
 8009fc0:	0147      	lsls	r7, r0, #5
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	f000 fb1d 	bl	800a602 <__hi0bits>
 8009fc8:	f8d8 6000 	ldr.w	r6, [r8]
 8009fcc:	1a3f      	subs	r7, r7, r0
 8009fce:	42b7      	cmp	r7, r6
 8009fd0:	dd64      	ble.n	800a09c <__gethex+0x260>
 8009fd2:	1bbf      	subs	r7, r7, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f000 fe27 	bl	800ac2a <__any_on>
 8009fdc:	4682      	mov	sl, r0
 8009fde:	b178      	cbz	r0, 800a000 <__gethex+0x1c4>
 8009fe0:	f04f 0a01 	mov.w	sl, #1
 8009fe4:	1e7b      	subs	r3, r7, #1
 8009fe6:	1159      	asrs	r1, r3, #5
 8009fe8:	f003 021f 	and.w	r2, r3, #31
 8009fec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ff0:	fa0a f202 	lsl.w	r2, sl, r2
 8009ff4:	420a      	tst	r2, r1
 8009ff6:	d003      	beq.n	800a000 <__gethex+0x1c4>
 8009ff8:	4553      	cmp	r3, sl
 8009ffa:	dc46      	bgt.n	800a08a <__gethex+0x24e>
 8009ffc:	f04f 0a02 	mov.w	sl, #2
 800a000:	4639      	mov	r1, r7
 800a002:	4628      	mov	r0, r5
 800a004:	f7ff feca 	bl	8009d9c <rshift>
 800a008:	443c      	add	r4, r7
 800a00a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a00e:	42a3      	cmp	r3, r4
 800a010:	da52      	bge.n	800a0b8 <__gethex+0x27c>
 800a012:	4629      	mov	r1, r5
 800a014:	9802      	ldr	r0, [sp, #8]
 800a016:	f000 fa64 	bl	800a4e2 <_Bfree>
 800a01a:	2300      	movs	r3, #0
 800a01c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a01e:	27a3      	movs	r7, #163	; 0xa3
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	e793      	b.n	8009f4c <__gethex+0x110>
 800a024:	3101      	adds	r1, #1
 800a026:	105b      	asrs	r3, r3, #1
 800a028:	e7b0      	b.n	8009f8c <__gethex+0x150>
 800a02a:	1e73      	subs	r3, r6, #1
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	9a07      	ldr	r2, [sp, #28]
 800a030:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a034:	4293      	cmp	r3, r2
 800a036:	d018      	beq.n	800a06a <__gethex+0x22e>
 800a038:	f1bb 0f20 	cmp.w	fp, #32
 800a03c:	d107      	bne.n	800a04e <__gethex+0x212>
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	f8c3 a000 	str.w	sl, [r3]
 800a044:	f04f 0a00 	mov.w	sl, #0
 800a048:	46d3      	mov	fp, sl
 800a04a:	3304      	adds	r3, #4
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a052:	f7ff fede 	bl	8009e12 <__hexdig_fun>
 800a056:	f000 000f 	and.w	r0, r0, #15
 800a05a:	fa00 f00b 	lsl.w	r0, r0, fp
 800a05e:	ea4a 0a00 	orr.w	sl, sl, r0
 800a062:	f10b 0b04 	add.w	fp, fp, #4
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	e00d      	b.n	800a086 <__gethex+0x24a>
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	9a08      	ldr	r2, [sp, #32]
 800a06e:	4413      	add	r3, r2
 800a070:	42bb      	cmp	r3, r7
 800a072:	d3e1      	bcc.n	800a038 <__gethex+0x1fc>
 800a074:	4618      	mov	r0, r3
 800a076:	9a01      	ldr	r2, [sp, #4]
 800a078:	9903      	ldr	r1, [sp, #12]
 800a07a:	9309      	str	r3, [sp, #36]	; 0x24
 800a07c:	f001 f98d 	bl	800b39a <strncmp>
 800a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a082:	2800      	cmp	r0, #0
 800a084:	d1d8      	bne.n	800a038 <__gethex+0x1fc>
 800a086:	461e      	mov	r6, r3
 800a088:	e791      	b.n	8009fae <__gethex+0x172>
 800a08a:	1eb9      	subs	r1, r7, #2
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 fdcc 	bl	800ac2a <__any_on>
 800a092:	2800      	cmp	r0, #0
 800a094:	d0b2      	beq.n	8009ffc <__gethex+0x1c0>
 800a096:	f04f 0a03 	mov.w	sl, #3
 800a09a:	e7b1      	b.n	800a000 <__gethex+0x1c4>
 800a09c:	da09      	bge.n	800a0b2 <__gethex+0x276>
 800a09e:	1bf7      	subs	r7, r6, r7
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	463a      	mov	r2, r7
 800a0a4:	9802      	ldr	r0, [sp, #8]
 800a0a6:	f000 fbe7 	bl	800a878 <__lshift>
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	1be4      	subs	r4, r4, r7
 800a0ae:	f100 0914 	add.w	r9, r0, #20
 800a0b2:	f04f 0a00 	mov.w	sl, #0
 800a0b6:	e7a8      	b.n	800a00a <__gethex+0x1ce>
 800a0b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	dd6b      	ble.n	800a198 <__gethex+0x35c>
 800a0c0:	1b04      	subs	r4, r0, r4
 800a0c2:	42a6      	cmp	r6, r4
 800a0c4:	dc2e      	bgt.n	800a124 <__gethex+0x2e8>
 800a0c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d022      	beq.n	800a114 <__gethex+0x2d8>
 800a0ce:	2b03      	cmp	r3, #3
 800a0d0:	d024      	beq.n	800a11c <__gethex+0x2e0>
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d115      	bne.n	800a102 <__gethex+0x2c6>
 800a0d6:	42a6      	cmp	r6, r4
 800a0d8:	d113      	bne.n	800a102 <__gethex+0x2c6>
 800a0da:	2e01      	cmp	r6, #1
 800a0dc:	dc0b      	bgt.n	800a0f6 <__gethex+0x2ba>
 800a0de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a0e2:	9a06      	ldr	r2, [sp, #24]
 800a0e4:	2762      	movs	r7, #98	; 0x62
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	612b      	str	r3, [r5, #16]
 800a0ec:	f8c9 3000 	str.w	r3, [r9]
 800a0f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0f2:	601d      	str	r5, [r3, #0]
 800a0f4:	e72a      	b.n	8009f4c <__gethex+0x110>
 800a0f6:	1e71      	subs	r1, r6, #1
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f000 fd96 	bl	800ac2a <__any_on>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d1ed      	bne.n	800a0de <__gethex+0x2a2>
 800a102:	4629      	mov	r1, r5
 800a104:	9802      	ldr	r0, [sp, #8]
 800a106:	f000 f9ec 	bl	800a4e2 <_Bfree>
 800a10a:	2300      	movs	r3, #0
 800a10c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a10e:	2750      	movs	r7, #80	; 0x50
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	e71b      	b.n	8009f4c <__gethex+0x110>
 800a114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0e1      	beq.n	800a0de <__gethex+0x2a2>
 800a11a:	e7f2      	b.n	800a102 <__gethex+0x2c6>
 800a11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1dd      	bne.n	800a0de <__gethex+0x2a2>
 800a122:	e7ee      	b.n	800a102 <__gethex+0x2c6>
 800a124:	1e67      	subs	r7, r4, #1
 800a126:	f1ba 0f00 	cmp.w	sl, #0
 800a12a:	d132      	bne.n	800a192 <__gethex+0x356>
 800a12c:	b127      	cbz	r7, 800a138 <__gethex+0x2fc>
 800a12e:	4639      	mov	r1, r7
 800a130:	4628      	mov	r0, r5
 800a132:	f000 fd7a 	bl	800ac2a <__any_on>
 800a136:	4682      	mov	sl, r0
 800a138:	2301      	movs	r3, #1
 800a13a:	117a      	asrs	r2, r7, #5
 800a13c:	f007 071f 	and.w	r7, r7, #31
 800a140:	fa03 f707 	lsl.w	r7, r3, r7
 800a144:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a148:	4621      	mov	r1, r4
 800a14a:	421f      	tst	r7, r3
 800a14c:	f04f 0702 	mov.w	r7, #2
 800a150:	4628      	mov	r0, r5
 800a152:	bf18      	it	ne
 800a154:	f04a 0a02 	orrne.w	sl, sl, #2
 800a158:	1b36      	subs	r6, r6, r4
 800a15a:	f7ff fe1f 	bl	8009d9c <rshift>
 800a15e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a162:	f1ba 0f00 	cmp.w	sl, #0
 800a166:	d048      	beq.n	800a1fa <__gethex+0x3be>
 800a168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d015      	beq.n	800a19c <__gethex+0x360>
 800a170:	2b03      	cmp	r3, #3
 800a172:	d017      	beq.n	800a1a4 <__gethex+0x368>
 800a174:	2b01      	cmp	r3, #1
 800a176:	d109      	bne.n	800a18c <__gethex+0x350>
 800a178:	f01a 0f02 	tst.w	sl, #2
 800a17c:	d006      	beq.n	800a18c <__gethex+0x350>
 800a17e:	f8d9 3000 	ldr.w	r3, [r9]
 800a182:	ea4a 0a03 	orr.w	sl, sl, r3
 800a186:	f01a 0f01 	tst.w	sl, #1
 800a18a:	d10e      	bne.n	800a1aa <__gethex+0x36e>
 800a18c:	f047 0710 	orr.w	r7, r7, #16
 800a190:	e033      	b.n	800a1fa <__gethex+0x3be>
 800a192:	f04f 0a01 	mov.w	sl, #1
 800a196:	e7cf      	b.n	800a138 <__gethex+0x2fc>
 800a198:	2701      	movs	r7, #1
 800a19a:	e7e2      	b.n	800a162 <__gethex+0x326>
 800a19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a19e:	f1c3 0301 	rsb	r3, r3, #1
 800a1a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a1a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0f0      	beq.n	800a18c <__gethex+0x350>
 800a1aa:	f04f 0c00 	mov.w	ip, #0
 800a1ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a1b2:	f105 0314 	add.w	r3, r5, #20
 800a1b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a1ba:	eb03 010a 	add.w	r1, r3, sl
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a1c8:	d01c      	beq.n	800a204 <__gethex+0x3c8>
 800a1ca:	3201      	adds	r2, #1
 800a1cc:	6002      	str	r2, [r0, #0]
 800a1ce:	2f02      	cmp	r7, #2
 800a1d0:	f105 0314 	add.w	r3, r5, #20
 800a1d4:	d138      	bne.n	800a248 <__gethex+0x40c>
 800a1d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a1da:	3a01      	subs	r2, #1
 800a1dc:	42b2      	cmp	r2, r6
 800a1de:	d10a      	bne.n	800a1f6 <__gethex+0x3ba>
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	1171      	asrs	r1, r6, #5
 800a1e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a1e8:	f006 061f 	and.w	r6, r6, #31
 800a1ec:	fa02 f606 	lsl.w	r6, r2, r6
 800a1f0:	421e      	tst	r6, r3
 800a1f2:	bf18      	it	ne
 800a1f4:	4617      	movne	r7, r2
 800a1f6:	f047 0720 	orr.w	r7, r7, #32
 800a1fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1fc:	601d      	str	r5, [r3, #0]
 800a1fe:	9b06      	ldr	r3, [sp, #24]
 800a200:	601c      	str	r4, [r3, #0]
 800a202:	e6a3      	b.n	8009f4c <__gethex+0x110>
 800a204:	4299      	cmp	r1, r3
 800a206:	f843 cc04 	str.w	ip, [r3, #-4]
 800a20a:	d8d8      	bhi.n	800a1be <__gethex+0x382>
 800a20c:	68ab      	ldr	r3, [r5, #8]
 800a20e:	4599      	cmp	r9, r3
 800a210:	db12      	blt.n	800a238 <__gethex+0x3fc>
 800a212:	6869      	ldr	r1, [r5, #4]
 800a214:	9802      	ldr	r0, [sp, #8]
 800a216:	3101      	adds	r1, #1
 800a218:	f000 f92f 	bl	800a47a <_Balloc>
 800a21c:	4683      	mov	fp, r0
 800a21e:	692a      	ldr	r2, [r5, #16]
 800a220:	f105 010c 	add.w	r1, r5, #12
 800a224:	3202      	adds	r2, #2
 800a226:	0092      	lsls	r2, r2, #2
 800a228:	300c      	adds	r0, #12
 800a22a:	f000 f91b 	bl	800a464 <memcpy>
 800a22e:	4629      	mov	r1, r5
 800a230:	9802      	ldr	r0, [sp, #8]
 800a232:	f000 f956 	bl	800a4e2 <_Bfree>
 800a236:	465d      	mov	r5, fp
 800a238:	692b      	ldr	r3, [r5, #16]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	612a      	str	r2, [r5, #16]
 800a23e:	2201      	movs	r2, #1
 800a240:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a244:	615a      	str	r2, [r3, #20]
 800a246:	e7c2      	b.n	800a1ce <__gethex+0x392>
 800a248:	692a      	ldr	r2, [r5, #16]
 800a24a:	454a      	cmp	r2, r9
 800a24c:	dd0b      	ble.n	800a266 <__gethex+0x42a>
 800a24e:	2101      	movs	r1, #1
 800a250:	4628      	mov	r0, r5
 800a252:	f7ff fda3 	bl	8009d9c <rshift>
 800a256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a25a:	3401      	adds	r4, #1
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	f6ff aed8 	blt.w	800a012 <__gethex+0x1d6>
 800a262:	2701      	movs	r7, #1
 800a264:	e7c7      	b.n	800a1f6 <__gethex+0x3ba>
 800a266:	f016 061f 	ands.w	r6, r6, #31
 800a26a:	d0fa      	beq.n	800a262 <__gethex+0x426>
 800a26c:	449a      	add	sl, r3
 800a26e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a272:	f000 f9c6 	bl	800a602 <__hi0bits>
 800a276:	f1c6 0620 	rsb	r6, r6, #32
 800a27a:	42b0      	cmp	r0, r6
 800a27c:	dbe7      	blt.n	800a24e <__gethex+0x412>
 800a27e:	e7f0      	b.n	800a262 <__gethex+0x426>

0800a280 <L_shift>:
 800a280:	f1c2 0208 	rsb	r2, r2, #8
 800a284:	0092      	lsls	r2, r2, #2
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	f1c2 0620 	rsb	r6, r2, #32
 800a28c:	6843      	ldr	r3, [r0, #4]
 800a28e:	6804      	ldr	r4, [r0, #0]
 800a290:	fa03 f506 	lsl.w	r5, r3, r6
 800a294:	432c      	orrs	r4, r5
 800a296:	40d3      	lsrs	r3, r2
 800a298:	6004      	str	r4, [r0, #0]
 800a29a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a29e:	4288      	cmp	r0, r1
 800a2a0:	d3f4      	bcc.n	800a28c <L_shift+0xc>
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}

0800a2a4 <__match>:
 800a2a4:	b530      	push	{r4, r5, lr}
 800a2a6:	6803      	ldr	r3, [r0, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ae:	b914      	cbnz	r4, 800a2b6 <__match+0x12>
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	bd30      	pop	{r4, r5, pc}
 800a2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a2be:	2d19      	cmp	r5, #25
 800a2c0:	bf98      	it	ls
 800a2c2:	3220      	addls	r2, #32
 800a2c4:	42a2      	cmp	r2, r4
 800a2c6:	d0f0      	beq.n	800a2aa <__match+0x6>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7f3      	b.n	800a2b4 <__match+0x10>

0800a2cc <__hexnan>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	680b      	ldr	r3, [r1, #0]
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	115f      	asrs	r7, r3, #5
 800a2d8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a2dc:	f013 031f 	ands.w	r3, r3, #31
 800a2e0:	bf18      	it	ne
 800a2e2:	3704      	addne	r7, #4
 800a2e4:	1f3e      	subs	r6, r7, #4
 800a2e6:	4690      	mov	r8, r2
 800a2e8:	46b1      	mov	r9, r6
 800a2ea:	4634      	mov	r4, r6
 800a2ec:	46ab      	mov	fp, r5
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	6801      	ldr	r1, [r0, #0]
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	f847 5c04 	str.w	r5, [r7, #-4]
 800a2f8:	9502      	str	r5, [sp, #8]
 800a2fa:	784a      	ldrb	r2, [r1, #1]
 800a2fc:	1c4b      	adds	r3, r1, #1
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	b342      	cbz	r2, 800a354 <__hexnan+0x88>
 800a302:	4610      	mov	r0, r2
 800a304:	9105      	str	r1, [sp, #20]
 800a306:	9204      	str	r2, [sp, #16]
 800a308:	f7ff fd83 	bl	8009e12 <__hexdig_fun>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d143      	bne.n	800a398 <__hexnan+0xcc>
 800a310:	9a04      	ldr	r2, [sp, #16]
 800a312:	9905      	ldr	r1, [sp, #20]
 800a314:	2a20      	cmp	r2, #32
 800a316:	d818      	bhi.n	800a34a <__hexnan+0x7e>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	459b      	cmp	fp, r3
 800a31c:	dd13      	ble.n	800a346 <__hexnan+0x7a>
 800a31e:	454c      	cmp	r4, r9
 800a320:	d206      	bcs.n	800a330 <__hexnan+0x64>
 800a322:	2d07      	cmp	r5, #7
 800a324:	dc04      	bgt.n	800a330 <__hexnan+0x64>
 800a326:	462a      	mov	r2, r5
 800a328:	4649      	mov	r1, r9
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7ff ffa8 	bl	800a280 <L_shift>
 800a330:	4544      	cmp	r4, r8
 800a332:	d944      	bls.n	800a3be <__hexnan+0xf2>
 800a334:	2300      	movs	r3, #0
 800a336:	f1a4 0904 	sub.w	r9, r4, #4
 800a33a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a33e:	461d      	mov	r5, r3
 800a340:	464c      	mov	r4, r9
 800a342:	f8cd b008 	str.w	fp, [sp, #8]
 800a346:	9903      	ldr	r1, [sp, #12]
 800a348:	e7d7      	b.n	800a2fa <__hexnan+0x2e>
 800a34a:	2a29      	cmp	r2, #41	; 0x29
 800a34c:	d14a      	bne.n	800a3e4 <__hexnan+0x118>
 800a34e:	3102      	adds	r1, #2
 800a350:	f8ca 1000 	str.w	r1, [sl]
 800a354:	f1bb 0f00 	cmp.w	fp, #0
 800a358:	d044      	beq.n	800a3e4 <__hexnan+0x118>
 800a35a:	454c      	cmp	r4, r9
 800a35c:	d206      	bcs.n	800a36c <__hexnan+0xa0>
 800a35e:	2d07      	cmp	r5, #7
 800a360:	dc04      	bgt.n	800a36c <__hexnan+0xa0>
 800a362:	462a      	mov	r2, r5
 800a364:	4649      	mov	r1, r9
 800a366:	4620      	mov	r0, r4
 800a368:	f7ff ff8a 	bl	800a280 <L_shift>
 800a36c:	4544      	cmp	r4, r8
 800a36e:	d928      	bls.n	800a3c2 <__hexnan+0xf6>
 800a370:	4643      	mov	r3, r8
 800a372:	f854 2b04 	ldr.w	r2, [r4], #4
 800a376:	42a6      	cmp	r6, r4
 800a378:	f843 2b04 	str.w	r2, [r3], #4
 800a37c:	d2f9      	bcs.n	800a372 <__hexnan+0xa6>
 800a37e:	2200      	movs	r2, #0
 800a380:	f843 2b04 	str.w	r2, [r3], #4
 800a384:	429e      	cmp	r6, r3
 800a386:	d2fb      	bcs.n	800a380 <__hexnan+0xb4>
 800a388:	6833      	ldr	r3, [r6, #0]
 800a38a:	b91b      	cbnz	r3, 800a394 <__hexnan+0xc8>
 800a38c:	4546      	cmp	r6, r8
 800a38e:	d127      	bne.n	800a3e0 <__hexnan+0x114>
 800a390:	2301      	movs	r3, #1
 800a392:	6033      	str	r3, [r6, #0]
 800a394:	2005      	movs	r0, #5
 800a396:	e026      	b.n	800a3e6 <__hexnan+0x11a>
 800a398:	3501      	adds	r5, #1
 800a39a:	2d08      	cmp	r5, #8
 800a39c:	f10b 0b01 	add.w	fp, fp, #1
 800a3a0:	dd06      	ble.n	800a3b0 <__hexnan+0xe4>
 800a3a2:	4544      	cmp	r4, r8
 800a3a4:	d9cf      	bls.n	800a346 <__hexnan+0x7a>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2501      	movs	r5, #1
 800a3aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3ae:	3c04      	subs	r4, #4
 800a3b0:	6822      	ldr	r2, [r4, #0]
 800a3b2:	f000 000f 	and.w	r0, r0, #15
 800a3b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a3ba:	6020      	str	r0, [r4, #0]
 800a3bc:	e7c3      	b.n	800a346 <__hexnan+0x7a>
 800a3be:	2508      	movs	r5, #8
 800a3c0:	e7c1      	b.n	800a346 <__hexnan+0x7a>
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0df      	beq.n	800a388 <__hexnan+0xbc>
 800a3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3cc:	f1c3 0320 	rsb	r3, r3, #32
 800a3d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a3d8:	401a      	ands	r2, r3
 800a3da:	f847 2c04 	str.w	r2, [r7, #-4]
 800a3de:	e7d3      	b.n	800a388 <__hexnan+0xbc>
 800a3e0:	3e04      	subs	r6, #4
 800a3e2:	e7d1      	b.n	800a388 <__hexnan+0xbc>
 800a3e4:	2004      	movs	r0, #4
 800a3e6:	b007      	add	sp, #28
 800a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3ec <__locale_ctype_ptr_l>:
 800a3ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a3f0:	4770      	bx	lr

0800a3f2 <__localeconv_l>:
 800a3f2:	30f0      	adds	r0, #240	; 0xf0
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <_localeconv_r>:
 800a3f8:	4b04      	ldr	r3, [pc, #16]	; (800a40c <_localeconv_r+0x14>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6a18      	ldr	r0, [r3, #32]
 800a3fe:	4b04      	ldr	r3, [pc, #16]	; (800a410 <_localeconv_r+0x18>)
 800a400:	2800      	cmp	r0, #0
 800a402:	bf08      	it	eq
 800a404:	4618      	moveq	r0, r3
 800a406:	30f0      	adds	r0, #240	; 0xf0
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000018 	.word	0x20000018
 800a410:	2000007c 	.word	0x2000007c

0800a414 <malloc>:
 800a414:	4b02      	ldr	r3, [pc, #8]	; (800a420 <malloc+0xc>)
 800a416:	4601      	mov	r1, r0
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f000 bc81 	b.w	800ad20 <_malloc_r>
 800a41e:	bf00      	nop
 800a420:	20000018 	.word	0x20000018

0800a424 <__ascii_mbtowc>:
 800a424:	b082      	sub	sp, #8
 800a426:	b901      	cbnz	r1, 800a42a <__ascii_mbtowc+0x6>
 800a428:	a901      	add	r1, sp, #4
 800a42a:	b142      	cbz	r2, 800a43e <__ascii_mbtowc+0x1a>
 800a42c:	b14b      	cbz	r3, 800a442 <__ascii_mbtowc+0x1e>
 800a42e:	7813      	ldrb	r3, [r2, #0]
 800a430:	600b      	str	r3, [r1, #0]
 800a432:	7812      	ldrb	r2, [r2, #0]
 800a434:	1c10      	adds	r0, r2, #0
 800a436:	bf18      	it	ne
 800a438:	2001      	movne	r0, #1
 800a43a:	b002      	add	sp, #8
 800a43c:	4770      	bx	lr
 800a43e:	4610      	mov	r0, r2
 800a440:	e7fb      	b.n	800a43a <__ascii_mbtowc+0x16>
 800a442:	f06f 0001 	mvn.w	r0, #1
 800a446:	e7f8      	b.n	800a43a <__ascii_mbtowc+0x16>

0800a448 <memchr>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	b2c9      	uxtb	r1, r1
 800a44c:	4402      	add	r2, r0
 800a44e:	4290      	cmp	r0, r2
 800a450:	4603      	mov	r3, r0
 800a452:	d101      	bne.n	800a458 <memchr+0x10>
 800a454:	2300      	movs	r3, #0
 800a456:	e003      	b.n	800a460 <memchr+0x18>
 800a458:	781c      	ldrb	r4, [r3, #0]
 800a45a:	3001      	adds	r0, #1
 800a45c:	428c      	cmp	r4, r1
 800a45e:	d1f6      	bne.n	800a44e <memchr+0x6>
 800a460:	4618      	mov	r0, r3
 800a462:	bd10      	pop	{r4, pc}

0800a464 <memcpy>:
 800a464:	b510      	push	{r4, lr}
 800a466:	1e43      	subs	r3, r0, #1
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	d100      	bne.n	800a470 <memcpy+0xc>
 800a46e:	bd10      	pop	{r4, pc}
 800a470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a474:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a478:	e7f7      	b.n	800a46a <memcpy+0x6>

0800a47a <_Balloc>:
 800a47a:	b570      	push	{r4, r5, r6, lr}
 800a47c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a47e:	4604      	mov	r4, r0
 800a480:	460e      	mov	r6, r1
 800a482:	b93d      	cbnz	r5, 800a494 <_Balloc+0x1a>
 800a484:	2010      	movs	r0, #16
 800a486:	f7ff ffc5 	bl	800a414 <malloc>
 800a48a:	6260      	str	r0, [r4, #36]	; 0x24
 800a48c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a490:	6005      	str	r5, [r0, #0]
 800a492:	60c5      	str	r5, [r0, #12]
 800a494:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a496:	68eb      	ldr	r3, [r5, #12]
 800a498:	b183      	cbz	r3, 800a4bc <_Balloc+0x42>
 800a49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a4a2:	b9b8      	cbnz	r0, 800a4d4 <_Balloc+0x5a>
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	fa01 f506 	lsl.w	r5, r1, r6
 800a4aa:	1d6a      	adds	r2, r5, #5
 800a4ac:	0092      	lsls	r2, r2, #2
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 fbdc 	bl	800ac6c <_calloc_r>
 800a4b4:	b160      	cbz	r0, 800a4d0 <_Balloc+0x56>
 800a4b6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a4ba:	e00e      	b.n	800a4da <_Balloc+0x60>
 800a4bc:	2221      	movs	r2, #33	; 0x21
 800a4be:	2104      	movs	r1, #4
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fbd3 	bl	800ac6c <_calloc_r>
 800a4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c8:	60e8      	str	r0, [r5, #12]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e4      	bne.n	800a49a <_Balloc+0x20>
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	6802      	ldr	r2, [r0, #0]
 800a4d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4e0:	e7f7      	b.n	800a4d2 <_Balloc+0x58>

0800a4e2 <_Bfree>:
 800a4e2:	b570      	push	{r4, r5, r6, lr}
 800a4e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	b93c      	cbnz	r4, 800a4fc <_Bfree+0x1a>
 800a4ec:	2010      	movs	r0, #16
 800a4ee:	f7ff ff91 	bl	800a414 <malloc>
 800a4f2:	6270      	str	r0, [r6, #36]	; 0x24
 800a4f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4f8:	6004      	str	r4, [r0, #0]
 800a4fa:	60c4      	str	r4, [r0, #12]
 800a4fc:	b13d      	cbz	r5, 800a50e <_Bfree+0x2c>
 800a4fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a500:	686a      	ldr	r2, [r5, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a508:	6029      	str	r1, [r5, #0]
 800a50a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a50e:	bd70      	pop	{r4, r5, r6, pc}

0800a510 <__multadd>:
 800a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a514:	461f      	mov	r7, r3
 800a516:	4606      	mov	r6, r0
 800a518:	460c      	mov	r4, r1
 800a51a:	2300      	movs	r3, #0
 800a51c:	690d      	ldr	r5, [r1, #16]
 800a51e:	f101 0c14 	add.w	ip, r1, #20
 800a522:	f8dc 0000 	ldr.w	r0, [ip]
 800a526:	3301      	adds	r3, #1
 800a528:	b281      	uxth	r1, r0
 800a52a:	fb02 7101 	mla	r1, r2, r1, r7
 800a52e:	0c00      	lsrs	r0, r0, #16
 800a530:	0c0f      	lsrs	r7, r1, #16
 800a532:	fb02 7000 	mla	r0, r2, r0, r7
 800a536:	b289      	uxth	r1, r1
 800a538:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a53c:	429d      	cmp	r5, r3
 800a53e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a542:	f84c 1b04 	str.w	r1, [ip], #4
 800a546:	dcec      	bgt.n	800a522 <__multadd+0x12>
 800a548:	b1d7      	cbz	r7, 800a580 <__multadd+0x70>
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	dc12      	bgt.n	800a576 <__multadd+0x66>
 800a550:	6861      	ldr	r1, [r4, #4]
 800a552:	4630      	mov	r0, r6
 800a554:	3101      	adds	r1, #1
 800a556:	f7ff ff90 	bl	800a47a <_Balloc>
 800a55a:	4680      	mov	r8, r0
 800a55c:	6922      	ldr	r2, [r4, #16]
 800a55e:	f104 010c 	add.w	r1, r4, #12
 800a562:	3202      	adds	r2, #2
 800a564:	0092      	lsls	r2, r2, #2
 800a566:	300c      	adds	r0, #12
 800a568:	f7ff ff7c 	bl	800a464 <memcpy>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4630      	mov	r0, r6
 800a570:	f7ff ffb7 	bl	800a4e2 <_Bfree>
 800a574:	4644      	mov	r4, r8
 800a576:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a57a:	3501      	adds	r5, #1
 800a57c:	615f      	str	r7, [r3, #20]
 800a57e:	6125      	str	r5, [r4, #16]
 800a580:	4620      	mov	r0, r4
 800a582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a586 <__s2b>:
 800a586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a58a:	4615      	mov	r5, r2
 800a58c:	2209      	movs	r2, #9
 800a58e:	461f      	mov	r7, r3
 800a590:	3308      	adds	r3, #8
 800a592:	460c      	mov	r4, r1
 800a594:	fb93 f3f2 	sdiv	r3, r3, r2
 800a598:	4606      	mov	r6, r0
 800a59a:	2201      	movs	r2, #1
 800a59c:	2100      	movs	r1, #0
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	db20      	blt.n	800a5e4 <__s2b+0x5e>
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ff69 	bl	800a47a <_Balloc>
 800a5a8:	9b08      	ldr	r3, [sp, #32]
 800a5aa:	2d09      	cmp	r5, #9
 800a5ac:	6143      	str	r3, [r0, #20]
 800a5ae:	f04f 0301 	mov.w	r3, #1
 800a5b2:	6103      	str	r3, [r0, #16]
 800a5b4:	dd19      	ble.n	800a5ea <__s2b+0x64>
 800a5b6:	f104 0809 	add.w	r8, r4, #9
 800a5ba:	46c1      	mov	r9, r8
 800a5bc:	442c      	add	r4, r5
 800a5be:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	3b30      	subs	r3, #48	; 0x30
 800a5c6:	220a      	movs	r2, #10
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff ffa1 	bl	800a510 <__multadd>
 800a5ce:	45a1      	cmp	r9, r4
 800a5d0:	d1f5      	bne.n	800a5be <__s2b+0x38>
 800a5d2:	eb08 0405 	add.w	r4, r8, r5
 800a5d6:	3c08      	subs	r4, #8
 800a5d8:	1b2d      	subs	r5, r5, r4
 800a5da:	1963      	adds	r3, r4, r5
 800a5dc:	42bb      	cmp	r3, r7
 800a5de:	db07      	blt.n	800a5f0 <__s2b+0x6a>
 800a5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e4:	0052      	lsls	r2, r2, #1
 800a5e6:	3101      	adds	r1, #1
 800a5e8:	e7d9      	b.n	800a59e <__s2b+0x18>
 800a5ea:	340a      	adds	r4, #10
 800a5ec:	2509      	movs	r5, #9
 800a5ee:	e7f3      	b.n	800a5d8 <__s2b+0x52>
 800a5f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5f4:	4601      	mov	r1, r0
 800a5f6:	3b30      	subs	r3, #48	; 0x30
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ff88 	bl	800a510 <__multadd>
 800a600:	e7eb      	b.n	800a5da <__s2b+0x54>

0800a602 <__hi0bits>:
 800a602:	0c02      	lsrs	r2, r0, #16
 800a604:	0412      	lsls	r2, r2, #16
 800a606:	4603      	mov	r3, r0
 800a608:	b9b2      	cbnz	r2, 800a638 <__hi0bits+0x36>
 800a60a:	0403      	lsls	r3, r0, #16
 800a60c:	2010      	movs	r0, #16
 800a60e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a612:	bf04      	itt	eq
 800a614:	021b      	lsleq	r3, r3, #8
 800a616:	3008      	addeq	r0, #8
 800a618:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a61c:	bf04      	itt	eq
 800a61e:	011b      	lsleq	r3, r3, #4
 800a620:	3004      	addeq	r0, #4
 800a622:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a626:	bf04      	itt	eq
 800a628:	009b      	lsleq	r3, r3, #2
 800a62a:	3002      	addeq	r0, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	db06      	blt.n	800a63e <__hi0bits+0x3c>
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	d503      	bpl.n	800a63c <__hi0bits+0x3a>
 800a634:	3001      	adds	r0, #1
 800a636:	4770      	bx	lr
 800a638:	2000      	movs	r0, #0
 800a63a:	e7e8      	b.n	800a60e <__hi0bits+0xc>
 800a63c:	2020      	movs	r0, #32
 800a63e:	4770      	bx	lr

0800a640 <__lo0bits>:
 800a640:	6803      	ldr	r3, [r0, #0]
 800a642:	4601      	mov	r1, r0
 800a644:	f013 0207 	ands.w	r2, r3, #7
 800a648:	d00b      	beq.n	800a662 <__lo0bits+0x22>
 800a64a:	07da      	lsls	r2, r3, #31
 800a64c:	d423      	bmi.n	800a696 <__lo0bits+0x56>
 800a64e:	0798      	lsls	r0, r3, #30
 800a650:	bf49      	itett	mi
 800a652:	085b      	lsrmi	r3, r3, #1
 800a654:	089b      	lsrpl	r3, r3, #2
 800a656:	2001      	movmi	r0, #1
 800a658:	600b      	strmi	r3, [r1, #0]
 800a65a:	bf5c      	itt	pl
 800a65c:	600b      	strpl	r3, [r1, #0]
 800a65e:	2002      	movpl	r0, #2
 800a660:	4770      	bx	lr
 800a662:	b298      	uxth	r0, r3
 800a664:	b9a8      	cbnz	r0, 800a692 <__lo0bits+0x52>
 800a666:	2010      	movs	r0, #16
 800a668:	0c1b      	lsrs	r3, r3, #16
 800a66a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a66e:	bf04      	itt	eq
 800a670:	0a1b      	lsreq	r3, r3, #8
 800a672:	3008      	addeq	r0, #8
 800a674:	071a      	lsls	r2, r3, #28
 800a676:	bf04      	itt	eq
 800a678:	091b      	lsreq	r3, r3, #4
 800a67a:	3004      	addeq	r0, #4
 800a67c:	079a      	lsls	r2, r3, #30
 800a67e:	bf04      	itt	eq
 800a680:	089b      	lsreq	r3, r3, #2
 800a682:	3002      	addeq	r0, #2
 800a684:	07da      	lsls	r2, r3, #31
 800a686:	d402      	bmi.n	800a68e <__lo0bits+0x4e>
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	d006      	beq.n	800a69a <__lo0bits+0x5a>
 800a68c:	3001      	adds	r0, #1
 800a68e:	600b      	str	r3, [r1, #0]
 800a690:	4770      	bx	lr
 800a692:	4610      	mov	r0, r2
 800a694:	e7e9      	b.n	800a66a <__lo0bits+0x2a>
 800a696:	2000      	movs	r0, #0
 800a698:	4770      	bx	lr
 800a69a:	2020      	movs	r0, #32
 800a69c:	4770      	bx	lr

0800a69e <__i2b>:
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	f7ff fee9 	bl	800a47a <_Balloc>
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	6144      	str	r4, [r0, #20]
 800a6ac:	6102      	str	r2, [r0, #16]
 800a6ae:	bd10      	pop	{r4, pc}

0800a6b0 <__multiply>:
 800a6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	690a      	ldr	r2, [r1, #16]
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	4688      	mov	r8, r1
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	bfbe      	ittt	lt
 800a6c0:	460b      	movlt	r3, r1
 800a6c2:	46a0      	movlt	r8, r4
 800a6c4:	461c      	movlt	r4, r3
 800a6c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6d6:	eb07 0609 	add.w	r6, r7, r9
 800a6da:	42b3      	cmp	r3, r6
 800a6dc:	bfb8      	it	lt
 800a6de:	3101      	addlt	r1, #1
 800a6e0:	f7ff fecb 	bl	800a47a <_Balloc>
 800a6e4:	f100 0514 	add.w	r5, r0, #20
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a6f0:	4573      	cmp	r3, lr
 800a6f2:	d316      	bcc.n	800a722 <__multiply+0x72>
 800a6f4:	f104 0214 	add.w	r2, r4, #20
 800a6f8:	f108 0114 	add.w	r1, r8, #20
 800a6fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a700:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	9b00      	ldr	r3, [sp, #0]
 800a708:	9201      	str	r2, [sp, #4]
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d80c      	bhi.n	800a728 <__multiply+0x78>
 800a70e:	2e00      	cmp	r6, #0
 800a710:	dd03      	ble.n	800a71a <__multiply+0x6a>
 800a712:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a716:	2b00      	cmp	r3, #0
 800a718:	d05d      	beq.n	800a7d6 <__multiply+0x126>
 800a71a:	6106      	str	r6, [r0, #16]
 800a71c:	b003      	add	sp, #12
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	f843 2b04 	str.w	r2, [r3], #4
 800a726:	e7e3      	b.n	800a6f0 <__multiply+0x40>
 800a728:	f8b2 b000 	ldrh.w	fp, [r2]
 800a72c:	f1bb 0f00 	cmp.w	fp, #0
 800a730:	d023      	beq.n	800a77a <__multiply+0xca>
 800a732:	4689      	mov	r9, r1
 800a734:	46ac      	mov	ip, r5
 800a736:	f04f 0800 	mov.w	r8, #0
 800a73a:	f859 4b04 	ldr.w	r4, [r9], #4
 800a73e:	f8dc a000 	ldr.w	sl, [ip]
 800a742:	b2a3      	uxth	r3, r4
 800a744:	fa1f fa8a 	uxth.w	sl, sl
 800a748:	fb0b a303 	mla	r3, fp, r3, sl
 800a74c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a750:	f8dc 4000 	ldr.w	r4, [ip]
 800a754:	4443      	add	r3, r8
 800a756:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a75a:	fb0b 840a 	mla	r4, fp, sl, r8
 800a75e:	46e2      	mov	sl, ip
 800a760:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a764:	b29b      	uxth	r3, r3
 800a766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a76a:	454f      	cmp	r7, r9
 800a76c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a770:	f84a 3b04 	str.w	r3, [sl], #4
 800a774:	d82b      	bhi.n	800a7ce <__multiply+0x11e>
 800a776:	f8cc 8004 	str.w	r8, [ip, #4]
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	3204      	adds	r2, #4
 800a77e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a782:	f1ba 0f00 	cmp.w	sl, #0
 800a786:	d020      	beq.n	800a7ca <__multiply+0x11a>
 800a788:	4689      	mov	r9, r1
 800a78a:	46a8      	mov	r8, r5
 800a78c:	f04f 0b00 	mov.w	fp, #0
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	f8b9 c000 	ldrh.w	ip, [r9]
 800a796:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a7a0:	46c4      	mov	ip, r8
 800a7a2:	445c      	add	r4, fp
 800a7a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a7a8:	f84c 3b04 	str.w	r3, [ip], #4
 800a7ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a7b4:	0c1b      	lsrs	r3, r3, #16
 800a7b6:	fb0a b303 	mla	r3, sl, r3, fp
 800a7ba:	454f      	cmp	r7, r9
 800a7bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a7c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a7c4:	d805      	bhi.n	800a7d2 <__multiply+0x122>
 800a7c6:	f8c8 3004 	str.w	r3, [r8, #4]
 800a7ca:	3504      	adds	r5, #4
 800a7cc:	e79b      	b.n	800a706 <__multiply+0x56>
 800a7ce:	46d4      	mov	ip, sl
 800a7d0:	e7b3      	b.n	800a73a <__multiply+0x8a>
 800a7d2:	46e0      	mov	r8, ip
 800a7d4:	e7dd      	b.n	800a792 <__multiply+0xe2>
 800a7d6:	3e01      	subs	r6, #1
 800a7d8:	e799      	b.n	800a70e <__multiply+0x5e>
	...

0800a7dc <__pow5mult>:
 800a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e0:	4615      	mov	r5, r2
 800a7e2:	f012 0203 	ands.w	r2, r2, #3
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	d007      	beq.n	800a7fc <__pow5mult+0x20>
 800a7ec:	4c21      	ldr	r4, [pc, #132]	; (800a874 <__pow5mult+0x98>)
 800a7ee:	3a01      	subs	r2, #1
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7f6:	f7ff fe8b 	bl	800a510 <__multadd>
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	10ad      	asrs	r5, r5, #2
 800a7fe:	d035      	beq.n	800a86c <__pow5mult+0x90>
 800a800:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a802:	b93c      	cbnz	r4, 800a814 <__pow5mult+0x38>
 800a804:	2010      	movs	r0, #16
 800a806:	f7ff fe05 	bl	800a414 <malloc>
 800a80a:	6270      	str	r0, [r6, #36]	; 0x24
 800a80c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a810:	6004      	str	r4, [r0, #0]
 800a812:	60c4      	str	r4, [r0, #12]
 800a814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a81c:	b94c      	cbnz	r4, 800a832 <__pow5mult+0x56>
 800a81e:	f240 2171 	movw	r1, #625	; 0x271
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff3b 	bl	800a69e <__i2b>
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	07eb      	lsls	r3, r5, #31
 800a838:	d50a      	bpl.n	800a850 <__pow5mult+0x74>
 800a83a:	4639      	mov	r1, r7
 800a83c:	4622      	mov	r2, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff ff36 	bl	800a6b0 <__multiply>
 800a844:	4681      	mov	r9, r0
 800a846:	4639      	mov	r1, r7
 800a848:	4630      	mov	r0, r6
 800a84a:	f7ff fe4a 	bl	800a4e2 <_Bfree>
 800a84e:	464f      	mov	r7, r9
 800a850:	106d      	asrs	r5, r5, #1
 800a852:	d00b      	beq.n	800a86c <__pow5mult+0x90>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	b938      	cbnz	r0, 800a868 <__pow5mult+0x8c>
 800a858:	4622      	mov	r2, r4
 800a85a:	4621      	mov	r1, r4
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7ff ff27 	bl	800a6b0 <__multiply>
 800a862:	6020      	str	r0, [r4, #0]
 800a864:	f8c0 8000 	str.w	r8, [r0]
 800a868:	4604      	mov	r4, r0
 800a86a:	e7e4      	b.n	800a836 <__pow5mult+0x5a>
 800a86c:	4638      	mov	r0, r7
 800a86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a872:	bf00      	nop
 800a874:	0800bd18 	.word	0x0800bd18

0800a878 <__lshift>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	4607      	mov	r7, r0
 800a880:	4616      	mov	r6, r2
 800a882:	6923      	ldr	r3, [r4, #16]
 800a884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a888:	eb0a 0903 	add.w	r9, sl, r3
 800a88c:	6849      	ldr	r1, [r1, #4]
 800a88e:	68a3      	ldr	r3, [r4, #8]
 800a890:	f109 0501 	add.w	r5, r9, #1
 800a894:	42ab      	cmp	r3, r5
 800a896:	db32      	blt.n	800a8fe <__lshift+0x86>
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff fdee 	bl	800a47a <_Balloc>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f100 0114 	add.w	r1, r0, #20
 800a8a8:	4553      	cmp	r3, sl
 800a8aa:	db2b      	blt.n	800a904 <__lshift+0x8c>
 800a8ac:	6920      	ldr	r0, [r4, #16]
 800a8ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8b2:	f104 0314 	add.w	r3, r4, #20
 800a8b6:	f016 021f 	ands.w	r2, r6, #31
 800a8ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8c2:	d025      	beq.n	800a910 <__lshift+0x98>
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f1c2 0e20 	rsb	lr, r2, #32
 800a8ca:	468a      	mov	sl, r1
 800a8cc:	681e      	ldr	r6, [r3, #0]
 800a8ce:	4096      	lsls	r6, r2
 800a8d0:	4330      	orrs	r0, r6
 800a8d2:	f84a 0b04 	str.w	r0, [sl], #4
 800a8d6:	f853 0b04 	ldr.w	r0, [r3], #4
 800a8da:	459c      	cmp	ip, r3
 800a8dc:	fa20 f00e 	lsr.w	r0, r0, lr
 800a8e0:	d814      	bhi.n	800a90c <__lshift+0x94>
 800a8e2:	6048      	str	r0, [r1, #4]
 800a8e4:	b108      	cbz	r0, 800a8ea <__lshift+0x72>
 800a8e6:	f109 0502 	add.w	r5, r9, #2
 800a8ea:	3d01      	subs	r5, #1
 800a8ec:	4638      	mov	r0, r7
 800a8ee:	f8c8 5010 	str.w	r5, [r8, #16]
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	f7ff fdf5 	bl	800a4e2 <_Bfree>
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fe:	3101      	adds	r1, #1
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	e7c7      	b.n	800a894 <__lshift+0x1c>
 800a904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a908:	3301      	adds	r3, #1
 800a90a:	e7cd      	b.n	800a8a8 <__lshift+0x30>
 800a90c:	4651      	mov	r1, sl
 800a90e:	e7dc      	b.n	800a8ca <__lshift+0x52>
 800a910:	3904      	subs	r1, #4
 800a912:	f853 2b04 	ldr.w	r2, [r3], #4
 800a916:	459c      	cmp	ip, r3
 800a918:	f841 2f04 	str.w	r2, [r1, #4]!
 800a91c:	d8f9      	bhi.n	800a912 <__lshift+0x9a>
 800a91e:	e7e4      	b.n	800a8ea <__lshift+0x72>

0800a920 <__mcmp>:
 800a920:	6903      	ldr	r3, [r0, #16]
 800a922:	690a      	ldr	r2, [r1, #16]
 800a924:	b530      	push	{r4, r5, lr}
 800a926:	1a9b      	subs	r3, r3, r2
 800a928:	d10c      	bne.n	800a944 <__mcmp+0x24>
 800a92a:	0092      	lsls	r2, r2, #2
 800a92c:	3014      	adds	r0, #20
 800a92e:	3114      	adds	r1, #20
 800a930:	1884      	adds	r4, r0, r2
 800a932:	4411      	add	r1, r2
 800a934:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a938:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a93c:	4295      	cmp	r5, r2
 800a93e:	d003      	beq.n	800a948 <__mcmp+0x28>
 800a940:	d305      	bcc.n	800a94e <__mcmp+0x2e>
 800a942:	2301      	movs	r3, #1
 800a944:	4618      	mov	r0, r3
 800a946:	bd30      	pop	{r4, r5, pc}
 800a948:	42a0      	cmp	r0, r4
 800a94a:	d3f3      	bcc.n	800a934 <__mcmp+0x14>
 800a94c:	e7fa      	b.n	800a944 <__mcmp+0x24>
 800a94e:	f04f 33ff 	mov.w	r3, #4294967295
 800a952:	e7f7      	b.n	800a944 <__mcmp+0x24>

0800a954 <__mdiff>:
 800a954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a958:	460d      	mov	r5, r1
 800a95a:	4607      	mov	r7, r0
 800a95c:	4611      	mov	r1, r2
 800a95e:	4628      	mov	r0, r5
 800a960:	4614      	mov	r4, r2
 800a962:	f7ff ffdd 	bl	800a920 <__mcmp>
 800a966:	1e06      	subs	r6, r0, #0
 800a968:	d108      	bne.n	800a97c <__mdiff+0x28>
 800a96a:	4631      	mov	r1, r6
 800a96c:	4638      	mov	r0, r7
 800a96e:	f7ff fd84 	bl	800a47a <_Balloc>
 800a972:	2301      	movs	r3, #1
 800a974:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	bfa4      	itt	ge
 800a97e:	4623      	movge	r3, r4
 800a980:	462c      	movge	r4, r5
 800a982:	4638      	mov	r0, r7
 800a984:	6861      	ldr	r1, [r4, #4]
 800a986:	bfa6      	itte	ge
 800a988:	461d      	movge	r5, r3
 800a98a:	2600      	movge	r6, #0
 800a98c:	2601      	movlt	r6, #1
 800a98e:	f7ff fd74 	bl	800a47a <_Balloc>
 800a992:	f04f 0e00 	mov.w	lr, #0
 800a996:	60c6      	str	r6, [r0, #12]
 800a998:	692b      	ldr	r3, [r5, #16]
 800a99a:	6926      	ldr	r6, [r4, #16]
 800a99c:	f104 0214 	add.w	r2, r4, #20
 800a9a0:	f105 0914 	add.w	r9, r5, #20
 800a9a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a9a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a9ac:	f100 0114 	add.w	r1, r0, #20
 800a9b0:	f852 ab04 	ldr.w	sl, [r2], #4
 800a9b4:	f859 5b04 	ldr.w	r5, [r9], #4
 800a9b8:	fa1f f38a 	uxth.w	r3, sl
 800a9bc:	4473      	add	r3, lr
 800a9be:	b2ac      	uxth	r4, r5
 800a9c0:	1b1b      	subs	r3, r3, r4
 800a9c2:	0c2c      	lsrs	r4, r5, #16
 800a9c4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a9c8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a9d2:	45c8      	cmp	r8, r9
 800a9d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a9d8:	4694      	mov	ip, r2
 800a9da:	f841 4b04 	str.w	r4, [r1], #4
 800a9de:	d8e7      	bhi.n	800a9b0 <__mdiff+0x5c>
 800a9e0:	45bc      	cmp	ip, r7
 800a9e2:	d304      	bcc.n	800a9ee <__mdiff+0x9a>
 800a9e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a9e8:	b183      	cbz	r3, 800aa0c <__mdiff+0xb8>
 800a9ea:	6106      	str	r6, [r0, #16]
 800a9ec:	e7c4      	b.n	800a978 <__mdiff+0x24>
 800a9ee:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a9f2:	b2a2      	uxth	r2, r4
 800a9f4:	4472      	add	r2, lr
 800a9f6:	1413      	asrs	r3, r2, #16
 800a9f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a9fc:	b292      	uxth	r2, r2
 800a9fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa02:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aa06:	f841 2b04 	str.w	r2, [r1], #4
 800aa0a:	e7e9      	b.n	800a9e0 <__mdiff+0x8c>
 800aa0c:	3e01      	subs	r6, #1
 800aa0e:	e7e9      	b.n	800a9e4 <__mdiff+0x90>

0800aa10 <__ulp>:
 800aa10:	4b10      	ldr	r3, [pc, #64]	; (800aa54 <__ulp+0x44>)
 800aa12:	400b      	ands	r3, r1
 800aa14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	dd02      	ble.n	800aa22 <__ulp+0x12>
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4770      	bx	lr
 800aa22:	425b      	negs	r3, r3
 800aa24:	151b      	asrs	r3, r3, #20
 800aa26:	2b13      	cmp	r3, #19
 800aa28:	f04f 0000 	mov.w	r0, #0
 800aa2c:	f04f 0100 	mov.w	r1, #0
 800aa30:	dc04      	bgt.n	800aa3c <__ulp+0x2c>
 800aa32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aa36:	fa42 f103 	asr.w	r1, r2, r3
 800aa3a:	4770      	bx	lr
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	3b14      	subs	r3, #20
 800aa40:	2b1e      	cmp	r3, #30
 800aa42:	bfce      	itee	gt
 800aa44:	4613      	movgt	r3, r2
 800aa46:	f1c3 031f 	rsble	r3, r3, #31
 800aa4a:	fa02 f303 	lslle.w	r3, r2, r3
 800aa4e:	4618      	mov	r0, r3
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	7ff00000 	.word	0x7ff00000

0800aa58 <__b2d>:
 800aa58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa5c:	6907      	ldr	r7, [r0, #16]
 800aa5e:	f100 0914 	add.w	r9, r0, #20
 800aa62:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800aa66:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800aa6a:	f1a7 0804 	sub.w	r8, r7, #4
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7ff fdc7 	bl	800a602 <__hi0bits>
 800aa74:	f1c0 0320 	rsb	r3, r0, #32
 800aa78:	280a      	cmp	r0, #10
 800aa7a:	600b      	str	r3, [r1, #0]
 800aa7c:	491e      	ldr	r1, [pc, #120]	; (800aaf8 <__b2d+0xa0>)
 800aa7e:	dc17      	bgt.n	800aab0 <__b2d+0x58>
 800aa80:	45c1      	cmp	r9, r8
 800aa82:	bf28      	it	cs
 800aa84:	2200      	movcs	r2, #0
 800aa86:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa8a:	fa26 f30c 	lsr.w	r3, r6, ip
 800aa8e:	bf38      	it	cc
 800aa90:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa94:	ea43 0501 	orr.w	r5, r3, r1
 800aa98:	f100 0315 	add.w	r3, r0, #21
 800aa9c:	fa06 f303 	lsl.w	r3, r6, r3
 800aaa0:	fa22 f20c 	lsr.w	r2, r2, ip
 800aaa4:	ea43 0402 	orr.w	r4, r3, r2
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	4629      	mov	r1, r5
 800aaac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab0:	45c1      	cmp	r9, r8
 800aab2:	bf3a      	itte	cc
 800aab4:	f1a7 0808 	subcc.w	r8, r7, #8
 800aab8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aabc:	2200      	movcs	r2, #0
 800aabe:	f1b0 030b 	subs.w	r3, r0, #11
 800aac2:	d015      	beq.n	800aaf0 <__b2d+0x98>
 800aac4:	409e      	lsls	r6, r3
 800aac6:	f1c3 0720 	rsb	r7, r3, #32
 800aaca:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800aace:	fa22 f107 	lsr.w	r1, r2, r7
 800aad2:	45c8      	cmp	r8, r9
 800aad4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800aad8:	ea46 0501 	orr.w	r5, r6, r1
 800aadc:	bf94      	ite	ls
 800aade:	2100      	movls	r1, #0
 800aae0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800aae4:	fa02 f003 	lsl.w	r0, r2, r3
 800aae8:	40f9      	lsrs	r1, r7
 800aaea:	ea40 0401 	orr.w	r4, r0, r1
 800aaee:	e7db      	b.n	800aaa8 <__b2d+0x50>
 800aaf0:	ea46 0501 	orr.w	r5, r6, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	e7d7      	b.n	800aaa8 <__b2d+0x50>
 800aaf8:	3ff00000 	.word	0x3ff00000

0800aafc <__d2b>:
 800aafc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ab00:	461c      	mov	r4, r3
 800ab02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ab06:	2101      	movs	r1, #1
 800ab08:	4690      	mov	r8, r2
 800ab0a:	f7ff fcb6 	bl	800a47a <_Balloc>
 800ab0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ab12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ab16:	4607      	mov	r7, r0
 800ab18:	bb34      	cbnz	r4, 800ab68 <__d2b+0x6c>
 800ab1a:	9201      	str	r2, [sp, #4]
 800ab1c:	f1b8 0200 	subs.w	r2, r8, #0
 800ab20:	d027      	beq.n	800ab72 <__d2b+0x76>
 800ab22:	a802      	add	r0, sp, #8
 800ab24:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ab28:	f7ff fd8a 	bl	800a640 <__lo0bits>
 800ab2c:	9900      	ldr	r1, [sp, #0]
 800ab2e:	b1f0      	cbz	r0, 800ab6e <__d2b+0x72>
 800ab30:	9a01      	ldr	r2, [sp, #4]
 800ab32:	f1c0 0320 	rsb	r3, r0, #32
 800ab36:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3a:	430b      	orrs	r3, r1
 800ab3c:	40c2      	lsrs	r2, r0
 800ab3e:	617b      	str	r3, [r7, #20]
 800ab40:	9201      	str	r2, [sp, #4]
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bf14      	ite	ne
 800ab48:	2102      	movne	r1, #2
 800ab4a:	2101      	moveq	r1, #1
 800ab4c:	61bb      	str	r3, [r7, #24]
 800ab4e:	6139      	str	r1, [r7, #16]
 800ab50:	b1c4      	cbz	r4, 800ab84 <__d2b+0x88>
 800ab52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ab56:	4404      	add	r4, r0
 800ab58:	6034      	str	r4, [r6, #0]
 800ab5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab5e:	6028      	str	r0, [r5, #0]
 800ab60:	4638      	mov	r0, r7
 800ab62:	b002      	add	sp, #8
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ab6c:	e7d5      	b.n	800ab1a <__d2b+0x1e>
 800ab6e:	6179      	str	r1, [r7, #20]
 800ab70:	e7e7      	b.n	800ab42 <__d2b+0x46>
 800ab72:	a801      	add	r0, sp, #4
 800ab74:	f7ff fd64 	bl	800a640 <__lo0bits>
 800ab78:	2101      	movs	r1, #1
 800ab7a:	9b01      	ldr	r3, [sp, #4]
 800ab7c:	6139      	str	r1, [r7, #16]
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	3020      	adds	r0, #32
 800ab82:	e7e5      	b.n	800ab50 <__d2b+0x54>
 800ab84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ab8c:	6030      	str	r0, [r6, #0]
 800ab8e:	6918      	ldr	r0, [r3, #16]
 800ab90:	f7ff fd37 	bl	800a602 <__hi0bits>
 800ab94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab98:	e7e1      	b.n	800ab5e <__d2b+0x62>

0800ab9a <__ratio>:
 800ab9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9e:	4688      	mov	r8, r1
 800aba0:	4669      	mov	r1, sp
 800aba2:	4681      	mov	r9, r0
 800aba4:	f7ff ff58 	bl	800aa58 <__b2d>
 800aba8:	468b      	mov	fp, r1
 800abaa:	4606      	mov	r6, r0
 800abac:	460f      	mov	r7, r1
 800abae:	4640      	mov	r0, r8
 800abb0:	a901      	add	r1, sp, #4
 800abb2:	f7ff ff51 	bl	800aa58 <__b2d>
 800abb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abbe:	460d      	mov	r5, r1
 800abc0:	eba3 0c02 	sub.w	ip, r3, r2
 800abc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abc8:	1a9b      	subs	r3, r3, r2
 800abca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abce:	2b00      	cmp	r3, #0
 800abd0:	bfd5      	itete	le
 800abd2:	460a      	movle	r2, r1
 800abd4:	463a      	movgt	r2, r7
 800abd6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abda:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800abde:	bfd8      	it	le
 800abe0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800abe4:	462b      	mov	r3, r5
 800abe6:	4602      	mov	r2, r0
 800abe8:	4659      	mov	r1, fp
 800abea:	4630      	mov	r0, r6
 800abec:	f7f5 fd9e 	bl	800072c <__aeabi_ddiv>
 800abf0:	b003      	add	sp, #12
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abf6 <__copybits>:
 800abf6:	3901      	subs	r1, #1
 800abf8:	b510      	push	{r4, lr}
 800abfa:	1149      	asrs	r1, r1, #5
 800abfc:	6914      	ldr	r4, [r2, #16]
 800abfe:	3101      	adds	r1, #1
 800ac00:	f102 0314 	add.w	r3, r2, #20
 800ac04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	4602      	mov	r2, r0
 800ac10:	d303      	bcc.n	800ac1a <__copybits+0x24>
 800ac12:	2300      	movs	r3, #0
 800ac14:	428a      	cmp	r2, r1
 800ac16:	d305      	bcc.n	800ac24 <__copybits+0x2e>
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1e:	f840 2b04 	str.w	r2, [r0], #4
 800ac22:	e7f3      	b.n	800ac0c <__copybits+0x16>
 800ac24:	f842 3b04 	str.w	r3, [r2], #4
 800ac28:	e7f4      	b.n	800ac14 <__copybits+0x1e>

0800ac2a <__any_on>:
 800ac2a:	f100 0214 	add.w	r2, r0, #20
 800ac2e:	6900      	ldr	r0, [r0, #16]
 800ac30:	114b      	asrs	r3, r1, #5
 800ac32:	4298      	cmp	r0, r3
 800ac34:	b510      	push	{r4, lr}
 800ac36:	db11      	blt.n	800ac5c <__any_on+0x32>
 800ac38:	dd0a      	ble.n	800ac50 <__any_on+0x26>
 800ac3a:	f011 011f 	ands.w	r1, r1, #31
 800ac3e:	d007      	beq.n	800ac50 <__any_on+0x26>
 800ac40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac44:	fa24 f001 	lsr.w	r0, r4, r1
 800ac48:	fa00 f101 	lsl.w	r1, r0, r1
 800ac4c:	428c      	cmp	r4, r1
 800ac4e:	d10b      	bne.n	800ac68 <__any_on+0x3e>
 800ac50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d803      	bhi.n	800ac60 <__any_on+0x36>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	bd10      	pop	{r4, pc}
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	e7f7      	b.n	800ac50 <__any_on+0x26>
 800ac60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d0f5      	beq.n	800ac54 <__any_on+0x2a>
 800ac68:	2001      	movs	r0, #1
 800ac6a:	e7f6      	b.n	800ac5a <__any_on+0x30>

0800ac6c <_calloc_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	fb02 f401 	mul.w	r4, r2, r1
 800ac72:	4621      	mov	r1, r4
 800ac74:	f000 f854 	bl	800ad20 <_malloc_r>
 800ac78:	4605      	mov	r5, r0
 800ac7a:	b118      	cbz	r0, 800ac84 <_calloc_r+0x18>
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	2100      	movs	r1, #0
 800ac80:	f7fc fc4c 	bl	800751c <memset>
 800ac84:	4628      	mov	r0, r5
 800ac86:	bd38      	pop	{r3, r4, r5, pc}

0800ac88 <_free_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d043      	beq.n	800ad18 <_free_r+0x90>
 800ac90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac94:	1f0c      	subs	r4, r1, #4
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bfb8      	it	lt
 800ac9a:	18e4      	addlt	r4, r4, r3
 800ac9c:	f000 fdbf 	bl	800b81e <__malloc_lock>
 800aca0:	4a1e      	ldr	r2, [pc, #120]	; (800ad1c <_free_r+0x94>)
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	4610      	mov	r0, r2
 800aca6:	b933      	cbnz	r3, 800acb6 <_free_r+0x2e>
 800aca8:	6063      	str	r3, [r4, #4]
 800acaa:	6014      	str	r4, [r2, #0]
 800acac:	4628      	mov	r0, r5
 800acae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acb2:	f000 bdb5 	b.w	800b820 <__malloc_unlock>
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	d90b      	bls.n	800acd2 <_free_r+0x4a>
 800acba:	6821      	ldr	r1, [r4, #0]
 800acbc:	1862      	adds	r2, r4, r1
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bf01      	itttt	eq
 800acc2:	681a      	ldreq	r2, [r3, #0]
 800acc4:	685b      	ldreq	r3, [r3, #4]
 800acc6:	1852      	addeq	r2, r2, r1
 800acc8:	6022      	streq	r2, [r4, #0]
 800acca:	6063      	str	r3, [r4, #4]
 800accc:	6004      	str	r4, [r0, #0]
 800acce:	e7ed      	b.n	800acac <_free_r+0x24>
 800acd0:	4613      	mov	r3, r2
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	b10a      	cbz	r2, 800acda <_free_r+0x52>
 800acd6:	42a2      	cmp	r2, r4
 800acd8:	d9fa      	bls.n	800acd0 <_free_r+0x48>
 800acda:	6819      	ldr	r1, [r3, #0]
 800acdc:	1858      	adds	r0, r3, r1
 800acde:	42a0      	cmp	r0, r4
 800ace0:	d10b      	bne.n	800acfa <_free_r+0x72>
 800ace2:	6820      	ldr	r0, [r4, #0]
 800ace4:	4401      	add	r1, r0
 800ace6:	1858      	adds	r0, r3, r1
 800ace8:	4282      	cmp	r2, r0
 800acea:	6019      	str	r1, [r3, #0]
 800acec:	d1de      	bne.n	800acac <_free_r+0x24>
 800acee:	6810      	ldr	r0, [r2, #0]
 800acf0:	6852      	ldr	r2, [r2, #4]
 800acf2:	4401      	add	r1, r0
 800acf4:	6019      	str	r1, [r3, #0]
 800acf6:	605a      	str	r2, [r3, #4]
 800acf8:	e7d8      	b.n	800acac <_free_r+0x24>
 800acfa:	d902      	bls.n	800ad02 <_free_r+0x7a>
 800acfc:	230c      	movs	r3, #12
 800acfe:	602b      	str	r3, [r5, #0]
 800ad00:	e7d4      	b.n	800acac <_free_r+0x24>
 800ad02:	6820      	ldr	r0, [r4, #0]
 800ad04:	1821      	adds	r1, r4, r0
 800ad06:	428a      	cmp	r2, r1
 800ad08:	bf01      	itttt	eq
 800ad0a:	6811      	ldreq	r1, [r2, #0]
 800ad0c:	6852      	ldreq	r2, [r2, #4]
 800ad0e:	1809      	addeq	r1, r1, r0
 800ad10:	6021      	streq	r1, [r4, #0]
 800ad12:	6062      	str	r2, [r4, #4]
 800ad14:	605c      	str	r4, [r3, #4]
 800ad16:	e7c9      	b.n	800acac <_free_r+0x24>
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000210 	.word	0x20000210

0800ad20 <_malloc_r>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	1ccd      	adds	r5, r1, #3
 800ad24:	f025 0503 	bic.w	r5, r5, #3
 800ad28:	3508      	adds	r5, #8
 800ad2a:	2d0c      	cmp	r5, #12
 800ad2c:	bf38      	it	cc
 800ad2e:	250c      	movcc	r5, #12
 800ad30:	2d00      	cmp	r5, #0
 800ad32:	4606      	mov	r6, r0
 800ad34:	db01      	blt.n	800ad3a <_malloc_r+0x1a>
 800ad36:	42a9      	cmp	r1, r5
 800ad38:	d903      	bls.n	800ad42 <_malloc_r+0x22>
 800ad3a:	230c      	movs	r3, #12
 800ad3c:	6033      	str	r3, [r6, #0]
 800ad3e:	2000      	movs	r0, #0
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
 800ad42:	f000 fd6c 	bl	800b81e <__malloc_lock>
 800ad46:	4a21      	ldr	r2, [pc, #132]	; (800adcc <_malloc_r+0xac>)
 800ad48:	6814      	ldr	r4, [r2, #0]
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	b991      	cbnz	r1, 800ad74 <_malloc_r+0x54>
 800ad4e:	4c20      	ldr	r4, [pc, #128]	; (800add0 <_malloc_r+0xb0>)
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	b91b      	cbnz	r3, 800ad5c <_malloc_r+0x3c>
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 facd 	bl	800b2f4 <_sbrk_r>
 800ad5a:	6020      	str	r0, [r4, #0]
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f000 fac8 	bl	800b2f4 <_sbrk_r>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d124      	bne.n	800adb2 <_malloc_r+0x92>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	6033      	str	r3, [r6, #0]
 800ad6e:	f000 fd57 	bl	800b820 <__malloc_unlock>
 800ad72:	e7e4      	b.n	800ad3e <_malloc_r+0x1e>
 800ad74:	680b      	ldr	r3, [r1, #0]
 800ad76:	1b5b      	subs	r3, r3, r5
 800ad78:	d418      	bmi.n	800adac <_malloc_r+0x8c>
 800ad7a:	2b0b      	cmp	r3, #11
 800ad7c:	d90f      	bls.n	800ad9e <_malloc_r+0x7e>
 800ad7e:	600b      	str	r3, [r1, #0]
 800ad80:	18cc      	adds	r4, r1, r3
 800ad82:	50cd      	str	r5, [r1, r3]
 800ad84:	4630      	mov	r0, r6
 800ad86:	f000 fd4b 	bl	800b820 <__malloc_unlock>
 800ad8a:	f104 000b 	add.w	r0, r4, #11
 800ad8e:	1d23      	adds	r3, r4, #4
 800ad90:	f020 0007 	bic.w	r0, r0, #7
 800ad94:	1ac3      	subs	r3, r0, r3
 800ad96:	d0d3      	beq.n	800ad40 <_malloc_r+0x20>
 800ad98:	425a      	negs	r2, r3
 800ad9a:	50e2      	str	r2, [r4, r3]
 800ad9c:	e7d0      	b.n	800ad40 <_malloc_r+0x20>
 800ad9e:	684b      	ldr	r3, [r1, #4]
 800ada0:	428c      	cmp	r4, r1
 800ada2:	bf16      	itet	ne
 800ada4:	6063      	strne	r3, [r4, #4]
 800ada6:	6013      	streq	r3, [r2, #0]
 800ada8:	460c      	movne	r4, r1
 800adaa:	e7eb      	b.n	800ad84 <_malloc_r+0x64>
 800adac:	460c      	mov	r4, r1
 800adae:	6849      	ldr	r1, [r1, #4]
 800adb0:	e7cc      	b.n	800ad4c <_malloc_r+0x2c>
 800adb2:	1cc4      	adds	r4, r0, #3
 800adb4:	f024 0403 	bic.w	r4, r4, #3
 800adb8:	42a0      	cmp	r0, r4
 800adba:	d005      	beq.n	800adc8 <_malloc_r+0xa8>
 800adbc:	1a21      	subs	r1, r4, r0
 800adbe:	4630      	mov	r0, r6
 800adc0:	f000 fa98 	bl	800b2f4 <_sbrk_r>
 800adc4:	3001      	adds	r0, #1
 800adc6:	d0cf      	beq.n	800ad68 <_malloc_r+0x48>
 800adc8:	6025      	str	r5, [r4, #0]
 800adca:	e7db      	b.n	800ad84 <_malloc_r+0x64>
 800adcc:	20000210 	.word	0x20000210
 800add0:	20000214 	.word	0x20000214

0800add4 <__ssputs_r>:
 800add4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add8:	688e      	ldr	r6, [r1, #8]
 800adda:	4682      	mov	sl, r0
 800addc:	429e      	cmp	r6, r3
 800adde:	460c      	mov	r4, r1
 800ade0:	4690      	mov	r8, r2
 800ade2:	4699      	mov	r9, r3
 800ade4:	d837      	bhi.n	800ae56 <__ssputs_r+0x82>
 800ade6:	898a      	ldrh	r2, [r1, #12]
 800ade8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adec:	d031      	beq.n	800ae52 <__ssputs_r+0x7e>
 800adee:	2302      	movs	r3, #2
 800adf0:	6825      	ldr	r5, [r4, #0]
 800adf2:	6909      	ldr	r1, [r1, #16]
 800adf4:	1a6f      	subs	r7, r5, r1
 800adf6:	6965      	ldr	r5, [r4, #20]
 800adf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adfc:	fb95 f5f3 	sdiv	r5, r5, r3
 800ae00:	f109 0301 	add.w	r3, r9, #1
 800ae04:	443b      	add	r3, r7
 800ae06:	429d      	cmp	r5, r3
 800ae08:	bf38      	it	cc
 800ae0a:	461d      	movcc	r5, r3
 800ae0c:	0553      	lsls	r3, r2, #21
 800ae0e:	d530      	bpl.n	800ae72 <__ssputs_r+0x9e>
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7ff ff85 	bl	800ad20 <_malloc_r>
 800ae16:	4606      	mov	r6, r0
 800ae18:	b950      	cbnz	r0, 800ae30 <__ssputs_r+0x5c>
 800ae1a:	230c      	movs	r3, #12
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	f8ca 3000 	str.w	r3, [sl]
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae30:	463a      	mov	r2, r7
 800ae32:	6921      	ldr	r1, [r4, #16]
 800ae34:	f7ff fb16 	bl	800a464 <memcpy>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	6126      	str	r6, [r4, #16]
 800ae46:	443e      	add	r6, r7
 800ae48:	6026      	str	r6, [r4, #0]
 800ae4a:	464e      	mov	r6, r9
 800ae4c:	6165      	str	r5, [r4, #20]
 800ae4e:	1bed      	subs	r5, r5, r7
 800ae50:	60a5      	str	r5, [r4, #8]
 800ae52:	454e      	cmp	r6, r9
 800ae54:	d900      	bls.n	800ae58 <__ssputs_r+0x84>
 800ae56:	464e      	mov	r6, r9
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4641      	mov	r1, r8
 800ae5c:	6820      	ldr	r0, [r4, #0]
 800ae5e:	f000 fcc5 	bl	800b7ec <memmove>
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	2000      	movs	r0, #0
 800ae66:	1b9b      	subs	r3, r3, r6
 800ae68:	60a3      	str	r3, [r4, #8]
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	441e      	add	r6, r3
 800ae6e:	6026      	str	r6, [r4, #0]
 800ae70:	e7dc      	b.n	800ae2c <__ssputs_r+0x58>
 800ae72:	462a      	mov	r2, r5
 800ae74:	f000 fcd5 	bl	800b822 <_realloc_r>
 800ae78:	4606      	mov	r6, r0
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d1e2      	bne.n	800ae44 <__ssputs_r+0x70>
 800ae7e:	6921      	ldr	r1, [r4, #16]
 800ae80:	4650      	mov	r0, sl
 800ae82:	f7ff ff01 	bl	800ac88 <_free_r>
 800ae86:	e7c8      	b.n	800ae1a <__ssputs_r+0x46>

0800ae88 <_svfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	461d      	mov	r5, r3
 800ae8e:	898b      	ldrh	r3, [r1, #12]
 800ae90:	b09d      	sub	sp, #116	; 0x74
 800ae92:	061f      	lsls	r7, r3, #24
 800ae94:	4680      	mov	r8, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4616      	mov	r6, r2
 800ae9a:	d50f      	bpl.n	800aebc <_svfiprintf_r+0x34>
 800ae9c:	690b      	ldr	r3, [r1, #16]
 800ae9e:	b96b      	cbnz	r3, 800aebc <_svfiprintf_r+0x34>
 800aea0:	2140      	movs	r1, #64	; 0x40
 800aea2:	f7ff ff3d 	bl	800ad20 <_malloc_r>
 800aea6:	6020      	str	r0, [r4, #0]
 800aea8:	6120      	str	r0, [r4, #16]
 800aeaa:	b928      	cbnz	r0, 800aeb8 <_svfiprintf_r+0x30>
 800aeac:	230c      	movs	r3, #12
 800aeae:	f8c8 3000 	str.w	r3, [r8]
 800aeb2:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb6:	e0c8      	b.n	800b04a <_svfiprintf_r+0x1c2>
 800aeb8:	2340      	movs	r3, #64	; 0x40
 800aeba:	6163      	str	r3, [r4, #20]
 800aebc:	2300      	movs	r3, #0
 800aebe:	9309      	str	r3, [sp, #36]	; 0x24
 800aec0:	2320      	movs	r3, #32
 800aec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aec6:	2330      	movs	r3, #48	; 0x30
 800aec8:	f04f 0b01 	mov.w	fp, #1
 800aecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aed0:	9503      	str	r5, [sp, #12]
 800aed2:	4637      	mov	r7, r6
 800aed4:	463d      	mov	r5, r7
 800aed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aeda:	b10b      	cbz	r3, 800aee0 <_svfiprintf_r+0x58>
 800aedc:	2b25      	cmp	r3, #37	; 0x25
 800aede:	d13e      	bne.n	800af5e <_svfiprintf_r+0xd6>
 800aee0:	ebb7 0a06 	subs.w	sl, r7, r6
 800aee4:	d00b      	beq.n	800aefe <_svfiprintf_r+0x76>
 800aee6:	4653      	mov	r3, sl
 800aee8:	4632      	mov	r2, r6
 800aeea:	4621      	mov	r1, r4
 800aeec:	4640      	mov	r0, r8
 800aeee:	f7ff ff71 	bl	800add4 <__ssputs_r>
 800aef2:	3001      	adds	r0, #1
 800aef4:	f000 80a4 	beq.w	800b040 <_svfiprintf_r+0x1b8>
 800aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefa:	4453      	add	r3, sl
 800aefc:	9309      	str	r3, [sp, #36]	; 0x24
 800aefe:	783b      	ldrb	r3, [r7, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 809d 	beq.w	800b040 <_svfiprintf_r+0x1b8>
 800af06:	2300      	movs	r3, #0
 800af08:	f04f 32ff 	mov.w	r2, #4294967295
 800af0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	9307      	str	r3, [sp, #28]
 800af14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af18:	931a      	str	r3, [sp, #104]	; 0x68
 800af1a:	462f      	mov	r7, r5
 800af1c:	2205      	movs	r2, #5
 800af1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af22:	4850      	ldr	r0, [pc, #320]	; (800b064 <_svfiprintf_r+0x1dc>)
 800af24:	f7ff fa90 	bl	800a448 <memchr>
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	b9d0      	cbnz	r0, 800af62 <_svfiprintf_r+0xda>
 800af2c:	06d9      	lsls	r1, r3, #27
 800af2e:	bf44      	itt	mi
 800af30:	2220      	movmi	r2, #32
 800af32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af36:	071a      	lsls	r2, r3, #28
 800af38:	bf44      	itt	mi
 800af3a:	222b      	movmi	r2, #43	; 0x2b
 800af3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af40:	782a      	ldrb	r2, [r5, #0]
 800af42:	2a2a      	cmp	r2, #42	; 0x2a
 800af44:	d015      	beq.n	800af72 <_svfiprintf_r+0xea>
 800af46:	462f      	mov	r7, r5
 800af48:	2000      	movs	r0, #0
 800af4a:	250a      	movs	r5, #10
 800af4c:	9a07      	ldr	r2, [sp, #28]
 800af4e:	4639      	mov	r1, r7
 800af50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af54:	3b30      	subs	r3, #48	; 0x30
 800af56:	2b09      	cmp	r3, #9
 800af58:	d94d      	bls.n	800aff6 <_svfiprintf_r+0x16e>
 800af5a:	b1b8      	cbz	r0, 800af8c <_svfiprintf_r+0x104>
 800af5c:	e00f      	b.n	800af7e <_svfiprintf_r+0xf6>
 800af5e:	462f      	mov	r7, r5
 800af60:	e7b8      	b.n	800aed4 <_svfiprintf_r+0x4c>
 800af62:	4a40      	ldr	r2, [pc, #256]	; (800b064 <_svfiprintf_r+0x1dc>)
 800af64:	463d      	mov	r5, r7
 800af66:	1a80      	subs	r0, r0, r2
 800af68:	fa0b f000 	lsl.w	r0, fp, r0
 800af6c:	4318      	orrs	r0, r3
 800af6e:	9004      	str	r0, [sp, #16]
 800af70:	e7d3      	b.n	800af1a <_svfiprintf_r+0x92>
 800af72:	9a03      	ldr	r2, [sp, #12]
 800af74:	1d11      	adds	r1, r2, #4
 800af76:	6812      	ldr	r2, [r2, #0]
 800af78:	9103      	str	r1, [sp, #12]
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	db01      	blt.n	800af82 <_svfiprintf_r+0xfa>
 800af7e:	9207      	str	r2, [sp, #28]
 800af80:	e004      	b.n	800af8c <_svfiprintf_r+0x104>
 800af82:	4252      	negs	r2, r2
 800af84:	f043 0302 	orr.w	r3, r3, #2
 800af88:	9207      	str	r2, [sp, #28]
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	783b      	ldrb	r3, [r7, #0]
 800af8e:	2b2e      	cmp	r3, #46	; 0x2e
 800af90:	d10c      	bne.n	800afac <_svfiprintf_r+0x124>
 800af92:	787b      	ldrb	r3, [r7, #1]
 800af94:	2b2a      	cmp	r3, #42	; 0x2a
 800af96:	d133      	bne.n	800b000 <_svfiprintf_r+0x178>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	3702      	adds	r7, #2
 800af9c:	1d1a      	adds	r2, r3, #4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	9203      	str	r2, [sp, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bfb8      	it	lt
 800afa6:	f04f 33ff 	movlt.w	r3, #4294967295
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	4d2e      	ldr	r5, [pc, #184]	; (800b068 <_svfiprintf_r+0x1e0>)
 800afae:	2203      	movs	r2, #3
 800afb0:	7839      	ldrb	r1, [r7, #0]
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7ff fa48 	bl	800a448 <memchr>
 800afb8:	b138      	cbz	r0, 800afca <_svfiprintf_r+0x142>
 800afba:	2340      	movs	r3, #64	; 0x40
 800afbc:	1b40      	subs	r0, r0, r5
 800afbe:	fa03 f000 	lsl.w	r0, r3, r0
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	3701      	adds	r7, #1
 800afc6:	4303      	orrs	r3, r0
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	7839      	ldrb	r1, [r7, #0]
 800afcc:	2206      	movs	r2, #6
 800afce:	4827      	ldr	r0, [pc, #156]	; (800b06c <_svfiprintf_r+0x1e4>)
 800afd0:	1c7e      	adds	r6, r7, #1
 800afd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afd6:	f7ff fa37 	bl	800a448 <memchr>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d038      	beq.n	800b050 <_svfiprintf_r+0x1c8>
 800afde:	4b24      	ldr	r3, [pc, #144]	; (800b070 <_svfiprintf_r+0x1e8>)
 800afe0:	bb13      	cbnz	r3, 800b028 <_svfiprintf_r+0x1a0>
 800afe2:	9b03      	ldr	r3, [sp, #12]
 800afe4:	3307      	adds	r3, #7
 800afe6:	f023 0307 	bic.w	r3, r3, #7
 800afea:	3308      	adds	r3, #8
 800afec:	9303      	str	r3, [sp, #12]
 800afee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff0:	444b      	add	r3, r9
 800aff2:	9309      	str	r3, [sp, #36]	; 0x24
 800aff4:	e76d      	b.n	800aed2 <_svfiprintf_r+0x4a>
 800aff6:	fb05 3202 	mla	r2, r5, r2, r3
 800affa:	2001      	movs	r0, #1
 800affc:	460f      	mov	r7, r1
 800affe:	e7a6      	b.n	800af4e <_svfiprintf_r+0xc6>
 800b000:	2300      	movs	r3, #0
 800b002:	250a      	movs	r5, #10
 800b004:	4619      	mov	r1, r3
 800b006:	3701      	adds	r7, #1
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	4638      	mov	r0, r7
 800b00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b010:	3a30      	subs	r2, #48	; 0x30
 800b012:	2a09      	cmp	r2, #9
 800b014:	d903      	bls.n	800b01e <_svfiprintf_r+0x196>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0c8      	beq.n	800afac <_svfiprintf_r+0x124>
 800b01a:	9105      	str	r1, [sp, #20]
 800b01c:	e7c6      	b.n	800afac <_svfiprintf_r+0x124>
 800b01e:	fb05 2101 	mla	r1, r5, r1, r2
 800b022:	2301      	movs	r3, #1
 800b024:	4607      	mov	r7, r0
 800b026:	e7f0      	b.n	800b00a <_svfiprintf_r+0x182>
 800b028:	ab03      	add	r3, sp, #12
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	4622      	mov	r2, r4
 800b02e:	4b11      	ldr	r3, [pc, #68]	; (800b074 <_svfiprintf_r+0x1ec>)
 800b030:	a904      	add	r1, sp, #16
 800b032:	4640      	mov	r0, r8
 800b034:	f7fc fb0c 	bl	8007650 <_printf_float>
 800b038:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b03c:	4681      	mov	r9, r0
 800b03e:	d1d6      	bne.n	800afee <_svfiprintf_r+0x166>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	065b      	lsls	r3, r3, #25
 800b044:	f53f af35 	bmi.w	800aeb2 <_svfiprintf_r+0x2a>
 800b048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b04a:	b01d      	add	sp, #116	; 0x74
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b050:	ab03      	add	r3, sp, #12
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	4622      	mov	r2, r4
 800b056:	4b07      	ldr	r3, [pc, #28]	; (800b074 <_svfiprintf_r+0x1ec>)
 800b058:	a904      	add	r1, sp, #16
 800b05a:	4640      	mov	r0, r8
 800b05c:	f7fc fda4 	bl	8007ba8 <_printf_i>
 800b060:	e7ea      	b.n	800b038 <_svfiprintf_r+0x1b0>
 800b062:	bf00      	nop
 800b064:	0800bd24 	.word	0x0800bd24
 800b068:	0800bd2a 	.word	0x0800bd2a
 800b06c:	0800bd2e 	.word	0x0800bd2e
 800b070:	08007651 	.word	0x08007651
 800b074:	0800add5 	.word	0x0800add5

0800b078 <__sfputc_r>:
 800b078:	6893      	ldr	r3, [r2, #8]
 800b07a:	b410      	push	{r4}
 800b07c:	3b01      	subs	r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	6093      	str	r3, [r2, #8]
 800b082:	da07      	bge.n	800b094 <__sfputc_r+0x1c>
 800b084:	6994      	ldr	r4, [r2, #24]
 800b086:	42a3      	cmp	r3, r4
 800b088:	db01      	blt.n	800b08e <__sfputc_r+0x16>
 800b08a:	290a      	cmp	r1, #10
 800b08c:	d102      	bne.n	800b094 <__sfputc_r+0x1c>
 800b08e:	bc10      	pop	{r4}
 800b090:	f000 b996 	b.w	800b3c0 <__swbuf_r>
 800b094:	6813      	ldr	r3, [r2, #0]
 800b096:	1c58      	adds	r0, r3, #1
 800b098:	6010      	str	r0, [r2, #0]
 800b09a:	7019      	strb	r1, [r3, #0]
 800b09c:	4608      	mov	r0, r1
 800b09e:	bc10      	pop	{r4}
 800b0a0:	4770      	bx	lr

0800b0a2 <__sfputs_r>:
 800b0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	460f      	mov	r7, r1
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	18d5      	adds	r5, r2, r3
 800b0ac:	42ac      	cmp	r4, r5
 800b0ae:	d101      	bne.n	800b0b4 <__sfputs_r+0x12>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e007      	b.n	800b0c4 <__sfputs_r+0x22>
 800b0b4:	463a      	mov	r2, r7
 800b0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7ff ffdc 	bl	800b078 <__sfputc_r>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d1f3      	bne.n	800b0ac <__sfputs_r+0xa>
 800b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c8 <_vfiprintf_r>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	b09d      	sub	sp, #116	; 0x74
 800b0d0:	4617      	mov	r7, r2
 800b0d2:	461d      	mov	r5, r3
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	b118      	cbz	r0, 800b0e0 <_vfiprintf_r+0x18>
 800b0d8:	6983      	ldr	r3, [r0, #24]
 800b0da:	b90b      	cbnz	r3, 800b0e0 <_vfiprintf_r+0x18>
 800b0dc:	f7fe fdd4 	bl	8009c88 <__sinit>
 800b0e0:	4b7c      	ldr	r3, [pc, #496]	; (800b2d4 <_vfiprintf_r+0x20c>)
 800b0e2:	429c      	cmp	r4, r3
 800b0e4:	d158      	bne.n	800b198 <_vfiprintf_r+0xd0>
 800b0e6:	6874      	ldr	r4, [r6, #4]
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	0718      	lsls	r0, r3, #28
 800b0ec:	d55e      	bpl.n	800b1ac <_vfiprintf_r+0xe4>
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d05b      	beq.n	800b1ac <_vfiprintf_r+0xe4>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f8:	2320      	movs	r3, #32
 800b0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0fe:	2330      	movs	r3, #48	; 0x30
 800b100:	f04f 0b01 	mov.w	fp, #1
 800b104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b108:	9503      	str	r5, [sp, #12]
 800b10a:	46b8      	mov	r8, r7
 800b10c:	4645      	mov	r5, r8
 800b10e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b112:	b10b      	cbz	r3, 800b118 <_vfiprintf_r+0x50>
 800b114:	2b25      	cmp	r3, #37	; 0x25
 800b116:	d154      	bne.n	800b1c2 <_vfiprintf_r+0xfa>
 800b118:	ebb8 0a07 	subs.w	sl, r8, r7
 800b11c:	d00b      	beq.n	800b136 <_vfiprintf_r+0x6e>
 800b11e:	4653      	mov	r3, sl
 800b120:	463a      	mov	r2, r7
 800b122:	4621      	mov	r1, r4
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff ffbc 	bl	800b0a2 <__sfputs_r>
 800b12a:	3001      	adds	r0, #1
 800b12c:	f000 80c2 	beq.w	800b2b4 <_vfiprintf_r+0x1ec>
 800b130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b132:	4453      	add	r3, sl
 800b134:	9309      	str	r3, [sp, #36]	; 0x24
 800b136:	f898 3000 	ldrb.w	r3, [r8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80ba 	beq.w	800b2b4 <_vfiprintf_r+0x1ec>
 800b140:	2300      	movs	r3, #0
 800b142:	f04f 32ff 	mov.w	r2, #4294967295
 800b146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14a:	9304      	str	r3, [sp, #16]
 800b14c:	9307      	str	r3, [sp, #28]
 800b14e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b152:	931a      	str	r3, [sp, #104]	; 0x68
 800b154:	46a8      	mov	r8, r5
 800b156:	2205      	movs	r2, #5
 800b158:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b15c:	485e      	ldr	r0, [pc, #376]	; (800b2d8 <_vfiprintf_r+0x210>)
 800b15e:	f7ff f973 	bl	800a448 <memchr>
 800b162:	9b04      	ldr	r3, [sp, #16]
 800b164:	bb78      	cbnz	r0, 800b1c6 <_vfiprintf_r+0xfe>
 800b166:	06d9      	lsls	r1, r3, #27
 800b168:	bf44      	itt	mi
 800b16a:	2220      	movmi	r2, #32
 800b16c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b170:	071a      	lsls	r2, r3, #28
 800b172:	bf44      	itt	mi
 800b174:	222b      	movmi	r2, #43	; 0x2b
 800b176:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b17a:	782a      	ldrb	r2, [r5, #0]
 800b17c:	2a2a      	cmp	r2, #42	; 0x2a
 800b17e:	d02a      	beq.n	800b1d6 <_vfiprintf_r+0x10e>
 800b180:	46a8      	mov	r8, r5
 800b182:	2000      	movs	r0, #0
 800b184:	250a      	movs	r5, #10
 800b186:	9a07      	ldr	r2, [sp, #28]
 800b188:	4641      	mov	r1, r8
 800b18a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b18e:	3b30      	subs	r3, #48	; 0x30
 800b190:	2b09      	cmp	r3, #9
 800b192:	d969      	bls.n	800b268 <_vfiprintf_r+0x1a0>
 800b194:	b360      	cbz	r0, 800b1f0 <_vfiprintf_r+0x128>
 800b196:	e024      	b.n	800b1e2 <_vfiprintf_r+0x11a>
 800b198:	4b50      	ldr	r3, [pc, #320]	; (800b2dc <_vfiprintf_r+0x214>)
 800b19a:	429c      	cmp	r4, r3
 800b19c:	d101      	bne.n	800b1a2 <_vfiprintf_r+0xda>
 800b19e:	68b4      	ldr	r4, [r6, #8]
 800b1a0:	e7a2      	b.n	800b0e8 <_vfiprintf_r+0x20>
 800b1a2:	4b4f      	ldr	r3, [pc, #316]	; (800b2e0 <_vfiprintf_r+0x218>)
 800b1a4:	429c      	cmp	r4, r3
 800b1a6:	bf08      	it	eq
 800b1a8:	68f4      	ldreq	r4, [r6, #12]
 800b1aa:	e79d      	b.n	800b0e8 <_vfiprintf_r+0x20>
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f000 f978 	bl	800b4a4 <__swsetup_r>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d09d      	beq.n	800b0f4 <_vfiprintf_r+0x2c>
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	b01d      	add	sp, #116	; 0x74
 800b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c2:	46a8      	mov	r8, r5
 800b1c4:	e7a2      	b.n	800b10c <_vfiprintf_r+0x44>
 800b1c6:	4a44      	ldr	r2, [pc, #272]	; (800b2d8 <_vfiprintf_r+0x210>)
 800b1c8:	4645      	mov	r5, r8
 800b1ca:	1a80      	subs	r0, r0, r2
 800b1cc:	fa0b f000 	lsl.w	r0, fp, r0
 800b1d0:	4318      	orrs	r0, r3
 800b1d2:	9004      	str	r0, [sp, #16]
 800b1d4:	e7be      	b.n	800b154 <_vfiprintf_r+0x8c>
 800b1d6:	9a03      	ldr	r2, [sp, #12]
 800b1d8:	1d11      	adds	r1, r2, #4
 800b1da:	6812      	ldr	r2, [r2, #0]
 800b1dc:	9103      	str	r1, [sp, #12]
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	db01      	blt.n	800b1e6 <_vfiprintf_r+0x11e>
 800b1e2:	9207      	str	r2, [sp, #28]
 800b1e4:	e004      	b.n	800b1f0 <_vfiprintf_r+0x128>
 800b1e6:	4252      	negs	r2, r2
 800b1e8:	f043 0302 	orr.w	r3, r3, #2
 800b1ec:	9207      	str	r2, [sp, #28]
 800b1ee:	9304      	str	r3, [sp, #16]
 800b1f0:	f898 3000 	ldrb.w	r3, [r8]
 800b1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b1f6:	d10e      	bne.n	800b216 <_vfiprintf_r+0x14e>
 800b1f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1fe:	d138      	bne.n	800b272 <_vfiprintf_r+0x1aa>
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	f108 0802 	add.w	r8, r8, #2
 800b206:	1d1a      	adds	r2, r3, #4
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	9203      	str	r2, [sp, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	bfb8      	it	lt
 800b210:	f04f 33ff 	movlt.w	r3, #4294967295
 800b214:	9305      	str	r3, [sp, #20]
 800b216:	4d33      	ldr	r5, [pc, #204]	; (800b2e4 <_vfiprintf_r+0x21c>)
 800b218:	2203      	movs	r2, #3
 800b21a:	f898 1000 	ldrb.w	r1, [r8]
 800b21e:	4628      	mov	r0, r5
 800b220:	f7ff f912 	bl	800a448 <memchr>
 800b224:	b140      	cbz	r0, 800b238 <_vfiprintf_r+0x170>
 800b226:	2340      	movs	r3, #64	; 0x40
 800b228:	1b40      	subs	r0, r0, r5
 800b22a:	fa03 f000 	lsl.w	r0, r3, r0
 800b22e:	9b04      	ldr	r3, [sp, #16]
 800b230:	f108 0801 	add.w	r8, r8, #1
 800b234:	4303      	orrs	r3, r0
 800b236:	9304      	str	r3, [sp, #16]
 800b238:	f898 1000 	ldrb.w	r1, [r8]
 800b23c:	2206      	movs	r2, #6
 800b23e:	482a      	ldr	r0, [pc, #168]	; (800b2e8 <_vfiprintf_r+0x220>)
 800b240:	f108 0701 	add.w	r7, r8, #1
 800b244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b248:	f7ff f8fe 	bl	800a448 <memchr>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d037      	beq.n	800b2c0 <_vfiprintf_r+0x1f8>
 800b250:	4b26      	ldr	r3, [pc, #152]	; (800b2ec <_vfiprintf_r+0x224>)
 800b252:	bb1b      	cbnz	r3, 800b29c <_vfiprintf_r+0x1d4>
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	3307      	adds	r3, #7
 800b258:	f023 0307 	bic.w	r3, r3, #7
 800b25c:	3308      	adds	r3, #8
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b262:	444b      	add	r3, r9
 800b264:	9309      	str	r3, [sp, #36]	; 0x24
 800b266:	e750      	b.n	800b10a <_vfiprintf_r+0x42>
 800b268:	fb05 3202 	mla	r2, r5, r2, r3
 800b26c:	2001      	movs	r0, #1
 800b26e:	4688      	mov	r8, r1
 800b270:	e78a      	b.n	800b188 <_vfiprintf_r+0xc0>
 800b272:	2300      	movs	r3, #0
 800b274:	250a      	movs	r5, #10
 800b276:	4619      	mov	r1, r3
 800b278:	f108 0801 	add.w	r8, r8, #1
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	4640      	mov	r0, r8
 800b280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b284:	3a30      	subs	r2, #48	; 0x30
 800b286:	2a09      	cmp	r2, #9
 800b288:	d903      	bls.n	800b292 <_vfiprintf_r+0x1ca>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0c3      	beq.n	800b216 <_vfiprintf_r+0x14e>
 800b28e:	9105      	str	r1, [sp, #20]
 800b290:	e7c1      	b.n	800b216 <_vfiprintf_r+0x14e>
 800b292:	fb05 2101 	mla	r1, r5, r1, r2
 800b296:	2301      	movs	r3, #1
 800b298:	4680      	mov	r8, r0
 800b29a:	e7f0      	b.n	800b27e <_vfiprintf_r+0x1b6>
 800b29c:	ab03      	add	r3, sp, #12
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <_vfiprintf_r+0x228>)
 800b2a4:	a904      	add	r1, sp, #16
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7fc f9d2 	bl	8007650 <_printf_float>
 800b2ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b2b0:	4681      	mov	r9, r0
 800b2b2:	d1d5      	bne.n	800b260 <_vfiprintf_r+0x198>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	065b      	lsls	r3, r3, #25
 800b2b8:	f53f af7e 	bmi.w	800b1b8 <_vfiprintf_r+0xf0>
 800b2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2be:	e77d      	b.n	800b1bc <_vfiprintf_r+0xf4>
 800b2c0:	ab03      	add	r3, sp, #12
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <_vfiprintf_r+0x228>)
 800b2c8:	a904      	add	r1, sp, #16
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7fc fc6c 	bl	8007ba8 <_printf_i>
 800b2d0:	e7ec      	b.n	800b2ac <_vfiprintf_r+0x1e4>
 800b2d2:	bf00      	nop
 800b2d4:	0800bbd8 	.word	0x0800bbd8
 800b2d8:	0800bd24 	.word	0x0800bd24
 800b2dc:	0800bbf8 	.word	0x0800bbf8
 800b2e0:	0800bbb8 	.word	0x0800bbb8
 800b2e4:	0800bd2a 	.word	0x0800bd2a
 800b2e8:	0800bd2e 	.word	0x0800bd2e
 800b2ec:	08007651 	.word	0x08007651
 800b2f0:	0800b0a3 	.word	0x0800b0a3

0800b2f4 <_sbrk_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4c05      	ldr	r4, [pc, #20]	; (800b310 <_sbrk_r+0x1c>)
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	f7f7 ff16 	bl	8003130 <_sbrk>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_sbrk_r+0x1a>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_sbrk_r+0x1a>
 800b30c:	602b      	str	r3, [r5, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	2000057c 	.word	0x2000057c

0800b314 <__sread>:
 800b314:	b510      	push	{r4, lr}
 800b316:	460c      	mov	r4, r1
 800b318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31c:	f000 faa8 	bl	800b870 <_read_r>
 800b320:	2800      	cmp	r0, #0
 800b322:	bfab      	itete	ge
 800b324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b326:	89a3      	ldrhlt	r3, [r4, #12]
 800b328:	181b      	addge	r3, r3, r0
 800b32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b32e:	bfac      	ite	ge
 800b330:	6563      	strge	r3, [r4, #84]	; 0x54
 800b332:	81a3      	strhlt	r3, [r4, #12]
 800b334:	bd10      	pop	{r4, pc}

0800b336 <__swrite>:
 800b336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33a:	461f      	mov	r7, r3
 800b33c:	898b      	ldrh	r3, [r1, #12]
 800b33e:	4605      	mov	r5, r0
 800b340:	05db      	lsls	r3, r3, #23
 800b342:	460c      	mov	r4, r1
 800b344:	4616      	mov	r6, r2
 800b346:	d505      	bpl.n	800b354 <__swrite+0x1e>
 800b348:	2302      	movs	r3, #2
 800b34a:	2200      	movs	r2, #0
 800b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b350:	f000 f9d6 	bl	800b700 <_lseek_r>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	4632      	mov	r2, r6
 800b358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b35c:	81a3      	strh	r3, [r4, #12]
 800b35e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b362:	463b      	mov	r3, r7
 800b364:	4628      	mov	r0, r5
 800b366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	f000 b889 	b.w	800b480 <_write_r>

0800b36e <__sseek>:
 800b36e:	b510      	push	{r4, lr}
 800b370:	460c      	mov	r4, r1
 800b372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b376:	f000 f9c3 	bl	800b700 <_lseek_r>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	bf15      	itete	ne
 800b380:	6560      	strne	r0, [r4, #84]	; 0x54
 800b382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b38a:	81a3      	strheq	r3, [r4, #12]
 800b38c:	bf18      	it	ne
 800b38e:	81a3      	strhne	r3, [r4, #12]
 800b390:	bd10      	pop	{r4, pc}

0800b392 <__sclose>:
 800b392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b396:	f000 b8f3 	b.w	800b580 <_close_r>

0800b39a <strncmp>:
 800b39a:	b510      	push	{r4, lr}
 800b39c:	b16a      	cbz	r2, 800b3ba <strncmp+0x20>
 800b39e:	3901      	subs	r1, #1
 800b3a0:	1884      	adds	r4, r0, r2
 800b3a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d103      	bne.n	800b3b6 <strncmp+0x1c>
 800b3ae:	42a0      	cmp	r0, r4
 800b3b0:	d001      	beq.n	800b3b6 <strncmp+0x1c>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1f5      	bne.n	800b3a2 <strncmp+0x8>
 800b3b6:	1a98      	subs	r0, r3, r2
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	e7fc      	b.n	800b3b8 <strncmp+0x1e>
	...

0800b3c0 <__swbuf_r>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	460e      	mov	r6, r1
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	b118      	cbz	r0, 800b3d2 <__swbuf_r+0x12>
 800b3ca:	6983      	ldr	r3, [r0, #24]
 800b3cc:	b90b      	cbnz	r3, 800b3d2 <__swbuf_r+0x12>
 800b3ce:	f7fe fc5b 	bl	8009c88 <__sinit>
 800b3d2:	4b21      	ldr	r3, [pc, #132]	; (800b458 <__swbuf_r+0x98>)
 800b3d4:	429c      	cmp	r4, r3
 800b3d6:	d12a      	bne.n	800b42e <__swbuf_r+0x6e>
 800b3d8:	686c      	ldr	r4, [r5, #4]
 800b3da:	69a3      	ldr	r3, [r4, #24]
 800b3dc:	60a3      	str	r3, [r4, #8]
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	071a      	lsls	r2, r3, #28
 800b3e2:	d52e      	bpl.n	800b442 <__swbuf_r+0x82>
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	b363      	cbz	r3, 800b442 <__swbuf_r+0x82>
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	6820      	ldr	r0, [r4, #0]
 800b3ec:	b2f6      	uxtb	r6, r6
 800b3ee:	1ac0      	subs	r0, r0, r3
 800b3f0:	6963      	ldr	r3, [r4, #20]
 800b3f2:	4637      	mov	r7, r6
 800b3f4:	4283      	cmp	r3, r0
 800b3f6:	dc04      	bgt.n	800b402 <__swbuf_r+0x42>
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f000 f956 	bl	800b6ac <_fflush_r>
 800b400:	bb28      	cbnz	r0, 800b44e <__swbuf_r+0x8e>
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	3001      	adds	r0, #1
 800b406:	3b01      	subs	r3, #1
 800b408:	60a3      	str	r3, [r4, #8]
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	6022      	str	r2, [r4, #0]
 800b410:	701e      	strb	r6, [r3, #0]
 800b412:	6963      	ldr	r3, [r4, #20]
 800b414:	4283      	cmp	r3, r0
 800b416:	d004      	beq.n	800b422 <__swbuf_r+0x62>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	07db      	lsls	r3, r3, #31
 800b41c:	d519      	bpl.n	800b452 <__swbuf_r+0x92>
 800b41e:	2e0a      	cmp	r6, #10
 800b420:	d117      	bne.n	800b452 <__swbuf_r+0x92>
 800b422:	4621      	mov	r1, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f000 f941 	bl	800b6ac <_fflush_r>
 800b42a:	b190      	cbz	r0, 800b452 <__swbuf_r+0x92>
 800b42c:	e00f      	b.n	800b44e <__swbuf_r+0x8e>
 800b42e:	4b0b      	ldr	r3, [pc, #44]	; (800b45c <__swbuf_r+0x9c>)
 800b430:	429c      	cmp	r4, r3
 800b432:	d101      	bne.n	800b438 <__swbuf_r+0x78>
 800b434:	68ac      	ldr	r4, [r5, #8]
 800b436:	e7d0      	b.n	800b3da <__swbuf_r+0x1a>
 800b438:	4b09      	ldr	r3, [pc, #36]	; (800b460 <__swbuf_r+0xa0>)
 800b43a:	429c      	cmp	r4, r3
 800b43c:	bf08      	it	eq
 800b43e:	68ec      	ldreq	r4, [r5, #12]
 800b440:	e7cb      	b.n	800b3da <__swbuf_r+0x1a>
 800b442:	4621      	mov	r1, r4
 800b444:	4628      	mov	r0, r5
 800b446:	f000 f82d 	bl	800b4a4 <__swsetup_r>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d0cc      	beq.n	800b3e8 <__swbuf_r+0x28>
 800b44e:	f04f 37ff 	mov.w	r7, #4294967295
 800b452:	4638      	mov	r0, r7
 800b454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b456:	bf00      	nop
 800b458:	0800bbd8 	.word	0x0800bbd8
 800b45c:	0800bbf8 	.word	0x0800bbf8
 800b460:	0800bbb8 	.word	0x0800bbb8

0800b464 <__ascii_wctomb>:
 800b464:	b149      	cbz	r1, 800b47a <__ascii_wctomb+0x16>
 800b466:	2aff      	cmp	r2, #255	; 0xff
 800b468:	bf8b      	itete	hi
 800b46a:	238a      	movhi	r3, #138	; 0x8a
 800b46c:	700a      	strbls	r2, [r1, #0]
 800b46e:	6003      	strhi	r3, [r0, #0]
 800b470:	2001      	movls	r0, #1
 800b472:	bf88      	it	hi
 800b474:	f04f 30ff 	movhi.w	r0, #4294967295
 800b478:	4770      	bx	lr
 800b47a:	4608      	mov	r0, r1
 800b47c:	4770      	bx	lr
	...

0800b480 <_write_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4605      	mov	r5, r0
 800b484:	4608      	mov	r0, r1
 800b486:	4611      	mov	r1, r2
 800b488:	2200      	movs	r2, #0
 800b48a:	4c05      	ldr	r4, [pc, #20]	; (800b4a0 <_write_r+0x20>)
 800b48c:	6022      	str	r2, [r4, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	f7f7 fe01 	bl	8003096 <_write>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_write_r+0x1e>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_write_r+0x1e>
 800b49c:	602b      	str	r3, [r5, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	2000057c 	.word	0x2000057c

0800b4a4 <__swsetup_r>:
 800b4a4:	4b32      	ldr	r3, [pc, #200]	; (800b570 <__swsetup_r+0xcc>)
 800b4a6:	b570      	push	{r4, r5, r6, lr}
 800b4a8:	681d      	ldr	r5, [r3, #0]
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	b125      	cbz	r5, 800b4ba <__swsetup_r+0x16>
 800b4b0:	69ab      	ldr	r3, [r5, #24]
 800b4b2:	b913      	cbnz	r3, 800b4ba <__swsetup_r+0x16>
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f7fe fbe7 	bl	8009c88 <__sinit>
 800b4ba:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <__swsetup_r+0xd0>)
 800b4bc:	429c      	cmp	r4, r3
 800b4be:	d10f      	bne.n	800b4e0 <__swsetup_r+0x3c>
 800b4c0:	686c      	ldr	r4, [r5, #4]
 800b4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	0715      	lsls	r5, r2, #28
 800b4ca:	d42c      	bmi.n	800b526 <__swsetup_r+0x82>
 800b4cc:	06d0      	lsls	r0, r2, #27
 800b4ce:	d411      	bmi.n	800b4f4 <__swsetup_r+0x50>
 800b4d0:	2209      	movs	r2, #9
 800b4d2:	6032      	str	r2, [r6, #0]
 800b4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	f04f 30ff 	mov.w	r0, #4294967295
 800b4de:	e03e      	b.n	800b55e <__swsetup_r+0xba>
 800b4e0:	4b25      	ldr	r3, [pc, #148]	; (800b578 <__swsetup_r+0xd4>)
 800b4e2:	429c      	cmp	r4, r3
 800b4e4:	d101      	bne.n	800b4ea <__swsetup_r+0x46>
 800b4e6:	68ac      	ldr	r4, [r5, #8]
 800b4e8:	e7eb      	b.n	800b4c2 <__swsetup_r+0x1e>
 800b4ea:	4b24      	ldr	r3, [pc, #144]	; (800b57c <__swsetup_r+0xd8>)
 800b4ec:	429c      	cmp	r4, r3
 800b4ee:	bf08      	it	eq
 800b4f0:	68ec      	ldreq	r4, [r5, #12]
 800b4f2:	e7e6      	b.n	800b4c2 <__swsetup_r+0x1e>
 800b4f4:	0751      	lsls	r1, r2, #29
 800b4f6:	d512      	bpl.n	800b51e <__swsetup_r+0x7a>
 800b4f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4fa:	b141      	cbz	r1, 800b50e <__swsetup_r+0x6a>
 800b4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b500:	4299      	cmp	r1, r3
 800b502:	d002      	beq.n	800b50a <__swsetup_r+0x66>
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff fbbf 	bl	800ac88 <_free_r>
 800b50a:	2300      	movs	r3, #0
 800b50c:	6363      	str	r3, [r4, #52]	; 0x34
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	2300      	movs	r3, #0
 800b518:	6063      	str	r3, [r4, #4]
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f043 0308 	orr.w	r3, r3, #8
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	b94b      	cbnz	r3, 800b53e <__swsetup_r+0x9a>
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b534:	d003      	beq.n	800b53e <__swsetup_r+0x9a>
 800b536:	4621      	mov	r1, r4
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 f917 	bl	800b76c <__smakebuf_r>
 800b53e:	89a2      	ldrh	r2, [r4, #12]
 800b540:	f012 0301 	ands.w	r3, r2, #1
 800b544:	d00c      	beq.n	800b560 <__swsetup_r+0xbc>
 800b546:	2300      	movs	r3, #0
 800b548:	60a3      	str	r3, [r4, #8]
 800b54a:	6963      	ldr	r3, [r4, #20]
 800b54c:	425b      	negs	r3, r3
 800b54e:	61a3      	str	r3, [r4, #24]
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	b953      	cbnz	r3, 800b56a <__swsetup_r+0xc6>
 800b554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b558:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b55c:	d1ba      	bne.n	800b4d4 <__swsetup_r+0x30>
 800b55e:	bd70      	pop	{r4, r5, r6, pc}
 800b560:	0792      	lsls	r2, r2, #30
 800b562:	bf58      	it	pl
 800b564:	6963      	ldrpl	r3, [r4, #20]
 800b566:	60a3      	str	r3, [r4, #8]
 800b568:	e7f2      	b.n	800b550 <__swsetup_r+0xac>
 800b56a:	2000      	movs	r0, #0
 800b56c:	e7f7      	b.n	800b55e <__swsetup_r+0xba>
 800b56e:	bf00      	nop
 800b570:	20000018 	.word	0x20000018
 800b574:	0800bbd8 	.word	0x0800bbd8
 800b578:	0800bbf8 	.word	0x0800bbf8
 800b57c:	0800bbb8 	.word	0x0800bbb8

0800b580 <_close_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	2300      	movs	r3, #0
 800b584:	4c05      	ldr	r4, [pc, #20]	; (800b59c <_close_r+0x1c>)
 800b586:	4605      	mov	r5, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	f7f7 fd9f 	bl	80030ce <_close>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_close_r+0x1a>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	b103      	cbz	r3, 800b59a <_close_r+0x1a>
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	2000057c 	.word	0x2000057c

0800b5a0 <__sflush_r>:
 800b5a0:	898a      	ldrh	r2, [r1, #12]
 800b5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	0710      	lsls	r0, r2, #28
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	d458      	bmi.n	800b660 <__sflush_r+0xc0>
 800b5ae:	684b      	ldr	r3, [r1, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	dc05      	bgt.n	800b5c0 <__sflush_r+0x20>
 800b5b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dc02      	bgt.n	800b5c0 <__sflush_r+0x20>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5c2:	2e00      	cmp	r6, #0
 800b5c4:	d0f9      	beq.n	800b5ba <__sflush_r+0x1a>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5cc:	682f      	ldr	r7, [r5, #0]
 800b5ce:	6a21      	ldr	r1, [r4, #32]
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	d032      	beq.n	800b63a <__sflush_r+0x9a>
 800b5d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	075a      	lsls	r2, r3, #29
 800b5da:	d505      	bpl.n	800b5e8 <__sflush_r+0x48>
 800b5dc:	6863      	ldr	r3, [r4, #4]
 800b5de:	1ac0      	subs	r0, r0, r3
 800b5e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5e2:	b10b      	cbz	r3, 800b5e8 <__sflush_r+0x48>
 800b5e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5e6:	1ac0      	subs	r0, r0, r3
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ee:	6a21      	ldr	r1, [r4, #32]
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b0      	blx	r6
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	d106      	bne.n	800b608 <__sflush_r+0x68>
 800b5fa:	6829      	ldr	r1, [r5, #0]
 800b5fc:	291d      	cmp	r1, #29
 800b5fe:	d848      	bhi.n	800b692 <__sflush_r+0xf2>
 800b600:	4a29      	ldr	r2, [pc, #164]	; (800b6a8 <__sflush_r+0x108>)
 800b602:	40ca      	lsrs	r2, r1
 800b604:	07d6      	lsls	r6, r2, #31
 800b606:	d544      	bpl.n	800b692 <__sflush_r+0xf2>
 800b608:	2200      	movs	r2, #0
 800b60a:	6062      	str	r2, [r4, #4]
 800b60c:	6922      	ldr	r2, [r4, #16]
 800b60e:	04d9      	lsls	r1, r3, #19
 800b610:	6022      	str	r2, [r4, #0]
 800b612:	d504      	bpl.n	800b61e <__sflush_r+0x7e>
 800b614:	1c42      	adds	r2, r0, #1
 800b616:	d101      	bne.n	800b61c <__sflush_r+0x7c>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b903      	cbnz	r3, 800b61e <__sflush_r+0x7e>
 800b61c:	6560      	str	r0, [r4, #84]	; 0x54
 800b61e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b620:	602f      	str	r7, [r5, #0]
 800b622:	2900      	cmp	r1, #0
 800b624:	d0c9      	beq.n	800b5ba <__sflush_r+0x1a>
 800b626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d002      	beq.n	800b634 <__sflush_r+0x94>
 800b62e:	4628      	mov	r0, r5
 800b630:	f7ff fb2a 	bl	800ac88 <_free_r>
 800b634:	2000      	movs	r0, #0
 800b636:	6360      	str	r0, [r4, #52]	; 0x34
 800b638:	e7c0      	b.n	800b5bc <__sflush_r+0x1c>
 800b63a:	2301      	movs	r3, #1
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b0      	blx	r6
 800b640:	1c41      	adds	r1, r0, #1
 800b642:	d1c8      	bne.n	800b5d6 <__sflush_r+0x36>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0c5      	beq.n	800b5d6 <__sflush_r+0x36>
 800b64a:	2b1d      	cmp	r3, #29
 800b64c:	d001      	beq.n	800b652 <__sflush_r+0xb2>
 800b64e:	2b16      	cmp	r3, #22
 800b650:	d101      	bne.n	800b656 <__sflush_r+0xb6>
 800b652:	602f      	str	r7, [r5, #0]
 800b654:	e7b1      	b.n	800b5ba <__sflush_r+0x1a>
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b65c:	81a3      	strh	r3, [r4, #12]
 800b65e:	e7ad      	b.n	800b5bc <__sflush_r+0x1c>
 800b660:	690f      	ldr	r7, [r1, #16]
 800b662:	2f00      	cmp	r7, #0
 800b664:	d0a9      	beq.n	800b5ba <__sflush_r+0x1a>
 800b666:	0793      	lsls	r3, r2, #30
 800b668:	bf18      	it	ne
 800b66a:	2300      	movne	r3, #0
 800b66c:	680e      	ldr	r6, [r1, #0]
 800b66e:	bf08      	it	eq
 800b670:	694b      	ldreq	r3, [r1, #20]
 800b672:	eba6 0807 	sub.w	r8, r6, r7
 800b676:	600f      	str	r7, [r1, #0]
 800b678:	608b      	str	r3, [r1, #8]
 800b67a:	f1b8 0f00 	cmp.w	r8, #0
 800b67e:	dd9c      	ble.n	800b5ba <__sflush_r+0x1a>
 800b680:	4643      	mov	r3, r8
 800b682:	463a      	mov	r2, r7
 800b684:	6a21      	ldr	r1, [r4, #32]
 800b686:	4628      	mov	r0, r5
 800b688:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b68a:	47b0      	blx	r6
 800b68c:	2800      	cmp	r0, #0
 800b68e:	dc06      	bgt.n	800b69e <__sflush_r+0xfe>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	e78e      	b.n	800b5bc <__sflush_r+0x1c>
 800b69e:	4407      	add	r7, r0
 800b6a0:	eba8 0800 	sub.w	r8, r8, r0
 800b6a4:	e7e9      	b.n	800b67a <__sflush_r+0xda>
 800b6a6:	bf00      	nop
 800b6a8:	20400001 	.word	0x20400001

0800b6ac <_fflush_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	690b      	ldr	r3, [r1, #16]
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	b1db      	cbz	r3, 800b6ee <_fflush_r+0x42>
 800b6b6:	b118      	cbz	r0, 800b6c0 <_fflush_r+0x14>
 800b6b8:	6983      	ldr	r3, [r0, #24]
 800b6ba:	b90b      	cbnz	r3, 800b6c0 <_fflush_r+0x14>
 800b6bc:	f7fe fae4 	bl	8009c88 <__sinit>
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <_fflush_r+0x48>)
 800b6c2:	429c      	cmp	r4, r3
 800b6c4:	d109      	bne.n	800b6da <_fflush_r+0x2e>
 800b6c6:	686c      	ldr	r4, [r5, #4]
 800b6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6cc:	b17b      	cbz	r3, 800b6ee <_fflush_r+0x42>
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d6:	f7ff bf63 	b.w	800b5a0 <__sflush_r>
 800b6da:	4b07      	ldr	r3, [pc, #28]	; (800b6f8 <_fflush_r+0x4c>)
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	d101      	bne.n	800b6e4 <_fflush_r+0x38>
 800b6e0:	68ac      	ldr	r4, [r5, #8]
 800b6e2:	e7f1      	b.n	800b6c8 <_fflush_r+0x1c>
 800b6e4:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <_fflush_r+0x50>)
 800b6e6:	429c      	cmp	r4, r3
 800b6e8:	bf08      	it	eq
 800b6ea:	68ec      	ldreq	r4, [r5, #12]
 800b6ec:	e7ec      	b.n	800b6c8 <_fflush_r+0x1c>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	bd38      	pop	{r3, r4, r5, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800bbd8 	.word	0x0800bbd8
 800b6f8:	0800bbf8 	.word	0x0800bbf8
 800b6fc:	0800bbb8 	.word	0x0800bbb8

0800b700 <_lseek_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	2200      	movs	r2, #0
 800b70a:	4c05      	ldr	r4, [pc, #20]	; (800b720 <_lseek_r+0x20>)
 800b70c:	6022      	str	r2, [r4, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	f7f7 fd01 	bl	8003116 <_lseek>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_lseek_r+0x1e>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_lseek_r+0x1e>
 800b71c:	602b      	str	r3, [r5, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	2000057c 	.word	0x2000057c

0800b724 <__swhatbuf_r>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	460e      	mov	r6, r1
 800b728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72c:	b096      	sub	sp, #88	; 0x58
 800b72e:	2900      	cmp	r1, #0
 800b730:	4614      	mov	r4, r2
 800b732:	461d      	mov	r5, r3
 800b734:	da07      	bge.n	800b746 <__swhatbuf_r+0x22>
 800b736:	2300      	movs	r3, #0
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	89b3      	ldrh	r3, [r6, #12]
 800b73c:	061a      	lsls	r2, r3, #24
 800b73e:	d410      	bmi.n	800b762 <__swhatbuf_r+0x3e>
 800b740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b744:	e00e      	b.n	800b764 <__swhatbuf_r+0x40>
 800b746:	466a      	mov	r2, sp
 800b748:	f000 f8a4 	bl	800b894 <_fstat_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	dbf2      	blt.n	800b736 <__swhatbuf_r+0x12>
 800b750:	9a01      	ldr	r2, [sp, #4]
 800b752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b756:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b75a:	425a      	negs	r2, r3
 800b75c:	415a      	adcs	r2, r3
 800b75e:	602a      	str	r2, [r5, #0]
 800b760:	e7ee      	b.n	800b740 <__swhatbuf_r+0x1c>
 800b762:	2340      	movs	r3, #64	; 0x40
 800b764:	2000      	movs	r0, #0
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	b016      	add	sp, #88	; 0x58
 800b76a:	bd70      	pop	{r4, r5, r6, pc}

0800b76c <__smakebuf_r>:
 800b76c:	898b      	ldrh	r3, [r1, #12]
 800b76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b770:	079d      	lsls	r5, r3, #30
 800b772:	4606      	mov	r6, r0
 800b774:	460c      	mov	r4, r1
 800b776:	d507      	bpl.n	800b788 <__smakebuf_r+0x1c>
 800b778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	6123      	str	r3, [r4, #16]
 800b780:	2301      	movs	r3, #1
 800b782:	6163      	str	r3, [r4, #20]
 800b784:	b002      	add	sp, #8
 800b786:	bd70      	pop	{r4, r5, r6, pc}
 800b788:	ab01      	add	r3, sp, #4
 800b78a:	466a      	mov	r2, sp
 800b78c:	f7ff ffca 	bl	800b724 <__swhatbuf_r>
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	4605      	mov	r5, r0
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff fac3 	bl	800ad20 <_malloc_r>
 800b79a:	b948      	cbnz	r0, 800b7b0 <__smakebuf_r+0x44>
 800b79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a0:	059a      	lsls	r2, r3, #22
 800b7a2:	d4ef      	bmi.n	800b784 <__smakebuf_r+0x18>
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	f043 0302 	orr.w	r3, r3, #2
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	e7e3      	b.n	800b778 <__smakebuf_r+0xc>
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <__smakebuf_r+0x7c>)
 800b7b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	6020      	str	r0, [r4, #0]
 800b7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	9b00      	ldr	r3, [sp, #0]
 800b7c0:	6120      	str	r0, [r4, #16]
 800b7c2:	6163      	str	r3, [r4, #20]
 800b7c4:	9b01      	ldr	r3, [sp, #4]
 800b7c6:	b15b      	cbz	r3, 800b7e0 <__smakebuf_r+0x74>
 800b7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 f873 	bl	800b8b8 <_isatty_r>
 800b7d2:	b128      	cbz	r0, 800b7e0 <__smakebuf_r+0x74>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f023 0303 	bic.w	r3, r3, #3
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	431d      	orrs	r5, r3
 800b7e4:	81a5      	strh	r5, [r4, #12]
 800b7e6:	e7cd      	b.n	800b784 <__smakebuf_r+0x18>
 800b7e8:	08009c51 	.word	0x08009c51

0800b7ec <memmove>:
 800b7ec:	4288      	cmp	r0, r1
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	eb01 0302 	add.w	r3, r1, r2
 800b7f4:	d807      	bhi.n	800b806 <memmove+0x1a>
 800b7f6:	1e42      	subs	r2, r0, #1
 800b7f8:	4299      	cmp	r1, r3
 800b7fa:	d00a      	beq.n	800b812 <memmove+0x26>
 800b7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b800:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b804:	e7f8      	b.n	800b7f8 <memmove+0xc>
 800b806:	4283      	cmp	r3, r0
 800b808:	d9f5      	bls.n	800b7f6 <memmove+0xa>
 800b80a:	1881      	adds	r1, r0, r2
 800b80c:	1ad2      	subs	r2, r2, r3
 800b80e:	42d3      	cmn	r3, r2
 800b810:	d100      	bne.n	800b814 <memmove+0x28>
 800b812:	bd10      	pop	{r4, pc}
 800b814:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b818:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b81c:	e7f7      	b.n	800b80e <memmove+0x22>

0800b81e <__malloc_lock>:
 800b81e:	4770      	bx	lr

0800b820 <__malloc_unlock>:
 800b820:	4770      	bx	lr

0800b822 <_realloc_r>:
 800b822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b824:	4607      	mov	r7, r0
 800b826:	4614      	mov	r4, r2
 800b828:	460e      	mov	r6, r1
 800b82a:	b921      	cbnz	r1, 800b836 <_realloc_r+0x14>
 800b82c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b830:	4611      	mov	r1, r2
 800b832:	f7ff ba75 	b.w	800ad20 <_malloc_r>
 800b836:	b922      	cbnz	r2, 800b842 <_realloc_r+0x20>
 800b838:	f7ff fa26 	bl	800ac88 <_free_r>
 800b83c:	4625      	mov	r5, r4
 800b83e:	4628      	mov	r0, r5
 800b840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b842:	f000 f849 	bl	800b8d8 <_malloc_usable_size_r>
 800b846:	42a0      	cmp	r0, r4
 800b848:	d20f      	bcs.n	800b86a <_realloc_r+0x48>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff fa67 	bl	800ad20 <_malloc_r>
 800b852:	4605      	mov	r5, r0
 800b854:	2800      	cmp	r0, #0
 800b856:	d0f2      	beq.n	800b83e <_realloc_r+0x1c>
 800b858:	4631      	mov	r1, r6
 800b85a:	4622      	mov	r2, r4
 800b85c:	f7fe fe02 	bl	800a464 <memcpy>
 800b860:	4631      	mov	r1, r6
 800b862:	4638      	mov	r0, r7
 800b864:	f7ff fa10 	bl	800ac88 <_free_r>
 800b868:	e7e9      	b.n	800b83e <_realloc_r+0x1c>
 800b86a:	4635      	mov	r5, r6
 800b86c:	e7e7      	b.n	800b83e <_realloc_r+0x1c>
	...

0800b870 <_read_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4605      	mov	r5, r0
 800b874:	4608      	mov	r0, r1
 800b876:	4611      	mov	r1, r2
 800b878:	2200      	movs	r2, #0
 800b87a:	4c05      	ldr	r4, [pc, #20]	; (800b890 <_read_r+0x20>)
 800b87c:	6022      	str	r2, [r4, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	f7f7 fbec 	bl	800305c <_read>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_read_r+0x1e>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_read_r+0x1e>
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	2000057c 	.word	0x2000057c

0800b894 <_fstat_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	2300      	movs	r3, #0
 800b898:	4c06      	ldr	r4, [pc, #24]	; (800b8b4 <_fstat_r+0x20>)
 800b89a:	4605      	mov	r5, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	4611      	mov	r1, r2
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	f7f7 fc1f 	bl	80030e4 <_fstat>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d102      	bne.n	800b8b0 <_fstat_r+0x1c>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	b103      	cbz	r3, 800b8b0 <_fstat_r+0x1c>
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	2000057c 	.word	0x2000057c

0800b8b8 <_isatty_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4c05      	ldr	r4, [pc, #20]	; (800b8d4 <_isatty_r+0x1c>)
 800b8be:	4605      	mov	r5, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	f7f7 fc1d 	bl	8003102 <_isatty>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_isatty_r+0x1a>
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_isatty_r+0x1a>
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	2000057c 	.word	0x2000057c

0800b8d8 <_malloc_usable_size_r>:
 800b8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8dc:	1f18      	subs	r0, r3, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfbc      	itt	lt
 800b8e2:	580b      	ldrlt	r3, [r1, r0]
 800b8e4:	18c0      	addlt	r0, r0, r3
 800b8e6:	4770      	bx	lr

0800b8e8 <_init>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	bf00      	nop
 800b8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ee:	bc08      	pop	{r3}
 800b8f0:	469e      	mov	lr, r3
 800b8f2:	4770      	bx	lr

0800b8f4 <_fini>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	bf00      	nop
 800b8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fa:	bc08      	pop	{r3}
 800b8fc:	469e      	mov	lr, r3
 800b8fe:	4770      	bx	lr
