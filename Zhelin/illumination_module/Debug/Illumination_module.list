
Illumination_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08008eb0  08008eb0  00018eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009240  08009240  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009240  08009240  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009240  08009240  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001dc  08009424  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08009424  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012318  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d33  00000000  00000000  0003251d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  00036410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a633  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010650  00000000  00000000  00051a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092bef  00000000  00000000  000620e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  000f4d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e98 	.word	0x08008e98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008e98 	.word	0x08008e98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__aeabi_f2uiz>:
 8000e08:	0042      	lsls	r2, r0, #1
 8000e0a:	d20e      	bcs.n	8000e2a <__aeabi_f2uiz+0x22>
 8000e0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e10:	d30b      	bcc.n	8000e2a <__aeabi_f2uiz+0x22>
 8000e12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1a:	d409      	bmi.n	8000e30 <__aeabi_f2uiz+0x28>
 8000e1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e24:	fa23 f002 	lsr.w	r0, r3, r2
 8000e28:	4770      	bx	lr
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	4770      	bx	lr
 8000e30:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e34:	d101      	bne.n	8000e3a <__aeabi_f2uiz+0x32>
 8000e36:	0242      	lsls	r2, r0, #9
 8000e38:	d102      	bne.n	8000e40 <__aeabi_f2uiz+0x38>
 8000e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3e:	4770      	bx	lr
 8000e40:	f04f 0000 	mov.w	r0, #0
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e74:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_ADC1_Init+0x94>)
 8000e88:	f000 fe28 	bl	8001adc <HAL_ADC_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e92:	f000 fb30 	bl	80014f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_ADC1_Init+0x94>)
 8000ea8:	f001 f8b6 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 fb20 	bl	80014f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_ADC1_Init+0x94>)
 8000ec4:	f001 f8a8 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000ece:	f000 fb12 	bl	80014f6 <Error_Handler>
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000204 	.word	0x20000204
 8000ee0:	40012400 	.word	0x40012400

08000ee4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_ADC_MspInit+0xcc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d151      	bne.n	8000fa8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_ADC_MspInit+0xd0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_ADC_MspInit+0xd0>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_ADC_MspInit+0xd0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_ADC_MspInit+0xd0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <HAL_ADC_MspInit+0xd0>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f34:	2303      	movs	r3, #3
 8000f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <HAL_ADC_MspInit+0xd4>)
 8000f44:	f001 fd58 	bl	80029f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <HAL_ADC_MspInit+0xdc>)
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f72:	2220      	movs	r2, #32
 8000f74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f7e:	f001 fb4d 	bl	800261c <HAL_DMA_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f88:	f000 fab5 	bl	80014f6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f90:	621a      	str	r2, [r3, #32]
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2012      	movs	r0, #18
 8000f9e:	f001 fb06 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fa2:	2012      	movs	r0, #18
 8000fa4:	f001 fb1f 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40012400 	.word	0x40012400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	20000234 	.word	0x20000234
 8000fc0:	40020008 	.word	0x40020008

08000fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_DMA_Init+0x38>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <MX_DMA_Init+0x38>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_DMA_Init+0x38>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f001 fae1 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fec:	200b      	movs	r0, #11
 8000fee:	f001 fafa 	bl	80025e6 <HAL_NVIC_EnableIRQ>

}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0x70>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a19      	ldr	r2, [pc, #100]	; (8001070 <MX_GPIO_Init+0x70>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_GPIO_Init+0x70>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_GPIO_Init+0x70>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <MX_GPIO_Init+0x70>)
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_GPIO_Init+0x70>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0320 	and.w	r3, r3, #32
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_GPIO_Init+0x70>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <MX_GPIO_Init+0x70>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_GPIO_Init+0x70>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_GPIO_Init+0x70>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <MX_GPIO_Init+0x70>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <MX_GPIO_Init+0x70>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f043 030c 	orr.w	r3, r3, #12
 8001092:	b2db      	uxtb	r3, r3
 8001094:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	b2db      	uxtb	r3, r3
 800109e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	f043 030c 	orr.w	r3, r3, #12
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010b4:	f107 0208 	add.w	r2, r7, #8
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2304      	movs	r3, #4
 80010be:	214e      	movs	r1, #78	; 0x4e
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <lcd_send_cmd+0x5c>)
 80010c2:	f001 ff2b 	bl	8002f1c <HAL_I2C_Master_Transmit>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000278 	.word	0x20000278

080010d4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f023 030f 	bic.w	r3, r3, #15
 80010e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	f043 030d 	orr.w	r3, r3, #13
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f043 0309 	orr.w	r3, r3, #9
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	f043 030d 	orr.w	r3, r3, #13
 8001106:	b2db      	uxtb	r3, r3
 8001108:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	f043 0309 	orr.w	r3, r3, #9
 8001110:	b2db      	uxtb	r3, r3
 8001112:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	2364      	movs	r3, #100	; 0x64
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2304      	movs	r3, #4
 800111e:	214e      	movs	r1, #78	; 0x4e
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <lcd_send_data+0x5c>)
 8001122:	f001 fefb 	bl	8002f1c <HAL_I2C_Master_Transmit>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000278 	.word	0x20000278

08001134 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
    switch (row)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <lcd_put_cur+0x16>
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <lcd_put_cur+0x20>
 8001148:	e009      	b.n	800115e <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	603b      	str	r3, [r7, #0]
            break;
 8001152:	e004      	b.n	800115e <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800115a:	603b      	str	r3, [r7, #0]
            break;
 800115c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff86 	bl	8001074 <lcd_send_cmd>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <lcd_init>:


void lcd_init (void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001174:	2032      	movs	r0, #50	; 0x32
 8001176:	f000 fc8f 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x30);
 800117a:	2030      	movs	r0, #48	; 0x30
 800117c:	f7ff ff7a 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001180:	2005      	movs	r0, #5
 8001182:	f000 fc89 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001186:	2030      	movs	r0, #48	; 0x30
 8001188:	f7ff ff74 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800118c:	2001      	movs	r0, #1
 800118e:	f000 fc83 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001192:	2030      	movs	r0, #48	; 0x30
 8001194:	f7ff ff6e 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f000 fc7d 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800119e:	2020      	movs	r0, #32
 80011a0:	f7ff ff68 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f000 fc77 	bl	8001a98 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011aa:	2028      	movs	r0, #40	; 0x28
 80011ac:	f7ff ff62 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f000 fc71 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80011b6:	2008      	movs	r0, #8
 80011b8:	f7ff ff5c 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 fc6b 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ff56 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 fc65 	bl	8001a98 <HAL_Delay>
	HAL_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 fc62 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff ff4d 	bl	8001074 <lcd_send_cmd>
	HAL_Delay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 fc5c 	bl	8001a98 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80011e0:	200c      	movs	r0, #12
 80011e2:	f7ff ff47 	bl	8001074 <lcd_send_cmd>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011f2:	e006      	b.n	8001202 <lcd_send_string+0x18>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff69 	bl	80010d4 <lcd_send_data>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f4      	bne.n	80011f4 <lcd_send_string+0xa>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f001 fd2b 	bl	8002cac <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 f94b 	bl	80014f6 <Error_Handler>
  }

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000278 	.word	0x20000278
 8001268:	40005400 	.word	0x40005400
 800126c:	000186a0 	.word	0x000186a0

08001270 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_I2C_MspInit+0x70>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d123      	bne.n	80012d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23c0      	movs	r3, #192	; 0xc0
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_I2C_MspInit+0x78>)
 80012bc:	f001 fb9c 	bl	80029f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 80012c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00

080012ec <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
 80012f4:	1d39      	adds	r1, r7, #4
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	2201      	movs	r2, #1
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <__io_putchar+0x20>)
 80012fe:	f003 fa4e 	bl	800479e <HAL_UART_Transmit>
    return ch;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000314 	.word	0x20000314

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t adc_buf[2];
	float PA0_Vlotage;
	float PA1_Vlotage;
	float led_pwm = 250;
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <main+0x110>)
 8001318:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fb5b 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f88f 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f7ff fe6d 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f7ff fe4d 	bl	8000fc4 <MX_DMA_Init>
  MX_ADC1_Init();
 800132a:	f7ff fd8d 	bl	8000e48 <MX_ADC1_Init>
  MX_I2C1_Init();
 800132e:	f7ff ff71 	bl	8001214 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001332:	f000 fab5 	bl	80018a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001336:	f000 f9fb 	bl	8001730 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buf, 2);	//&hadc1, saved in adc_buf, length 2
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2202      	movs	r2, #2
 8001340:	4619      	mov	r1, r3
 8001342:	4838      	ldr	r0, [pc, #224]	; (8001424 <main+0x114>)
 8001344:	f000 fca2 	bl	8001c8c <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001348:	2104      	movs	r1, #4
 800134a:	4837      	ldr	r0, [pc, #220]	; (8001428 <main+0x118>)
 800134c:	f002 fe0e 	bl	8003f6c <HAL_TIM_PWM_Start>
  lcd_init();
 8001350:	f7ff ff0e 	bl	8001170 <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  PA0_Vlotage = adc_buf[0]*(3.3/4096);
 8001354:	893b      	ldrh	r3, [r7, #8]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f854 	bl	8000404 <__aeabi_i2d>
 800135c:	a32e      	add	r3, pc, #184	; (adr r3, 8001418 <main+0x108>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f8b9 	bl	80004d8 <__aeabi_dmul>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	4618      	mov	r0, r3
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff fbab 	bl	8000ac8 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	613b      	str	r3, [r7, #16]
	  PA1_Vlotage = adc_buf[1]*(3.3/4096);
 8001376:	897b      	ldrh	r3, [r7, #10]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f843 	bl	8000404 <__aeabi_i2d>
 800137e:	a326      	add	r3, pc, #152	; (adr r3, 8001418 <main+0x108>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7ff f8a8 	bl	80004d8 <__aeabi_dmul>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4618      	mov	r0, r3
 800138e:	4621      	mov	r1, r4
 8001390:	f7ff fb9a 	bl	8000ac8 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
	  printf("\n PA0 Voltage is %.2f v\t\r\n PA1 Voltage is %.2f v\r\n\t",PA0_Vlotage,PA1_Vlotage);
 8001398:	6938      	ldr	r0, [r7, #16]
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	4605      	mov	r5, r0
 80013a0:	460e      	mov	r6, r1
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff f840 	bl	8000428 <__aeabi_f2d>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	e9cd 3400 	strd	r3, r4, [sp]
 80013b0:	462a      	mov	r2, r5
 80013b2:	4633      	mov	r3, r6
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <main+0x11c>)
 80013b6:	f004 f9bf 	bl	8005738 <iprintf>
	 // HAL_Delay(500);

	  //LCD显示光照参数
		char* buffer[2];
		sprintf(buffer, "%.1f", PA0_Vlotage*107);
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <main+0x120>)
 80013bc:	6938      	ldr	r0, [r7, #16]
 80013be:	f7ff fbd3 	bl	8000b68 <__aeabi_fmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	4603      	mov	r3, r0
 80013cc:	460c      	mov	r4, r1
 80013ce:	4638      	mov	r0, r7
 80013d0:	461a      	mov	r2, r3
 80013d2:	4623      	mov	r3, r4
 80013d4:	4917      	ldr	r1, [pc, #92]	; (8001434 <main+0x124>)
 80013d6:	f004 f9cb 	bl	8005770 <siprintf>
		lcd_send_string("LM:");
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <main+0x128>)
 80013dc:	f7ff ff05 	bl	80011ea <lcd_send_string>
		lcd_send_string(buffer);
 80013e0:	463b      	mov	r3, r7
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff01 	bl	80011ea <lcd_send_string>
		lcd_put_cur(0,0);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fea2 	bl	8001134 <lcd_put_cur>
		HAL_Delay(100);
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f000 fb51 	bl	8001a98 <HAL_Delay>

		//PWM led running
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,PA0_Vlotage*520);
 80013f6:	4911      	ldr	r1, [pc, #68]	; (800143c <main+0x12c>)
 80013f8:	6938      	ldr	r0, [r7, #16]
 80013fa:	f7ff fbb5 	bl	8000b68 <__aeabi_fmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <main+0x118>)
 8001404:	681c      	ldr	r4, [r3, #0]
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fcfe 	bl	8000e08 <__aeabi_f2uiz>
 800140c:	4603      	mov	r3, r0
 800140e:	63a3      	str	r3, [r4, #56]	; 0x38
  {
 8001410:	e7a0      	b.n	8001354 <main+0x44>
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	66666666 	.word	0x66666666
 800141c:	3f4a6666 	.word	0x3f4a6666
 8001420:	437a0000 	.word	0x437a0000
 8001424:	20000204 	.word	0x20000204
 8001428:	200002cc 	.word	0x200002cc
 800142c:	08008eb0 	.word	0x08008eb0
 8001430:	42d60000 	.word	0x42d60000
 8001434:	08008ee4 	.word	0x08008ee4
 8001438:	08008eec 	.word	0x08008eec
 800143c:	44020000 	.word	0x44020000

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2228      	movs	r2, #40	; 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fb3a 	bl	8004ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147e:	2301      	movs	r3, #1
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f002 f846 	bl	8003528 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a2:	f000 f828 	bl	80014f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fab0 	bl	8003a28 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ce:	f000 f812 	bl	80014f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d2:	2302      	movs	r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fc3e 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014ea:	f000 f804 	bl	80014f6 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <HardFault_Handler+0x4>

0800157a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <MemManage_Handler+0x4>

08001580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <BusFault_Handler+0x4>

08001586 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <UsageFault_Handler+0x4>

0800158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 fa54 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <DMA1_Channel1_IRQHandler+0x10>)
 80015c2:	f001 f8e5 	bl	8002790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000234 	.word	0x20000234

080015d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <ADC1_2_IRQHandler+0x10>)
 80015d6:	f000 fc37 	bl	8001e48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000204 	.word	0x20000204

080015e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
	}

return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe57 	bl	80012ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
	}
	return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167c:	605a      	str	r2, [r3, #4]
	return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
	return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f003 f9c4 	bl	8004a74 <__errno>
 80016ec:	4602      	mov	r2, r0
 80016ee:	230c      	movs	r3, #12
 80016f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20005000 	.word	0x20005000
 8001718:	00000400 	.word	0x00000400
 800171c:	200001f8 	.word	0x200001f8
 8001720:	20000360 	.word	0x20000360

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MX_TIM2_Init+0xac>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_TIM2_Init+0xac>)
 800175c:	2247      	movs	r2, #71	; 0x47
 800175e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_TIM2_Init+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM2_Init+0xac>)
 8001768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_TIM2_Init+0xac>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_TIM2_Init+0xac>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800177a:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_TIM2_Init+0xac>)
 800177c:	f002 fba6 	bl	8003ecc <HAL_TIM_PWM_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001786:	f7ff feb6 	bl	80014f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4619      	mov	r1, r3
 8001798:	4810      	ldr	r0, [pc, #64]	; (80017dc <MX_TIM2_Init+0xac>)
 800179a:	f002 ff55 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017a4:	f7ff fea7 	bl	80014f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a8:	2360      	movs	r3, #96	; 0x60
 80017aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80017b0:	2302      	movs	r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2204      	movs	r2, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_TIM2_Init+0xac>)
 80017c0:	f002 fc76 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017ca:	f7ff fe94 	bl	80014f6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_TIM2_Init+0xac>)
 80017d0:	f000 f822 	bl	8001818 <HAL_TIM_MspPostInit>

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200002cc 	.word	0x200002cc

080017e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f0:	d10b      	bne.n	800180a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_TIM_PWM_MspInit+0x34>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_TIM_PWM_MspInit+0x34>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_TIM_PWM_MspInit+0x34>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001836:	d129      	bne.n	800188c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_TIM_MspPostInit+0x7c>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_TIM_MspPostInit+0x7c>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_TIM_MspPostInit+0x7c>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001850:	2308      	movs	r3, #8
 8001852:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4619      	mov	r1, r3
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <HAL_TIM_MspPostInit+0x80>)
 8001864:	f001 f8c8 	bl	80029f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_TIM_MspPostInit+0x84>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <HAL_TIM_MspPostInit+0x84>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40010000 	.word	0x40010000

080018a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART2_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018d8:	f002 ff14 	bl	8004704 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f7ff fe08 	bl	80014f6 <Error_Handler>
  }

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000314 	.word	0x20000314
 80018f0:	40004400 	.word	0x40004400

080018f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_UART_MspInit+0x88>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d12f      	bne.n	8001974 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_UART_MspInit+0x8c>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800191a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191e:	61d3      	str	r3, [r2, #28]
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x8c>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a13      	ldr	r2, [pc, #76]	; (8001980 <HAL_UART_MspInit+0x8c>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001944:	2304      	movs	r3, #4
 8001946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <HAL_UART_MspInit+0x90>)
 8001958:	f001 f84e 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800195c:	2308      	movs	r3, #8
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_UART_MspInit+0x90>)
 8001970:	f001 f842 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40004400 	.word	0x40004400
 8001980:	40021000 	.word	0x40021000
 8001984:	40010800 	.word	0x40010800

08001988 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  movs r1, #0
 8001988:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800198a:	e003      	b.n	8001994 <LoopCopyDataInit>

0800198c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800198e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001990:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001992:	3104      	adds	r1, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001994:	480a      	ldr	r0, [pc, #40]	; (80019c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001998:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800199a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800199c:	d3f6      	bcc.n	800198c <CopyDataInit>
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019a0:	e002      	b.n	80019a8 <LoopFillZerobss>

080019a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019a4:	f842 3b04 	str.w	r3, [r2], #4

080019a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019ac:	d3f9      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ae:	f7ff feb9 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f003 f865 	bl	8004a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b6:	f7ff fcab 	bl	8001310 <main>
  bx lr
 80019ba:	4770      	bx	lr
  ldr r3, =_sidata
 80019bc:	08009248 	.word	0x08009248
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80019c8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80019cc:	2000035c 	.word	0x2000035c

080019d0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <CAN1_RX1_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x28>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x28>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 fdd7 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fd88 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fdef 	bl	8002602 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 fdb7 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x1c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_IncTick+0x20>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <HAL_IncTick+0x20>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000354 	.word	0x20000354

08001a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <HAL_GetTick+0x10>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	20000354 	.word	0x20000354

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff fff0 	bl	8001a84 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_Delay+0x40>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffe0 	bl	8001a84 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0be      	b.n	8001c7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff f9e2 	bl	8000ee4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fbc3 	bl	80022ac <ADC_ConversionStop_Disable>
 8001b26:	4603      	mov	r3, r0
 8001b28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 8099 	bne.w	8001c6a <HAL_ADC_Init+0x18e>
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 8095 	bne.w	8001c6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b48:	f023 0302 	bic.w	r3, r3, #2
 8001b4c:	f043 0202 	orr.w	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7b1b      	ldrb	r3, [r3, #12]
 8001b62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b74:	d003      	beq.n	8001b7e <HAL_ADC_Init+0xa2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <HAL_ADC_Init+0xa8>
 8001b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_Init+0xaa>
 8001b84:	2300      	movs	r3, #0
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7d1b      	ldrb	r3, [r3, #20]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d119      	bne.n	8001bc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7b1b      	ldrb	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	035a      	lsls	r2, r3, #13
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	e00b      	b.n	8001bc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_ADC_Init+0x1a8>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	d003      	beq.n	8001c02 <HAL_ADC_Init+0x126>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d104      	bne.n	8001c0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	051b      	lsls	r3, r3, #20
 8001c0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_ADC_Init+0x1ac>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10b      	bne.n	8001c48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c46:	e018      	b.n	8001c7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f023 0312 	bic.w	r3, r3, #18
 8001c50:	f043 0210 	orr.w	r2, r3, #16
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c68:	e007      	b.n	8001c7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	f043 0210 	orr.w	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	ffe1f7fd 	.word	0xffe1f7fd
 8001c88:	ff1f0efe 	.word	0xff1f0efe

08001c8c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <HAL_ADC_Start_DMA+0x1a8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_Start_DMA+0x24>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_ADC_Start_DMA+0x1ac>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x32>
 8001cb0:	4b60      	ldr	r3, [pc, #384]	; (8001e34 <HAL_ADC_Start_DMA+0x1a8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 80b3 	bne.w	8001e24 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_Start_DMA+0x40>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0ae      	b.n	8001e2a <HAL_ADC_Start_DMA+0x19e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fa97 	bl	8002208 <ADC_Enable>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 809a 	bne.w	8001e1a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a4e      	ldr	r2, [pc, #312]	; (8001e38 <HAL_ADC_Start_DMA+0x1ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_Start_DMA+0x84>
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_ADC_Start_DMA+0x1a8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d115      	bne.n	8001d3c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d026      	beq.n	8001d78 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3a:	e01d      	b.n	8001d78 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_ADC_Start_DMA+0x1a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_ADC_Start_DMA+0xd0>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <HAL_ADC_Start_DMA+0x1ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d10d      	bne.n	8001d78 <HAL_ADC_Start_DMA+0xec>
 8001d5c:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <HAL_ADC_Start_DMA+0x1a8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f023 0206 	bic.w	r2, r3, #6
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d90:	e002      	b.n	8001d98 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_ADC_Start_DMA+0x1b0>)
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_ADC_Start_DMA+0x1b4>)
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_ADC_Start_DMA+0x1b8>)
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0202 	mvn.w	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a18      	ldr	r0, [r3, #32]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	334c      	adds	r3, #76	; 0x4c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f000 fc75 	bl	80026d0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001df0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001df4:	d108      	bne.n	8001e08 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e04:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e06:	e00f      	b.n	8001e28 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e16:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e18:	e006      	b.n	8001e28 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e22:	e001      	b.n	8001e28 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012400 	.word	0x40012400
 8001e38:	40012800 	.word	0x40012800
 8001e3c:	08002321 	.word	0x08002321
 8001e40:	0800239d 	.word	0x0800239d
 8001e44:	080023b9 	.word	0x080023b9

08001e48 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d140      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d139      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e92:	d11d      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d119      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0220 	bic.w	r2, r2, #32
 8001eaa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f87c 	bl	8001fce <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f06f 0212 	mvn.w	r2, #18
 8001ede:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eea:	2b80      	cmp	r3, #128	; 0x80
 8001eec:	d14f      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d148      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f1e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f22:	d012      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d125      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f3c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f40:	d11d      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d119      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f58:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa34 	bl	80023ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 020c 	mvn.w	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d114      	bne.n	8001fc6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f81b 	bl	8001ff2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x20>
 8002034:	2302      	movs	r3, #2
 8002036:	e0dc      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1da>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d81c      	bhi.n	8002082 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b05      	subs	r3, #5
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b05      	subs	r3, #5
 8002074:	fa00 f203 	lsl.w	r2, r0, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
 8002080:	e03c      	b.n	80020fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d81c      	bhi.n	80020c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b23      	subs	r3, #35	; 0x23
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4019      	ands	r1, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b23      	subs	r3, #35	; 0x23
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	e01b      	b.n	80020fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b41      	subs	r3, #65	; 0x41
 80020d6:	221f      	movs	r2, #31
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	4019      	ands	r1, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	fa00 f203 	lsl.w	r2, r0, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d91c      	bls.n	800213e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	3b1e      	subs	r3, #30
 8002116:	2207      	movs	r2, #7
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	4019      	ands	r1, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6898      	ldr	r0, [r3, #8]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	3b1e      	subs	r3, #30
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e019      	b.n	8002172 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6919      	ldr	r1, [r3, #16]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6898      	ldr	r0, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d003      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800217e:	2b11      	cmp	r3, #17
 8002180:	d132      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d125      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d126      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021a8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d11a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_ADC_ConfigChannel+0x1e8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_ADC_ConfigChannel+0x1ec>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	0c9a      	lsrs	r2, r3, #18
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x1b2>
 80021d6:	e007      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	40012400 	.word	0x40012400
 8002200:	20000000 	.word	0x20000000
 8002204:	431bde83 	.word	0x431bde83

08002208 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d039      	beq.n	800229a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <ADC_Enable+0x9c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <ADC_Enable+0xa0>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	0c9b      	lsrs	r3, r3, #18
 8002242:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002244:	e002      	b.n	800224c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002252:	f7ff fc17 	bl	8001a84 <HAL_GetTick>
 8002256:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002258:	e018      	b.n	800228c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225a:	f7ff fc13 	bl	8001a84 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d911      	bls.n	800228c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e007      	b.n	800229c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d1df      	bne.n	800225a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	431bde83 	.word	0x431bde83

080022ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d127      	bne.n	8002316 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d6:	f7ff fbd5 	bl	8001a84 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022dc:	e014      	b.n	8002308 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022de:	f7ff fbd1 	bl	8001a84 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d90d      	bls.n	8002308 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e007      	b.n	8002318 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d0e3      	beq.n	80022de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d127      	bne.n	800238a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002350:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002354:	d115      	bne.n	8002382 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800235a:	2b00      	cmp	r3, #0
 800235c:	d111      	bne.n	8002382 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fe23 	bl	8001fce <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002388:	e004      	b.n	8002394 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff fe18 	bl	8001fe0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f043 0204 	orr.w	r2, r3, #4
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff fe10 	bl	8002004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <__NVIC_EnableIRQ+0x34>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff90 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff2d 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff42 	bl	8002448 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff90 	bl	80024f0 <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5f 	bl	800249c <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff35 	bl	8002464 <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa2 	bl	8002554 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e043      	b.n	80026ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_DMA_Init+0xa8>)
 800263a:	4413      	add	r3, r2
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <HAL_DMA_Init+0xac>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	009a      	lsls	r2, r3, #2
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_DMA_Init+0xb0>)
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002666:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800266a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	bffdfff8 	.word	0xbffdfff8
 80026c8:	cccccccd 	.word	0xcccccccd
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_DMA_Start_IT+0x20>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e04a      	b.n	8002786 <HAL_DMA_Start_IT+0xb6>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d13a      	bne.n	8002778 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f938 	bl	800299c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 020e 	orr.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e00f      	b.n	8002766 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0204 	bic.w	r2, r2, #4
 8002754:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 020a 	orr.w	r2, r2, #10
 8002764:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e005      	b.n	8002784 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002780:	2302      	movs	r3, #2
 8002782:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002784:	7dfb      	ldrb	r3, [r7, #23]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2204      	movs	r2, #4
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04f      	beq.n	8002858 <HAL_DMA_IRQHandler+0xc8>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04a      	beq.n	8002858 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0204 	bic.w	r2, r2, #4
 80027de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_DMA_IRQHandler+0x1f0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d029      	beq.n	800283e <HAL_DMA_IRQHandler+0xae>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_DMA_IRQHandler+0x1f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_DMA_IRQHandler+0xaa>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a63      	ldr	r2, [pc, #396]	; (8002988 <HAL_DMA_IRQHandler+0x1f8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01a      	beq.n	8002834 <HAL_DMA_IRQHandler+0xa4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a62      	ldr	r2, [pc, #392]	; (800298c <HAL_DMA_IRQHandler+0x1fc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d012      	beq.n	800282e <HAL_DMA_IRQHandler+0x9e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a60      	ldr	r2, [pc, #384]	; (8002990 <HAL_DMA_IRQHandler+0x200>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00a      	beq.n	8002828 <HAL_DMA_IRQHandler+0x98>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5f      	ldr	r2, [pc, #380]	; (8002994 <HAL_DMA_IRQHandler+0x204>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d102      	bne.n	8002822 <HAL_DMA_IRQHandler+0x92>
 800281c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002820:	e00e      	b.n	8002840 <HAL_DMA_IRQHandler+0xb0>
 8002822:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002826:	e00b      	b.n	8002840 <HAL_DMA_IRQHandler+0xb0>
 8002828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800282c:	e008      	b.n	8002840 <HAL_DMA_IRQHandler+0xb0>
 800282e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002832:	e005      	b.n	8002840 <HAL_DMA_IRQHandler+0xb0>
 8002834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002838:	e002      	b.n	8002840 <HAL_DMA_IRQHandler+0xb0>
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	e000      	b.n	8002840 <HAL_DMA_IRQHandler+0xb0>
 800283e:	2304      	movs	r3, #4
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <HAL_DMA_IRQHandler+0x208>)
 8002842:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8094 	beq.w	8002976 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002856:	e08e      	b.n	8002976 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2202      	movs	r2, #2
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d056      	beq.n	8002916 <HAL_DMA_IRQHandler+0x186>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d051      	beq.n	8002916 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020a 	bic.w	r2, r2, #10
 800288e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a38      	ldr	r2, [pc, #224]	; (8002980 <HAL_DMA_IRQHandler+0x1f0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d029      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x166>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a37      	ldr	r2, [pc, #220]	; (8002984 <HAL_DMA_IRQHandler+0x1f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x162>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a35      	ldr	r2, [pc, #212]	; (8002988 <HAL_DMA_IRQHandler+0x1f8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x15c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <HAL_DMA_IRQHandler+0x1fc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d012      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x156>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_DMA_IRQHandler+0x200>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00a      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x150>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a31      	ldr	r2, [pc, #196]	; (8002994 <HAL_DMA_IRQHandler+0x204>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d102      	bne.n	80028da <HAL_DMA_IRQHandler+0x14a>
 80028d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d8:	e00e      	b.n	80028f8 <HAL_DMA_IRQHandler+0x168>
 80028da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028de:	e00b      	b.n	80028f8 <HAL_DMA_IRQHandler+0x168>
 80028e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e4:	e008      	b.n	80028f8 <HAL_DMA_IRQHandler+0x168>
 80028e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ea:	e005      	b.n	80028f8 <HAL_DMA_IRQHandler+0x168>
 80028ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f0:	e002      	b.n	80028f8 <HAL_DMA_IRQHandler+0x168>
 80028f2:	2320      	movs	r3, #32
 80028f4:	e000      	b.n	80028f8 <HAL_DMA_IRQHandler+0x168>
 80028f6:	2302      	movs	r3, #2
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_DMA_IRQHandler+0x208>)
 80028fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d034      	beq.n	8002976 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002914:	e02f      	b.n	8002976 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2208      	movs	r2, #8
 800291c:	409a      	lsls	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d028      	beq.n	8002978 <HAL_DMA_IRQHandler+0x1e8>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 020e 	bic.w	r2, r2, #14
 800293e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
    }
  }
  return;
 8002976:	bf00      	nop
 8002978:	bf00      	nop
}
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40020008 	.word	0x40020008
 8002984:	4002001c 	.word	0x4002001c
 8002988:	40020030 	.word	0x40020030
 800298c:	40020044 	.word	0x40020044
 8002990:	40020058 	.word	0x40020058
 8002994:	4002006c 	.word	0x4002006c
 8002998:	40020000 	.word	0x40020000

0800299c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d108      	bne.n	80029dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029da:	e007      	b.n	80029ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b08b      	sub	sp, #44	; 0x2c
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	e127      	b.n	8002c5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8116 	bne.w	8002c56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b12      	cmp	r3, #18
 8002a30:	d034      	beq.n	8002a9c <HAL_GPIO_Init+0xa4>
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d80d      	bhi.n	8002a52 <HAL_GPIO_Init+0x5a>
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d02b      	beq.n	8002a92 <HAL_GPIO_Init+0x9a>
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d804      	bhi.n	8002a48 <HAL_GPIO_Init+0x50>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d031      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d01c      	beq.n	8002a80 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a46:	e048      	b.n	8002ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d043      	beq.n	8002ad4 <HAL_GPIO_Init+0xdc>
 8002a4c:	2b11      	cmp	r3, #17
 8002a4e:	d01b      	beq.n	8002a88 <HAL_GPIO_Init+0x90>
          break;
 8002a50:	e043      	b.n	8002ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a52:	4a89      	ldr	r2, [pc, #548]	; (8002c78 <HAL_GPIO_Init+0x280>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d026      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
 8002a58:	4a87      	ldr	r2, [pc, #540]	; (8002c78 <HAL_GPIO_Init+0x280>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d806      	bhi.n	8002a6c <HAL_GPIO_Init+0x74>
 8002a5e:	4a87      	ldr	r2, [pc, #540]	; (8002c7c <HAL_GPIO_Init+0x284>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d020      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
 8002a64:	4a86      	ldr	r2, [pc, #536]	; (8002c80 <HAL_GPIO_Init+0x288>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
          break;
 8002a6a:	e036      	b.n	8002ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a6c:	4a85      	ldr	r2, [pc, #532]	; (8002c84 <HAL_GPIO_Init+0x28c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
 8002a72:	4a85      	ldr	r2, [pc, #532]	; (8002c88 <HAL_GPIO_Init+0x290>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d016      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
 8002a78:	4a84      	ldr	r2, [pc, #528]	; (8002c8c <HAL_GPIO_Init+0x294>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0xae>
          break;
 8002a7e:	e02c      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e028      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	623b      	str	r3, [r7, #32]
          break;
 8002a90:	e023      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	3308      	adds	r3, #8
 8002a98:	623b      	str	r3, [r7, #32]
          break;
 8002a9a:	e01e      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	623b      	str	r3, [r7, #32]
          break;
 8002aa4:	e019      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	623b      	str	r3, [r7, #32]
          break;
 8002ab2:	e012      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002abc:	2308      	movs	r3, #8
 8002abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	611a      	str	r2, [r3, #16]
          break;
 8002ac6:	e008      	b.n	8002ada <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	615a      	str	r2, [r3, #20]
          break;
 8002ad2:	e002      	b.n	8002ada <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2bff      	cmp	r3, #255	; 0xff
 8002ade:	d801      	bhi.n	8002ae4 <HAL_GPIO_Init+0xec>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	e001      	b.n	8002ae8 <HAL_GPIO_Init+0xf0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2bff      	cmp	r3, #255	; 0xff
 8002aee:	d802      	bhi.n	8002af6 <HAL_GPIO_Init+0xfe>
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x104>
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	3b08      	subs	r3, #8
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	210f      	movs	r1, #15
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	6a39      	ldr	r1, [r7, #32]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8096 	beq.w	8002c56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_GPIO_Init+0x298>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_GPIO_Init+0x298>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6193      	str	r3, [r2, #24]
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_GPIO_Init+0x298>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b42:	4a54      	ldr	r2, [pc, #336]	; (8002c94 <HAL_GPIO_Init+0x29c>)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x2a0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x19e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_GPIO_Init+0x2a4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x19a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_GPIO_Init+0x2a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x196>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_GPIO_Init+0x2ac>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x192>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x1a0>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x1a0>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x1a0>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x1a0>
 8002b96:	2300      	movs	r3, #0
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ba8:	493a      	ldr	r1, [pc, #232]	; (8002c94 <HAL_GPIO_Init+0x29c>)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4938      	ldr	r1, [pc, #224]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
 8002bce:	e006      	b.n	8002bde <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	4933      	ldr	r1, [pc, #204]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	492e      	ldr	r1, [pc, #184]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	4929      	ldr	r1, [pc, #164]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	4924      	ldr	r1, [pc, #144]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
 8002c1e:	e006      	b.n	8002c2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	491f      	ldr	r1, [pc, #124]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	491a      	ldr	r1, [pc, #104]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60cb      	str	r3, [r1, #12]
 8002c46:	e006      	b.n	8002c56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	4915      	ldr	r1, [pc, #84]	; (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f47f aed0 	bne.w	8002a0c <HAL_GPIO_Init+0x14>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	372c      	adds	r7, #44	; 0x2c
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	10210000 	.word	0x10210000
 8002c7c:	10110000 	.word	0x10110000
 8002c80:	10120000 	.word	0x10120000
 8002c84:	10310000 	.word	0x10310000
 8002c88:	10320000 	.word	0x10320000
 8002c8c:	10220000 	.word	0x10220000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40010800 	.word	0x40010800
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40011400 	.word	0x40011400
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e11f      	b.n	8002efe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe facc 	bl	8001270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d10:	f000 ffe0 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8002d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a7b      	ldr	r2, [pc, #492]	; (8002f08 <HAL_I2C_Init+0x25c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d807      	bhi.n	8002d30 <HAL_I2C_Init+0x84>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a7a      	ldr	r2, [pc, #488]	; (8002f0c <HAL_I2C_Init+0x260>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bf94      	ite	ls
 8002d28:	2301      	movls	r3, #1
 8002d2a:	2300      	movhi	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e006      	b.n	8002d3e <HAL_I2C_Init+0x92>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a77      	ldr	r2, [pc, #476]	; (8002f10 <HAL_I2C_Init+0x264>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0db      	b.n	8002efe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a72      	ldr	r2, [pc, #456]	; (8002f14 <HAL_I2C_Init+0x268>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0c9b      	lsrs	r3, r3, #18
 8002d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a64      	ldr	r2, [pc, #400]	; (8002f08 <HAL_I2C_Init+0x25c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d802      	bhi.n	8002d80 <HAL_I2C_Init+0xd4>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	e009      	b.n	8002d94 <HAL_I2C_Init+0xe8>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <HAL_I2C_Init+0x26c>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	3301      	adds	r3, #1
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4956      	ldr	r1, [pc, #344]	; (8002f08 <HAL_I2C_Init+0x25c>)
 8002db0:	428b      	cmp	r3, r1
 8002db2:	d80d      	bhi.n	8002dd0 <HAL_I2C_Init+0x124>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e59      	subs	r1, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	bf38      	it	cc
 8002dcc:	2304      	movcc	r3, #4
 8002dce:	e04f      	b.n	8002e70 <HAL_I2C_Init+0x1c4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <HAL_I2C_Init+0x150>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e012      	b.n	8002e22 <HAL_I2C_Init+0x176>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	0099      	lsls	r1, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x17e>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e022      	b.n	8002e70 <HAL_I2C_Init+0x1c4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10e      	bne.n	8002e50 <HAL_I2C_Init+0x1a4>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e58      	subs	r0, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	440b      	add	r3, r1
 8002e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	e00f      	b.n	8002e70 <HAL_I2C_Init+0x1c4>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1e58      	subs	r0, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	0099      	lsls	r1, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	6809      	ldr	r1, [r1, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6911      	ldr	r1, [r2, #16]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68d2      	ldr	r2, [r2, #12]
 8002eaa:	4311      	orrs	r1, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	000186a0 	.word	0x000186a0
 8002f0c:	001e847f 	.word	0x001e847f
 8002f10:	003d08ff 	.word	0x003d08ff
 8002f14:	431bde83 	.word	0x431bde83
 8002f18:	10624dd3 	.word	0x10624dd3

08002f1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	460b      	mov	r3, r1
 8002f2a:	817b      	strh	r3, [r7, #10]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f30:	f7fe fda8 	bl	8001a84 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 80e0 	bne.w	8003104 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2319      	movs	r3, #25
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4970      	ldr	r1, [pc, #448]	; (8003110 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f964 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0d3      	b.n	8003106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_I2C_Master_Transmit+0x50>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e0cc      	b.n	8003106 <HAL_I2C_Master_Transmit+0x1ea>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2221      	movs	r2, #33	; 0x21
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2210      	movs	r2, #16
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	893a      	ldrh	r2, [r7, #8]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	; (8003114 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f89c 	bl	8003118 <I2C_MasterRequestWrite>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e08d      	b.n	8003106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003000:	e066      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	6a39      	ldr	r1, [r7, #32]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f9de 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b04      	cmp	r3, #4
 8003018:	d107      	bne.n	800302a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06b      	b.n	8003106 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11b      	bne.n	80030a4 <HAL_I2C_Master_Transmit+0x188>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d017      	beq.n	80030a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	6a39      	ldr	r1, [r7, #32]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f9ce 	bl	800344a <I2C_WaitOnBTFFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e01a      	b.n	8003106 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d194      	bne.n	8003002 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	00100002 	.word	0x00100002
 8003114:	ffff0000 	.word	0xffff0000

08003118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	460b      	mov	r3, r1
 8003126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d006      	beq.n	8003142 <I2C_MasterRequestWrite+0x2a>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d003      	beq.n	8003142 <I2C_MasterRequestWrite+0x2a>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003140:	d108      	bne.n	8003154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e00b      	b.n	800316c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	2b12      	cmp	r3, #18
 800315a:	d107      	bne.n	800316c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f84f 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d103      	bne.n	800319c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e035      	b.n	800320c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a8:	d108      	bne.n	80031bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031b8:	611a      	str	r2, [r3, #16]
 80031ba:	e01b      	b.n	80031f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031bc:	897b      	ldrh	r3, [r7, #10]
 80031be:	11db      	asrs	r3, r3, #7
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f003 0306 	and.w	r3, r3, #6
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f063 030f 	orn	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <I2C_MasterRequestWrite+0xfc>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f875 	bl	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e010      	b.n	800320c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ea:	897b      	ldrh	r3, [r7, #10]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4907      	ldr	r1, [pc, #28]	; (8003218 <I2C_MasterRequestWrite+0x100>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f865 	bl	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	00010008 	.word	0x00010008
 8003218:	00010002 	.word	0x00010002

0800321c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	e025      	b.n	800327a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d021      	beq.n	800327a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fc25 	bl	8001a84 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d116      	bne.n	800327a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e023      	b.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10d      	bne.n	80032a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	e00c      	b.n	80032ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d0b6      	beq.n	800322e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d8:	e051      	b.n	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e8:	d123      	bne.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003302:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e046      	b.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d021      	beq.n	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe fba3 	bl	8001a84 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e020      	b.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10c      	bne.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e00b      	b.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d18d      	bne.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f878 	bl	80034cc <I2C_IsAcknowledgeFailed>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e02d      	b.n	8003442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d021      	beq.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fb49 	bl	8001a84 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d116      	bne.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e007      	b.n	8003442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d1ca      	bne.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003456:	e02d      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f837 	bl	80034cc <I2C_IsAcknowledgeFailed>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e02d      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d021      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003470:	f7fe fb08 	bl	8001a84 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d1ca      	bne.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d11b      	bne.n	800351c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e26c      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8087 	beq.w	8003656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003548:	4b92      	ldr	r3, [pc, #584]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b04      	cmp	r3, #4
 8003552:	d00c      	beq.n	800356e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d112      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d10b      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06c      	beq.n	8003654 <HAL_RCC_OscConfig+0x12c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d168      	bne.n	8003654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e246      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x76>
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7f      	ldr	r2, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e02e      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0xbc>
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a71      	ldr	r2, [pc, #452]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035e4:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6a      	ldr	r2, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fa3e 	bl	8001a84 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fe fa3a 	bl	8001a84 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1fa      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xe4>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fa2a 	bl	8001a84 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fa26 	bl	8001a84 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1e6      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x10c>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800366e:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d11c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e1ba      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4939      	ldr	r1, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e03a      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe f9df 	bl	8001a84 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fe f9db 	bl	8001a84 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e19b      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe f9be 	bl	8001a84 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370c:	f7fe f9ba 	bl	8001a84 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e17a      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03a      	beq.n	80037ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d019      	beq.n	8003772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <HAL_RCC_OscConfig+0x274>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fe f99e 	bl	8001a84 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fe f99a 	bl	8001a84 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e15a      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f000 fada 	bl	8003d24 <RCC_Delay>
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_OscConfig+0x274>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7fe f984 	bl	8001a84 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe f980 	bl	8001a84 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d908      	bls.n	80037a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e140      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	42420000 	.word	0x42420000
 800379c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b9e      	ldr	r3, [pc, #632]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e9      	bne.n	8003780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a6 	beq.w	8003906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10d      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b94      	ldr	r3, [pc, #592]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a93      	ldr	r2, [pc, #588]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b91      	ldr	r3, [pc, #580]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b8b      	ldr	r3, [pc, #556]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a8a      	ldr	r2, [pc, #552]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe f941 	bl	8001a84 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fe f93d 	bl	8001a84 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	; 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0fd      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b81      	ldr	r3, [pc, #516]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 800382c:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a7a      	ldr	r2, [pc, #488]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e02d      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x334>
 8003842:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a72      	ldr	r2, [pc, #456]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	e01c      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x356>
 8003864:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a6c      	ldr	r2, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a69      	ldr	r2, [pc, #420]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	e00b      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	4b64      	ldr	r3, [pc, #400]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a63      	ldr	r2, [pc, #396]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d015      	beq.n	80038ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe f8f1 	bl	8001a84 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe f8ed 	bl	8001a84 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0ab      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCC_OscConfig+0x37e>
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe f8db 	bl	8001a84 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe f8d7 	bl	8001a84 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e095      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ee      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a47      	ldr	r2, [pc, #284]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8081 	beq.w	8003a12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d061      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d146      	bne.n	80039b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_OscConfig+0x4fc>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fe f8ab 	bl	8001a84 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe f8a7 	bl	8001a84 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e067      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d108      	bne.n	800396c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395a:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	492d      	ldr	r1, [pc, #180]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a19      	ldr	r1, [r3, #32]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	430b      	orrs	r3, r1
 800397e:	4927      	ldr	r1, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_OscConfig+0x4fc>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe f87b 	bl	8001a84 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe f877 	bl	8001a84 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e037      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x46a>
 80039b0:	e02f      	b.n	8003a12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_RCC_OscConfig+0x4fc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f864 	bl	8001a84 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f860 	bl	8001a84 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e020      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x498>
 80039de:	e018      	b.n	8003a12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e013      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42420060 	.word	0x42420060

08003a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0d0      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d910      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0207 	bic.w	r2, r3, #7
 8003a52:	4965      	ldr	r1, [pc, #404]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d040      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e073      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06b      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4936      	ldr	r1, [pc, #216]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b18:	f7fd ffb4 	bl	8001a84 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7fd ffb0 	bl	8001a84 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e053      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d210      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	4922      	ldr	r1, [pc, #136]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	fa21 f303 	lsr.w	r3, r1, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd ff12 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08008f04 	.word	0x08008f04
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	20000004 	.word	0x20000004

08003bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	b490      	push	{r4, r7}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c04:	1d3c      	adds	r4, r7, #4
 8003c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x40>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x46>
 8003c3a:	e02d      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3e:	623b      	str	r3, [r7, #32]
      break;
 8003c40:	e02d      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	0c9b      	lsrs	r3, r3, #18
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c4e:	4413      	add	r3, r2
 8003c50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c60:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0c5b      	lsrs	r3, r3, #17
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c6e:	4413      	add	r3, r2
 8003c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c7a:	fb02 f203 	mul.w	r2, r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	e004      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	623b      	str	r3, [r7, #32]
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c9a:	623b      	str	r3, [r7, #32]
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc90      	pop	{r4, r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	08008ef0 	.word	0x08008ef0
 8003cb0:	08008f00 	.word	0x08008f00
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	007a1200 	.word	0x007a1200
 8003cbc:	003d0900 	.word	0x003d0900

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000000 	.word	0x20000000

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff2 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08008f14 	.word	0x08008f14

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffde 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d04:	4601      	mov	r1, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	08008f14 	.word	0x08008f14

08003d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <RCC_Delay+0x34>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <RCC_Delay+0x38>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d40:	bf00      	nop
  }
  while (Delay --);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f9      	bne.n	8003d40 <RCC_Delay+0x1c>
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d07d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d96:	61d3      	str	r3, [r2, #28]
 8003d98:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db4:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fe60 	bl	8001a84 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fd fe5c 	bl	8001a84 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e06d      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d027      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fd fe2b 	bl	8001a84 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd fe27 	bl	8001a84 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e036      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4917      	ldr	r1, [pc, #92]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	42420440 	.word	0x42420440

08003ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e041      	b.n	8003f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fc74 	bl	80017e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 f98e 	bl	800422c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_TIM_PWM_Start+0x24>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e022      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x6a>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d109      	bne.n	8003faa <HAL_TIM_PWM_Start+0x3e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	bf14      	ite	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2300      	moveq	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	e015      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x6a>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d109      	bne.n	8003fc4 <HAL_TIM_PWM_Start+0x58>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e008      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x6a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e05e      	b.n	800409c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0x82>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	e013      	b.n	8004016 <HAL_TIM_PWM_Start+0xaa>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x92>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	e00b      	b.n	8004016 <HAL_TIM_PWM_Start+0xaa>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	e003      	b.n	8004016 <HAL_TIM_PWM_Start+0xaa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 faee 	bl	8004600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_TIM_PWM_Start+0x138>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d107      	bne.n	800403e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIM_PWM_Start+0x138>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIM_PWM_Start+0xfa>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d009      	beq.n	8004066 <HAL_TIM_PWM_Start+0xfa>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <HAL_TIM_PWM_Start+0x13c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIM_PWM_Start+0xfa>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_TIM_PWM_Start+0x140>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d111      	bne.n	800408a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b06      	cmp	r3, #6
 8004076:	d010      	beq.n	800409a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	e007      	b.n	800409a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800

080040b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0ac      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x174>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	f200 809f 	bhi.w	8004218 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004219 	.word	0x08004219
 80040e8:	08004219 	.word	0x08004219
 80040ec:	08004219 	.word	0x08004219
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004219 	.word	0x08004219
 80040f8:	08004219 	.word	0x08004219
 80040fc:	08004219 	.word	0x08004219
 8004100:	08004197 	.word	0x08004197
 8004104:	08004219 	.word	0x08004219
 8004108:	08004219 	.word	0x08004219
 800410c:	08004219 	.word	0x08004219
 8004110:	080041d7 	.word	0x080041d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f8e8 	bl	80042f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
      break;
 8004152:	e062      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f92e 	bl	80043bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]
      break;
 8004194:	e041      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f977 	bl	8004490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0204 	bic.w	r2, r2, #4
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
      break;
 80041d4:	e021      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f9c1 	bl	8004564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
      break;
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x30>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x30>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <TIM_Base_SetConfig+0xbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x30>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a25      	ldr	r2, [pc, #148]	; (80042ec <TIM_Base_SetConfig+0xc0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <TIM_Base_SetConfig+0xb8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00b      	beq.n	800428e <TIM_Base_SetConfig+0x62>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d007      	beq.n	800428e <TIM_Base_SetConfig+0x62>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <TIM_Base_SetConfig+0xbc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_Base_SetConfig+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <TIM_Base_SetConfig+0xc0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <TIM_Base_SetConfig+0xb8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d103      	bne.n	80042d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	615a      	str	r2, [r3, #20]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800

080042f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f023 0302 	bic.w	r3, r3, #2
 8004338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <TIM_OC1_SetConfig+0xc8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10c      	bne.n	8004366 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0308 	bic.w	r3, r3, #8
 8004352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <TIM_OC1_SetConfig+0xc8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d111      	bne.n	8004392 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00

080043bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0210 	bic.w	r2, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0320 	bic.w	r3, r3, #32
 8004406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1d      	ldr	r2, [pc, #116]	; (800448c <TIM_OC2_SetConfig+0xd0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10d      	bne.n	8004438 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a14      	ldr	r2, [pc, #80]	; (800448c <TIM_OC2_SetConfig+0xd0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d113      	bne.n	8004468 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	40012c00 	.word	0x40012c00

08004490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <TIM_OC3_SetConfig+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10d      	bne.n	800450a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <TIM_OC3_SetConfig+0xd0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d113      	bne.n	800453a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00

08004564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <TIM_OC4_SetConfig+0x98>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d109      	bne.n	80045d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00

08004600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2201      	movs	r2, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800465c:	2302      	movs	r3, #2
 800465e:	e046      	b.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d009      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10c      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800

08004704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e03f      	b.n	8004796 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd f8e2 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f905 	bl	8004958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08a      	sub	sp, #40	; 0x28
 80047a2:	af02      	add	r7, sp, #8
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d17c      	bne.n	80048b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_Transmit+0x2c>
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e075      	b.n	80048ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Transmit+0x3e>
 80047d8:	2302      	movs	r3, #2
 80047da:	e06e      	b.n	80048ba <HAL_UART_Transmit+0x11c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2221      	movs	r2, #33	; 0x21
 80047ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047f2:	f7fd f947 	bl	8001a84 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d108      	bne.n	8004820 <HAL_UART_Transmit+0x82>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	e003      	b.n	8004828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004830:	e02a      	b.n	8004888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f840 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e036      	b.n	80048ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	3302      	adds	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	e007      	b.n	800487a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1cf      	bne.n	8004832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	2140      	movs	r1, #64	; 0x40
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f810 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e006      	b.n	80048ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d2:	e02c      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d028      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e2:	f7fd f8cf 	bl	8001a84 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d21d      	bcs.n	800492e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004900:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00f      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	429a      	cmp	r2, r3
 800494a:	d0c3      	beq.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004992:	f023 030c 	bic.w	r3, r3, #12
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	430b      	orrs	r3, r1
 800499e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <UART_SetConfig+0x114>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d103      	bne.n	80049c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7ff f99c 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	e002      	b.n	80049ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7ff f984 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 80049cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <UART_SetConfig+0x118>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	0119      	lsls	r1, r3, #4
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009a      	lsls	r2, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <UART_SetConfig+0x118>)
 8004a06:	fba3 0302 	umull	r0, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	2064      	movs	r0, #100	; 0x64
 8004a0e:	fb00 f303 	mul.w	r3, r0, r3
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	3332      	adds	r3, #50	; 0x32
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <UART_SetConfig+0x118>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a24:	4419      	add	r1, r3
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <UART_SetConfig+0x118>)
 8004a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2064      	movs	r0, #100	; 0x64
 8004a46:	fb00 f303 	mul.w	r3, r0, r3
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	3332      	adds	r3, #50	; 0x32
 8004a50:	4a07      	ldr	r2, [pc, #28]	; (8004a70 <UART_SetConfig+0x118>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	440a      	add	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	51eb851f 	.word	0x51eb851f

08004a74 <__errno>:
 8004a74:	4b01      	ldr	r3, [pc, #4]	; (8004a7c <__errno+0x8>)
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000000c 	.word	0x2000000c

08004a80 <__libc_init_array>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	2500      	movs	r5, #0
 8004a84:	4e0c      	ldr	r6, [pc, #48]	; (8004ab8 <__libc_init_array+0x38>)
 8004a86:	4c0d      	ldr	r4, [pc, #52]	; (8004abc <__libc_init_array+0x3c>)
 8004a88:	1ba4      	subs	r4, r4, r6
 8004a8a:	10a4      	asrs	r4, r4, #2
 8004a8c:	42a5      	cmp	r5, r4
 8004a8e:	d109      	bne.n	8004aa4 <__libc_init_array+0x24>
 8004a90:	f004 fa02 	bl	8008e98 <_init>
 8004a94:	2500      	movs	r5, #0
 8004a96:	4e0a      	ldr	r6, [pc, #40]	; (8004ac0 <__libc_init_array+0x40>)
 8004a98:	4c0a      	ldr	r4, [pc, #40]	; (8004ac4 <__libc_init_array+0x44>)
 8004a9a:	1ba4      	subs	r4, r4, r6
 8004a9c:	10a4      	asrs	r4, r4, #2
 8004a9e:	42a5      	cmp	r5, r4
 8004aa0:	d105      	bne.n	8004aae <__libc_init_array+0x2e>
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
 8004aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aa8:	4798      	blx	r3
 8004aaa:	3501      	adds	r5, #1
 8004aac:	e7ee      	b.n	8004a8c <__libc_init_array+0xc>
 8004aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab2:	4798      	blx	r3
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	e7f2      	b.n	8004a9e <__libc_init_array+0x1e>
 8004ab8:	08009240 	.word	0x08009240
 8004abc:	08009240 	.word	0x08009240
 8004ac0:	08009240 	.word	0x08009240
 8004ac4:	08009244 	.word	0x08009244

08004ac8 <memset>:
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4402      	add	r2, r0
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d100      	bne.n	8004ad2 <memset+0xa>
 8004ad0:	4770      	bx	lr
 8004ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad6:	e7f9      	b.n	8004acc <memset+0x4>

08004ad8 <__cvt>:
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ade:	461e      	mov	r6, r3
 8004ae0:	bfbb      	ittet	lt
 8004ae2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004ae6:	461e      	movlt	r6, r3
 8004ae8:	2300      	movge	r3, #0
 8004aea:	232d      	movlt	r3, #45	; 0x2d
 8004aec:	b088      	sub	sp, #32
 8004aee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004af0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004af4:	f027 0720 	bic.w	r7, r7, #32
 8004af8:	2f46      	cmp	r7, #70	; 0x46
 8004afa:	4614      	mov	r4, r2
 8004afc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004afe:	700b      	strb	r3, [r1, #0]
 8004b00:	d004      	beq.n	8004b0c <__cvt+0x34>
 8004b02:	2f45      	cmp	r7, #69	; 0x45
 8004b04:	d100      	bne.n	8004b08 <__cvt+0x30>
 8004b06:	3501      	adds	r5, #1
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e000      	b.n	8004b0e <__cvt+0x36>
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	aa07      	add	r2, sp, #28
 8004b10:	9204      	str	r2, [sp, #16]
 8004b12:	aa06      	add	r2, sp, #24
 8004b14:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b18:	e9cd 3500 	strd	r3, r5, [sp]
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	4633      	mov	r3, r6
 8004b20:	f001 fd96 	bl	8006650 <_dtoa_r>
 8004b24:	2f47      	cmp	r7, #71	; 0x47
 8004b26:	4680      	mov	r8, r0
 8004b28:	d102      	bne.n	8004b30 <__cvt+0x58>
 8004b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b2c:	07db      	lsls	r3, r3, #31
 8004b2e:	d526      	bpl.n	8004b7e <__cvt+0xa6>
 8004b30:	2f46      	cmp	r7, #70	; 0x46
 8004b32:	eb08 0905 	add.w	r9, r8, r5
 8004b36:	d111      	bne.n	8004b5c <__cvt+0x84>
 8004b38:	f898 3000 	ldrb.w	r3, [r8]
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d10a      	bne.n	8004b56 <__cvt+0x7e>
 8004b40:	2200      	movs	r2, #0
 8004b42:	2300      	movs	r3, #0
 8004b44:	4620      	mov	r0, r4
 8004b46:	4631      	mov	r1, r6
 8004b48:	f7fb ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8004b4c:	b918      	cbnz	r0, 8004b56 <__cvt+0x7e>
 8004b4e:	f1c5 0501 	rsb	r5, r5, #1
 8004b52:	f8ca 5000 	str.w	r5, [sl]
 8004b56:	f8da 3000 	ldr.w	r3, [sl]
 8004b5a:	4499      	add	r9, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4620      	mov	r0, r4
 8004b62:	4631      	mov	r1, r6
 8004b64:	f7fb ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8004b68:	b938      	cbnz	r0, 8004b7a <__cvt+0xa2>
 8004b6a:	2230      	movs	r2, #48	; 0x30
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	454b      	cmp	r3, r9
 8004b70:	d205      	bcs.n	8004b7e <__cvt+0xa6>
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	9107      	str	r1, [sp, #28]
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e7f8      	b.n	8004b6c <__cvt+0x94>
 8004b7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b7e:	4640      	mov	r0, r8
 8004b80:	9b07      	ldr	r3, [sp, #28]
 8004b82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b84:	eba3 0308 	sub.w	r3, r3, r8
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	b008      	add	sp, #32
 8004b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b90 <__exponent>:
 8004b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b92:	2900      	cmp	r1, #0
 8004b94:	bfb4      	ite	lt
 8004b96:	232d      	movlt	r3, #45	; 0x2d
 8004b98:	232b      	movge	r3, #43	; 0x2b
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	bfb8      	it	lt
 8004b9e:	4249      	neglt	r1, r1
 8004ba0:	2909      	cmp	r1, #9
 8004ba2:	f804 2b02 	strb.w	r2, [r4], #2
 8004ba6:	7043      	strb	r3, [r0, #1]
 8004ba8:	dd21      	ble.n	8004bee <__exponent+0x5e>
 8004baa:	f10d 0307 	add.w	r3, sp, #7
 8004bae:	461f      	mov	r7, r3
 8004bb0:	260a      	movs	r6, #10
 8004bb2:	fb91 f5f6 	sdiv	r5, r1, r6
 8004bb6:	fb06 1115 	mls	r1, r6, r5, r1
 8004bba:	2d09      	cmp	r5, #9
 8004bbc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004bc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bc4:	f103 32ff 	add.w	r2, r3, #4294967295
 8004bc8:	4629      	mov	r1, r5
 8004bca:	dc09      	bgt.n	8004be0 <__exponent+0x50>
 8004bcc:	3130      	adds	r1, #48	; 0x30
 8004bce:	3b02      	subs	r3, #2
 8004bd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004bd4:	42bb      	cmp	r3, r7
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	d304      	bcc.n	8004be4 <__exponent+0x54>
 8004bda:	1a10      	subs	r0, r2, r0
 8004bdc:	b003      	add	sp, #12
 8004bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be0:	4613      	mov	r3, r2
 8004be2:	e7e6      	b.n	8004bb2 <__exponent+0x22>
 8004be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004be8:	f804 2b01 	strb.w	r2, [r4], #1
 8004bec:	e7f2      	b.n	8004bd4 <__exponent+0x44>
 8004bee:	2330      	movs	r3, #48	; 0x30
 8004bf0:	4419      	add	r1, r3
 8004bf2:	7083      	strb	r3, [r0, #2]
 8004bf4:	1d02      	adds	r2, r0, #4
 8004bf6:	70c1      	strb	r1, [r0, #3]
 8004bf8:	e7ef      	b.n	8004bda <__exponent+0x4a>
	...

08004bfc <_printf_float>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	b091      	sub	sp, #68	; 0x44
 8004c02:	460c      	mov	r4, r1
 8004c04:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004c06:	4693      	mov	fp, r2
 8004c08:	461e      	mov	r6, r3
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	f002 fecc 	bl	80079a8 <_localeconv_r>
 8004c10:	6803      	ldr	r3, [r0, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	9309      	str	r3, [sp, #36]	; 0x24
 8004c16:	f7fb fa9b 	bl	8000150 <strlen>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	900a      	str	r0, [sp, #40]	; 0x28
 8004c22:	3307      	adds	r3, #7
 8004c24:	f023 0307 	bic.w	r3, r3, #7
 8004c28:	f103 0208 	add.w	r2, r3, #8
 8004c2c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004c30:	f8d4 a000 	ldr.w	sl, [r4]
 8004c34:	603a      	str	r2, [r7, #0]
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c3e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	4ba6      	ldr	r3, [pc, #664]	; (8004ee8 <_printf_float+0x2ec>)
 8004c4e:	4638      	mov	r0, r7
 8004c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c52:	f7fb fedb 	bl	8000a0c <__aeabi_dcmpun>
 8004c56:	bb68      	cbnz	r0, 8004cb4 <_printf_float+0xb8>
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	4ba2      	ldr	r3, [pc, #648]	; (8004ee8 <_printf_float+0x2ec>)
 8004c5e:	4638      	mov	r0, r7
 8004c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c62:	f7fb feb5 	bl	80009d0 <__aeabi_dcmple>
 8004c66:	bb28      	cbnz	r0, 8004cb4 <_printf_float+0xb8>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	4649      	mov	r1, r9
 8004c70:	f7fb fea4 	bl	80009bc <__aeabi_dcmplt>
 8004c74:	b110      	cbz	r0, 8004c7c <_printf_float+0x80>
 8004c76:	232d      	movs	r3, #45	; 0x2d
 8004c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7c:	4f9b      	ldr	r7, [pc, #620]	; (8004eec <_printf_float+0x2f0>)
 8004c7e:	4b9c      	ldr	r3, [pc, #624]	; (8004ef0 <_printf_float+0x2f4>)
 8004c80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c84:	bf98      	it	ls
 8004c86:	461f      	movls	r7, r3
 8004c88:	2303      	movs	r3, #3
 8004c8a:	f04f 0900 	mov.w	r9, #0
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	f02a 0304 	bic.w	r3, sl, #4
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	9600      	str	r6, [sp, #0]
 8004c98:	465b      	mov	r3, fp
 8004c9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 f9e2 	bl	8005068 <_printf_common>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f040 8090 	bne.w	8004dca <_printf_float+0x1ce>
 8004caa:	f04f 30ff 	mov.w	r0, #4294967295
 8004cae:	b011      	add	sp, #68	; 0x44
 8004cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb4:	463a      	mov	r2, r7
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	4638      	mov	r0, r7
 8004cba:	4649      	mov	r1, r9
 8004cbc:	f7fb fea6 	bl	8000a0c <__aeabi_dcmpun>
 8004cc0:	b110      	cbz	r0, 8004cc8 <_printf_float+0xcc>
 8004cc2:	4f8c      	ldr	r7, [pc, #560]	; (8004ef4 <_printf_float+0x2f8>)
 8004cc4:	4b8c      	ldr	r3, [pc, #560]	; (8004ef8 <_printf_float+0x2fc>)
 8004cc6:	e7db      	b.n	8004c80 <_printf_float+0x84>
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	a80d      	add	r0, sp, #52	; 0x34
 8004cd2:	a90e      	add	r1, sp, #56	; 0x38
 8004cd4:	d140      	bne.n	8004d58 <_printf_float+0x15c>
 8004cd6:	2306      	movs	r3, #6
 8004cd8:	6063      	str	r3, [r4, #4]
 8004cda:	f04f 0c00 	mov.w	ip, #0
 8004cde:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004ce2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	6022      	str	r2, [r4, #0]
 8004cea:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	463a      	mov	r2, r7
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f7ff feed 	bl	8004ad8 <__cvt>
 8004cfe:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004d02:	2b47      	cmp	r3, #71	; 0x47
 8004d04:	4607      	mov	r7, r0
 8004d06:	d109      	bne.n	8004d1c <_printf_float+0x120>
 8004d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d0a:	1cd8      	adds	r0, r3, #3
 8004d0c:	db02      	blt.n	8004d14 <_printf_float+0x118>
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	4293      	cmp	r3, r2
 8004d12:	dd47      	ble.n	8004da4 <_printf_float+0x1a8>
 8004d14:	f1a8 0802 	sub.w	r8, r8, #2
 8004d18:	fa5f f888 	uxtb.w	r8, r8
 8004d1c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d22:	d824      	bhi.n	8004d6e <_printf_float+0x172>
 8004d24:	3901      	subs	r1, #1
 8004d26:	4642      	mov	r2, r8
 8004d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d2c:	910d      	str	r1, [sp, #52]	; 0x34
 8004d2e:	f7ff ff2f 	bl	8004b90 <__exponent>
 8004d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d34:	4681      	mov	r9, r0
 8004d36:	1813      	adds	r3, r2, r0
 8004d38:	2a01      	cmp	r2, #1
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	dc02      	bgt.n	8004d44 <_printf_float+0x148>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	07d1      	lsls	r1, r2, #31
 8004d42:	d501      	bpl.n	8004d48 <_printf_float+0x14c>
 8004d44:	3301      	adds	r3, #1
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0a2      	beq.n	8004c96 <_printf_float+0x9a>
 8004d50:	232d      	movs	r3, #45	; 0x2d
 8004d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d56:	e79e      	b.n	8004c96 <_printf_float+0x9a>
 8004d58:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004d5c:	f000 816e 	beq.w	800503c <_printf_float+0x440>
 8004d60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d64:	d1b9      	bne.n	8004cda <_printf_float+0xde>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1b7      	bne.n	8004cda <_printf_float+0xde>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e7b4      	b.n	8004cd8 <_printf_float+0xdc>
 8004d6e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004d72:	d119      	bne.n	8004da8 <_printf_float+0x1ac>
 8004d74:	2900      	cmp	r1, #0
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	dd0c      	ble.n	8004d94 <_printf_float+0x198>
 8004d7a:	6121      	str	r1, [r4, #16]
 8004d7c:	b913      	cbnz	r3, 8004d84 <_printf_float+0x188>
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	07d2      	lsls	r2, r2, #31
 8004d82:	d502      	bpl.n	8004d8a <_printf_float+0x18e>
 8004d84:	3301      	adds	r3, #1
 8004d86:	440b      	add	r3, r1
 8004d88:	6123      	str	r3, [r4, #16]
 8004d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d8c:	f04f 0900 	mov.w	r9, #0
 8004d90:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d92:	e7d9      	b.n	8004d48 <_printf_float+0x14c>
 8004d94:	b913      	cbnz	r3, 8004d9c <_printf_float+0x1a0>
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	07d0      	lsls	r0, r2, #31
 8004d9a:	d501      	bpl.n	8004da0 <_printf_float+0x1a4>
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	e7f3      	b.n	8004d88 <_printf_float+0x18c>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e7f1      	b.n	8004d88 <_printf_float+0x18c>
 8004da4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004da8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004dac:	4293      	cmp	r3, r2
 8004dae:	db05      	blt.n	8004dbc <_printf_float+0x1c0>
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	07d1      	lsls	r1, r2, #31
 8004db6:	d5e8      	bpl.n	8004d8a <_printf_float+0x18e>
 8004db8:	3301      	adds	r3, #1
 8004dba:	e7e5      	b.n	8004d88 <_printf_float+0x18c>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfcc      	ite	gt
 8004dc0:	2301      	movgt	r3, #1
 8004dc2:	f1c3 0302 	rsble	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	e7de      	b.n	8004d88 <_printf_float+0x18c>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	055a      	lsls	r2, r3, #21
 8004dce:	d407      	bmi.n	8004de0 <_printf_float+0x1e4>
 8004dd0:	6923      	ldr	r3, [r4, #16]
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b0      	blx	r6
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d129      	bne.n	8004e32 <_printf_float+0x236>
 8004dde:	e764      	b.n	8004caa <_printf_float+0xae>
 8004de0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004de4:	f240 80d7 	bls.w	8004f96 <_printf_float+0x39a>
 8004de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dec:	2200      	movs	r2, #0
 8004dee:	2300      	movs	r3, #0
 8004df0:	f7fb fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8004df4:	b388      	cbz	r0, 8004e5a <_printf_float+0x25e>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4a40      	ldr	r2, [pc, #256]	; (8004efc <_printf_float+0x300>)
 8004dfa:	4659      	mov	r1, fp
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b0      	blx	r6
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f af52 	beq.w	8004caa <_printf_float+0xae>
 8004e06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	db02      	blt.n	8004e14 <_printf_float+0x218>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	07d8      	lsls	r0, r3, #31
 8004e12:	d50e      	bpl.n	8004e32 <_printf_float+0x236>
 8004e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e18:	4659      	mov	r1, fp
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b0      	blx	r6
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f af43 	beq.w	8004caa <_printf_float+0xae>
 8004e24:	2700      	movs	r7, #0
 8004e26:	f104 081a 	add.w	r8, r4, #26
 8004e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	42bb      	cmp	r3, r7
 8004e30:	dc09      	bgt.n	8004e46 <_printf_float+0x24a>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	079f      	lsls	r7, r3, #30
 8004e36:	f100 80fd 	bmi.w	8005034 <_printf_float+0x438>
 8004e3a:	68e0      	ldr	r0, [r4, #12]
 8004e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e3e:	4298      	cmp	r0, r3
 8004e40:	bfb8      	it	lt
 8004e42:	4618      	movlt	r0, r3
 8004e44:	e733      	b.n	8004cae <_printf_float+0xb2>
 8004e46:	2301      	movs	r3, #1
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b0      	blx	r6
 8004e50:	3001      	adds	r0, #1
 8004e52:	f43f af2a 	beq.w	8004caa <_printf_float+0xae>
 8004e56:	3701      	adds	r7, #1
 8004e58:	e7e7      	b.n	8004e2a <_printf_float+0x22e>
 8004e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	dc2b      	bgt.n	8004eb8 <_printf_float+0x2bc>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4a26      	ldr	r2, [pc, #152]	; (8004efc <_printf_float+0x300>)
 8004e64:	4659      	mov	r1, fp
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b0      	blx	r6
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f af1d 	beq.w	8004caa <_printf_float+0xae>
 8004e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e72:	b923      	cbnz	r3, 8004e7e <_printf_float+0x282>
 8004e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e76:	b913      	cbnz	r3, 8004e7e <_printf_float+0x282>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	07d9      	lsls	r1, r3, #31
 8004e7c:	d5d9      	bpl.n	8004e32 <_printf_float+0x236>
 8004e7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e82:	4659      	mov	r1, fp
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b0      	blx	r6
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f af0e 	beq.w	8004caa <_printf_float+0xae>
 8004e8e:	f04f 0800 	mov.w	r8, #0
 8004e92:	f104 091a 	add.w	r9, r4, #26
 8004e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e98:	425b      	negs	r3, r3
 8004e9a:	4543      	cmp	r3, r8
 8004e9c:	dc01      	bgt.n	8004ea2 <_printf_float+0x2a6>
 8004e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea0:	e797      	b.n	8004dd2 <_printf_float+0x1d6>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	464a      	mov	r2, r9
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b0      	blx	r6
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f aefc 	beq.w	8004caa <_printf_float+0xae>
 8004eb2:	f108 0801 	add.w	r8, r8, #1
 8004eb6:	e7ee      	b.n	8004e96 <_printf_float+0x29a>
 8004eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	bfa8      	it	ge
 8004ec0:	461a      	movge	r2, r3
 8004ec2:	2a00      	cmp	r2, #0
 8004ec4:	4690      	mov	r8, r2
 8004ec6:	dd07      	ble.n	8004ed8 <_printf_float+0x2dc>
 8004ec8:	4613      	mov	r3, r2
 8004eca:	4659      	mov	r1, fp
 8004ecc:	463a      	mov	r2, r7
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b0      	blx	r6
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f aee9 	beq.w	8004caa <_printf_float+0xae>
 8004ed8:	f104 031a 	add.w	r3, r4, #26
 8004edc:	f04f 0a00 	mov.w	sl, #0
 8004ee0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee6:	e015      	b.n	8004f14 <_printf_float+0x318>
 8004ee8:	7fefffff 	.word	0x7fefffff
 8004eec:	08008f24 	.word	0x08008f24
 8004ef0:	08008f20 	.word	0x08008f20
 8004ef4:	08008f2c 	.word	0x08008f2c
 8004ef8:	08008f28 	.word	0x08008f28
 8004efc:	08008f30 	.word	0x08008f30
 8004f00:	2301      	movs	r3, #1
 8004f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f04:	4659      	mov	r1, fp
 8004f06:	4628      	mov	r0, r5
 8004f08:	47b0      	blx	r6
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	f43f aecd 	beq.w	8004caa <_printf_float+0xae>
 8004f10:	f10a 0a01 	add.w	sl, sl, #1
 8004f14:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004f18:	eba9 0308 	sub.w	r3, r9, r8
 8004f1c:	4553      	cmp	r3, sl
 8004f1e:	dcef      	bgt.n	8004f00 <_printf_float+0x304>
 8004f20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f24:	429a      	cmp	r2, r3
 8004f26:	444f      	add	r7, r9
 8004f28:	db14      	blt.n	8004f54 <_printf_float+0x358>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	07da      	lsls	r2, r3, #31
 8004f2e:	d411      	bmi.n	8004f54 <_printf_float+0x358>
 8004f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f34:	eba3 0209 	sub.w	r2, r3, r9
 8004f38:	eba3 0901 	sub.w	r9, r3, r1
 8004f3c:	4591      	cmp	r9, r2
 8004f3e:	bfa8      	it	ge
 8004f40:	4691      	movge	r9, r2
 8004f42:	f1b9 0f00 	cmp.w	r9, #0
 8004f46:	dc0d      	bgt.n	8004f64 <_printf_float+0x368>
 8004f48:	2700      	movs	r7, #0
 8004f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f4e:	f104 081a 	add.w	r8, r4, #26
 8004f52:	e018      	b.n	8004f86 <_printf_float+0x38a>
 8004f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f58:	4659      	mov	r1, fp
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b0      	blx	r6
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d1e6      	bne.n	8004f30 <_printf_float+0x334>
 8004f62:	e6a2      	b.n	8004caa <_printf_float+0xae>
 8004f64:	464b      	mov	r3, r9
 8004f66:	463a      	mov	r2, r7
 8004f68:	4659      	mov	r1, fp
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b0      	blx	r6
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d1ea      	bne.n	8004f48 <_printf_float+0x34c>
 8004f72:	e69a      	b.n	8004caa <_printf_float+0xae>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4642      	mov	r2, r8
 8004f78:	4659      	mov	r1, fp
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b0      	blx	r6
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f ae93 	beq.w	8004caa <_printf_float+0xae>
 8004f84:	3701      	adds	r7, #1
 8004f86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	eba3 0309 	sub.w	r3, r3, r9
 8004f90:	42bb      	cmp	r3, r7
 8004f92:	dcef      	bgt.n	8004f74 <_printf_float+0x378>
 8004f94:	e74d      	b.n	8004e32 <_printf_float+0x236>
 8004f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f98:	2a01      	cmp	r2, #1
 8004f9a:	dc01      	bgt.n	8004fa0 <_printf_float+0x3a4>
 8004f9c:	07db      	lsls	r3, r3, #31
 8004f9e:	d538      	bpl.n	8005012 <_printf_float+0x416>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	463a      	mov	r2, r7
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	47b0      	blx	r6
 8004faa:	3001      	adds	r0, #1
 8004fac:	f43f ae7d 	beq.w	8004caa <_printf_float+0xae>
 8004fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b0      	blx	r6
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f107 0701 	add.w	r7, r7, #1
 8004fc0:	f43f ae73 	beq.w	8004caa <_printf_float+0xae>
 8004fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f103 38ff 	add.w	r8, r3, #4294967295
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f7fb fce9 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd6:	b9c0      	cbnz	r0, 800500a <_printf_float+0x40e>
 8004fd8:	4643      	mov	r3, r8
 8004fda:	463a      	mov	r2, r7
 8004fdc:	4659      	mov	r1, fp
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b0      	blx	r6
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d10d      	bne.n	8005002 <_printf_float+0x406>
 8004fe6:	e660      	b.n	8004caa <_printf_float+0xae>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	4642      	mov	r2, r8
 8004fec:	4659      	mov	r1, fp
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b0      	blx	r6
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f ae59 	beq.w	8004caa <_printf_float+0xae>
 8004ff8:	3701      	adds	r7, #1
 8004ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	42bb      	cmp	r3, r7
 8005000:	dcf2      	bgt.n	8004fe8 <_printf_float+0x3ec>
 8005002:	464b      	mov	r3, r9
 8005004:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005008:	e6e4      	b.n	8004dd4 <_printf_float+0x1d8>
 800500a:	2700      	movs	r7, #0
 800500c:	f104 081a 	add.w	r8, r4, #26
 8005010:	e7f3      	b.n	8004ffa <_printf_float+0x3fe>
 8005012:	2301      	movs	r3, #1
 8005014:	e7e1      	b.n	8004fda <_printf_float+0x3de>
 8005016:	2301      	movs	r3, #1
 8005018:	4642      	mov	r2, r8
 800501a:	4659      	mov	r1, fp
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	3001      	adds	r0, #1
 8005022:	f43f ae42 	beq.w	8004caa <_printf_float+0xae>
 8005026:	3701      	adds	r7, #1
 8005028:	68e3      	ldr	r3, [r4, #12]
 800502a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	42bb      	cmp	r3, r7
 8005030:	dcf1      	bgt.n	8005016 <_printf_float+0x41a>
 8005032:	e702      	b.n	8004e3a <_printf_float+0x23e>
 8005034:	2700      	movs	r7, #0
 8005036:	f104 0819 	add.w	r8, r4, #25
 800503a:	e7f5      	b.n	8005028 <_printf_float+0x42c>
 800503c:	2b00      	cmp	r3, #0
 800503e:	f43f ae94 	beq.w	8004d6a <_printf_float+0x16e>
 8005042:	f04f 0c00 	mov.w	ip, #0
 8005046:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800504a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005054:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	463a      	mov	r2, r7
 800505c:	464b      	mov	r3, r9
 800505e:	4628      	mov	r0, r5
 8005060:	f7ff fd3a 	bl	8004ad8 <__cvt>
 8005064:	4607      	mov	r7, r0
 8005066:	e64f      	b.n	8004d08 <_printf_float+0x10c>

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4691      	mov	r9, r2
 800506e:	461f      	mov	r7, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	4606      	mov	r6, r0
 8005076:	4293      	cmp	r3, r2
 8005078:	bfb8      	it	lt
 800507a:	4613      	movlt	r3, r2
 800507c:	f8c9 3000 	str.w	r3, [r9]
 8005080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005084:	460c      	mov	r4, r1
 8005086:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800508a:	b112      	cbz	r2, 8005092 <_printf_common+0x2a>
 800508c:	3301      	adds	r3, #1
 800508e:	f8c9 3000 	str.w	r3, [r9]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	0699      	lsls	r1, r3, #26
 8005096:	bf42      	ittt	mi
 8005098:	f8d9 3000 	ldrmi.w	r3, [r9]
 800509c:	3302      	addmi	r3, #2
 800509e:	f8c9 3000 	strmi.w	r3, [r9]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d107      	bne.n	80050ba <_printf_common+0x52>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	f8d9 2000 	ldr.w	r2, [r9]
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	42ab      	cmp	r3, r5
 80050b8:	dc29      	bgt.n	800510e <_printf_common+0xa6>
 80050ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	3300      	adds	r3, #0
 80050c2:	bf18      	it	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	0692      	lsls	r2, r2, #26
 80050c8:	d42e      	bmi.n	8005128 <_printf_common+0xc0>
 80050ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ce:	4639      	mov	r1, r7
 80050d0:	4630      	mov	r0, r6
 80050d2:	47c0      	blx	r8
 80050d4:	3001      	adds	r0, #1
 80050d6:	d021      	beq.n	800511c <_printf_common+0xb4>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	68e5      	ldr	r5, [r4, #12]
 80050dc:	f003 0306 	and.w	r3, r3, #6
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	bf18      	it	ne
 80050e4:	2500      	movne	r5, #0
 80050e6:	f8d9 2000 	ldr.w	r2, [r9]
 80050ea:	f04f 0900 	mov.w	r9, #0
 80050ee:	bf08      	it	eq
 80050f0:	1aad      	subeq	r5, r5, r2
 80050f2:	68a3      	ldr	r3, [r4, #8]
 80050f4:	6922      	ldr	r2, [r4, #16]
 80050f6:	bf08      	it	eq
 80050f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bfc4      	itt	gt
 8005100:	1a9b      	subgt	r3, r3, r2
 8005102:	18ed      	addgt	r5, r5, r3
 8005104:	341a      	adds	r4, #26
 8005106:	454d      	cmp	r5, r9
 8005108:	d11a      	bne.n	8005140 <_printf_common+0xd8>
 800510a:	2000      	movs	r0, #0
 800510c:	e008      	b.n	8005120 <_printf_common+0xb8>
 800510e:	2301      	movs	r3, #1
 8005110:	4652      	mov	r2, sl
 8005112:	4639      	mov	r1, r7
 8005114:	4630      	mov	r0, r6
 8005116:	47c0      	blx	r8
 8005118:	3001      	adds	r0, #1
 800511a:	d103      	bne.n	8005124 <_printf_common+0xbc>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005124:	3501      	adds	r5, #1
 8005126:	e7c2      	b.n	80050ae <_printf_common+0x46>
 8005128:	2030      	movs	r0, #48	; 0x30
 800512a:	18e1      	adds	r1, r4, r3
 800512c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005136:	4422      	add	r2, r4
 8005138:	3302      	adds	r3, #2
 800513a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800513e:	e7c4      	b.n	80050ca <_printf_common+0x62>
 8005140:	2301      	movs	r3, #1
 8005142:	4622      	mov	r2, r4
 8005144:	4639      	mov	r1, r7
 8005146:	4630      	mov	r0, r6
 8005148:	47c0      	blx	r8
 800514a:	3001      	adds	r0, #1
 800514c:	d0e6      	beq.n	800511c <_printf_common+0xb4>
 800514e:	f109 0901 	add.w	r9, r9, #1
 8005152:	e7d8      	b.n	8005106 <_printf_common+0x9e>

08005154 <_printf_i>:
 8005154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005158:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800515c:	460c      	mov	r4, r1
 800515e:	7e09      	ldrb	r1, [r1, #24]
 8005160:	b085      	sub	sp, #20
 8005162:	296e      	cmp	r1, #110	; 0x6e
 8005164:	4617      	mov	r7, r2
 8005166:	4606      	mov	r6, r0
 8005168:	4698      	mov	r8, r3
 800516a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800516c:	f000 80b3 	beq.w	80052d6 <_printf_i+0x182>
 8005170:	d822      	bhi.n	80051b8 <_printf_i+0x64>
 8005172:	2963      	cmp	r1, #99	; 0x63
 8005174:	d036      	beq.n	80051e4 <_printf_i+0x90>
 8005176:	d80a      	bhi.n	800518e <_printf_i+0x3a>
 8005178:	2900      	cmp	r1, #0
 800517a:	f000 80b9 	beq.w	80052f0 <_printf_i+0x19c>
 800517e:	2958      	cmp	r1, #88	; 0x58
 8005180:	f000 8083 	beq.w	800528a <_printf_i+0x136>
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800518c:	e032      	b.n	80051f4 <_printf_i+0xa0>
 800518e:	2964      	cmp	r1, #100	; 0x64
 8005190:	d001      	beq.n	8005196 <_printf_i+0x42>
 8005192:	2969      	cmp	r1, #105	; 0x69
 8005194:	d1f6      	bne.n	8005184 <_printf_i+0x30>
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	0605      	lsls	r5, r0, #24
 800519c:	f103 0104 	add.w	r1, r3, #4
 80051a0:	d52a      	bpl.n	80051f8 <_printf_i+0xa4>
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da03      	bge.n	80051b2 <_printf_i+0x5e>
 80051aa:	222d      	movs	r2, #45	; 0x2d
 80051ac:	425b      	negs	r3, r3
 80051ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051b2:	486f      	ldr	r0, [pc, #444]	; (8005370 <_printf_i+0x21c>)
 80051b4:	220a      	movs	r2, #10
 80051b6:	e039      	b.n	800522c <_printf_i+0xd8>
 80051b8:	2973      	cmp	r1, #115	; 0x73
 80051ba:	f000 809d 	beq.w	80052f8 <_printf_i+0x1a4>
 80051be:	d808      	bhi.n	80051d2 <_printf_i+0x7e>
 80051c0:	296f      	cmp	r1, #111	; 0x6f
 80051c2:	d020      	beq.n	8005206 <_printf_i+0xb2>
 80051c4:	2970      	cmp	r1, #112	; 0x70
 80051c6:	d1dd      	bne.n	8005184 <_printf_i+0x30>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	f043 0320 	orr.w	r3, r3, #32
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	e003      	b.n	80051da <_printf_i+0x86>
 80051d2:	2975      	cmp	r1, #117	; 0x75
 80051d4:	d017      	beq.n	8005206 <_printf_i+0xb2>
 80051d6:	2978      	cmp	r1, #120	; 0x78
 80051d8:	d1d4      	bne.n	8005184 <_printf_i+0x30>
 80051da:	2378      	movs	r3, #120	; 0x78
 80051dc:	4865      	ldr	r0, [pc, #404]	; (8005374 <_printf_i+0x220>)
 80051de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051e2:	e055      	b.n	8005290 <_printf_i+0x13c>
 80051e4:	6813      	ldr	r3, [r2, #0]
 80051e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ea:	1d19      	adds	r1, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6011      	str	r1, [r2, #0]
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e08c      	b.n	8005312 <_printf_i+0x1be>
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051fe:	6011      	str	r1, [r2, #0]
 8005200:	bf18      	it	ne
 8005202:	b21b      	sxthne	r3, r3
 8005204:	e7cf      	b.n	80051a6 <_printf_i+0x52>
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	1d18      	adds	r0, r3, #4
 800520c:	6010      	str	r0, [r2, #0]
 800520e:	0628      	lsls	r0, r5, #24
 8005210:	d501      	bpl.n	8005216 <_printf_i+0xc2>
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	e002      	b.n	800521c <_printf_i+0xc8>
 8005216:	0668      	lsls	r0, r5, #25
 8005218:	d5fb      	bpl.n	8005212 <_printf_i+0xbe>
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	296f      	cmp	r1, #111	; 0x6f
 800521e:	bf14      	ite	ne
 8005220:	220a      	movne	r2, #10
 8005222:	2208      	moveq	r2, #8
 8005224:	4852      	ldr	r0, [pc, #328]	; (8005370 <_printf_i+0x21c>)
 8005226:	2100      	movs	r1, #0
 8005228:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800522c:	6865      	ldr	r5, [r4, #4]
 800522e:	2d00      	cmp	r5, #0
 8005230:	60a5      	str	r5, [r4, #8]
 8005232:	f2c0 8095 	blt.w	8005360 <_printf_i+0x20c>
 8005236:	6821      	ldr	r1, [r4, #0]
 8005238:	f021 0104 	bic.w	r1, r1, #4
 800523c:	6021      	str	r1, [r4, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d13d      	bne.n	80052be <_printf_i+0x16a>
 8005242:	2d00      	cmp	r5, #0
 8005244:	f040 808e 	bne.w	8005364 <_printf_i+0x210>
 8005248:	4665      	mov	r5, ip
 800524a:	2a08      	cmp	r2, #8
 800524c:	d10b      	bne.n	8005266 <_printf_i+0x112>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	07db      	lsls	r3, r3, #31
 8005252:	d508      	bpl.n	8005266 <_printf_i+0x112>
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	bfde      	ittt	le
 800525c:	2330      	movle	r3, #48	; 0x30
 800525e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005262:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005266:	ebac 0305 	sub.w	r3, ip, r5
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	f8cd 8000 	str.w	r8, [sp]
 8005270:	463b      	mov	r3, r7
 8005272:	aa03      	add	r2, sp, #12
 8005274:	4621      	mov	r1, r4
 8005276:	4630      	mov	r0, r6
 8005278:	f7ff fef6 	bl	8005068 <_printf_common>
 800527c:	3001      	adds	r0, #1
 800527e:	d14d      	bne.n	800531c <_printf_i+0x1c8>
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	b005      	add	sp, #20
 8005286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800528a:	4839      	ldr	r0, [pc, #228]	; (8005370 <_printf_i+0x21c>)
 800528c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005290:	6813      	ldr	r3, [r2, #0]
 8005292:	6821      	ldr	r1, [r4, #0]
 8005294:	1d1d      	adds	r5, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6015      	str	r5, [r2, #0]
 800529a:	060a      	lsls	r2, r1, #24
 800529c:	d50b      	bpl.n	80052b6 <_printf_i+0x162>
 800529e:	07ca      	lsls	r2, r1, #31
 80052a0:	bf44      	itt	mi
 80052a2:	f041 0120 	orrmi.w	r1, r1, #32
 80052a6:	6021      	strmi	r1, [r4, #0]
 80052a8:	b91b      	cbnz	r3, 80052b2 <_printf_i+0x15e>
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	f022 0220 	bic.w	r2, r2, #32
 80052b0:	6022      	str	r2, [r4, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	e7b7      	b.n	8005226 <_printf_i+0xd2>
 80052b6:	064d      	lsls	r5, r1, #25
 80052b8:	bf48      	it	mi
 80052ba:	b29b      	uxthmi	r3, r3
 80052bc:	e7ef      	b.n	800529e <_printf_i+0x14a>
 80052be:	4665      	mov	r5, ip
 80052c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80052c4:	fb02 3311 	mls	r3, r2, r1, r3
 80052c8:	5cc3      	ldrb	r3, [r0, r3]
 80052ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052ce:	460b      	mov	r3, r1
 80052d0:	2900      	cmp	r1, #0
 80052d2:	d1f5      	bne.n	80052c0 <_printf_i+0x16c>
 80052d4:	e7b9      	b.n	800524a <_printf_i+0xf6>
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	1d18      	adds	r0, r3, #4
 80052dc:	6961      	ldr	r1, [r4, #20]
 80052de:	6010      	str	r0, [r2, #0]
 80052e0:	0628      	lsls	r0, r5, #24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	d501      	bpl.n	80052ea <_printf_i+0x196>
 80052e6:	6019      	str	r1, [r3, #0]
 80052e8:	e002      	b.n	80052f0 <_printf_i+0x19c>
 80052ea:	066a      	lsls	r2, r5, #25
 80052ec:	d5fb      	bpl.n	80052e6 <_printf_i+0x192>
 80052ee:	8019      	strh	r1, [r3, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	4665      	mov	r5, ip
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	e7b9      	b.n	800526c <_printf_i+0x118>
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	1d19      	adds	r1, r3, #4
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	681d      	ldr	r5, [r3, #0]
 8005300:	6862      	ldr	r2, [r4, #4]
 8005302:	2100      	movs	r1, #0
 8005304:	4628      	mov	r0, r5
 8005306:	f002 fb77 	bl	80079f8 <memchr>
 800530a:	b108      	cbz	r0, 8005310 <_printf_i+0x1bc>
 800530c:	1b40      	subs	r0, r0, r5
 800530e:	6060      	str	r0, [r4, #4]
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	2300      	movs	r3, #0
 8005316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531a:	e7a7      	b.n	800526c <_printf_i+0x118>
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	462a      	mov	r2, r5
 8005320:	4639      	mov	r1, r7
 8005322:	4630      	mov	r0, r6
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d0aa      	beq.n	8005280 <_printf_i+0x12c>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	079b      	lsls	r3, r3, #30
 800532e:	d413      	bmi.n	8005358 <_printf_i+0x204>
 8005330:	68e0      	ldr	r0, [r4, #12]
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	4298      	cmp	r0, r3
 8005336:	bfb8      	it	lt
 8005338:	4618      	movlt	r0, r3
 800533a:	e7a3      	b.n	8005284 <_printf_i+0x130>
 800533c:	2301      	movs	r3, #1
 800533e:	464a      	mov	r2, r9
 8005340:	4639      	mov	r1, r7
 8005342:	4630      	mov	r0, r6
 8005344:	47c0      	blx	r8
 8005346:	3001      	adds	r0, #1
 8005348:	d09a      	beq.n	8005280 <_printf_i+0x12c>
 800534a:	3501      	adds	r5, #1
 800534c:	68e3      	ldr	r3, [r4, #12]
 800534e:	9a03      	ldr	r2, [sp, #12]
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	42ab      	cmp	r3, r5
 8005354:	dcf2      	bgt.n	800533c <_printf_i+0x1e8>
 8005356:	e7eb      	b.n	8005330 <_printf_i+0x1dc>
 8005358:	2500      	movs	r5, #0
 800535a:	f104 0919 	add.w	r9, r4, #25
 800535e:	e7f5      	b.n	800534c <_printf_i+0x1f8>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ac      	bne.n	80052be <_printf_i+0x16a>
 8005364:	7803      	ldrb	r3, [r0, #0]
 8005366:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800536a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536e:	e76c      	b.n	800524a <_printf_i+0xf6>
 8005370:	08008f32 	.word	0x08008f32
 8005374:	08008f43 	.word	0x08008f43

08005378 <_scanf_float>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	469a      	mov	sl, r3
 800537e:	688b      	ldr	r3, [r1, #8]
 8005380:	4616      	mov	r6, r2
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005388:	bf88      	it	hi
 800538a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800538e:	b087      	sub	sp, #28
 8005390:	bf85      	ittet	hi
 8005392:	189b      	addhi	r3, r3, r2
 8005394:	9301      	strhi	r3, [sp, #4]
 8005396:	2300      	movls	r3, #0
 8005398:	f240 135d 	movwhi	r3, #349	; 0x15d
 800539c:	4688      	mov	r8, r1
 800539e:	f04f 0b00 	mov.w	fp, #0
 80053a2:	bf8c      	ite	hi
 80053a4:	608b      	strhi	r3, [r1, #8]
 80053a6:	9301      	strls	r3, [sp, #4]
 80053a8:	680b      	ldr	r3, [r1, #0]
 80053aa:	4607      	mov	r7, r0
 80053ac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053b0:	f848 3b1c 	str.w	r3, [r8], #28
 80053b4:	460c      	mov	r4, r1
 80053b6:	4645      	mov	r5, r8
 80053b8:	465a      	mov	r2, fp
 80053ba:	46d9      	mov	r9, fp
 80053bc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80053c0:	f8cd b008 	str.w	fp, [sp, #8]
 80053c4:	68a1      	ldr	r1, [r4, #8]
 80053c6:	b181      	cbz	r1, 80053ea <_scanf_float+0x72>
 80053c8:	6833      	ldr	r3, [r6, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b49      	cmp	r3, #73	; 0x49
 80053ce:	d071      	beq.n	80054b4 <_scanf_float+0x13c>
 80053d0:	d84d      	bhi.n	800546e <_scanf_float+0xf6>
 80053d2:	2b39      	cmp	r3, #57	; 0x39
 80053d4:	d840      	bhi.n	8005458 <_scanf_float+0xe0>
 80053d6:	2b31      	cmp	r3, #49	; 0x31
 80053d8:	f080 8088 	bcs.w	80054ec <_scanf_float+0x174>
 80053dc:	2b2d      	cmp	r3, #45	; 0x2d
 80053de:	f000 8090 	beq.w	8005502 <_scanf_float+0x18a>
 80053e2:	d815      	bhi.n	8005410 <_scanf_float+0x98>
 80053e4:	2b2b      	cmp	r3, #43	; 0x2b
 80053e6:	f000 808c 	beq.w	8005502 <_scanf_float+0x18a>
 80053ea:	f1b9 0f00 	cmp.w	r9, #0
 80053ee:	d003      	beq.n	80053f8 <_scanf_float+0x80>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	3a01      	subs	r2, #1
 80053fa:	2a01      	cmp	r2, #1
 80053fc:	f200 80ea 	bhi.w	80055d4 <_scanf_float+0x25c>
 8005400:	4545      	cmp	r5, r8
 8005402:	f200 80dc 	bhi.w	80055be <_scanf_float+0x246>
 8005406:	2601      	movs	r6, #1
 8005408:	4630      	mov	r0, r6
 800540a:	b007      	add	sp, #28
 800540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005410:	2b2e      	cmp	r3, #46	; 0x2e
 8005412:	f000 809f 	beq.w	8005554 <_scanf_float+0x1dc>
 8005416:	2b30      	cmp	r3, #48	; 0x30
 8005418:	d1e7      	bne.n	80053ea <_scanf_float+0x72>
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005420:	d064      	beq.n	80054ec <_scanf_float+0x174>
 8005422:	9b01      	ldr	r3, [sp, #4]
 8005424:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005428:	6020      	str	r0, [r4, #0]
 800542a:	f109 0901 	add.w	r9, r9, #1
 800542e:	b11b      	cbz	r3, 8005438 <_scanf_float+0xc0>
 8005430:	3b01      	subs	r3, #1
 8005432:	3101      	adds	r1, #1
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	60a1      	str	r1, [r4, #8]
 8005438:	68a3      	ldr	r3, [r4, #8]
 800543a:	3b01      	subs	r3, #1
 800543c:	60a3      	str	r3, [r4, #8]
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	3301      	adds	r3, #1
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	6873      	ldr	r3, [r6, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	6073      	str	r3, [r6, #4]
 800544c:	f340 80ac 	ble.w	80055a8 <_scanf_float+0x230>
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	e7b5      	b.n	80053c4 <_scanf_float+0x4c>
 8005458:	2b45      	cmp	r3, #69	; 0x45
 800545a:	f000 8085 	beq.w	8005568 <_scanf_float+0x1f0>
 800545e:	2b46      	cmp	r3, #70	; 0x46
 8005460:	d06a      	beq.n	8005538 <_scanf_float+0x1c0>
 8005462:	2b41      	cmp	r3, #65	; 0x41
 8005464:	d1c1      	bne.n	80053ea <_scanf_float+0x72>
 8005466:	2a01      	cmp	r2, #1
 8005468:	d1bf      	bne.n	80053ea <_scanf_float+0x72>
 800546a:	2202      	movs	r2, #2
 800546c:	e046      	b.n	80054fc <_scanf_float+0x184>
 800546e:	2b65      	cmp	r3, #101	; 0x65
 8005470:	d07a      	beq.n	8005568 <_scanf_float+0x1f0>
 8005472:	d818      	bhi.n	80054a6 <_scanf_float+0x12e>
 8005474:	2b54      	cmp	r3, #84	; 0x54
 8005476:	d066      	beq.n	8005546 <_scanf_float+0x1ce>
 8005478:	d811      	bhi.n	800549e <_scanf_float+0x126>
 800547a:	2b4e      	cmp	r3, #78	; 0x4e
 800547c:	d1b5      	bne.n	80053ea <_scanf_float+0x72>
 800547e:	2a00      	cmp	r2, #0
 8005480:	d146      	bne.n	8005510 <_scanf_float+0x198>
 8005482:	f1b9 0f00 	cmp.w	r9, #0
 8005486:	d145      	bne.n	8005514 <_scanf_float+0x19c>
 8005488:	6821      	ldr	r1, [r4, #0]
 800548a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800548e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005492:	d13f      	bne.n	8005514 <_scanf_float+0x19c>
 8005494:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005498:	6021      	str	r1, [r4, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	e02e      	b.n	80054fc <_scanf_float+0x184>
 800549e:	2b59      	cmp	r3, #89	; 0x59
 80054a0:	d01e      	beq.n	80054e0 <_scanf_float+0x168>
 80054a2:	2b61      	cmp	r3, #97	; 0x61
 80054a4:	e7de      	b.n	8005464 <_scanf_float+0xec>
 80054a6:	2b6e      	cmp	r3, #110	; 0x6e
 80054a8:	d0e9      	beq.n	800547e <_scanf_float+0x106>
 80054aa:	d815      	bhi.n	80054d8 <_scanf_float+0x160>
 80054ac:	2b66      	cmp	r3, #102	; 0x66
 80054ae:	d043      	beq.n	8005538 <_scanf_float+0x1c0>
 80054b0:	2b69      	cmp	r3, #105	; 0x69
 80054b2:	d19a      	bne.n	80053ea <_scanf_float+0x72>
 80054b4:	f1bb 0f00 	cmp.w	fp, #0
 80054b8:	d138      	bne.n	800552c <_scanf_float+0x1b4>
 80054ba:	f1b9 0f00 	cmp.w	r9, #0
 80054be:	d197      	bne.n	80053f0 <_scanf_float+0x78>
 80054c0:	6821      	ldr	r1, [r4, #0]
 80054c2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80054c6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80054ca:	d195      	bne.n	80053f8 <_scanf_float+0x80>
 80054cc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80054d0:	6021      	str	r1, [r4, #0]
 80054d2:	f04f 0b01 	mov.w	fp, #1
 80054d6:	e011      	b.n	80054fc <_scanf_float+0x184>
 80054d8:	2b74      	cmp	r3, #116	; 0x74
 80054da:	d034      	beq.n	8005546 <_scanf_float+0x1ce>
 80054dc:	2b79      	cmp	r3, #121	; 0x79
 80054de:	d184      	bne.n	80053ea <_scanf_float+0x72>
 80054e0:	f1bb 0f07 	cmp.w	fp, #7
 80054e4:	d181      	bne.n	80053ea <_scanf_float+0x72>
 80054e6:	f04f 0b08 	mov.w	fp, #8
 80054ea:	e007      	b.n	80054fc <_scanf_float+0x184>
 80054ec:	eb12 0f0b 	cmn.w	r2, fp
 80054f0:	f47f af7b 	bne.w	80053ea <_scanf_float+0x72>
 80054f4:	6821      	ldr	r1, [r4, #0]
 80054f6:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80054fa:	6021      	str	r1, [r4, #0]
 80054fc:	702b      	strb	r3, [r5, #0]
 80054fe:	3501      	adds	r5, #1
 8005500:	e79a      	b.n	8005438 <_scanf_float+0xc0>
 8005502:	6821      	ldr	r1, [r4, #0]
 8005504:	0608      	lsls	r0, r1, #24
 8005506:	f57f af70 	bpl.w	80053ea <_scanf_float+0x72>
 800550a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800550e:	e7f4      	b.n	80054fa <_scanf_float+0x182>
 8005510:	2a02      	cmp	r2, #2
 8005512:	d047      	beq.n	80055a4 <_scanf_float+0x22c>
 8005514:	f1bb 0f01 	cmp.w	fp, #1
 8005518:	d003      	beq.n	8005522 <_scanf_float+0x1aa>
 800551a:	f1bb 0f04 	cmp.w	fp, #4
 800551e:	f47f af64 	bne.w	80053ea <_scanf_float+0x72>
 8005522:	f10b 0b01 	add.w	fp, fp, #1
 8005526:	fa5f fb8b 	uxtb.w	fp, fp
 800552a:	e7e7      	b.n	80054fc <_scanf_float+0x184>
 800552c:	f1bb 0f03 	cmp.w	fp, #3
 8005530:	d0f7      	beq.n	8005522 <_scanf_float+0x1aa>
 8005532:	f1bb 0f05 	cmp.w	fp, #5
 8005536:	e7f2      	b.n	800551e <_scanf_float+0x1a6>
 8005538:	f1bb 0f02 	cmp.w	fp, #2
 800553c:	f47f af55 	bne.w	80053ea <_scanf_float+0x72>
 8005540:	f04f 0b03 	mov.w	fp, #3
 8005544:	e7da      	b.n	80054fc <_scanf_float+0x184>
 8005546:	f1bb 0f06 	cmp.w	fp, #6
 800554a:	f47f af4e 	bne.w	80053ea <_scanf_float+0x72>
 800554e:	f04f 0b07 	mov.w	fp, #7
 8005552:	e7d3      	b.n	80054fc <_scanf_float+0x184>
 8005554:	6821      	ldr	r1, [r4, #0]
 8005556:	0588      	lsls	r0, r1, #22
 8005558:	f57f af47 	bpl.w	80053ea <_scanf_float+0x72>
 800555c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005560:	6021      	str	r1, [r4, #0]
 8005562:	f8cd 9008 	str.w	r9, [sp, #8]
 8005566:	e7c9      	b.n	80054fc <_scanf_float+0x184>
 8005568:	6821      	ldr	r1, [r4, #0]
 800556a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800556e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005572:	d006      	beq.n	8005582 <_scanf_float+0x20a>
 8005574:	0548      	lsls	r0, r1, #21
 8005576:	f57f af38 	bpl.w	80053ea <_scanf_float+0x72>
 800557a:	f1b9 0f00 	cmp.w	r9, #0
 800557e:	f43f af3b 	beq.w	80053f8 <_scanf_float+0x80>
 8005582:	0588      	lsls	r0, r1, #22
 8005584:	bf58      	it	pl
 8005586:	9802      	ldrpl	r0, [sp, #8]
 8005588:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800558c:	bf58      	it	pl
 800558e:	eba9 0000 	subpl.w	r0, r9, r0
 8005592:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005596:	bf58      	it	pl
 8005598:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800559c:	6021      	str	r1, [r4, #0]
 800559e:	f04f 0900 	mov.w	r9, #0
 80055a2:	e7ab      	b.n	80054fc <_scanf_float+0x184>
 80055a4:	2203      	movs	r2, #3
 80055a6:	e7a9      	b.n	80054fc <_scanf_float+0x184>
 80055a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80055ac:	4631      	mov	r1, r6
 80055ae:	4638      	mov	r0, r7
 80055b0:	9205      	str	r2, [sp, #20]
 80055b2:	4798      	blx	r3
 80055b4:	9a05      	ldr	r2, [sp, #20]
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f43f af04 	beq.w	80053c4 <_scanf_float+0x4c>
 80055bc:	e715      	b.n	80053ea <_scanf_float+0x72>
 80055be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055c2:	4632      	mov	r2, r6
 80055c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80055c8:	4638      	mov	r0, r7
 80055ca:	4798      	blx	r3
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	e715      	b.n	8005400 <_scanf_float+0x88>
 80055d4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80055d8:	2b06      	cmp	r3, #6
 80055da:	d80a      	bhi.n	80055f2 <_scanf_float+0x27a>
 80055dc:	f1bb 0f02 	cmp.w	fp, #2
 80055e0:	d967      	bls.n	80056b2 <_scanf_float+0x33a>
 80055e2:	f1ab 0b03 	sub.w	fp, fp, #3
 80055e6:	fa5f fb8b 	uxtb.w	fp, fp
 80055ea:	eba5 0b0b 	sub.w	fp, r5, fp
 80055ee:	455d      	cmp	r5, fp
 80055f0:	d14a      	bne.n	8005688 <_scanf_float+0x310>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	05da      	lsls	r2, r3, #23
 80055f6:	d51f      	bpl.n	8005638 <_scanf_float+0x2c0>
 80055f8:	055b      	lsls	r3, r3, #21
 80055fa:	d467      	bmi.n	80056cc <_scanf_float+0x354>
 80055fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	2965      	cmp	r1, #101	; 0x65
 8005604:	f103 33ff 	add.w	r3, r3, #4294967295
 8005608:	f105 3bff 	add.w	fp, r5, #4294967295
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	d00d      	beq.n	800562c <_scanf_float+0x2b4>
 8005610:	2945      	cmp	r1, #69	; 0x45
 8005612:	d00b      	beq.n	800562c <_scanf_float+0x2b4>
 8005614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005618:	4632      	mov	r2, r6
 800561a:	4638      	mov	r0, r7
 800561c:	4798      	blx	r3
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005624:	3b01      	subs	r3, #1
 8005626:	f1a5 0b02 	sub.w	fp, r5, #2
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005630:	4632      	mov	r2, r6
 8005632:	4638      	mov	r0, r7
 8005634:	4798      	blx	r3
 8005636:	465d      	mov	r5, fp
 8005638:	6826      	ldr	r6, [r4, #0]
 800563a:	f016 0610 	ands.w	r6, r6, #16
 800563e:	d176      	bne.n	800572e <_scanf_float+0x3b6>
 8005640:	702e      	strb	r6, [r5, #0]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564c:	d141      	bne.n	80056d2 <_scanf_float+0x35a>
 800564e:	9b02      	ldr	r3, [sp, #8]
 8005650:	eba9 0303 	sub.w	r3, r9, r3
 8005654:	425a      	negs	r2, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d148      	bne.n	80056ec <_scanf_float+0x374>
 800565a:	4641      	mov	r1, r8
 800565c:	2200      	movs	r2, #0
 800565e:	4638      	mov	r0, r7
 8005660:	f000 feca 	bl	80063f8 <_strtod_r>
 8005664:	6825      	ldr	r5, [r4, #0]
 8005666:	4680      	mov	r8, r0
 8005668:	f015 0f02 	tst.w	r5, #2
 800566c:	4689      	mov	r9, r1
 800566e:	f8da 3000 	ldr.w	r3, [sl]
 8005672:	d046      	beq.n	8005702 <_scanf_float+0x38a>
 8005674:	1d1a      	adds	r2, r3, #4
 8005676:	f8ca 2000 	str.w	r2, [sl]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	e9c3 8900 	strd	r8, r9, [r3]
 8005680:	68e3      	ldr	r3, [r4, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60e3      	str	r3, [r4, #12]
 8005686:	e6bf      	b.n	8005408 <_scanf_float+0x90>
 8005688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800568c:	4632      	mov	r2, r6
 800568e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005692:	4638      	mov	r0, r7
 8005694:	4798      	blx	r3
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	3b01      	subs	r3, #1
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	e7a7      	b.n	80055ee <_scanf_float+0x276>
 800569e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056a2:	4632      	mov	r2, r6
 80056a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80056a8:	4638      	mov	r0, r7
 80056aa:	4798      	blx	r3
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	4545      	cmp	r5, r8
 80056b4:	d8f3      	bhi.n	800569e <_scanf_float+0x326>
 80056b6:	e6a6      	b.n	8005406 <_scanf_float+0x8e>
 80056b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056bc:	4632      	mov	r2, r6
 80056be:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80056c2:	4638      	mov	r0, r7
 80056c4:	4798      	blx	r3
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	4545      	cmp	r5, r8
 80056ce:	d8f3      	bhi.n	80056b8 <_scanf_float+0x340>
 80056d0:	e699      	b.n	8005406 <_scanf_float+0x8e>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0c0      	beq.n	800565a <_scanf_float+0x2e2>
 80056d8:	9904      	ldr	r1, [sp, #16]
 80056da:	230a      	movs	r3, #10
 80056dc:	4632      	mov	r2, r6
 80056de:	3101      	adds	r1, #1
 80056e0:	4638      	mov	r0, r7
 80056e2:	f000 ff15 	bl	8006510 <_strtol_r>
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	9d04      	ldr	r5, [sp, #16]
 80056ea:	1ac2      	subs	r2, r0, r3
 80056ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80056f0:	429d      	cmp	r5, r3
 80056f2:	bf28      	it	cs
 80056f4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80056f8:	490e      	ldr	r1, [pc, #56]	; (8005734 <_scanf_float+0x3bc>)
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f838 	bl	8005770 <siprintf>
 8005700:	e7ab      	b.n	800565a <_scanf_float+0x2e2>
 8005702:	1d1f      	adds	r7, r3, #4
 8005704:	f015 0504 	ands.w	r5, r5, #4
 8005708:	f8ca 7000 	str.w	r7, [sl]
 800570c:	d1b5      	bne.n	800567a <_scanf_float+0x302>
 800570e:	681f      	ldr	r7, [r3, #0]
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	f7fb f97a 	bl	8000a0c <__aeabi_dcmpun>
 8005718:	b120      	cbz	r0, 8005724 <_scanf_float+0x3ac>
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f824 	bl	8005768 <nanf>
 8005720:	6038      	str	r0, [r7, #0]
 8005722:	e7ad      	b.n	8005680 <_scanf_float+0x308>
 8005724:	4640      	mov	r0, r8
 8005726:	4649      	mov	r1, r9
 8005728:	f7fb f9ce 	bl	8000ac8 <__aeabi_d2f>
 800572c:	e7f8      	b.n	8005720 <_scanf_float+0x3a8>
 800572e:	2600      	movs	r6, #0
 8005730:	e66a      	b.n	8005408 <_scanf_float+0x90>
 8005732:	bf00      	nop
 8005734:	08008f54 	.word	0x08008f54

08005738 <iprintf>:
 8005738:	b40f      	push	{r0, r1, r2, r3}
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <iprintf+0x2c>)
 800573c:	b513      	push	{r0, r1, r4, lr}
 800573e:	681c      	ldr	r4, [r3, #0]
 8005740:	b124      	cbz	r4, 800574c <iprintf+0x14>
 8005742:	69a3      	ldr	r3, [r4, #24]
 8005744:	b913      	cbnz	r3, 800574c <iprintf+0x14>
 8005746:	4620      	mov	r0, r4
 8005748:	f001 fd76 	bl	8007238 <__sinit>
 800574c:	ab05      	add	r3, sp, #20
 800574e:	9a04      	ldr	r2, [sp, #16]
 8005750:	68a1      	ldr	r1, [r4, #8]
 8005752:	4620      	mov	r0, r4
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	f002 ff8f 	bl	8008678 <_vfiprintf_r>
 800575a:	b002      	add	sp, #8
 800575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005760:	b004      	add	sp, #16
 8005762:	4770      	bx	lr
 8005764:	2000000c 	.word	0x2000000c

08005768 <nanf>:
 8005768:	4800      	ldr	r0, [pc, #0]	; (800576c <nanf+0x4>)
 800576a:	4770      	bx	lr
 800576c:	7fc00000 	.word	0x7fc00000

08005770 <siprintf>:
 8005770:	b40e      	push	{r1, r2, r3}
 8005772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005776:	b500      	push	{lr}
 8005778:	b09c      	sub	sp, #112	; 0x70
 800577a:	ab1d      	add	r3, sp, #116	; 0x74
 800577c:	9002      	str	r0, [sp, #8]
 800577e:	9006      	str	r0, [sp, #24]
 8005780:	9107      	str	r1, [sp, #28]
 8005782:	9104      	str	r1, [sp, #16]
 8005784:	4808      	ldr	r0, [pc, #32]	; (80057a8 <siprintf+0x38>)
 8005786:	4909      	ldr	r1, [pc, #36]	; (80057ac <siprintf+0x3c>)
 8005788:	f853 2b04 	ldr.w	r2, [r3], #4
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	a902      	add	r1, sp, #8
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	f002 fe50 	bl	8008438 <_svfiprintf_r>
 8005798:	2200      	movs	r2, #0
 800579a:	9b02      	ldr	r3, [sp, #8]
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	b01c      	add	sp, #112	; 0x70
 80057a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a4:	b003      	add	sp, #12
 80057a6:	4770      	bx	lr
 80057a8:	2000000c 	.word	0x2000000c
 80057ac:	ffff0208 	.word	0xffff0208

080057b0 <sulp>:
 80057b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b4:	460f      	mov	r7, r1
 80057b6:	4690      	mov	r8, r2
 80057b8:	f002 fc02 	bl	8007fc0 <__ulp>
 80057bc:	4604      	mov	r4, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	f1b8 0f00 	cmp.w	r8, #0
 80057c4:	d011      	beq.n	80057ea <sulp+0x3a>
 80057c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80057ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dd0b      	ble.n	80057ea <sulp+0x3a>
 80057d2:	2400      	movs	r4, #0
 80057d4:	051b      	lsls	r3, r3, #20
 80057d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80057da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f7fa fe79 	bl	80004d8 <__aeabi_dmul>
 80057e6:	4604      	mov	r4, r0
 80057e8:	460d      	mov	r5, r1
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f2:	0000      	movs	r0, r0
 80057f4:	0000      	movs	r0, r0
	...

080057f8 <_strtod_l>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	461f      	mov	r7, r3
 80057fe:	2300      	movs	r3, #0
 8005800:	b0a1      	sub	sp, #132	; 0x84
 8005802:	4683      	mov	fp, r0
 8005804:	4638      	mov	r0, r7
 8005806:	460e      	mov	r6, r1
 8005808:	9217      	str	r2, [sp, #92]	; 0x5c
 800580a:	931c      	str	r3, [sp, #112]	; 0x70
 800580c:	f002 f8c9 	bl	80079a2 <__localeconv_l>
 8005810:	4680      	mov	r8, r0
 8005812:	6800      	ldr	r0, [r0, #0]
 8005814:	f7fa fc9c 	bl	8000150 <strlen>
 8005818:	f04f 0900 	mov.w	r9, #0
 800581c:	4604      	mov	r4, r0
 800581e:	f04f 0a00 	mov.w	sl, #0
 8005822:	961b      	str	r6, [sp, #108]	; 0x6c
 8005824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	2a0d      	cmp	r2, #13
 800582a:	d832      	bhi.n	8005892 <_strtod_l+0x9a>
 800582c:	2a09      	cmp	r2, #9
 800582e:	d236      	bcs.n	800589e <_strtod_l+0xa6>
 8005830:	2a00      	cmp	r2, #0
 8005832:	d03e      	beq.n	80058b2 <_strtod_l+0xba>
 8005834:	2300      	movs	r3, #0
 8005836:	930d      	str	r3, [sp, #52]	; 0x34
 8005838:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800583a:	782b      	ldrb	r3, [r5, #0]
 800583c:	2b30      	cmp	r3, #48	; 0x30
 800583e:	f040 80ac 	bne.w	800599a <_strtod_l+0x1a2>
 8005842:	786b      	ldrb	r3, [r5, #1]
 8005844:	2b58      	cmp	r3, #88	; 0x58
 8005846:	d001      	beq.n	800584c <_strtod_l+0x54>
 8005848:	2b78      	cmp	r3, #120	; 0x78
 800584a:	d167      	bne.n	800591c <_strtod_l+0x124>
 800584c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584e:	9702      	str	r7, [sp, #8]
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	ab1c      	add	r3, sp, #112	; 0x70
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	4a89      	ldr	r2, [pc, #548]	; (8005a7c <_strtod_l+0x284>)
 8005858:	ab1d      	add	r3, sp, #116	; 0x74
 800585a:	a91b      	add	r1, sp, #108	; 0x6c
 800585c:	4658      	mov	r0, fp
 800585e:	f001 fdc5 	bl	80073ec <__gethex>
 8005862:	f010 0407 	ands.w	r4, r0, #7
 8005866:	4606      	mov	r6, r0
 8005868:	d005      	beq.n	8005876 <_strtod_l+0x7e>
 800586a:	2c06      	cmp	r4, #6
 800586c:	d12b      	bne.n	80058c6 <_strtod_l+0xce>
 800586e:	2300      	movs	r3, #0
 8005870:	3501      	adds	r5, #1
 8005872:	951b      	str	r5, [sp, #108]	; 0x6c
 8005874:	930d      	str	r3, [sp, #52]	; 0x34
 8005876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 85a6 	bne.w	80063ca <_strtod_l+0xbd2>
 800587e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005880:	b1e3      	cbz	r3, 80058bc <_strtod_l+0xc4>
 8005882:	464a      	mov	r2, r9
 8005884:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	b021      	add	sp, #132	; 0x84
 800588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005892:	2a2b      	cmp	r2, #43	; 0x2b
 8005894:	d015      	beq.n	80058c2 <_strtod_l+0xca>
 8005896:	2a2d      	cmp	r2, #45	; 0x2d
 8005898:	d004      	beq.n	80058a4 <_strtod_l+0xac>
 800589a:	2a20      	cmp	r2, #32
 800589c:	d1ca      	bne.n	8005834 <_strtod_l+0x3c>
 800589e:	3301      	adds	r3, #1
 80058a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80058a2:	e7bf      	b.n	8005824 <_strtod_l+0x2c>
 80058a4:	2201      	movs	r2, #1
 80058a6:	920d      	str	r2, [sp, #52]	; 0x34
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1c2      	bne.n	8005838 <_strtod_l+0x40>
 80058b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 8585 	bne.w	80063c6 <_strtod_l+0xbce>
 80058bc:	464a      	mov	r2, r9
 80058be:	4653      	mov	r3, sl
 80058c0:	e7e2      	b.n	8005888 <_strtod_l+0x90>
 80058c2:	2200      	movs	r2, #0
 80058c4:	e7ef      	b.n	80058a6 <_strtod_l+0xae>
 80058c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058c8:	b13a      	cbz	r2, 80058da <_strtod_l+0xe2>
 80058ca:	2135      	movs	r1, #53	; 0x35
 80058cc:	a81e      	add	r0, sp, #120	; 0x78
 80058ce:	f002 fc6a 	bl	80081a6 <__copybits>
 80058d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058d4:	4658      	mov	r0, fp
 80058d6:	f002 f8dc 	bl	8007a92 <_Bfree>
 80058da:	3c01      	subs	r4, #1
 80058dc:	2c04      	cmp	r4, #4
 80058de:	d806      	bhi.n	80058ee <_strtod_l+0xf6>
 80058e0:	e8df f004 	tbb	[pc, r4]
 80058e4:	1714030a 	.word	0x1714030a
 80058e8:	0a          	.byte	0x0a
 80058e9:	00          	.byte	0x00
 80058ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80058ee:	0731      	lsls	r1, r6, #28
 80058f0:	d5c1      	bpl.n	8005876 <_strtod_l+0x7e>
 80058f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80058f6:	e7be      	b.n	8005876 <_strtod_l+0x7e>
 80058f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80058fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80058fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005902:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005906:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800590a:	e7f0      	b.n	80058ee <_strtod_l+0xf6>
 800590c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005a80 <_strtod_l+0x288>
 8005910:	e7ed      	b.n	80058ee <_strtod_l+0xf6>
 8005912:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005916:	f04f 39ff 	mov.w	r9, #4294967295
 800591a:	e7e8      	b.n	80058ee <_strtod_l+0xf6>
 800591c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	921b      	str	r2, [sp, #108]	; 0x6c
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b30      	cmp	r3, #48	; 0x30
 8005926:	d0f9      	beq.n	800591c <_strtod_l+0x124>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0a4      	beq.n	8005876 <_strtod_l+0x7e>
 800592c:	2301      	movs	r3, #1
 800592e:	2500      	movs	r5, #0
 8005930:	220a      	movs	r2, #10
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005936:	9506      	str	r5, [sp, #24]
 8005938:	9308      	str	r3, [sp, #32]
 800593a:	9504      	str	r5, [sp, #16]
 800593c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800593e:	7807      	ldrb	r7, [r0, #0]
 8005940:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005944:	b2d9      	uxtb	r1, r3
 8005946:	2909      	cmp	r1, #9
 8005948:	d929      	bls.n	800599e <_strtod_l+0x1a6>
 800594a:	4622      	mov	r2, r4
 800594c:	f8d8 1000 	ldr.w	r1, [r8]
 8005950:	f002 fffb 	bl	800894a <strncmp>
 8005954:	2800      	cmp	r0, #0
 8005956:	d031      	beq.n	80059bc <_strtod_l+0x1c4>
 8005958:	2000      	movs	r0, #0
 800595a:	463b      	mov	r3, r7
 800595c:	4602      	mov	r2, r0
 800595e:	9c04      	ldr	r4, [sp, #16]
 8005960:	9005      	str	r0, [sp, #20]
 8005962:	2b65      	cmp	r3, #101	; 0x65
 8005964:	d001      	beq.n	800596a <_strtod_l+0x172>
 8005966:	2b45      	cmp	r3, #69	; 0x45
 8005968:	d114      	bne.n	8005994 <_strtod_l+0x19c>
 800596a:	b924      	cbnz	r4, 8005976 <_strtod_l+0x17e>
 800596c:	b910      	cbnz	r0, 8005974 <_strtod_l+0x17c>
 800596e:	9b07      	ldr	r3, [sp, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d09e      	beq.n	80058b2 <_strtod_l+0xba>
 8005974:	2400      	movs	r4, #0
 8005976:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005978:	1c73      	adds	r3, r6, #1
 800597a:	931b      	str	r3, [sp, #108]	; 0x6c
 800597c:	7873      	ldrb	r3, [r6, #1]
 800597e:	2b2b      	cmp	r3, #43	; 0x2b
 8005980:	d078      	beq.n	8005a74 <_strtod_l+0x27c>
 8005982:	2b2d      	cmp	r3, #45	; 0x2d
 8005984:	d070      	beq.n	8005a68 <_strtod_l+0x270>
 8005986:	f04f 0c00 	mov.w	ip, #0
 800598a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800598e:	2f09      	cmp	r7, #9
 8005990:	d97c      	bls.n	8005a8c <_strtod_l+0x294>
 8005992:	961b      	str	r6, [sp, #108]	; 0x6c
 8005994:	f04f 0e00 	mov.w	lr, #0
 8005998:	e09a      	b.n	8005ad0 <_strtod_l+0x2d8>
 800599a:	2300      	movs	r3, #0
 800599c:	e7c7      	b.n	800592e <_strtod_l+0x136>
 800599e:	9904      	ldr	r1, [sp, #16]
 80059a0:	3001      	adds	r0, #1
 80059a2:	2908      	cmp	r1, #8
 80059a4:	bfd7      	itett	le
 80059a6:	9906      	ldrle	r1, [sp, #24]
 80059a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80059ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80059b0:	9306      	strle	r3, [sp, #24]
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80059b6:	3301      	adds	r3, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	e7bf      	b.n	800593c <_strtod_l+0x144>
 80059bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059be:	191a      	adds	r2, r3, r4
 80059c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80059c2:	9a04      	ldr	r2, [sp, #16]
 80059c4:	5d1b      	ldrb	r3, [r3, r4]
 80059c6:	2a00      	cmp	r2, #0
 80059c8:	d037      	beq.n	8005a3a <_strtod_l+0x242>
 80059ca:	4602      	mov	r2, r0
 80059cc:	9c04      	ldr	r4, [sp, #16]
 80059ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80059d2:	2909      	cmp	r1, #9
 80059d4:	d913      	bls.n	80059fe <_strtod_l+0x206>
 80059d6:	2101      	movs	r1, #1
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	e7c2      	b.n	8005962 <_strtod_l+0x16a>
 80059dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059de:	3001      	adds	r0, #1
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b30      	cmp	r3, #48	; 0x30
 80059e8:	d0f8      	beq.n	80059dc <_strtod_l+0x1e4>
 80059ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80059ee:	2a08      	cmp	r2, #8
 80059f0:	f200 84f0 	bhi.w	80063d4 <_strtod_l+0xbdc>
 80059f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80059f6:	9208      	str	r2, [sp, #32]
 80059f8:	4602      	mov	r2, r0
 80059fa:	2000      	movs	r0, #0
 80059fc:	4604      	mov	r4, r0
 80059fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005a02:	f100 0101 	add.w	r1, r0, #1
 8005a06:	d012      	beq.n	8005a2e <_strtod_l+0x236>
 8005a08:	440a      	add	r2, r1
 8005a0a:	270a      	movs	r7, #10
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	eb00 0c04 	add.w	ip, r0, r4
 8005a12:	458c      	cmp	ip, r1
 8005a14:	d113      	bne.n	8005a3e <_strtod_l+0x246>
 8005a16:	1821      	adds	r1, r4, r0
 8005a18:	2908      	cmp	r1, #8
 8005a1a:	f104 0401 	add.w	r4, r4, #1
 8005a1e:	4404      	add	r4, r0
 8005a20:	dc19      	bgt.n	8005a56 <_strtod_l+0x25e>
 8005a22:	210a      	movs	r1, #10
 8005a24:	9b06      	ldr	r3, [sp, #24]
 8005a26:	fb01 e303 	mla	r3, r1, r3, lr
 8005a2a:	9306      	str	r3, [sp, #24]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a30:	1c58      	adds	r0, r3, #1
 8005a32:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	4608      	mov	r0, r1
 8005a38:	e7c9      	b.n	80059ce <_strtod_l+0x1d6>
 8005a3a:	9804      	ldr	r0, [sp, #16]
 8005a3c:	e7d3      	b.n	80059e6 <_strtod_l+0x1ee>
 8005a3e:	2908      	cmp	r1, #8
 8005a40:	f101 0101 	add.w	r1, r1, #1
 8005a44:	dc03      	bgt.n	8005a4e <_strtod_l+0x256>
 8005a46:	9b06      	ldr	r3, [sp, #24]
 8005a48:	437b      	muls	r3, r7
 8005a4a:	9306      	str	r3, [sp, #24]
 8005a4c:	e7e1      	b.n	8005a12 <_strtod_l+0x21a>
 8005a4e:	2910      	cmp	r1, #16
 8005a50:	bfd8      	it	le
 8005a52:	437d      	mulle	r5, r7
 8005a54:	e7dd      	b.n	8005a12 <_strtod_l+0x21a>
 8005a56:	2c10      	cmp	r4, #16
 8005a58:	bfdc      	itt	le
 8005a5a:	210a      	movle	r1, #10
 8005a5c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005a60:	e7e4      	b.n	8005a2c <_strtod_l+0x234>
 8005a62:	2301      	movs	r3, #1
 8005a64:	9305      	str	r3, [sp, #20]
 8005a66:	e781      	b.n	800596c <_strtod_l+0x174>
 8005a68:	f04f 0c01 	mov.w	ip, #1
 8005a6c:	1cb3      	adds	r3, r6, #2
 8005a6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a70:	78b3      	ldrb	r3, [r6, #2]
 8005a72:	e78a      	b.n	800598a <_strtod_l+0x192>
 8005a74:	f04f 0c00 	mov.w	ip, #0
 8005a78:	e7f8      	b.n	8005a6c <_strtod_l+0x274>
 8005a7a:	bf00      	nop
 8005a7c:	08008f5c 	.word	0x08008f5c
 8005a80:	7ff00000 	.word	0x7ff00000
 8005a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a86:	1c5f      	adds	r7, r3, #1
 8005a88:	971b      	str	r7, [sp, #108]	; 0x6c
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d0f9      	beq.n	8005a84 <_strtod_l+0x28c>
 8005a90:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005a94:	2f08      	cmp	r7, #8
 8005a96:	f63f af7d 	bhi.w	8005994 <_strtod_l+0x19c>
 8005a9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005aa4:	1c5f      	adds	r7, r3, #1
 8005aa6:	971b      	str	r7, [sp, #108]	; 0x6c
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005aae:	f1b8 0f09 	cmp.w	r8, #9
 8005ab2:	d937      	bls.n	8005b24 <_strtod_l+0x32c>
 8005ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ab6:	1a7f      	subs	r7, r7, r1
 8005ab8:	2f08      	cmp	r7, #8
 8005aba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005abe:	dc37      	bgt.n	8005b30 <_strtod_l+0x338>
 8005ac0:	45be      	cmp	lr, r7
 8005ac2:	bfa8      	it	ge
 8005ac4:	46be      	movge	lr, r7
 8005ac6:	f1bc 0f00 	cmp.w	ip, #0
 8005aca:	d001      	beq.n	8005ad0 <_strtod_l+0x2d8>
 8005acc:	f1ce 0e00 	rsb	lr, lr, #0
 8005ad0:	2c00      	cmp	r4, #0
 8005ad2:	d151      	bne.n	8005b78 <_strtod_l+0x380>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f47f aece 	bne.w	8005876 <_strtod_l+0x7e>
 8005ada:	9a07      	ldr	r2, [sp, #28]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	f47f aeca 	bne.w	8005876 <_strtod_l+0x7e>
 8005ae2:	9a05      	ldr	r2, [sp, #20]
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	f47f aee4 	bne.w	80058b2 <_strtod_l+0xba>
 8005aea:	2b4e      	cmp	r3, #78	; 0x4e
 8005aec:	d027      	beq.n	8005b3e <_strtod_l+0x346>
 8005aee:	dc21      	bgt.n	8005b34 <_strtod_l+0x33c>
 8005af0:	2b49      	cmp	r3, #73	; 0x49
 8005af2:	f47f aede 	bne.w	80058b2 <_strtod_l+0xba>
 8005af6:	49a4      	ldr	r1, [pc, #656]	; (8005d88 <_strtod_l+0x590>)
 8005af8:	a81b      	add	r0, sp, #108	; 0x6c
 8005afa:	f001 feab 	bl	8007854 <__match>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f43f aed7 	beq.w	80058b2 <_strtod_l+0xba>
 8005b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b06:	49a1      	ldr	r1, [pc, #644]	; (8005d8c <_strtod_l+0x594>)
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	a81b      	add	r0, sp, #108	; 0x6c
 8005b0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b0e:	f001 fea1 	bl	8007854 <__match>
 8005b12:	b910      	cbnz	r0, 8005b1a <_strtod_l+0x322>
 8005b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b16:	3301      	adds	r3, #1
 8005b18:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b1a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005da0 <_strtod_l+0x5a8>
 8005b1e:	f04f 0900 	mov.w	r9, #0
 8005b22:	e6a8      	b.n	8005876 <_strtod_l+0x7e>
 8005b24:	210a      	movs	r1, #10
 8005b26:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005b2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005b2e:	e7b8      	b.n	8005aa2 <_strtod_l+0x2aa>
 8005b30:	46be      	mov	lr, r7
 8005b32:	e7c8      	b.n	8005ac6 <_strtod_l+0x2ce>
 8005b34:	2b69      	cmp	r3, #105	; 0x69
 8005b36:	d0de      	beq.n	8005af6 <_strtod_l+0x2fe>
 8005b38:	2b6e      	cmp	r3, #110	; 0x6e
 8005b3a:	f47f aeba 	bne.w	80058b2 <_strtod_l+0xba>
 8005b3e:	4994      	ldr	r1, [pc, #592]	; (8005d90 <_strtod_l+0x598>)
 8005b40:	a81b      	add	r0, sp, #108	; 0x6c
 8005b42:	f001 fe87 	bl	8007854 <__match>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f43f aeb3 	beq.w	80058b2 <_strtod_l+0xba>
 8005b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b28      	cmp	r3, #40	; 0x28
 8005b52:	d10e      	bne.n	8005b72 <_strtod_l+0x37a>
 8005b54:	aa1e      	add	r2, sp, #120	; 0x78
 8005b56:	498f      	ldr	r1, [pc, #572]	; (8005d94 <_strtod_l+0x59c>)
 8005b58:	a81b      	add	r0, sp, #108	; 0x6c
 8005b5a:	f001 fe8f 	bl	800787c <__hexnan>
 8005b5e:	2805      	cmp	r0, #5
 8005b60:	d107      	bne.n	8005b72 <_strtod_l+0x37a>
 8005b62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b64:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005b68:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005b6c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005b70:	e681      	b.n	8005876 <_strtod_l+0x7e>
 8005b72:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005da8 <_strtod_l+0x5b0>
 8005b76:	e7d2      	b.n	8005b1e <_strtod_l+0x326>
 8005b78:	ebae 0302 	sub.w	r3, lr, r2
 8005b7c:	9307      	str	r3, [sp, #28]
 8005b7e:	9b04      	ldr	r3, [sp, #16]
 8005b80:	9806      	ldr	r0, [sp, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bf08      	it	eq
 8005b86:	4623      	moveq	r3, r4
 8005b88:	2c10      	cmp	r4, #16
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	46a0      	mov	r8, r4
 8005b8e:	bfa8      	it	ge
 8005b90:	f04f 0810 	movge.w	r8, #16
 8005b94:	f7fa fc26 	bl	80003e4 <__aeabi_ui2d>
 8005b98:	2c09      	cmp	r4, #9
 8005b9a:	4681      	mov	r9, r0
 8005b9c:	468a      	mov	sl, r1
 8005b9e:	dc13      	bgt.n	8005bc8 <_strtod_l+0x3d0>
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f43f ae67 	beq.w	8005876 <_strtod_l+0x7e>
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	dd7e      	ble.n	8005caa <_strtod_l+0x4b2>
 8005bac:	2b16      	cmp	r3, #22
 8005bae:	dc65      	bgt.n	8005c7c <_strtod_l+0x484>
 8005bb0:	4a79      	ldr	r2, [pc, #484]	; (8005d98 <_strtod_l+0x5a0>)
 8005bb2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005bb6:	464a      	mov	r2, r9
 8005bb8:	e9de 0100 	ldrd	r0, r1, [lr]
 8005bbc:	4653      	mov	r3, sl
 8005bbe:	f7fa fc8b 	bl	80004d8 <__aeabi_dmul>
 8005bc2:	4681      	mov	r9, r0
 8005bc4:	468a      	mov	sl, r1
 8005bc6:	e656      	b.n	8005876 <_strtod_l+0x7e>
 8005bc8:	4b73      	ldr	r3, [pc, #460]	; (8005d98 <_strtod_l+0x5a0>)
 8005bca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005bce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005bd2:	f7fa fc81 	bl	80004d8 <__aeabi_dmul>
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	4628      	mov	r0, r5
 8005bda:	460f      	mov	r7, r1
 8005bdc:	f7fa fc02 	bl	80003e4 <__aeabi_ui2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa fac0 	bl	800016c <__adddf3>
 8005bec:	2c0f      	cmp	r4, #15
 8005bee:	4681      	mov	r9, r0
 8005bf0:	468a      	mov	sl, r1
 8005bf2:	ddd5      	ble.n	8005ba0 <_strtod_l+0x3a8>
 8005bf4:	9b07      	ldr	r3, [sp, #28]
 8005bf6:	eba4 0808 	sub.w	r8, r4, r8
 8005bfa:	4498      	add	r8, r3
 8005bfc:	f1b8 0f00 	cmp.w	r8, #0
 8005c00:	f340 809a 	ble.w	8005d38 <_strtod_l+0x540>
 8005c04:	f018 030f 	ands.w	r3, r8, #15
 8005c08:	d00a      	beq.n	8005c20 <_strtod_l+0x428>
 8005c0a:	4963      	ldr	r1, [pc, #396]	; (8005d98 <_strtod_l+0x5a0>)
 8005c0c:	464a      	mov	r2, r9
 8005c0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c16:	4653      	mov	r3, sl
 8005c18:	f7fa fc5e 	bl	80004d8 <__aeabi_dmul>
 8005c1c:	4681      	mov	r9, r0
 8005c1e:	468a      	mov	sl, r1
 8005c20:	f038 080f 	bics.w	r8, r8, #15
 8005c24:	d077      	beq.n	8005d16 <_strtod_l+0x51e>
 8005c26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c2a:	dd4b      	ble.n	8005cc4 <_strtod_l+0x4cc>
 8005c2c:	f04f 0800 	mov.w	r8, #0
 8005c30:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c34:	f8cd 8020 	str.w	r8, [sp, #32]
 8005c38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c3c:	2322      	movs	r3, #34	; 0x22
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005da0 <_strtod_l+0x5a8>
 8005c46:	f8cb 3000 	str.w	r3, [fp]
 8005c4a:	9b08      	ldr	r3, [sp, #32]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f43f ae12 	beq.w	8005876 <_strtod_l+0x7e>
 8005c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c54:	4658      	mov	r0, fp
 8005c56:	f001 ff1c 	bl	8007a92 <_Bfree>
 8005c5a:	9906      	ldr	r1, [sp, #24]
 8005c5c:	4658      	mov	r0, fp
 8005c5e:	f001 ff18 	bl	8007a92 <_Bfree>
 8005c62:	9904      	ldr	r1, [sp, #16]
 8005c64:	4658      	mov	r0, fp
 8005c66:	f001 ff14 	bl	8007a92 <_Bfree>
 8005c6a:	9908      	ldr	r1, [sp, #32]
 8005c6c:	4658      	mov	r0, fp
 8005c6e:	f001 ff10 	bl	8007a92 <_Bfree>
 8005c72:	4641      	mov	r1, r8
 8005c74:	4658      	mov	r0, fp
 8005c76:	f001 ff0c 	bl	8007a92 <_Bfree>
 8005c7a:	e5fc      	b.n	8005876 <_strtod_l+0x7e>
 8005c7c:	9a07      	ldr	r2, [sp, #28]
 8005c7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005c82:	4293      	cmp	r3, r2
 8005c84:	dbb6      	blt.n	8005bf4 <_strtod_l+0x3fc>
 8005c86:	4d44      	ldr	r5, [pc, #272]	; (8005d98 <_strtod_l+0x5a0>)
 8005c88:	f1c4 040f 	rsb	r4, r4, #15
 8005c8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005c90:	464a      	mov	r2, r9
 8005c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c96:	4653      	mov	r3, sl
 8005c98:	f7fa fc1e 	bl	80004d8 <__aeabi_dmul>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	1b1c      	subs	r4, r3, r4
 8005ca0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005ca4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ca8:	e789      	b.n	8005bbe <_strtod_l+0x3c6>
 8005caa:	f113 0f16 	cmn.w	r3, #22
 8005cae:	dba1      	blt.n	8005bf4 <_strtod_l+0x3fc>
 8005cb0:	4a39      	ldr	r2, [pc, #228]	; (8005d98 <_strtod_l+0x5a0>)
 8005cb2:	4648      	mov	r0, r9
 8005cb4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005cb8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	f7fa fd35 	bl	800072c <__aeabi_ddiv>
 8005cc2:	e77e      	b.n	8005bc2 <_strtod_l+0x3ca>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4648      	mov	r0, r9
 8005cc8:	4651      	mov	r1, sl
 8005cca:	461d      	mov	r5, r3
 8005ccc:	4e33      	ldr	r6, [pc, #204]	; (8005d9c <_strtod_l+0x5a4>)
 8005cce:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005cd2:	f1b8 0f01 	cmp.w	r8, #1
 8005cd6:	dc21      	bgt.n	8005d1c <_strtod_l+0x524>
 8005cd8:	b10b      	cbz	r3, 8005cde <_strtod_l+0x4e6>
 8005cda:	4681      	mov	r9, r0
 8005cdc:	468a      	mov	sl, r1
 8005cde:	4b2f      	ldr	r3, [pc, #188]	; (8005d9c <_strtod_l+0x5a4>)
 8005ce0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005ce4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ce8:	464a      	mov	r2, r9
 8005cea:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005cee:	4653      	mov	r3, sl
 8005cf0:	f7fa fbf2 	bl	80004d8 <__aeabi_dmul>
 8005cf4:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <_strtod_l+0x5a8>)
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	492a      	ldr	r1, [pc, #168]	; (8005da4 <_strtod_l+0x5ac>)
 8005cfc:	4681      	mov	r9, r0
 8005cfe:	428b      	cmp	r3, r1
 8005d00:	d894      	bhi.n	8005c2c <_strtod_l+0x434>
 8005d02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d06:	428b      	cmp	r3, r1
 8005d08:	bf86      	itte	hi
 8005d0a:	f04f 39ff 	movhi.w	r9, #4294967295
 8005d0e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005dac <_strtod_l+0x5b4>
 8005d12:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005d16:	2300      	movs	r3, #0
 8005d18:	9305      	str	r3, [sp, #20]
 8005d1a:	e07b      	b.n	8005e14 <_strtod_l+0x61c>
 8005d1c:	f018 0f01 	tst.w	r8, #1
 8005d20:	d006      	beq.n	8005d30 <_strtod_l+0x538>
 8005d22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fbd5 	bl	80004d8 <__aeabi_dmul>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	3501      	adds	r5, #1
 8005d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d36:	e7cc      	b.n	8005cd2 <_strtod_l+0x4da>
 8005d38:	d0ed      	beq.n	8005d16 <_strtod_l+0x51e>
 8005d3a:	f1c8 0800 	rsb	r8, r8, #0
 8005d3e:	f018 020f 	ands.w	r2, r8, #15
 8005d42:	d00a      	beq.n	8005d5a <_strtod_l+0x562>
 8005d44:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <_strtod_l+0x5a0>)
 8005d46:	4648      	mov	r0, r9
 8005d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d4c:	4651      	mov	r1, sl
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fceb 	bl	800072c <__aeabi_ddiv>
 8005d56:	4681      	mov	r9, r0
 8005d58:	468a      	mov	sl, r1
 8005d5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005d5e:	d0da      	beq.n	8005d16 <_strtod_l+0x51e>
 8005d60:	f1b8 0f1f 	cmp.w	r8, #31
 8005d64:	dd24      	ble.n	8005db0 <_strtod_l+0x5b8>
 8005d66:	f04f 0800 	mov.w	r8, #0
 8005d6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d6e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005d72:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d76:	2322      	movs	r3, #34	; 0x22
 8005d78:	f04f 0900 	mov.w	r9, #0
 8005d7c:	f04f 0a00 	mov.w	sl, #0
 8005d80:	f8cb 3000 	str.w	r3, [fp]
 8005d84:	e761      	b.n	8005c4a <_strtod_l+0x452>
 8005d86:	bf00      	nop
 8005d88:	08008f25 	.word	0x08008f25
 8005d8c:	08008fb3 	.word	0x08008fb3
 8005d90:	08008f2d 	.word	0x08008f2d
 8005d94:	08008f70 	.word	0x08008f70
 8005d98:	08009058 	.word	0x08009058
 8005d9c:	08009030 	.word	0x08009030
 8005da0:	7ff00000 	.word	0x7ff00000
 8005da4:	7ca00000 	.word	0x7ca00000
 8005da8:	fff80000 	.word	0xfff80000
 8005dac:	7fefffff 	.word	0x7fefffff
 8005db0:	f018 0310 	ands.w	r3, r8, #16
 8005db4:	bf18      	it	ne
 8005db6:	236a      	movne	r3, #106	; 0x6a
 8005db8:	4648      	mov	r0, r9
 8005dba:	9305      	str	r3, [sp, #20]
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4da1      	ldr	r5, [pc, #644]	; (8006048 <_strtod_l+0x850>)
 8005dc2:	f1b8 0f00 	cmp.w	r8, #0
 8005dc6:	f300 8113 	bgt.w	8005ff0 <_strtod_l+0x7f8>
 8005dca:	b10b      	cbz	r3, 8005dd0 <_strtod_l+0x5d8>
 8005dcc:	4681      	mov	r9, r0
 8005dce:	468a      	mov	sl, r1
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	b1bb      	cbz	r3, 8005e04 <_strtod_l+0x60c>
 8005dd4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005dd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	4651      	mov	r1, sl
 8005de0:	dd10      	ble.n	8005e04 <_strtod_l+0x60c>
 8005de2:	2b1f      	cmp	r3, #31
 8005de4:	f340 8110 	ble.w	8006008 <_strtod_l+0x810>
 8005de8:	2b34      	cmp	r3, #52	; 0x34
 8005dea:	bfd8      	it	le
 8005dec:	f04f 32ff 	movle.w	r2, #4294967295
 8005df0:	f04f 0900 	mov.w	r9, #0
 8005df4:	bfcf      	iteee	gt
 8005df6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005dfa:	3b20      	suble	r3, #32
 8005dfc:	fa02 f303 	lslle.w	r3, r2, r3
 8005e00:	ea03 0a01 	andle.w	sl, r3, r1
 8005e04:	2200      	movs	r2, #0
 8005e06:	2300      	movs	r3, #0
 8005e08:	4648      	mov	r0, r9
 8005e0a:	4651      	mov	r1, sl
 8005e0c:	f7fa fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d1a8      	bne.n	8005d66 <_strtod_l+0x56e>
 8005e14:	9b06      	ldr	r3, [sp, #24]
 8005e16:	9a04      	ldr	r2, [sp, #16]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	9908      	ldr	r1, [sp, #32]
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	4658      	mov	r0, fp
 8005e20:	f001 fe89 	bl	8007b36 <__s2b>
 8005e24:	9008      	str	r0, [sp, #32]
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f43f af00 	beq.w	8005c2c <_strtod_l+0x434>
 8005e2c:	9a07      	ldr	r2, [sp, #28]
 8005e2e:	9b07      	ldr	r3, [sp, #28]
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	f1c3 0300 	rsb	r3, r3, #0
 8005e36:	bfa8      	it	ge
 8005e38:	2300      	movge	r3, #0
 8005e3a:	f04f 0800 	mov.w	r8, #0
 8005e3e:	930e      	str	r3, [sp, #56]	; 0x38
 8005e40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e44:	9316      	str	r3, [sp, #88]	; 0x58
 8005e46:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	4658      	mov	r0, fp
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	f001 fdeb 	bl	8007a2a <_Balloc>
 8005e54:	9006      	str	r0, [sp, #24]
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f43f aef0 	beq.w	8005c3c <_strtod_l+0x444>
 8005e5c:	9b08      	ldr	r3, [sp, #32]
 8005e5e:	300c      	adds	r0, #12
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	f103 010c 	add.w	r1, r3, #12
 8005e66:	3202      	adds	r2, #2
 8005e68:	0092      	lsls	r2, r2, #2
 8005e6a:	f001 fdd3 	bl	8007a14 <memcpy>
 8005e6e:	ab1e      	add	r3, sp, #120	; 0x78
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	ab1d      	add	r3, sp, #116	; 0x74
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	464a      	mov	r2, r9
 8005e78:	4653      	mov	r3, sl
 8005e7a:	4658      	mov	r0, fp
 8005e7c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005e80:	f002 f914 	bl	80080ac <__d2b>
 8005e84:	901c      	str	r0, [sp, #112]	; 0x70
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f aed8 	beq.w	8005c3c <_strtod_l+0x444>
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f001 fedd 	bl	8007c4e <__i2b>
 8005e94:	9004      	str	r0, [sp, #16]
 8005e96:	4603      	mov	r3, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f43f aecf 	beq.w	8005c3c <_strtod_l+0x444>
 8005e9e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005ea0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ea2:	2d00      	cmp	r5, #0
 8005ea4:	bfab      	itete	ge
 8005ea6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005ea8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005eaa:	18ee      	addge	r6, r5, r3
 8005eac:	1b5c      	sublt	r4, r3, r5
 8005eae:	9b05      	ldr	r3, [sp, #20]
 8005eb0:	bfa8      	it	ge
 8005eb2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005eb4:	eba5 0503 	sub.w	r5, r5, r3
 8005eb8:	4415      	add	r5, r2
 8005eba:	4b64      	ldr	r3, [pc, #400]	; (800604c <_strtod_l+0x854>)
 8005ebc:	f105 35ff 	add.w	r5, r5, #4294967295
 8005ec0:	bfb8      	it	lt
 8005ec2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005ec4:	429d      	cmp	r5, r3
 8005ec6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005eca:	f280 80af 	bge.w	800602c <_strtod_l+0x834>
 8005ece:	1b5b      	subs	r3, r3, r5
 8005ed0:	2b1f      	cmp	r3, #31
 8005ed2:	eba2 0203 	sub.w	r2, r2, r3
 8005ed6:	f04f 0701 	mov.w	r7, #1
 8005eda:	f300 809c 	bgt.w	8006016 <_strtod_l+0x81e>
 8005ede:	2500      	movs	r5, #0
 8005ee0:	fa07 f303 	lsl.w	r3, r7, r3
 8005ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ee6:	18b7      	adds	r7, r6, r2
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	42be      	cmp	r6, r7
 8005eec:	4414      	add	r4, r2
 8005eee:	441c      	add	r4, r3
 8005ef0:	4633      	mov	r3, r6
 8005ef2:	bfa8      	it	ge
 8005ef4:	463b      	movge	r3, r7
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	bfa8      	it	ge
 8005efa:	4623      	movge	r3, r4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfc2      	ittt	gt
 8005f00:	1aff      	subgt	r7, r7, r3
 8005f02:	1ae4      	subgt	r4, r4, r3
 8005f04:	1af6      	subgt	r6, r6, r3
 8005f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f08:	b1bb      	cbz	r3, 8005f3a <_strtod_l+0x742>
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	9904      	ldr	r1, [sp, #16]
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f001 ff3c 	bl	8007d8c <__pow5mult>
 8005f14:	9004      	str	r0, [sp, #16]
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f43f ae90 	beq.w	8005c3c <_strtod_l+0x444>
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f20:	4658      	mov	r0, fp
 8005f22:	f001 fe9d 	bl	8007c60 <__multiply>
 8005f26:	9009      	str	r0, [sp, #36]	; 0x24
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f43f ae87 	beq.w	8005c3c <_strtod_l+0x444>
 8005f2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f30:	4658      	mov	r0, fp
 8005f32:	f001 fdae 	bl	8007a92 <_Bfree>
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	931c      	str	r3, [sp, #112]	; 0x70
 8005f3a:	2f00      	cmp	r7, #0
 8005f3c:	dc7a      	bgt.n	8006034 <_strtod_l+0x83c>
 8005f3e:	9b07      	ldr	r3, [sp, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dd08      	ble.n	8005f56 <_strtod_l+0x75e>
 8005f44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005f46:	9906      	ldr	r1, [sp, #24]
 8005f48:	4658      	mov	r0, fp
 8005f4a:	f001 ff1f 	bl	8007d8c <__pow5mult>
 8005f4e:	9006      	str	r0, [sp, #24]
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f43f ae73 	beq.w	8005c3c <_strtod_l+0x444>
 8005f56:	2c00      	cmp	r4, #0
 8005f58:	dd08      	ble.n	8005f6c <_strtod_l+0x774>
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	9906      	ldr	r1, [sp, #24]
 8005f5e:	4658      	mov	r0, fp
 8005f60:	f001 ff62 	bl	8007e28 <__lshift>
 8005f64:	9006      	str	r0, [sp, #24]
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f43f ae68 	beq.w	8005c3c <_strtod_l+0x444>
 8005f6c:	2e00      	cmp	r6, #0
 8005f6e:	dd08      	ble.n	8005f82 <_strtod_l+0x78a>
 8005f70:	4632      	mov	r2, r6
 8005f72:	9904      	ldr	r1, [sp, #16]
 8005f74:	4658      	mov	r0, fp
 8005f76:	f001 ff57 	bl	8007e28 <__lshift>
 8005f7a:	9004      	str	r0, [sp, #16]
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f ae5d 	beq.w	8005c3c <_strtod_l+0x444>
 8005f82:	9a06      	ldr	r2, [sp, #24]
 8005f84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f86:	4658      	mov	r0, fp
 8005f88:	f001 ffbc 	bl	8007f04 <__mdiff>
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f43f ae54 	beq.w	8005c3c <_strtod_l+0x444>
 8005f94:	2400      	movs	r4, #0
 8005f96:	68c3      	ldr	r3, [r0, #12]
 8005f98:	9904      	ldr	r1, [sp, #16]
 8005f9a:	60c4      	str	r4, [r0, #12]
 8005f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f9e:	f001 ff97 	bl	8007ed0 <__mcmp>
 8005fa2:	42a0      	cmp	r0, r4
 8005fa4:	da54      	bge.n	8006050 <_strtod_l+0x858>
 8005fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa8:	b9f3      	cbnz	r3, 8005fe8 <_strtod_l+0x7f0>
 8005faa:	f1b9 0f00 	cmp.w	r9, #0
 8005fae:	d11b      	bne.n	8005fe8 <_strtod_l+0x7f0>
 8005fb0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005fb4:	b9c3      	cbnz	r3, 8005fe8 <_strtod_l+0x7f0>
 8005fb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005fba:	0d1b      	lsrs	r3, r3, #20
 8005fbc:	051b      	lsls	r3, r3, #20
 8005fbe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005fc2:	d911      	bls.n	8005fe8 <_strtod_l+0x7f0>
 8005fc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005fc8:	b91b      	cbnz	r3, 8005fd2 <_strtod_l+0x7da>
 8005fca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	dd0a      	ble.n	8005fe8 <_strtod_l+0x7f0>
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4658      	mov	r0, fp
 8005fd8:	f001 ff26 	bl	8007e28 <__lshift>
 8005fdc:	9904      	ldr	r1, [sp, #16]
 8005fde:	4680      	mov	r8, r0
 8005fe0:	f001 ff76 	bl	8007ed0 <__mcmp>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	dc68      	bgt.n	80060ba <_strtod_l+0x8c2>
 8005fe8:	9b05      	ldr	r3, [sp, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d172      	bne.n	80060d4 <_strtod_l+0x8dc>
 8005fee:	e630      	b.n	8005c52 <_strtod_l+0x45a>
 8005ff0:	f018 0f01 	tst.w	r8, #1
 8005ff4:	d004      	beq.n	8006000 <_strtod_l+0x808>
 8005ff6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ffa:	f7fa fa6d 	bl	80004d8 <__aeabi_dmul>
 8005ffe:	2301      	movs	r3, #1
 8006000:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006004:	3508      	adds	r5, #8
 8006006:	e6dc      	b.n	8005dc2 <_strtod_l+0x5ca>
 8006008:	f04f 32ff 	mov.w	r2, #4294967295
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	ea03 0909 	and.w	r9, r3, r9
 8006014:	e6f6      	b.n	8005e04 <_strtod_l+0x60c>
 8006016:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800601a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800601e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006022:	35e2      	adds	r5, #226	; 0xe2
 8006024:	fa07 f505 	lsl.w	r5, r7, r5
 8006028:	970f      	str	r7, [sp, #60]	; 0x3c
 800602a:	e75c      	b.n	8005ee6 <_strtod_l+0x6ee>
 800602c:	2301      	movs	r3, #1
 800602e:	2500      	movs	r5, #0
 8006030:	930f      	str	r3, [sp, #60]	; 0x3c
 8006032:	e758      	b.n	8005ee6 <_strtod_l+0x6ee>
 8006034:	463a      	mov	r2, r7
 8006036:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006038:	4658      	mov	r0, fp
 800603a:	f001 fef5 	bl	8007e28 <__lshift>
 800603e:	901c      	str	r0, [sp, #112]	; 0x70
 8006040:	2800      	cmp	r0, #0
 8006042:	f47f af7c 	bne.w	8005f3e <_strtod_l+0x746>
 8006046:	e5f9      	b.n	8005c3c <_strtod_l+0x444>
 8006048:	08008f88 	.word	0x08008f88
 800604c:	fffffc02 	.word	0xfffffc02
 8006050:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006054:	f040 8089 	bne.w	800616a <_strtod_l+0x972>
 8006058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800605a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800605e:	b342      	cbz	r2, 80060b2 <_strtod_l+0x8ba>
 8006060:	4aaf      	ldr	r2, [pc, #700]	; (8006320 <_strtod_l+0xb28>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d156      	bne.n	8006114 <_strtod_l+0x91c>
 8006066:	9b05      	ldr	r3, [sp, #20]
 8006068:	4648      	mov	r0, r9
 800606a:	b1eb      	cbz	r3, 80060a8 <_strtod_l+0x8b0>
 800606c:	4653      	mov	r3, sl
 800606e:	4aad      	ldr	r2, [pc, #692]	; (8006324 <_strtod_l+0xb2c>)
 8006070:	f04f 31ff 	mov.w	r1, #4294967295
 8006074:	401a      	ands	r2, r3
 8006076:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800607a:	d818      	bhi.n	80060ae <_strtod_l+0x8b6>
 800607c:	0d12      	lsrs	r2, r2, #20
 800607e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006082:	fa01 f303 	lsl.w	r3, r1, r3
 8006086:	4298      	cmp	r0, r3
 8006088:	d144      	bne.n	8006114 <_strtod_l+0x91c>
 800608a:	4ba7      	ldr	r3, [pc, #668]	; (8006328 <_strtod_l+0xb30>)
 800608c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608e:	429a      	cmp	r2, r3
 8006090:	d102      	bne.n	8006098 <_strtod_l+0x8a0>
 8006092:	3001      	adds	r0, #1
 8006094:	f43f add2 	beq.w	8005c3c <_strtod_l+0x444>
 8006098:	4ba2      	ldr	r3, [pc, #648]	; (8006324 <_strtod_l+0xb2c>)
 800609a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609c:	f04f 0900 	mov.w	r9, #0
 80060a0:	401a      	ands	r2, r3
 80060a2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80060a6:	e79f      	b.n	8005fe8 <_strtod_l+0x7f0>
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ac:	e7eb      	b.n	8006086 <_strtod_l+0x88e>
 80060ae:	460b      	mov	r3, r1
 80060b0:	e7e9      	b.n	8006086 <_strtod_l+0x88e>
 80060b2:	bb7b      	cbnz	r3, 8006114 <_strtod_l+0x91c>
 80060b4:	f1b9 0f00 	cmp.w	r9, #0
 80060b8:	d12c      	bne.n	8006114 <_strtod_l+0x91c>
 80060ba:	9905      	ldr	r1, [sp, #20]
 80060bc:	4653      	mov	r3, sl
 80060be:	4a99      	ldr	r2, [pc, #612]	; (8006324 <_strtod_l+0xb2c>)
 80060c0:	b1f1      	cbz	r1, 8006100 <_strtod_l+0x908>
 80060c2:	ea02 010a 	and.w	r1, r2, sl
 80060c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060ca:	dc19      	bgt.n	8006100 <_strtod_l+0x908>
 80060cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060d0:	f77f ae51 	ble.w	8005d76 <_strtod_l+0x57e>
 80060d4:	2300      	movs	r3, #0
 80060d6:	4a95      	ldr	r2, [pc, #596]	; (800632c <_strtod_l+0xb34>)
 80060d8:	4648      	mov	r0, r9
 80060da:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80060de:	4651      	mov	r1, sl
 80060e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060e4:	f7fa f9f8 	bl	80004d8 <__aeabi_dmul>
 80060e8:	4681      	mov	r9, r0
 80060ea:	468a      	mov	sl, r1
 80060ec:	2900      	cmp	r1, #0
 80060ee:	f47f adb0 	bne.w	8005c52 <_strtod_l+0x45a>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f47f adad 	bne.w	8005c52 <_strtod_l+0x45a>
 80060f8:	2322      	movs	r3, #34	; 0x22
 80060fa:	f8cb 3000 	str.w	r3, [fp]
 80060fe:	e5a8      	b.n	8005c52 <_strtod_l+0x45a>
 8006100:	4013      	ands	r3, r2
 8006102:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006106:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800610a:	f04f 39ff 	mov.w	r9, #4294967295
 800610e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006112:	e769      	b.n	8005fe8 <_strtod_l+0x7f0>
 8006114:	b19d      	cbz	r5, 800613e <_strtod_l+0x946>
 8006116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006118:	421d      	tst	r5, r3
 800611a:	f43f af65 	beq.w	8005fe8 <_strtod_l+0x7f0>
 800611e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006120:	9a05      	ldr	r2, [sp, #20]
 8006122:	4648      	mov	r0, r9
 8006124:	4651      	mov	r1, sl
 8006126:	b173      	cbz	r3, 8006146 <_strtod_l+0x94e>
 8006128:	f7ff fb42 	bl	80057b0 <sulp>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006134:	f7fa f81a 	bl	800016c <__adddf3>
 8006138:	4681      	mov	r9, r0
 800613a:	468a      	mov	sl, r1
 800613c:	e754      	b.n	8005fe8 <_strtod_l+0x7f0>
 800613e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006140:	ea13 0f09 	tst.w	r3, r9
 8006144:	e7e9      	b.n	800611a <_strtod_l+0x922>
 8006146:	f7ff fb33 	bl	80057b0 <sulp>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006152:	f7fa f809 	bl	8000168 <__aeabi_dsub>
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	4681      	mov	r9, r0
 800615c:	468a      	mov	sl, r1
 800615e:	f7fa fc23 	bl	80009a8 <__aeabi_dcmpeq>
 8006162:	2800      	cmp	r0, #0
 8006164:	f47f ae07 	bne.w	8005d76 <_strtod_l+0x57e>
 8006168:	e73e      	b.n	8005fe8 <_strtod_l+0x7f0>
 800616a:	9904      	ldr	r1, [sp, #16]
 800616c:	4640      	mov	r0, r8
 800616e:	f001 ffec 	bl	800814a <__ratio>
 8006172:	2200      	movs	r2, #0
 8006174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006178:	4606      	mov	r6, r0
 800617a:	460f      	mov	r7, r1
 800617c:	f7fa fc28 	bl	80009d0 <__aeabi_dcmple>
 8006180:	2800      	cmp	r0, #0
 8006182:	d075      	beq.n	8006270 <_strtod_l+0xa78>
 8006184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006186:	2b00      	cmp	r3, #0
 8006188:	d047      	beq.n	800621a <_strtod_l+0xa22>
 800618a:	2600      	movs	r6, #0
 800618c:	4f68      	ldr	r7, [pc, #416]	; (8006330 <_strtod_l+0xb38>)
 800618e:	4d68      	ldr	r5, [pc, #416]	; (8006330 <_strtod_l+0xb38>)
 8006190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006196:	0d1b      	lsrs	r3, r3, #20
 8006198:	051b      	lsls	r3, r3, #20
 800619a:	930f      	str	r3, [sp, #60]	; 0x3c
 800619c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800619e:	4b65      	ldr	r3, [pc, #404]	; (8006334 <_strtod_l+0xb3c>)
 80061a0:	429a      	cmp	r2, r3
 80061a2:	f040 80cf 	bne.w	8006344 <_strtod_l+0xb4c>
 80061a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061aa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	4648      	mov	r0, r9
 80061b2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80061b6:	4651      	mov	r1, sl
 80061b8:	f001 ff02 	bl	8007fc0 <__ulp>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f988 	bl	80004d8 <__aeabi_dmul>
 80061c8:	464a      	mov	r2, r9
 80061ca:	4653      	mov	r3, sl
 80061cc:	f7f9 ffce 	bl	800016c <__adddf3>
 80061d0:	460b      	mov	r3, r1
 80061d2:	4954      	ldr	r1, [pc, #336]	; (8006324 <_strtod_l+0xb2c>)
 80061d4:	4a58      	ldr	r2, [pc, #352]	; (8006338 <_strtod_l+0xb40>)
 80061d6:	4019      	ands	r1, r3
 80061d8:	4291      	cmp	r1, r2
 80061da:	4681      	mov	r9, r0
 80061dc:	d95e      	bls.n	800629c <_strtod_l+0xaa4>
 80061de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <_strtod_l+0x9f8>
 80061e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ea:	3301      	adds	r3, #1
 80061ec:	f43f ad26 	beq.w	8005c3c <_strtod_l+0x444>
 80061f0:	f04f 39ff 	mov.w	r9, #4294967295
 80061f4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006328 <_strtod_l+0xb30>
 80061f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061fa:	4658      	mov	r0, fp
 80061fc:	f001 fc49 	bl	8007a92 <_Bfree>
 8006200:	9906      	ldr	r1, [sp, #24]
 8006202:	4658      	mov	r0, fp
 8006204:	f001 fc45 	bl	8007a92 <_Bfree>
 8006208:	9904      	ldr	r1, [sp, #16]
 800620a:	4658      	mov	r0, fp
 800620c:	f001 fc41 	bl	8007a92 <_Bfree>
 8006210:	4641      	mov	r1, r8
 8006212:	4658      	mov	r0, fp
 8006214:	f001 fc3d 	bl	8007a92 <_Bfree>
 8006218:	e617      	b.n	8005e4a <_strtod_l+0x652>
 800621a:	f1b9 0f00 	cmp.w	r9, #0
 800621e:	d119      	bne.n	8006254 <_strtod_l+0xa5c>
 8006220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006226:	b9e3      	cbnz	r3, 8006262 <_strtod_l+0xa6a>
 8006228:	2200      	movs	r2, #0
 800622a:	4b41      	ldr	r3, [pc, #260]	; (8006330 <_strtod_l+0xb38>)
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7fa fbc4 	bl	80009bc <__aeabi_dcmplt>
 8006234:	b9c8      	cbnz	r0, 800626a <_strtod_l+0xa72>
 8006236:	2200      	movs	r2, #0
 8006238:	4b40      	ldr	r3, [pc, #256]	; (800633c <_strtod_l+0xb44>)
 800623a:	4630      	mov	r0, r6
 800623c:	4639      	mov	r1, r7
 800623e:	f7fa f94b 	bl	80004d8 <__aeabi_dmul>
 8006242:	4604      	mov	r4, r0
 8006244:	460d      	mov	r5, r1
 8006246:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800624a:	9418      	str	r4, [sp, #96]	; 0x60
 800624c:	9319      	str	r3, [sp, #100]	; 0x64
 800624e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006252:	e79d      	b.n	8006190 <_strtod_l+0x998>
 8006254:	f1b9 0f01 	cmp.w	r9, #1
 8006258:	d103      	bne.n	8006262 <_strtod_l+0xa6a>
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	f43f ad8a 	beq.w	8005d76 <_strtod_l+0x57e>
 8006262:	2600      	movs	r6, #0
 8006264:	4f36      	ldr	r7, [pc, #216]	; (8006340 <_strtod_l+0xb48>)
 8006266:	2400      	movs	r4, #0
 8006268:	e791      	b.n	800618e <_strtod_l+0x996>
 800626a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800626c:	4d33      	ldr	r5, [pc, #204]	; (800633c <_strtod_l+0xb44>)
 800626e:	e7ea      	b.n	8006246 <_strtod_l+0xa4e>
 8006270:	4b32      	ldr	r3, [pc, #200]	; (800633c <_strtod_l+0xb44>)
 8006272:	2200      	movs	r2, #0
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa f92e 	bl	80004d8 <__aeabi_dmul>
 800627c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	b933      	cbnz	r3, 8006292 <_strtod_l+0xa9a>
 8006284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006288:	9010      	str	r0, [sp, #64]	; 0x40
 800628a:	9311      	str	r3, [sp, #68]	; 0x44
 800628c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006290:	e77e      	b.n	8006190 <_strtod_l+0x998>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800629a:	e7f7      	b.n	800628c <_strtod_l+0xa94>
 800629c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80062a0:	9b05      	ldr	r3, [sp, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1a8      	bne.n	80061f8 <_strtod_l+0xa00>
 80062a6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80062aa:	0d1b      	lsrs	r3, r3, #20
 80062ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ae:	051b      	lsls	r3, r3, #20
 80062b0:	429a      	cmp	r2, r3
 80062b2:	4656      	mov	r6, sl
 80062b4:	d1a0      	bne.n	80061f8 <_strtod_l+0xa00>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7fa fbbd 	bl	8000a38 <__aeabi_d2iz>
 80062be:	f7fa f8a1 	bl	8000404 <__aeabi_i2d>
 80062c2:	460b      	mov	r3, r1
 80062c4:	4602      	mov	r2, r0
 80062c6:	4629      	mov	r1, r5
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7f9 ff4d 	bl	8000168 <__aeabi_dsub>
 80062ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d0:	4604      	mov	r4, r0
 80062d2:	460d      	mov	r5, r1
 80062d4:	b933      	cbnz	r3, 80062e4 <_strtod_l+0xaec>
 80062d6:	f1b9 0f00 	cmp.w	r9, #0
 80062da:	d103      	bne.n	80062e4 <_strtod_l+0xaec>
 80062dc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	d06a      	beq.n	80063ba <_strtod_l+0xbc2>
 80062e4:	a30a      	add	r3, pc, #40	; (adr r3, 8006310 <_strtod_l+0xb18>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7fa fb65 	bl	80009bc <__aeabi_dcmplt>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f47f acad 	bne.w	8005c52 <_strtod_l+0x45a>
 80062f8:	a307      	add	r3, pc, #28	; (adr r3, 8006318 <_strtod_l+0xb20>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fb79 	bl	80009f8 <__aeabi_dcmpgt>
 8006306:	2800      	cmp	r0, #0
 8006308:	f43f af76 	beq.w	80061f8 <_strtod_l+0xa00>
 800630c:	e4a1      	b.n	8005c52 <_strtod_l+0x45a>
 800630e:	bf00      	nop
 8006310:	94a03595 	.word	0x94a03595
 8006314:	3fdfffff 	.word	0x3fdfffff
 8006318:	35afe535 	.word	0x35afe535
 800631c:	3fe00000 	.word	0x3fe00000
 8006320:	000fffff 	.word	0x000fffff
 8006324:	7ff00000 	.word	0x7ff00000
 8006328:	7fefffff 	.word	0x7fefffff
 800632c:	39500000 	.word	0x39500000
 8006330:	3ff00000 	.word	0x3ff00000
 8006334:	7fe00000 	.word	0x7fe00000
 8006338:	7c9fffff 	.word	0x7c9fffff
 800633c:	3fe00000 	.word	0x3fe00000
 8006340:	bff00000 	.word	0xbff00000
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	b313      	cbz	r3, 800638e <_strtod_l+0xb96>
 8006348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800634a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800634e:	d81e      	bhi.n	800638e <_strtod_l+0xb96>
 8006350:	a325      	add	r3, pc, #148	; (adr r3, 80063e8 <_strtod_l+0xbf0>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f7fa fb39 	bl	80009d0 <__aeabi_dcmple>
 800635e:	b190      	cbz	r0, 8006386 <_strtod_l+0xb8e>
 8006360:	4629      	mov	r1, r5
 8006362:	4620      	mov	r0, r4
 8006364:	f7fa fb90 	bl	8000a88 <__aeabi_d2uiz>
 8006368:	2800      	cmp	r0, #0
 800636a:	bf08      	it	eq
 800636c:	2001      	moveq	r0, #1
 800636e:	f7fa f839 	bl	80003e4 <__aeabi_ui2d>
 8006372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	b9d3      	cbnz	r3, 80063b0 <_strtod_l+0xbb8>
 800637a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800637e:	9012      	str	r0, [sp, #72]	; 0x48
 8006380:	9313      	str	r3, [sp, #76]	; 0x4c
 8006382:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006388:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800638c:	1a9f      	subs	r7, r3, r2
 800638e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006392:	f001 fe15 	bl	8007fc0 <__ulp>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa f89b 	bl	80004d8 <__aeabi_dmul>
 80063a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063a6:	f7f9 fee1 	bl	800016c <__adddf3>
 80063aa:	4681      	mov	r9, r0
 80063ac:	468a      	mov	sl, r1
 80063ae:	e777      	b.n	80062a0 <_strtod_l+0xaa8>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80063b8:	e7e3      	b.n	8006382 <_strtod_l+0xb8a>
 80063ba:	a30d      	add	r3, pc, #52	; (adr r3, 80063f0 <_strtod_l+0xbf8>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7fa fafc 	bl	80009bc <__aeabi_dcmplt>
 80063c4:	e79f      	b.n	8006306 <_strtod_l+0xb0e>
 80063c6:	2300      	movs	r3, #0
 80063c8:	930d      	str	r3, [sp, #52]	; 0x34
 80063ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	f7ff ba55 	b.w	800587e <_strtod_l+0x86>
 80063d4:	2b65      	cmp	r3, #101	; 0x65
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f43f ab42 	beq.w	8005a62 <_strtod_l+0x26a>
 80063de:	2101      	movs	r1, #1
 80063e0:	4614      	mov	r4, r2
 80063e2:	9105      	str	r1, [sp, #20]
 80063e4:	f7ff babf 	b.w	8005966 <_strtod_l+0x16e>
 80063e8:	ffc00000 	.word	0xffc00000
 80063ec:	41dfffff 	.word	0x41dfffff
 80063f0:	94a03595 	.word	0x94a03595
 80063f4:	3fcfffff 	.word	0x3fcfffff

080063f8 <_strtod_r>:
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <_strtod_r+0x18>)
 80063fa:	b410      	push	{r4}
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4c05      	ldr	r4, [pc, #20]	; (8006414 <_strtod_r+0x1c>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf08      	it	eq
 8006406:	4623      	moveq	r3, r4
 8006408:	bc10      	pop	{r4}
 800640a:	f7ff b9f5 	b.w	80057f8 <_strtod_l>
 800640e:	bf00      	nop
 8006410:	2000000c 	.word	0x2000000c
 8006414:	20000070 	.word	0x20000070

08006418 <_strtol_l.isra.0>:
 8006418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	4680      	mov	r8, r0
 800641e:	4689      	mov	r9, r1
 8006420:	4692      	mov	sl, r2
 8006422:	461e      	mov	r6, r3
 8006424:	460f      	mov	r7, r1
 8006426:	463d      	mov	r5, r7
 8006428:	9808      	ldr	r0, [sp, #32]
 800642a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800642e:	f001 fab5 	bl	800799c <__locale_ctype_ptr_l>
 8006432:	4420      	add	r0, r4
 8006434:	7843      	ldrb	r3, [r0, #1]
 8006436:	f013 0308 	ands.w	r3, r3, #8
 800643a:	d132      	bne.n	80064a2 <_strtol_l.isra.0+0x8a>
 800643c:	2c2d      	cmp	r4, #45	; 0x2d
 800643e:	d132      	bne.n	80064a6 <_strtol_l.isra.0+0x8e>
 8006440:	2201      	movs	r2, #1
 8006442:	787c      	ldrb	r4, [r7, #1]
 8006444:	1cbd      	adds	r5, r7, #2
 8006446:	2e00      	cmp	r6, #0
 8006448:	d05d      	beq.n	8006506 <_strtol_l.isra.0+0xee>
 800644a:	2e10      	cmp	r6, #16
 800644c:	d109      	bne.n	8006462 <_strtol_l.isra.0+0x4a>
 800644e:	2c30      	cmp	r4, #48	; 0x30
 8006450:	d107      	bne.n	8006462 <_strtol_l.isra.0+0x4a>
 8006452:	782b      	ldrb	r3, [r5, #0]
 8006454:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006458:	2b58      	cmp	r3, #88	; 0x58
 800645a:	d14f      	bne.n	80064fc <_strtol_l.isra.0+0xe4>
 800645c:	2610      	movs	r6, #16
 800645e:	786c      	ldrb	r4, [r5, #1]
 8006460:	3502      	adds	r5, #2
 8006462:	2a00      	cmp	r2, #0
 8006464:	bf14      	ite	ne
 8006466:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800646a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800646e:	2700      	movs	r7, #0
 8006470:	fbb1 fcf6 	udiv	ip, r1, r6
 8006474:	4638      	mov	r0, r7
 8006476:	fb06 1e1c 	mls	lr, r6, ip, r1
 800647a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800647e:	2b09      	cmp	r3, #9
 8006480:	d817      	bhi.n	80064b2 <_strtol_l.isra.0+0x9a>
 8006482:	461c      	mov	r4, r3
 8006484:	42a6      	cmp	r6, r4
 8006486:	dd23      	ble.n	80064d0 <_strtol_l.isra.0+0xb8>
 8006488:	1c7b      	adds	r3, r7, #1
 800648a:	d007      	beq.n	800649c <_strtol_l.isra.0+0x84>
 800648c:	4584      	cmp	ip, r0
 800648e:	d31c      	bcc.n	80064ca <_strtol_l.isra.0+0xb2>
 8006490:	d101      	bne.n	8006496 <_strtol_l.isra.0+0x7e>
 8006492:	45a6      	cmp	lr, r4
 8006494:	db19      	blt.n	80064ca <_strtol_l.isra.0+0xb2>
 8006496:	2701      	movs	r7, #1
 8006498:	fb00 4006 	mla	r0, r0, r6, r4
 800649c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064a0:	e7eb      	b.n	800647a <_strtol_l.isra.0+0x62>
 80064a2:	462f      	mov	r7, r5
 80064a4:	e7bf      	b.n	8006426 <_strtol_l.isra.0+0xe>
 80064a6:	2c2b      	cmp	r4, #43	; 0x2b
 80064a8:	bf04      	itt	eq
 80064aa:	1cbd      	addeq	r5, r7, #2
 80064ac:	787c      	ldrbeq	r4, [r7, #1]
 80064ae:	461a      	mov	r2, r3
 80064b0:	e7c9      	b.n	8006446 <_strtol_l.isra.0+0x2e>
 80064b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80064b6:	2b19      	cmp	r3, #25
 80064b8:	d801      	bhi.n	80064be <_strtol_l.isra.0+0xa6>
 80064ba:	3c37      	subs	r4, #55	; 0x37
 80064bc:	e7e2      	b.n	8006484 <_strtol_l.isra.0+0x6c>
 80064be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80064c2:	2b19      	cmp	r3, #25
 80064c4:	d804      	bhi.n	80064d0 <_strtol_l.isra.0+0xb8>
 80064c6:	3c57      	subs	r4, #87	; 0x57
 80064c8:	e7dc      	b.n	8006484 <_strtol_l.isra.0+0x6c>
 80064ca:	f04f 37ff 	mov.w	r7, #4294967295
 80064ce:	e7e5      	b.n	800649c <_strtol_l.isra.0+0x84>
 80064d0:	1c7b      	adds	r3, r7, #1
 80064d2:	d108      	bne.n	80064e6 <_strtol_l.isra.0+0xce>
 80064d4:	2322      	movs	r3, #34	; 0x22
 80064d6:	4608      	mov	r0, r1
 80064d8:	f8c8 3000 	str.w	r3, [r8]
 80064dc:	f1ba 0f00 	cmp.w	sl, #0
 80064e0:	d107      	bne.n	80064f2 <_strtol_l.isra.0+0xda>
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	b102      	cbz	r2, 80064ea <_strtol_l.isra.0+0xd2>
 80064e8:	4240      	negs	r0, r0
 80064ea:	f1ba 0f00 	cmp.w	sl, #0
 80064ee:	d0f8      	beq.n	80064e2 <_strtol_l.isra.0+0xca>
 80064f0:	b10f      	cbz	r7, 80064f6 <_strtol_l.isra.0+0xde>
 80064f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80064f6:	f8ca 9000 	str.w	r9, [sl]
 80064fa:	e7f2      	b.n	80064e2 <_strtol_l.isra.0+0xca>
 80064fc:	2430      	movs	r4, #48	; 0x30
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d1af      	bne.n	8006462 <_strtol_l.isra.0+0x4a>
 8006502:	2608      	movs	r6, #8
 8006504:	e7ad      	b.n	8006462 <_strtol_l.isra.0+0x4a>
 8006506:	2c30      	cmp	r4, #48	; 0x30
 8006508:	d0a3      	beq.n	8006452 <_strtol_l.isra.0+0x3a>
 800650a:	260a      	movs	r6, #10
 800650c:	e7a9      	b.n	8006462 <_strtol_l.isra.0+0x4a>
	...

08006510 <_strtol_r>:
 8006510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006512:	4c06      	ldr	r4, [pc, #24]	; (800652c <_strtol_r+0x1c>)
 8006514:	4d06      	ldr	r5, [pc, #24]	; (8006530 <_strtol_r+0x20>)
 8006516:	6824      	ldr	r4, [r4, #0]
 8006518:	6a24      	ldr	r4, [r4, #32]
 800651a:	2c00      	cmp	r4, #0
 800651c:	bf08      	it	eq
 800651e:	462c      	moveq	r4, r5
 8006520:	9400      	str	r4, [sp, #0]
 8006522:	f7ff ff79 	bl	8006418 <_strtol_l.isra.0>
 8006526:	b003      	add	sp, #12
 8006528:	bd30      	pop	{r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	2000000c 	.word	0x2000000c
 8006530:	20000070 	.word	0x20000070

08006534 <quorem>:
 8006534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	6903      	ldr	r3, [r0, #16]
 800653a:	690c      	ldr	r4, [r1, #16]
 800653c:	4680      	mov	r8, r0
 800653e:	42a3      	cmp	r3, r4
 8006540:	f2c0 8084 	blt.w	800664c <quorem+0x118>
 8006544:	3c01      	subs	r4, #1
 8006546:	f101 0714 	add.w	r7, r1, #20
 800654a:	f100 0614 	add.w	r6, r0, #20
 800654e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006552:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006556:	3501      	adds	r5, #1
 8006558:	fbb0 f5f5 	udiv	r5, r0, r5
 800655c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006560:	eb06 030c 	add.w	r3, r6, ip
 8006564:	eb07 090c 	add.w	r9, r7, ip
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	b39d      	cbz	r5, 80065d4 <quorem+0xa0>
 800656c:	f04f 0a00 	mov.w	sl, #0
 8006570:	4638      	mov	r0, r7
 8006572:	46b6      	mov	lr, r6
 8006574:	46d3      	mov	fp, sl
 8006576:	f850 2b04 	ldr.w	r2, [r0], #4
 800657a:	b293      	uxth	r3, r2
 800657c:	fb05 a303 	mla	r3, r5, r3, sl
 8006580:	0c12      	lsrs	r2, r2, #16
 8006582:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006586:	fb05 a202 	mla	r2, r5, r2, sl
 800658a:	b29b      	uxth	r3, r3
 800658c:	ebab 0303 	sub.w	r3, fp, r3
 8006590:	f8de b000 	ldr.w	fp, [lr]
 8006594:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006598:	fa1f fb8b 	uxth.w	fp, fp
 800659c:	445b      	add	r3, fp
 800659e:	fa1f fb82 	uxth.w	fp, r2
 80065a2:	f8de 2000 	ldr.w	r2, [lr]
 80065a6:	4581      	cmp	r9, r0
 80065a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80065ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065b6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80065ba:	f84e 3b04 	str.w	r3, [lr], #4
 80065be:	d2da      	bcs.n	8006576 <quorem+0x42>
 80065c0:	f856 300c 	ldr.w	r3, [r6, ip]
 80065c4:	b933      	cbnz	r3, 80065d4 <quorem+0xa0>
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	429e      	cmp	r6, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	d331      	bcc.n	8006634 <quorem+0x100>
 80065d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80065d4:	4640      	mov	r0, r8
 80065d6:	f001 fc7b 	bl	8007ed0 <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	db26      	blt.n	800662c <quorem+0xf8>
 80065de:	4630      	mov	r0, r6
 80065e0:	f04f 0c00 	mov.w	ip, #0
 80065e4:	3501      	adds	r5, #1
 80065e6:	f857 1b04 	ldr.w	r1, [r7], #4
 80065ea:	f8d0 e000 	ldr.w	lr, [r0]
 80065ee:	b28b      	uxth	r3, r1
 80065f0:	ebac 0303 	sub.w	r3, ip, r3
 80065f4:	fa1f f28e 	uxth.w	r2, lr
 80065f8:	4413      	add	r3, r2
 80065fa:	0c0a      	lsrs	r2, r1, #16
 80065fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006604:	b29b      	uxth	r3, r3
 8006606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800660a:	45b9      	cmp	r9, r7
 800660c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006610:	f840 3b04 	str.w	r3, [r0], #4
 8006614:	d2e7      	bcs.n	80065e6 <quorem+0xb2>
 8006616:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800661a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800661e:	b92a      	cbnz	r2, 800662c <quorem+0xf8>
 8006620:	3b04      	subs	r3, #4
 8006622:	429e      	cmp	r6, r3
 8006624:	461a      	mov	r2, r3
 8006626:	d30b      	bcc.n	8006640 <quorem+0x10c>
 8006628:	f8c8 4010 	str.w	r4, [r8, #16]
 800662c:	4628      	mov	r0, r5
 800662e:	b003      	add	sp, #12
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	3b04      	subs	r3, #4
 8006638:	2a00      	cmp	r2, #0
 800663a:	d1c9      	bne.n	80065d0 <quorem+0x9c>
 800663c:	3c01      	subs	r4, #1
 800663e:	e7c4      	b.n	80065ca <quorem+0x96>
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	3b04      	subs	r3, #4
 8006644:	2a00      	cmp	r2, #0
 8006646:	d1ef      	bne.n	8006628 <quorem+0xf4>
 8006648:	3c01      	subs	r4, #1
 800664a:	e7ea      	b.n	8006622 <quorem+0xee>
 800664c:	2000      	movs	r0, #0
 800664e:	e7ee      	b.n	800662e <quorem+0xfa>

08006650 <_dtoa_r>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	4616      	mov	r6, r2
 8006656:	461f      	mov	r7, r3
 8006658:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800665a:	b095      	sub	sp, #84	; 0x54
 800665c:	4604      	mov	r4, r0
 800665e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006662:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006666:	b93d      	cbnz	r5, 8006678 <_dtoa_r+0x28>
 8006668:	2010      	movs	r0, #16
 800666a:	f001 f9ab 	bl	80079c4 <malloc>
 800666e:	6260      	str	r0, [r4, #36]	; 0x24
 8006670:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006674:	6005      	str	r5, [r0, #0]
 8006676:	60c5      	str	r5, [r0, #12]
 8006678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800667a:	6819      	ldr	r1, [r3, #0]
 800667c:	b151      	cbz	r1, 8006694 <_dtoa_r+0x44>
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	2301      	movs	r3, #1
 8006682:	4093      	lsls	r3, r2
 8006684:	604a      	str	r2, [r1, #4]
 8006686:	608b      	str	r3, [r1, #8]
 8006688:	4620      	mov	r0, r4
 800668a:	f001 fa02 	bl	8007a92 <_Bfree>
 800668e:	2200      	movs	r2, #0
 8006690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	1e3b      	subs	r3, r7, #0
 8006696:	bfaf      	iteee	ge
 8006698:	2300      	movge	r3, #0
 800669a:	2201      	movlt	r2, #1
 800669c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	9303      	strlt	r3, [sp, #12]
 80066a2:	bfac      	ite	ge
 80066a4:	f8c8 3000 	strge.w	r3, [r8]
 80066a8:	f8c8 2000 	strlt.w	r2, [r8]
 80066ac:	4bae      	ldr	r3, [pc, #696]	; (8006968 <_dtoa_r+0x318>)
 80066ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066b2:	ea33 0308 	bics.w	r3, r3, r8
 80066b6:	d11b      	bne.n	80066f0 <_dtoa_r+0xa0>
 80066b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80066bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	b923      	cbnz	r3, 80066ce <_dtoa_r+0x7e>
 80066c4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f000 8545 	beq.w	8007158 <_dtoa_r+0xb08>
 80066ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066d0:	b953      	cbnz	r3, 80066e8 <_dtoa_r+0x98>
 80066d2:	4ba6      	ldr	r3, [pc, #664]	; (800696c <_dtoa_r+0x31c>)
 80066d4:	e021      	b.n	800671a <_dtoa_r+0xca>
 80066d6:	4ba6      	ldr	r3, [pc, #664]	; (8006970 <_dtoa_r+0x320>)
 80066d8:	9306      	str	r3, [sp, #24]
 80066da:	3308      	adds	r3, #8
 80066dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	9806      	ldr	r0, [sp, #24]
 80066e2:	b015      	add	sp, #84	; 0x54
 80066e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e8:	4ba0      	ldr	r3, [pc, #640]	; (800696c <_dtoa_r+0x31c>)
 80066ea:	9306      	str	r3, [sp, #24]
 80066ec:	3303      	adds	r3, #3
 80066ee:	e7f5      	b.n	80066dc <_dtoa_r+0x8c>
 80066f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa f954 	bl	80009a8 <__aeabi_dcmpeq>
 8006700:	4682      	mov	sl, r0
 8006702:	b160      	cbz	r0, 800671e <_dtoa_r+0xce>
 8006704:	2301      	movs	r3, #1
 8006706:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8520 	beq.w	8007152 <_dtoa_r+0xb02>
 8006712:	4b98      	ldr	r3, [pc, #608]	; (8006974 <_dtoa_r+0x324>)
 8006714:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	9306      	str	r3, [sp, #24]
 800671c:	e7e0      	b.n	80066e0 <_dtoa_r+0x90>
 800671e:	ab12      	add	r3, sp, #72	; 0x48
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	ab13      	add	r3, sp, #76	; 0x4c
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4632      	mov	r2, r6
 8006728:	463b      	mov	r3, r7
 800672a:	4620      	mov	r0, r4
 800672c:	f001 fcbe 	bl	80080ac <__d2b>
 8006730:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006734:	4683      	mov	fp, r0
 8006736:	2d00      	cmp	r5, #0
 8006738:	d07d      	beq.n	8006836 <_dtoa_r+0x1e6>
 800673a:	46b0      	mov	r8, r6
 800673c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006740:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006744:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006748:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800674c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006750:	2200      	movs	r2, #0
 8006752:	4b89      	ldr	r3, [pc, #548]	; (8006978 <_dtoa_r+0x328>)
 8006754:	4640      	mov	r0, r8
 8006756:	4649      	mov	r1, r9
 8006758:	f7f9 fd06 	bl	8000168 <__aeabi_dsub>
 800675c:	a37c      	add	r3, pc, #496	; (adr r3, 8006950 <_dtoa_r+0x300>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 feb9 	bl	80004d8 <__aeabi_dmul>
 8006766:	a37c      	add	r3, pc, #496	; (adr r3, 8006958 <_dtoa_r+0x308>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7f9 fcfe 	bl	800016c <__adddf3>
 8006770:	4606      	mov	r6, r0
 8006772:	4628      	mov	r0, r5
 8006774:	460f      	mov	r7, r1
 8006776:	f7f9 fe45 	bl	8000404 <__aeabi_i2d>
 800677a:	a379      	add	r3, pc, #484	; (adr r3, 8006960 <_dtoa_r+0x310>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 feaa 	bl	80004d8 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7f9 fcee 	bl	800016c <__adddf3>
 8006790:	4606      	mov	r6, r0
 8006792:	460f      	mov	r7, r1
 8006794:	f7fa f950 	bl	8000a38 <__aeabi_d2iz>
 8006798:	2200      	movs	r2, #0
 800679a:	4682      	mov	sl, r0
 800679c:	2300      	movs	r3, #0
 800679e:	4630      	mov	r0, r6
 80067a0:	4639      	mov	r1, r7
 80067a2:	f7fa f90b 	bl	80009bc <__aeabi_dcmplt>
 80067a6:	b148      	cbz	r0, 80067bc <_dtoa_r+0x16c>
 80067a8:	4650      	mov	r0, sl
 80067aa:	f7f9 fe2b 	bl	8000404 <__aeabi_i2d>
 80067ae:	4632      	mov	r2, r6
 80067b0:	463b      	mov	r3, r7
 80067b2:	f7fa f8f9 	bl	80009a8 <__aeabi_dcmpeq>
 80067b6:	b908      	cbnz	r0, 80067bc <_dtoa_r+0x16c>
 80067b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067bc:	f1ba 0f16 	cmp.w	sl, #22
 80067c0:	d85a      	bhi.n	8006878 <_dtoa_r+0x228>
 80067c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067c6:	496d      	ldr	r1, [pc, #436]	; (800697c <_dtoa_r+0x32c>)
 80067c8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80067cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d0:	f7fa f912 	bl	80009f8 <__aeabi_dcmpgt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d051      	beq.n	800687c <_dtoa_r+0x22c>
 80067d8:	2300      	movs	r3, #0
 80067da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067de:	930d      	str	r3, [sp, #52]	; 0x34
 80067e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067e2:	1b5d      	subs	r5, r3, r5
 80067e4:	1e6b      	subs	r3, r5, #1
 80067e6:	9307      	str	r3, [sp, #28]
 80067e8:	bf43      	ittte	mi
 80067ea:	2300      	movmi	r3, #0
 80067ec:	f1c5 0901 	rsbmi	r9, r5, #1
 80067f0:	9307      	strmi	r3, [sp, #28]
 80067f2:	f04f 0900 	movpl.w	r9, #0
 80067f6:	f1ba 0f00 	cmp.w	sl, #0
 80067fa:	db41      	blt.n	8006880 <_dtoa_r+0x230>
 80067fc:	9b07      	ldr	r3, [sp, #28]
 80067fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006802:	4453      	add	r3, sl
 8006804:	9307      	str	r3, [sp, #28]
 8006806:	2300      	movs	r3, #0
 8006808:	9308      	str	r3, [sp, #32]
 800680a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800680c:	2b09      	cmp	r3, #9
 800680e:	f200 808f 	bhi.w	8006930 <_dtoa_r+0x2e0>
 8006812:	2b05      	cmp	r3, #5
 8006814:	bfc4      	itt	gt
 8006816:	3b04      	subgt	r3, #4
 8006818:	931e      	strgt	r3, [sp, #120]	; 0x78
 800681a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800681c:	bfc8      	it	gt
 800681e:	2500      	movgt	r5, #0
 8006820:	f1a3 0302 	sub.w	r3, r3, #2
 8006824:	bfd8      	it	le
 8006826:	2501      	movle	r5, #1
 8006828:	2b03      	cmp	r3, #3
 800682a:	f200 808d 	bhi.w	8006948 <_dtoa_r+0x2f8>
 800682e:	e8df f003 	tbb	[pc, r3]
 8006832:	7d7b      	.short	0x7d7b
 8006834:	6f2f      	.short	0x6f2f
 8006836:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800683a:	441d      	add	r5, r3
 800683c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006840:	2820      	cmp	r0, #32
 8006842:	dd13      	ble.n	800686c <_dtoa_r+0x21c>
 8006844:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	fa08 f800 	lsl.w	r8, r8, r0
 800684e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006852:	fa23 f000 	lsr.w	r0, r3, r0
 8006856:	ea48 0000 	orr.w	r0, r8, r0
 800685a:	f7f9 fdc3 	bl	80003e4 <__aeabi_ui2d>
 800685e:	2301      	movs	r3, #1
 8006860:	4680      	mov	r8, r0
 8006862:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006866:	3d01      	subs	r5, #1
 8006868:	9310      	str	r3, [sp, #64]	; 0x40
 800686a:	e771      	b.n	8006750 <_dtoa_r+0x100>
 800686c:	9b02      	ldr	r3, [sp, #8]
 800686e:	f1c0 0020 	rsb	r0, r0, #32
 8006872:	fa03 f000 	lsl.w	r0, r3, r0
 8006876:	e7f0      	b.n	800685a <_dtoa_r+0x20a>
 8006878:	2301      	movs	r3, #1
 800687a:	e7b0      	b.n	80067de <_dtoa_r+0x18e>
 800687c:	900d      	str	r0, [sp, #52]	; 0x34
 800687e:	e7af      	b.n	80067e0 <_dtoa_r+0x190>
 8006880:	f1ca 0300 	rsb	r3, sl, #0
 8006884:	9308      	str	r3, [sp, #32]
 8006886:	2300      	movs	r3, #0
 8006888:	eba9 090a 	sub.w	r9, r9, sl
 800688c:	930c      	str	r3, [sp, #48]	; 0x30
 800688e:	e7bc      	b.n	800680a <_dtoa_r+0x1ba>
 8006890:	2301      	movs	r3, #1
 8006892:	9309      	str	r3, [sp, #36]	; 0x24
 8006894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006896:	2b00      	cmp	r3, #0
 8006898:	dd74      	ble.n	8006984 <_dtoa_r+0x334>
 800689a:	4698      	mov	r8, r3
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	2200      	movs	r2, #0
 80068a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068a2:	6072      	str	r2, [r6, #4]
 80068a4:	2204      	movs	r2, #4
 80068a6:	f102 0014 	add.w	r0, r2, #20
 80068aa:	4298      	cmp	r0, r3
 80068ac:	6871      	ldr	r1, [r6, #4]
 80068ae:	d96e      	bls.n	800698e <_dtoa_r+0x33e>
 80068b0:	4620      	mov	r0, r4
 80068b2:	f001 f8ba 	bl	8007a2a <_Balloc>
 80068b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b8:	6030      	str	r0, [r6, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f1b8 0f0e 	cmp.w	r8, #14
 80068c0:	9306      	str	r3, [sp, #24]
 80068c2:	f200 80ed 	bhi.w	8006aa0 <_dtoa_r+0x450>
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	f000 80ea 	beq.w	8006aa0 <_dtoa_r+0x450>
 80068cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068d0:	f1ba 0f00 	cmp.w	sl, #0
 80068d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80068d8:	dd77      	ble.n	80069ca <_dtoa_r+0x37a>
 80068da:	4a28      	ldr	r2, [pc, #160]	; (800697c <_dtoa_r+0x32c>)
 80068dc:	f00a 030f 	and.w	r3, sl, #15
 80068e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80068e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068e8:	06f0      	lsls	r0, r6, #27
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80068f2:	d568      	bpl.n	80069c6 <_dtoa_r+0x376>
 80068f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80068f8:	4b21      	ldr	r3, [pc, #132]	; (8006980 <_dtoa_r+0x330>)
 80068fa:	2503      	movs	r5, #3
 80068fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006900:	f7f9 ff14 	bl	800072c <__aeabi_ddiv>
 8006904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006908:	f006 060f 	and.w	r6, r6, #15
 800690c:	4f1c      	ldr	r7, [pc, #112]	; (8006980 <_dtoa_r+0x330>)
 800690e:	e04f      	b.n	80069b0 <_dtoa_r+0x360>
 8006910:	2301      	movs	r3, #1
 8006912:	9309      	str	r3, [sp, #36]	; 0x24
 8006914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006916:	4453      	add	r3, sl
 8006918:	f103 0801 	add.w	r8, r3, #1
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	4643      	mov	r3, r8
 8006920:	2b01      	cmp	r3, #1
 8006922:	bfb8      	it	lt
 8006924:	2301      	movlt	r3, #1
 8006926:	e7ba      	b.n	800689e <_dtoa_r+0x24e>
 8006928:	2300      	movs	r3, #0
 800692a:	e7b2      	b.n	8006892 <_dtoa_r+0x242>
 800692c:	2300      	movs	r3, #0
 800692e:	e7f0      	b.n	8006912 <_dtoa_r+0x2c2>
 8006930:	2501      	movs	r5, #1
 8006932:	2300      	movs	r3, #0
 8006934:	9509      	str	r5, [sp, #36]	; 0x24
 8006936:	931e      	str	r3, [sp, #120]	; 0x78
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	2200      	movs	r2, #0
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	4698      	mov	r8, r3
 8006942:	2312      	movs	r3, #18
 8006944:	921f      	str	r2, [sp, #124]	; 0x7c
 8006946:	e7aa      	b.n	800689e <_dtoa_r+0x24e>
 8006948:	2301      	movs	r3, #1
 800694a:	9309      	str	r3, [sp, #36]	; 0x24
 800694c:	e7f4      	b.n	8006938 <_dtoa_r+0x2e8>
 800694e:	bf00      	nop
 8006950:	636f4361 	.word	0x636f4361
 8006954:	3fd287a7 	.word	0x3fd287a7
 8006958:	8b60c8b3 	.word	0x8b60c8b3
 800695c:	3fc68a28 	.word	0x3fc68a28
 8006960:	509f79fb 	.word	0x509f79fb
 8006964:	3fd34413 	.word	0x3fd34413
 8006968:	7ff00000 	.word	0x7ff00000
 800696c:	08008fb9 	.word	0x08008fb9
 8006970:	08008fb0 	.word	0x08008fb0
 8006974:	08008f31 	.word	0x08008f31
 8006978:	3ff80000 	.word	0x3ff80000
 800697c:	08009058 	.word	0x08009058
 8006980:	08009030 	.word	0x08009030
 8006984:	2301      	movs	r3, #1
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	4698      	mov	r8, r3
 800698a:	461a      	mov	r2, r3
 800698c:	e7da      	b.n	8006944 <_dtoa_r+0x2f4>
 800698e:	3101      	adds	r1, #1
 8006990:	6071      	str	r1, [r6, #4]
 8006992:	0052      	lsls	r2, r2, #1
 8006994:	e787      	b.n	80068a6 <_dtoa_r+0x256>
 8006996:	07f1      	lsls	r1, r6, #31
 8006998:	d508      	bpl.n	80069ac <_dtoa_r+0x35c>
 800699a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800699e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a2:	f7f9 fd99 	bl	80004d8 <__aeabi_dmul>
 80069a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069aa:	3501      	adds	r5, #1
 80069ac:	1076      	asrs	r6, r6, #1
 80069ae:	3708      	adds	r7, #8
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	d1f0      	bne.n	8006996 <_dtoa_r+0x346>
 80069b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069bc:	f7f9 feb6 	bl	800072c <__aeabi_ddiv>
 80069c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c4:	e01b      	b.n	80069fe <_dtoa_r+0x3ae>
 80069c6:	2502      	movs	r5, #2
 80069c8:	e7a0      	b.n	800690c <_dtoa_r+0x2bc>
 80069ca:	f000 80a4 	beq.w	8006b16 <_dtoa_r+0x4c6>
 80069ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069d2:	f1ca 0600 	rsb	r6, sl, #0
 80069d6:	4ba0      	ldr	r3, [pc, #640]	; (8006c58 <_dtoa_r+0x608>)
 80069d8:	f006 020f 	and.w	r2, r6, #15
 80069dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f7f9 fd78 	bl	80004d8 <__aeabi_dmul>
 80069e8:	2502      	movs	r5, #2
 80069ea:	2300      	movs	r3, #0
 80069ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f0:	4f9a      	ldr	r7, [pc, #616]	; (8006c5c <_dtoa_r+0x60c>)
 80069f2:	1136      	asrs	r6, r6, #4
 80069f4:	2e00      	cmp	r6, #0
 80069f6:	f040 8083 	bne.w	8006b00 <_dtoa_r+0x4b0>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e0      	bne.n	80069c0 <_dtoa_r+0x370>
 80069fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 808a 	beq.w	8006b1a <_dtoa_r+0x4ca>
 8006a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b92      	ldr	r3, [pc, #584]	; (8006c60 <_dtoa_r+0x610>)
 8006a16:	f7f9 ffd1 	bl	80009bc <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d07d      	beq.n	8006b1a <_dtoa_r+0x4ca>
 8006a1e:	f1b8 0f00 	cmp.w	r8, #0
 8006a22:	d07a      	beq.n	8006b1a <_dtoa_r+0x4ca>
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dd36      	ble.n	8006a98 <_dtoa_r+0x448>
 8006a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4b8c      	ldr	r3, [pc, #560]	; (8006c64 <_dtoa_r+0x614>)
 8006a32:	f7f9 fd51 	bl	80004d8 <__aeabi_dmul>
 8006a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a3a:	9e04      	ldr	r6, [sp, #16]
 8006a3c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006a40:	3501      	adds	r5, #1
 8006a42:	4628      	mov	r0, r5
 8006a44:	f7f9 fcde 	bl	8000404 <__aeabi_i2d>
 8006a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a4c:	f7f9 fd44 	bl	80004d8 <__aeabi_dmul>
 8006a50:	2200      	movs	r2, #0
 8006a52:	4b85      	ldr	r3, [pc, #532]	; (8006c68 <_dtoa_r+0x618>)
 8006a54:	f7f9 fb8a 	bl	800016c <__adddf3>
 8006a58:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006a5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a60:	950b      	str	r5, [sp, #44]	; 0x2c
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	d15c      	bne.n	8006b20 <_dtoa_r+0x4d0>
 8006a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4b7f      	ldr	r3, [pc, #508]	; (8006c6c <_dtoa_r+0x61c>)
 8006a6e:	f7f9 fb7b 	bl	8000168 <__aeabi_dsub>
 8006a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a74:	462b      	mov	r3, r5
 8006a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a7a:	f7f9 ffbd 	bl	80009f8 <__aeabi_dcmpgt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f040 8281 	bne.w	8006f86 <_dtoa_r+0x936>
 8006a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a8a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a8e:	f7f9 ff95 	bl	80009bc <__aeabi_dcmplt>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 8275 	bne.w	8006f82 <_dtoa_r+0x932>
 8006a98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f2c0 814b 	blt.w	8006d3e <_dtoa_r+0x6ee>
 8006aa8:	f1ba 0f0e 	cmp.w	sl, #14
 8006aac:	f300 8147 	bgt.w	8006d3e <_dtoa_r+0x6ee>
 8006ab0:	4b69      	ldr	r3, [pc, #420]	; (8006c58 <_dtoa_r+0x608>)
 8006ab2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006abe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f280 80d7 	bge.w	8006c74 <_dtoa_r+0x624>
 8006ac6:	f1b8 0f00 	cmp.w	r8, #0
 8006aca:	f300 80d3 	bgt.w	8006c74 <_dtoa_r+0x624>
 8006ace:	f040 8257 	bne.w	8006f80 <_dtoa_r+0x930>
 8006ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4b64      	ldr	r3, [pc, #400]	; (8006c6c <_dtoa_r+0x61c>)
 8006ada:	f7f9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8006ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae2:	f7f9 ff7f 	bl	80009e4 <__aeabi_dcmpge>
 8006ae6:	4646      	mov	r6, r8
 8006ae8:	4647      	mov	r7, r8
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f040 822d 	bne.w	8006f4a <_dtoa_r+0x8fa>
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	9a06      	ldr	r2, [sp, #24]
 8006af4:	1c5d      	adds	r5, r3, #1
 8006af6:	2331      	movs	r3, #49	; 0x31
 8006af8:	f10a 0a01 	add.w	sl, sl, #1
 8006afc:	7013      	strb	r3, [r2, #0]
 8006afe:	e228      	b.n	8006f52 <_dtoa_r+0x902>
 8006b00:	07f2      	lsls	r2, r6, #31
 8006b02:	d505      	bpl.n	8006b10 <_dtoa_r+0x4c0>
 8006b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b08:	f7f9 fce6 	bl	80004d8 <__aeabi_dmul>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	3501      	adds	r5, #1
 8006b10:	1076      	asrs	r6, r6, #1
 8006b12:	3708      	adds	r7, #8
 8006b14:	e76e      	b.n	80069f4 <_dtoa_r+0x3a4>
 8006b16:	2502      	movs	r5, #2
 8006b18:	e771      	b.n	80069fe <_dtoa_r+0x3ae>
 8006b1a:	4657      	mov	r7, sl
 8006b1c:	4646      	mov	r6, r8
 8006b1e:	e790      	b.n	8006a42 <_dtoa_r+0x3f2>
 8006b20:	4b4d      	ldr	r3, [pc, #308]	; (8006c58 <_dtoa_r+0x608>)
 8006b22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b26:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d048      	beq.n	8006bc2 <_dtoa_r+0x572>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	2000      	movs	r0, #0
 8006b36:	494e      	ldr	r1, [pc, #312]	; (8006c70 <_dtoa_r+0x620>)
 8006b38:	f7f9 fdf8 	bl	800072c <__aeabi_ddiv>
 8006b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b40:	f7f9 fb12 	bl	8000168 <__aeabi_dsub>
 8006b44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b48:	9d06      	ldr	r5, [sp, #24]
 8006b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b4e:	f7f9 ff73 	bl	8000a38 <__aeabi_d2iz>
 8006b52:	9011      	str	r0, [sp, #68]	; 0x44
 8006b54:	f7f9 fc56 	bl	8000404 <__aeabi_i2d>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b60:	f7f9 fb02 	bl	8000168 <__aeabi_dsub>
 8006b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6a:	3330      	adds	r3, #48	; 0x30
 8006b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8006b70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b74:	f7f9 ff22 	bl	80009bc <__aeabi_dcmplt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d163      	bne.n	8006c44 <_dtoa_r+0x5f4>
 8006b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b80:	2000      	movs	r0, #0
 8006b82:	4937      	ldr	r1, [pc, #220]	; (8006c60 <_dtoa_r+0x610>)
 8006b84:	f7f9 faf0 	bl	8000168 <__aeabi_dsub>
 8006b88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b8c:	f7f9 ff16 	bl	80009bc <__aeabi_dcmplt>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	f040 80b5 	bne.w	8006d00 <_dtoa_r+0x6b0>
 8006b96:	9b06      	ldr	r3, [sp, #24]
 8006b98:	1aeb      	subs	r3, r5, r3
 8006b9a:	429e      	cmp	r6, r3
 8006b9c:	f77f af7c 	ble.w	8006a98 <_dtoa_r+0x448>
 8006ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <_dtoa_r+0x614>)
 8006ba8:	f7f9 fc96 	bl	80004d8 <__aeabi_dmul>
 8006bac:	2200      	movs	r2, #0
 8006bae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb6:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <_dtoa_r+0x614>)
 8006bb8:	f7f9 fc8e 	bl	80004d8 <__aeabi_dmul>
 8006bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bc0:	e7c3      	b.n	8006b4a <_dtoa_r+0x4fa>
 8006bc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bc6:	f7f9 fc87 	bl	80004d8 <__aeabi_dmul>
 8006bca:	9b06      	ldr	r3, [sp, #24]
 8006bcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006bd0:	199d      	adds	r5, r3, r6
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd8:	f7f9 ff2e 	bl	8000a38 <__aeabi_d2iz>
 8006bdc:	9011      	str	r0, [sp, #68]	; 0x44
 8006bde:	f7f9 fc11 	bl	8000404 <__aeabi_i2d>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bea:	f7f9 fabd 	bl	8000168 <__aeabi_dsub>
 8006bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf4:	3330      	adds	r3, #48	; 0x30
 8006bf6:	f806 3b01 	strb.w	r3, [r6], #1
 8006bfa:	42ae      	cmp	r6, r5
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	d124      	bne.n	8006c4c <_dtoa_r+0x5fc>
 8006c02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <_dtoa_r+0x620>)
 8006c08:	f7f9 fab0 	bl	800016c <__adddf3>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c14:	f7f9 fef0 	bl	80009f8 <__aeabi_dcmpgt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d171      	bne.n	8006d00 <_dtoa_r+0x6b0>
 8006c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c20:	2000      	movs	r0, #0
 8006c22:	4913      	ldr	r1, [pc, #76]	; (8006c70 <_dtoa_r+0x620>)
 8006c24:	f7f9 faa0 	bl	8000168 <__aeabi_dsub>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c30:	f7f9 fec4 	bl	80009bc <__aeabi_dcmplt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f43f af2f 	beq.w	8006a98 <_dtoa_r+0x448>
 8006c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3e:	1e6a      	subs	r2, r5, #1
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	d001      	beq.n	8006c48 <_dtoa_r+0x5f8>
 8006c44:	46ba      	mov	sl, r7
 8006c46:	e04a      	b.n	8006cde <_dtoa_r+0x68e>
 8006c48:	4615      	mov	r5, r2
 8006c4a:	e7f6      	b.n	8006c3a <_dtoa_r+0x5ea>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <_dtoa_r+0x614>)
 8006c4e:	f7f9 fc43 	bl	80004d8 <__aeabi_dmul>
 8006c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c56:	e7bd      	b.n	8006bd4 <_dtoa_r+0x584>
 8006c58:	08009058 	.word	0x08009058
 8006c5c:	08009030 	.word	0x08009030
 8006c60:	3ff00000 	.word	0x3ff00000
 8006c64:	40240000 	.word	0x40240000
 8006c68:	401c0000 	.word	0x401c0000
 8006c6c:	40140000 	.word	0x40140000
 8006c70:	3fe00000 	.word	0x3fe00000
 8006c74:	9d06      	ldr	r5, [sp, #24]
 8006c76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fd53 	bl	800072c <__aeabi_ddiv>
 8006c86:	f7f9 fed7 	bl	8000a38 <__aeabi_d2iz>
 8006c8a:	4681      	mov	r9, r0
 8006c8c:	f7f9 fbba 	bl	8000404 <__aeabi_i2d>
 8006c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c94:	f7f9 fc20 	bl	80004d8 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f7f9 fa62 	bl	8000168 <__aeabi_dsub>
 8006ca4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8006cac:	9e06      	ldr	r6, [sp, #24]
 8006cae:	4602      	mov	r2, r0
 8006cb0:	1bae      	subs	r6, r5, r6
 8006cb2:	45b0      	cmp	r8, r6
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	d135      	bne.n	8006d24 <_dtoa_r+0x6d4>
 8006cb8:	f7f9 fa58 	bl	800016c <__adddf3>
 8006cbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f7f9 fe98 	bl	80009f8 <__aeabi_dcmpgt>
 8006cc8:	b9c8      	cbnz	r0, 8006cfe <_dtoa_r+0x6ae>
 8006cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f7f9 fe69 	bl	80009a8 <__aeabi_dcmpeq>
 8006cd6:	b110      	cbz	r0, 8006cde <_dtoa_r+0x68e>
 8006cd8:	f019 0f01 	tst.w	r9, #1
 8006cdc:	d10f      	bne.n	8006cfe <_dtoa_r+0x6ae>
 8006cde:	4659      	mov	r1, fp
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fed6 	bl	8007a92 <_Bfree>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cea:	702b      	strb	r3, [r5, #0]
 8006cec:	f10a 0301 	add.w	r3, sl, #1
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f43f acf3 	beq.w	80066e0 <_dtoa_r+0x90>
 8006cfa:	601d      	str	r5, [r3, #0]
 8006cfc:	e4f0      	b.n	80066e0 <_dtoa_r+0x90>
 8006cfe:	4657      	mov	r7, sl
 8006d00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d04:	1e6b      	subs	r3, r5, #1
 8006d06:	2a39      	cmp	r2, #57	; 0x39
 8006d08:	d106      	bne.n	8006d18 <_dtoa_r+0x6c8>
 8006d0a:	9a06      	ldr	r2, [sp, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d107      	bne.n	8006d20 <_dtoa_r+0x6d0>
 8006d10:	2330      	movs	r3, #48	; 0x30
 8006d12:	7013      	strb	r3, [r2, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	3701      	adds	r7, #1
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	3201      	adds	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e791      	b.n	8006c44 <_dtoa_r+0x5f4>
 8006d20:	461d      	mov	r5, r3
 8006d22:	e7ed      	b.n	8006d00 <_dtoa_r+0x6b0>
 8006d24:	2200      	movs	r2, #0
 8006d26:	4b99      	ldr	r3, [pc, #612]	; (8006f8c <_dtoa_r+0x93c>)
 8006d28:	f7f9 fbd6 	bl	80004d8 <__aeabi_dmul>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4606      	mov	r6, r0
 8006d32:	460f      	mov	r7, r1
 8006d34:	f7f9 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d09e      	beq.n	8006c7a <_dtoa_r+0x62a>
 8006d3c:	e7cf      	b.n	8006cde <_dtoa_r+0x68e>
 8006d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	f000 8088 	beq.w	8006e56 <_dtoa_r+0x806>
 8006d46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d48:	2a01      	cmp	r2, #1
 8006d4a:	dc6d      	bgt.n	8006e28 <_dtoa_r+0x7d8>
 8006d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d066      	beq.n	8006e20 <_dtoa_r+0x7d0>
 8006d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d56:	464d      	mov	r5, r9
 8006d58:	9e08      	ldr	r6, [sp, #32]
 8006d5a:	9a07      	ldr	r2, [sp, #28]
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	441a      	add	r2, r3
 8006d60:	4620      	mov	r0, r4
 8006d62:	4499      	add	r9, r3
 8006d64:	9207      	str	r2, [sp, #28]
 8006d66:	f000 ff72 	bl	8007c4e <__i2b>
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	2d00      	cmp	r5, #0
 8006d6e:	dd0b      	ble.n	8006d88 <_dtoa_r+0x738>
 8006d70:	9b07      	ldr	r3, [sp, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd08      	ble.n	8006d88 <_dtoa_r+0x738>
 8006d76:	42ab      	cmp	r3, r5
 8006d78:	bfa8      	it	ge
 8006d7a:	462b      	movge	r3, r5
 8006d7c:	9a07      	ldr	r2, [sp, #28]
 8006d7e:	eba9 0903 	sub.w	r9, r9, r3
 8006d82:	1aed      	subs	r5, r5, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	9307      	str	r3, [sp, #28]
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	b1eb      	cbz	r3, 8006dc8 <_dtoa_r+0x778>
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d065      	beq.n	8006e5e <_dtoa_r+0x80e>
 8006d92:	b18e      	cbz	r6, 8006db8 <_dtoa_r+0x768>
 8006d94:	4639      	mov	r1, r7
 8006d96:	4632      	mov	r2, r6
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fff7 	bl	8007d8c <__pow5mult>
 8006d9e:	465a      	mov	r2, fp
 8006da0:	4601      	mov	r1, r0
 8006da2:	4607      	mov	r7, r0
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 ff5b 	bl	8007c60 <__multiply>
 8006daa:	4659      	mov	r1, fp
 8006dac:	900a      	str	r0, [sp, #40]	; 0x28
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 fe6f 	bl	8007a92 <_Bfree>
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	469b      	mov	fp, r3
 8006db8:	9b08      	ldr	r3, [sp, #32]
 8006dba:	1b9a      	subs	r2, r3, r6
 8006dbc:	d004      	beq.n	8006dc8 <_dtoa_r+0x778>
 8006dbe:	4659      	mov	r1, fp
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 ffe3 	bl	8007d8c <__pow5mult>
 8006dc6:	4683      	mov	fp, r0
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 ff3f 	bl	8007c4e <__i2b>
 8006dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 81c6 	beq.w	8007166 <_dtoa_r+0xb16>
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4601      	mov	r1, r0
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 ffd4 	bl	8007d8c <__pow5mult>
 8006de4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006de6:	4606      	mov	r6, r0
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	dc3e      	bgt.n	8006e6a <_dtoa_r+0x81a>
 8006dec:	9b02      	ldr	r3, [sp, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d137      	bne.n	8006e62 <_dtoa_r+0x812>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d134      	bne.n	8006e66 <_dtoa_r+0x816>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	0d1b      	lsrs	r3, r3, #20
 8006e04:	051b      	lsls	r3, r3, #20
 8006e06:	b12b      	cbz	r3, 8006e14 <_dtoa_r+0x7c4>
 8006e08:	9b07      	ldr	r3, [sp, #28]
 8006e0a:	f109 0901 	add.w	r9, r9, #1
 8006e0e:	3301      	adds	r3, #1
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	2301      	movs	r3, #1
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d128      	bne.n	8006e6e <_dtoa_r+0x81e>
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	e02e      	b.n	8006e7e <_dtoa_r+0x82e>
 8006e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e26:	e796      	b.n	8006d56 <_dtoa_r+0x706>
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	f108 36ff 	add.w	r6, r8, #4294967295
 8006e2e:	42b3      	cmp	r3, r6
 8006e30:	bfb7      	itett	lt
 8006e32:	9b08      	ldrlt	r3, [sp, #32]
 8006e34:	1b9e      	subge	r6, r3, r6
 8006e36:	1af2      	sublt	r2, r6, r3
 8006e38:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006e3a:	bfbf      	itttt	lt
 8006e3c:	9608      	strlt	r6, [sp, #32]
 8006e3e:	189b      	addlt	r3, r3, r2
 8006e40:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006e42:	2600      	movlt	r6, #0
 8006e44:	f1b8 0f00 	cmp.w	r8, #0
 8006e48:	bfb9      	ittee	lt
 8006e4a:	eba9 0508 	sublt.w	r5, r9, r8
 8006e4e:	2300      	movlt	r3, #0
 8006e50:	464d      	movge	r5, r9
 8006e52:	4643      	movge	r3, r8
 8006e54:	e781      	b.n	8006d5a <_dtoa_r+0x70a>
 8006e56:	9e08      	ldr	r6, [sp, #32]
 8006e58:	464d      	mov	r5, r9
 8006e5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e5c:	e786      	b.n	8006d6c <_dtoa_r+0x71c>
 8006e5e:	9a08      	ldr	r2, [sp, #32]
 8006e60:	e7ad      	b.n	8006dbe <_dtoa_r+0x76e>
 8006e62:	2300      	movs	r3, #0
 8006e64:	e7d6      	b.n	8006e14 <_dtoa_r+0x7c4>
 8006e66:	9b02      	ldr	r3, [sp, #8]
 8006e68:	e7d4      	b.n	8006e14 <_dtoa_r+0x7c4>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9308      	str	r3, [sp, #32]
 8006e6e:	6933      	ldr	r3, [r6, #16]
 8006e70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e74:	6918      	ldr	r0, [r3, #16]
 8006e76:	f000 fe9c 	bl	8007bb2 <__hi0bits>
 8006e7a:	f1c0 0020 	rsb	r0, r0, #32
 8006e7e:	9b07      	ldr	r3, [sp, #28]
 8006e80:	4418      	add	r0, r3
 8006e82:	f010 001f 	ands.w	r0, r0, #31
 8006e86:	d047      	beq.n	8006f18 <_dtoa_r+0x8c8>
 8006e88:	f1c0 0320 	rsb	r3, r0, #32
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	dd3b      	ble.n	8006f08 <_dtoa_r+0x8b8>
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	f1c0 001c 	rsb	r0, r0, #28
 8006e96:	4481      	add	r9, r0
 8006e98:	4405      	add	r5, r0
 8006e9a:	4403      	add	r3, r0
 8006e9c:	9307      	str	r3, [sp, #28]
 8006e9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ea2:	dd05      	ble.n	8006eb0 <_dtoa_r+0x860>
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	464a      	mov	r2, r9
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 ffbd 	bl	8007e28 <__lshift>
 8006eae:	4683      	mov	fp, r0
 8006eb0:	9b07      	ldr	r3, [sp, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dd05      	ble.n	8006ec2 <_dtoa_r+0x872>
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 ffb4 	bl	8007e28 <__lshift>
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec4:	b353      	cbz	r3, 8006f1c <_dtoa_r+0x8cc>
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4658      	mov	r0, fp
 8006eca:	f001 f801 	bl	8007ed0 <__mcmp>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	da24      	bge.n	8006f1c <_dtoa_r+0x8cc>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fdf1 	bl	8007ac0 <__multadd>
 8006ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ee4:	4683      	mov	fp, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8144 	beq.w	8007174 <_dtoa_r+0xb24>
 8006eec:	2300      	movs	r3, #0
 8006eee:	4639      	mov	r1, r7
 8006ef0:	220a      	movs	r2, #10
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fde4 	bl	8007ac0 <__multadd>
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	4607      	mov	r7, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dc4d      	bgt.n	8006f9c <_dtoa_r+0x94c>
 8006f00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	dd4a      	ble.n	8006f9c <_dtoa_r+0x94c>
 8006f06:	e011      	b.n	8006f2c <_dtoa_r+0x8dc>
 8006f08:	d0c9      	beq.n	8006e9e <_dtoa_r+0x84e>
 8006f0a:	9a07      	ldr	r2, [sp, #28]
 8006f0c:	331c      	adds	r3, #28
 8006f0e:	441a      	add	r2, r3
 8006f10:	4499      	add	r9, r3
 8006f12:	441d      	add	r5, r3
 8006f14:	4613      	mov	r3, r2
 8006f16:	e7c1      	b.n	8006e9c <_dtoa_r+0x84c>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	e7f6      	b.n	8006f0a <_dtoa_r+0x8ba>
 8006f1c:	f1b8 0f00 	cmp.w	r8, #0
 8006f20:	dc36      	bgt.n	8006f90 <_dtoa_r+0x940>
 8006f22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	dd33      	ble.n	8006f90 <_dtoa_r+0x940>
 8006f28:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	b963      	cbnz	r3, 8006f4a <_dtoa_r+0x8fa>
 8006f30:	4631      	mov	r1, r6
 8006f32:	2205      	movs	r2, #5
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fdc3 	bl	8007ac0 <__multadd>
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	4658      	mov	r0, fp
 8006f40:	f000 ffc6 	bl	8007ed0 <__mcmp>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f73f add3 	bgt.w	8006af0 <_dtoa_r+0x4a0>
 8006f4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f4c:	9d06      	ldr	r5, [sp, #24]
 8006f4e:	ea6f 0a03 	mvn.w	sl, r3
 8006f52:	f04f 0900 	mov.w	r9, #0
 8006f56:	4631      	mov	r1, r6
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fd9a 	bl	8007a92 <_Bfree>
 8006f5e:	2f00      	cmp	r7, #0
 8006f60:	f43f aebd 	beq.w	8006cde <_dtoa_r+0x68e>
 8006f64:	f1b9 0f00 	cmp.w	r9, #0
 8006f68:	d005      	beq.n	8006f76 <_dtoa_r+0x926>
 8006f6a:	45b9      	cmp	r9, r7
 8006f6c:	d003      	beq.n	8006f76 <_dtoa_r+0x926>
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fd8e 	bl	8007a92 <_Bfree>
 8006f76:	4639      	mov	r1, r7
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fd8a 	bl	8007a92 <_Bfree>
 8006f7e:	e6ae      	b.n	8006cde <_dtoa_r+0x68e>
 8006f80:	2600      	movs	r6, #0
 8006f82:	4637      	mov	r7, r6
 8006f84:	e7e1      	b.n	8006f4a <_dtoa_r+0x8fa>
 8006f86:	46ba      	mov	sl, r7
 8006f88:	4637      	mov	r7, r6
 8006f8a:	e5b1      	b.n	8006af0 <_dtoa_r+0x4a0>
 8006f8c:	40240000 	.word	0x40240000
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 80f3 	beq.w	8007182 <_dtoa_r+0xb32>
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	dd05      	ble.n	8006fac <_dtoa_r+0x95c>
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 ff3f 	bl	8007e28 <__lshift>
 8006faa:	4607      	mov	r7, r0
 8006fac:	9b08      	ldr	r3, [sp, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d04c      	beq.n	800704c <_dtoa_r+0x9fc>
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fd38 	bl	8007a2a <_Balloc>
 8006fba:	4605      	mov	r5, r0
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	f107 010c 	add.w	r1, r7, #12
 8006fc2:	3202      	adds	r2, #2
 8006fc4:	0092      	lsls	r2, r2, #2
 8006fc6:	300c      	adds	r0, #12
 8006fc8:	f000 fd24 	bl	8007a14 <memcpy>
 8006fcc:	2201      	movs	r2, #1
 8006fce:	4629      	mov	r1, r5
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 ff29 	bl	8007e28 <__lshift>
 8006fd6:	46b9      	mov	r9, r7
 8006fd8:	4607      	mov	r7, r0
 8006fda:	9b06      	ldr	r3, [sp, #24]
 8006fdc:	9307      	str	r3, [sp, #28]
 8006fde:	9b02      	ldr	r3, [sp, #8]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	9308      	str	r3, [sp, #32]
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4658      	mov	r0, fp
 8006fea:	f7ff faa3 	bl	8006534 <quorem>
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 ff6a 	bl	8007ed0 <__mcmp>
 8006ffc:	463a      	mov	r2, r7
 8006ffe:	9002      	str	r0, [sp, #8]
 8007000:	4631      	mov	r1, r6
 8007002:	4620      	mov	r0, r4
 8007004:	f000 ff7e 	bl	8007f04 <__mdiff>
 8007008:	68c3      	ldr	r3, [r0, #12]
 800700a:	4602      	mov	r2, r0
 800700c:	bb03      	cbnz	r3, 8007050 <_dtoa_r+0xa00>
 800700e:	4601      	mov	r1, r0
 8007010:	9009      	str	r0, [sp, #36]	; 0x24
 8007012:	4658      	mov	r0, fp
 8007014:	f000 ff5c 	bl	8007ed0 <__mcmp>
 8007018:	4603      	mov	r3, r0
 800701a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800701c:	4611      	mov	r1, r2
 800701e:	4620      	mov	r0, r4
 8007020:	9309      	str	r3, [sp, #36]	; 0x24
 8007022:	f000 fd36 	bl	8007a92 <_Bfree>
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	b9a3      	cbnz	r3, 8007054 <_dtoa_r+0xa04>
 800702a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800702c:	b992      	cbnz	r2, 8007054 <_dtoa_r+0xa04>
 800702e:	9a08      	ldr	r2, [sp, #32]
 8007030:	b982      	cbnz	r2, 8007054 <_dtoa_r+0xa04>
 8007032:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007036:	d029      	beq.n	800708c <_dtoa_r+0xa3c>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd01      	ble.n	8007042 <_dtoa_r+0x9f2>
 800703e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	1c5d      	adds	r5, r3, #1
 8007046:	f883 8000 	strb.w	r8, [r3]
 800704a:	e784      	b.n	8006f56 <_dtoa_r+0x906>
 800704c:	4638      	mov	r0, r7
 800704e:	e7c2      	b.n	8006fd6 <_dtoa_r+0x986>
 8007050:	2301      	movs	r3, #1
 8007052:	e7e3      	b.n	800701c <_dtoa_r+0x9cc>
 8007054:	9a02      	ldr	r2, [sp, #8]
 8007056:	2a00      	cmp	r2, #0
 8007058:	db04      	blt.n	8007064 <_dtoa_r+0xa14>
 800705a:	d123      	bne.n	80070a4 <_dtoa_r+0xa54>
 800705c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800705e:	bb0a      	cbnz	r2, 80070a4 <_dtoa_r+0xa54>
 8007060:	9a08      	ldr	r2, [sp, #32]
 8007062:	b9fa      	cbnz	r2, 80070a4 <_dtoa_r+0xa54>
 8007064:	2b00      	cmp	r3, #0
 8007066:	ddec      	ble.n	8007042 <_dtoa_r+0x9f2>
 8007068:	4659      	mov	r1, fp
 800706a:	2201      	movs	r2, #1
 800706c:	4620      	mov	r0, r4
 800706e:	f000 fedb 	bl	8007e28 <__lshift>
 8007072:	4631      	mov	r1, r6
 8007074:	4683      	mov	fp, r0
 8007076:	f000 ff2b 	bl	8007ed0 <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	dc03      	bgt.n	8007086 <_dtoa_r+0xa36>
 800707e:	d1e0      	bne.n	8007042 <_dtoa_r+0x9f2>
 8007080:	f018 0f01 	tst.w	r8, #1
 8007084:	d0dd      	beq.n	8007042 <_dtoa_r+0x9f2>
 8007086:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800708a:	d1d8      	bne.n	800703e <_dtoa_r+0x9ee>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	9a07      	ldr	r2, [sp, #28]
 8007090:	1c5d      	adds	r5, r3, #1
 8007092:	2339      	movs	r3, #57	; 0x39
 8007094:	7013      	strb	r3, [r2, #0]
 8007096:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800709a:	1e6a      	subs	r2, r5, #1
 800709c:	2b39      	cmp	r3, #57	; 0x39
 800709e:	d04d      	beq.n	800713c <_dtoa_r+0xaec>
 80070a0:	3301      	adds	r3, #1
 80070a2:	e052      	b.n	800714a <_dtoa_r+0xafa>
 80070a4:	9a07      	ldr	r2, [sp, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f102 0501 	add.w	r5, r2, #1
 80070ac:	dd06      	ble.n	80070bc <_dtoa_r+0xa6c>
 80070ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070b2:	d0eb      	beq.n	800708c <_dtoa_r+0xa3c>
 80070b4:	f108 0801 	add.w	r8, r8, #1
 80070b8:	9b07      	ldr	r3, [sp, #28]
 80070ba:	e7c4      	b.n	8007046 <_dtoa_r+0x9f6>
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	9a04      	ldr	r2, [sp, #16]
 80070c0:	1aeb      	subs	r3, r5, r3
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80070c8:	d021      	beq.n	800710e <_dtoa_r+0xabe>
 80070ca:	4659      	mov	r1, fp
 80070cc:	2300      	movs	r3, #0
 80070ce:	220a      	movs	r2, #10
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fcf5 	bl	8007ac0 <__multadd>
 80070d6:	45b9      	cmp	r9, r7
 80070d8:	4683      	mov	fp, r0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	f04f 020a 	mov.w	r2, #10
 80070e2:	4649      	mov	r1, r9
 80070e4:	4620      	mov	r0, r4
 80070e6:	d105      	bne.n	80070f4 <_dtoa_r+0xaa4>
 80070e8:	f000 fcea 	bl	8007ac0 <__multadd>
 80070ec:	4681      	mov	r9, r0
 80070ee:	4607      	mov	r7, r0
 80070f0:	9507      	str	r5, [sp, #28]
 80070f2:	e778      	b.n	8006fe6 <_dtoa_r+0x996>
 80070f4:	f000 fce4 	bl	8007ac0 <__multadd>
 80070f8:	4639      	mov	r1, r7
 80070fa:	4681      	mov	r9, r0
 80070fc:	2300      	movs	r3, #0
 80070fe:	220a      	movs	r2, #10
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fcdd 	bl	8007ac0 <__multadd>
 8007106:	4607      	mov	r7, r0
 8007108:	e7f2      	b.n	80070f0 <_dtoa_r+0xaa0>
 800710a:	f04f 0900 	mov.w	r9, #0
 800710e:	4659      	mov	r1, fp
 8007110:	2201      	movs	r2, #1
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fe88 	bl	8007e28 <__lshift>
 8007118:	4631      	mov	r1, r6
 800711a:	4683      	mov	fp, r0
 800711c:	f000 fed8 	bl	8007ed0 <__mcmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	dcb8      	bgt.n	8007096 <_dtoa_r+0xa46>
 8007124:	d102      	bne.n	800712c <_dtoa_r+0xadc>
 8007126:	f018 0f01 	tst.w	r8, #1
 800712a:	d1b4      	bne.n	8007096 <_dtoa_r+0xa46>
 800712c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007130:	1e6a      	subs	r2, r5, #1
 8007132:	2b30      	cmp	r3, #48	; 0x30
 8007134:	f47f af0f 	bne.w	8006f56 <_dtoa_r+0x906>
 8007138:	4615      	mov	r5, r2
 800713a:	e7f7      	b.n	800712c <_dtoa_r+0xadc>
 800713c:	9b06      	ldr	r3, [sp, #24]
 800713e:	4293      	cmp	r3, r2
 8007140:	d105      	bne.n	800714e <_dtoa_r+0xafe>
 8007142:	2331      	movs	r3, #49	; 0x31
 8007144:	9a06      	ldr	r2, [sp, #24]
 8007146:	f10a 0a01 	add.w	sl, sl, #1
 800714a:	7013      	strb	r3, [r2, #0]
 800714c:	e703      	b.n	8006f56 <_dtoa_r+0x906>
 800714e:	4615      	mov	r5, r2
 8007150:	e7a1      	b.n	8007096 <_dtoa_r+0xa46>
 8007152:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <_dtoa_r+0xb60>)
 8007154:	f7ff bae1 	b.w	800671a <_dtoa_r+0xca>
 8007158:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800715a:	2b00      	cmp	r3, #0
 800715c:	f47f aabb 	bne.w	80066d6 <_dtoa_r+0x86>
 8007160:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <_dtoa_r+0xb64>)
 8007162:	f7ff bada 	b.w	800671a <_dtoa_r+0xca>
 8007166:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007168:	2b01      	cmp	r3, #1
 800716a:	f77f ae3f 	ble.w	8006dec <_dtoa_r+0x79c>
 800716e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007170:	9308      	str	r3, [sp, #32]
 8007172:	e653      	b.n	8006e1c <_dtoa_r+0x7cc>
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dc03      	bgt.n	8007182 <_dtoa_r+0xb32>
 800717a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800717c:	2b02      	cmp	r3, #2
 800717e:	f73f aed5 	bgt.w	8006f2c <_dtoa_r+0x8dc>
 8007182:	9d06      	ldr	r5, [sp, #24]
 8007184:	4631      	mov	r1, r6
 8007186:	4658      	mov	r0, fp
 8007188:	f7ff f9d4 	bl	8006534 <quorem>
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007192:	f805 8b01 	strb.w	r8, [r5], #1
 8007196:	9a04      	ldr	r2, [sp, #16]
 8007198:	1aeb      	subs	r3, r5, r3
 800719a:	429a      	cmp	r2, r3
 800719c:	ddb5      	ble.n	800710a <_dtoa_r+0xaba>
 800719e:	4659      	mov	r1, fp
 80071a0:	2300      	movs	r3, #0
 80071a2:	220a      	movs	r2, #10
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fc8b 	bl	8007ac0 <__multadd>
 80071aa:	4683      	mov	fp, r0
 80071ac:	e7ea      	b.n	8007184 <_dtoa_r+0xb34>
 80071ae:	bf00      	nop
 80071b0:	08008f30 	.word	0x08008f30
 80071b4:	08008fb0 	.word	0x08008fb0

080071b8 <std>:
 80071b8:	2300      	movs	r3, #0
 80071ba:	b510      	push	{r4, lr}
 80071bc:	4604      	mov	r4, r0
 80071be:	e9c0 3300 	strd	r3, r3, [r0]
 80071c2:	6083      	str	r3, [r0, #8]
 80071c4:	8181      	strh	r1, [r0, #12]
 80071c6:	6643      	str	r3, [r0, #100]	; 0x64
 80071c8:	81c2      	strh	r2, [r0, #14]
 80071ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ce:	6183      	str	r3, [r0, #24]
 80071d0:	4619      	mov	r1, r3
 80071d2:	2208      	movs	r2, #8
 80071d4:	305c      	adds	r0, #92	; 0x5c
 80071d6:	f7fd fc77 	bl	8004ac8 <memset>
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <std+0x38>)
 80071dc:	6224      	str	r4, [r4, #32]
 80071de:	6263      	str	r3, [r4, #36]	; 0x24
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <std+0x3c>)
 80071e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <std+0x40>)
 80071e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <std+0x44>)
 80071ea:	6323      	str	r3, [r4, #48]	; 0x30
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	bf00      	nop
 80071f0:	080088c5 	.word	0x080088c5
 80071f4:	080088e7 	.word	0x080088e7
 80071f8:	0800891f 	.word	0x0800891f
 80071fc:	08008943 	.word	0x08008943

08007200 <_cleanup_r>:
 8007200:	4901      	ldr	r1, [pc, #4]	; (8007208 <_cleanup_r+0x8>)
 8007202:	f000 b885 	b.w	8007310 <_fwalk_reent>
 8007206:	bf00      	nop
 8007208:	08008c5d 	.word	0x08008c5d

0800720c <__sfmoreglue>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	2568      	movs	r5, #104	; 0x68
 8007210:	1e4a      	subs	r2, r1, #1
 8007212:	4355      	muls	r5, r2
 8007214:	460e      	mov	r6, r1
 8007216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800721a:	f001 f859 	bl	80082d0 <_malloc_r>
 800721e:	4604      	mov	r4, r0
 8007220:	b140      	cbz	r0, 8007234 <__sfmoreglue+0x28>
 8007222:	2100      	movs	r1, #0
 8007224:	e9c0 1600 	strd	r1, r6, [r0]
 8007228:	300c      	adds	r0, #12
 800722a:	60a0      	str	r0, [r4, #8]
 800722c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007230:	f7fd fc4a 	bl	8004ac8 <memset>
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}

08007238 <__sinit>:
 8007238:	6983      	ldr	r3, [r0, #24]
 800723a:	b510      	push	{r4, lr}
 800723c:	4604      	mov	r4, r0
 800723e:	bb33      	cbnz	r3, 800728e <__sinit+0x56>
 8007240:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007244:	6503      	str	r3, [r0, #80]	; 0x50
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <__sinit+0x58>)
 8007248:	4a12      	ldr	r2, [pc, #72]	; (8007294 <__sinit+0x5c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6282      	str	r2, [r0, #40]	; 0x28
 800724e:	4298      	cmp	r0, r3
 8007250:	bf04      	itt	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	6183      	streq	r3, [r0, #24]
 8007256:	f000 f81f 	bl	8007298 <__sfp>
 800725a:	6060      	str	r0, [r4, #4]
 800725c:	4620      	mov	r0, r4
 800725e:	f000 f81b 	bl	8007298 <__sfp>
 8007262:	60a0      	str	r0, [r4, #8]
 8007264:	4620      	mov	r0, r4
 8007266:	f000 f817 	bl	8007298 <__sfp>
 800726a:	2200      	movs	r2, #0
 800726c:	60e0      	str	r0, [r4, #12]
 800726e:	2104      	movs	r1, #4
 8007270:	6860      	ldr	r0, [r4, #4]
 8007272:	f7ff ffa1 	bl	80071b8 <std>
 8007276:	2201      	movs	r2, #1
 8007278:	2109      	movs	r1, #9
 800727a:	68a0      	ldr	r0, [r4, #8]
 800727c:	f7ff ff9c 	bl	80071b8 <std>
 8007280:	2202      	movs	r2, #2
 8007282:	2112      	movs	r1, #18
 8007284:	68e0      	ldr	r0, [r4, #12]
 8007286:	f7ff ff97 	bl	80071b8 <std>
 800728a:	2301      	movs	r3, #1
 800728c:	61a3      	str	r3, [r4, #24]
 800728e:	bd10      	pop	{r4, pc}
 8007290:	08008f1c 	.word	0x08008f1c
 8007294:	08007201 	.word	0x08007201

08007298 <__sfp>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <__sfp+0x70>)
 800729c:	4607      	mov	r7, r0
 800729e:	681e      	ldr	r6, [r3, #0]
 80072a0:	69b3      	ldr	r3, [r6, #24]
 80072a2:	b913      	cbnz	r3, 80072aa <__sfp+0x12>
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff ffc7 	bl	8007238 <__sinit>
 80072aa:	3648      	adds	r6, #72	; 0x48
 80072ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	d503      	bpl.n	80072bc <__sfp+0x24>
 80072b4:	6833      	ldr	r3, [r6, #0]
 80072b6:	b133      	cbz	r3, 80072c6 <__sfp+0x2e>
 80072b8:	6836      	ldr	r6, [r6, #0]
 80072ba:	e7f7      	b.n	80072ac <__sfp+0x14>
 80072bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072c0:	b16d      	cbz	r5, 80072de <__sfp+0x46>
 80072c2:	3468      	adds	r4, #104	; 0x68
 80072c4:	e7f4      	b.n	80072b0 <__sfp+0x18>
 80072c6:	2104      	movs	r1, #4
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ff9f 	bl	800720c <__sfmoreglue>
 80072ce:	6030      	str	r0, [r6, #0]
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d1f1      	bne.n	80072b8 <__sfp+0x20>
 80072d4:	230c      	movs	r3, #12
 80072d6:	4604      	mov	r4, r0
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4620      	mov	r0, r4
 80072dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <__sfp+0x74>)
 80072e0:	6665      	str	r5, [r4, #100]	; 0x64
 80072e2:	e9c4 5500 	strd	r5, r5, [r4]
 80072e6:	60a5      	str	r5, [r4, #8]
 80072e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80072ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80072f0:	2208      	movs	r2, #8
 80072f2:	4629      	mov	r1, r5
 80072f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072f8:	f7fd fbe6 	bl	8004ac8 <memset>
 80072fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007300:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007304:	e7e9      	b.n	80072da <__sfp+0x42>
 8007306:	bf00      	nop
 8007308:	08008f1c 	.word	0x08008f1c
 800730c:	ffff0001 	.word	0xffff0001

08007310 <_fwalk_reent>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4680      	mov	r8, r0
 8007316:	4689      	mov	r9, r1
 8007318:	2600      	movs	r6, #0
 800731a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800731e:	b914      	cbnz	r4, 8007326 <_fwalk_reent+0x16>
 8007320:	4630      	mov	r0, r6
 8007322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007326:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800732a:	3f01      	subs	r7, #1
 800732c:	d501      	bpl.n	8007332 <_fwalk_reent+0x22>
 800732e:	6824      	ldr	r4, [r4, #0]
 8007330:	e7f5      	b.n	800731e <_fwalk_reent+0xe>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d907      	bls.n	8007348 <_fwalk_reent+0x38>
 8007338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800733c:	3301      	adds	r3, #1
 800733e:	d003      	beq.n	8007348 <_fwalk_reent+0x38>
 8007340:	4629      	mov	r1, r5
 8007342:	4640      	mov	r0, r8
 8007344:	47c8      	blx	r9
 8007346:	4306      	orrs	r6, r0
 8007348:	3568      	adds	r5, #104	; 0x68
 800734a:	e7ee      	b.n	800732a <_fwalk_reent+0x1a>

0800734c <rshift>:
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	6906      	ldr	r6, [r0, #16]
 8007350:	114b      	asrs	r3, r1, #5
 8007352:	429e      	cmp	r6, r3
 8007354:	f100 0414 	add.w	r4, r0, #20
 8007358:	dd31      	ble.n	80073be <rshift+0x72>
 800735a:	f011 011f 	ands.w	r1, r1, #31
 800735e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007362:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007366:	d108      	bne.n	800737a <rshift+0x2e>
 8007368:	4621      	mov	r1, r4
 800736a:	42b2      	cmp	r2, r6
 800736c:	460b      	mov	r3, r1
 800736e:	d211      	bcs.n	8007394 <rshift+0x48>
 8007370:	f852 3b04 	ldr.w	r3, [r2], #4
 8007374:	f841 3b04 	str.w	r3, [r1], #4
 8007378:	e7f7      	b.n	800736a <rshift+0x1e>
 800737a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800737e:	4623      	mov	r3, r4
 8007380:	f1c1 0c20 	rsb	ip, r1, #32
 8007384:	40cd      	lsrs	r5, r1
 8007386:	3204      	adds	r2, #4
 8007388:	42b2      	cmp	r2, r6
 800738a:	4617      	mov	r7, r2
 800738c:	d30d      	bcc.n	80073aa <rshift+0x5e>
 800738e:	601d      	str	r5, [r3, #0]
 8007390:	b105      	cbz	r5, 8007394 <rshift+0x48>
 8007392:	3304      	adds	r3, #4
 8007394:	42a3      	cmp	r3, r4
 8007396:	eba3 0204 	sub.w	r2, r3, r4
 800739a:	bf08      	it	eq
 800739c:	2300      	moveq	r3, #0
 800739e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80073a2:	6102      	str	r2, [r0, #16]
 80073a4:	bf08      	it	eq
 80073a6:	6143      	streq	r3, [r0, #20]
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073aa:	683f      	ldr	r7, [r7, #0]
 80073ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80073b0:	433d      	orrs	r5, r7
 80073b2:	f843 5b04 	str.w	r5, [r3], #4
 80073b6:	f852 5b04 	ldr.w	r5, [r2], #4
 80073ba:	40cd      	lsrs	r5, r1
 80073bc:	e7e4      	b.n	8007388 <rshift+0x3c>
 80073be:	4623      	mov	r3, r4
 80073c0:	e7e8      	b.n	8007394 <rshift+0x48>

080073c2 <__hexdig_fun>:
 80073c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073c6:	2b09      	cmp	r3, #9
 80073c8:	d802      	bhi.n	80073d0 <__hexdig_fun+0xe>
 80073ca:	3820      	subs	r0, #32
 80073cc:	b2c0      	uxtb	r0, r0
 80073ce:	4770      	bx	lr
 80073d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80073d4:	2b05      	cmp	r3, #5
 80073d6:	d801      	bhi.n	80073dc <__hexdig_fun+0x1a>
 80073d8:	3847      	subs	r0, #71	; 0x47
 80073da:	e7f7      	b.n	80073cc <__hexdig_fun+0xa>
 80073dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80073e0:	2b05      	cmp	r3, #5
 80073e2:	d801      	bhi.n	80073e8 <__hexdig_fun+0x26>
 80073e4:	3827      	subs	r0, #39	; 0x27
 80073e6:	e7f1      	b.n	80073cc <__hexdig_fun+0xa>
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr

080073ec <__gethex>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	b08b      	sub	sp, #44	; 0x2c
 80073f2:	9002      	str	r0, [sp, #8]
 80073f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80073f6:	468a      	mov	sl, r1
 80073f8:	4690      	mov	r8, r2
 80073fa:	9306      	str	r3, [sp, #24]
 80073fc:	f000 fad1 	bl	80079a2 <__localeconv_l>
 8007400:	6803      	ldr	r3, [r0, #0]
 8007402:	f04f 0b00 	mov.w	fp, #0
 8007406:	4618      	mov	r0, r3
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	f7f8 fea1 	bl	8000150 <strlen>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	9001      	str	r0, [sp, #4]
 8007412:	4403      	add	r3, r0
 8007414:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007418:	9307      	str	r3, [sp, #28]
 800741a:	f8da 3000 	ldr.w	r3, [sl]
 800741e:	3302      	adds	r3, #2
 8007420:	461f      	mov	r7, r3
 8007422:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007426:	2830      	cmp	r0, #48	; 0x30
 8007428:	d06c      	beq.n	8007504 <__gethex+0x118>
 800742a:	f7ff ffca 	bl	80073c2 <__hexdig_fun>
 800742e:	4604      	mov	r4, r0
 8007430:	2800      	cmp	r0, #0
 8007432:	d16a      	bne.n	800750a <__gethex+0x11e>
 8007434:	9a01      	ldr	r2, [sp, #4]
 8007436:	9903      	ldr	r1, [sp, #12]
 8007438:	4638      	mov	r0, r7
 800743a:	f001 fa86 	bl	800894a <strncmp>
 800743e:	2800      	cmp	r0, #0
 8007440:	d166      	bne.n	8007510 <__gethex+0x124>
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	5cf8      	ldrb	r0, [r7, r3]
 8007446:	18fe      	adds	r6, r7, r3
 8007448:	f7ff ffbb 	bl	80073c2 <__hexdig_fun>
 800744c:	2800      	cmp	r0, #0
 800744e:	d062      	beq.n	8007516 <__gethex+0x12a>
 8007450:	4633      	mov	r3, r6
 8007452:	7818      	ldrb	r0, [r3, #0]
 8007454:	461f      	mov	r7, r3
 8007456:	2830      	cmp	r0, #48	; 0x30
 8007458:	f103 0301 	add.w	r3, r3, #1
 800745c:	d0f9      	beq.n	8007452 <__gethex+0x66>
 800745e:	f7ff ffb0 	bl	80073c2 <__hexdig_fun>
 8007462:	fab0 f580 	clz	r5, r0
 8007466:	4634      	mov	r4, r6
 8007468:	f04f 0b01 	mov.w	fp, #1
 800746c:	096d      	lsrs	r5, r5, #5
 800746e:	463a      	mov	r2, r7
 8007470:	4616      	mov	r6, r2
 8007472:	7830      	ldrb	r0, [r6, #0]
 8007474:	3201      	adds	r2, #1
 8007476:	f7ff ffa4 	bl	80073c2 <__hexdig_fun>
 800747a:	2800      	cmp	r0, #0
 800747c:	d1f8      	bne.n	8007470 <__gethex+0x84>
 800747e:	9a01      	ldr	r2, [sp, #4]
 8007480:	9903      	ldr	r1, [sp, #12]
 8007482:	4630      	mov	r0, r6
 8007484:	f001 fa61 	bl	800894a <strncmp>
 8007488:	b950      	cbnz	r0, 80074a0 <__gethex+0xb4>
 800748a:	b954      	cbnz	r4, 80074a2 <__gethex+0xb6>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	18f4      	adds	r4, r6, r3
 8007490:	4622      	mov	r2, r4
 8007492:	4616      	mov	r6, r2
 8007494:	7830      	ldrb	r0, [r6, #0]
 8007496:	3201      	adds	r2, #1
 8007498:	f7ff ff93 	bl	80073c2 <__hexdig_fun>
 800749c:	2800      	cmp	r0, #0
 800749e:	d1f8      	bne.n	8007492 <__gethex+0xa6>
 80074a0:	b10c      	cbz	r4, 80074a6 <__gethex+0xba>
 80074a2:	1ba4      	subs	r4, r4, r6
 80074a4:	00a4      	lsls	r4, r4, #2
 80074a6:	7833      	ldrb	r3, [r6, #0]
 80074a8:	2b50      	cmp	r3, #80	; 0x50
 80074aa:	d001      	beq.n	80074b0 <__gethex+0xc4>
 80074ac:	2b70      	cmp	r3, #112	; 0x70
 80074ae:	d140      	bne.n	8007532 <__gethex+0x146>
 80074b0:	7873      	ldrb	r3, [r6, #1]
 80074b2:	2b2b      	cmp	r3, #43	; 0x2b
 80074b4:	d031      	beq.n	800751a <__gethex+0x12e>
 80074b6:	2b2d      	cmp	r3, #45	; 0x2d
 80074b8:	d033      	beq.n	8007522 <__gethex+0x136>
 80074ba:	f04f 0900 	mov.w	r9, #0
 80074be:	1c71      	adds	r1, r6, #1
 80074c0:	7808      	ldrb	r0, [r1, #0]
 80074c2:	f7ff ff7e 	bl	80073c2 <__hexdig_fun>
 80074c6:	1e43      	subs	r3, r0, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b18      	cmp	r3, #24
 80074cc:	d831      	bhi.n	8007532 <__gethex+0x146>
 80074ce:	f1a0 0210 	sub.w	r2, r0, #16
 80074d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074d6:	f7ff ff74 	bl	80073c2 <__hexdig_fun>
 80074da:	1e43      	subs	r3, r0, #1
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b18      	cmp	r3, #24
 80074e0:	d922      	bls.n	8007528 <__gethex+0x13c>
 80074e2:	f1b9 0f00 	cmp.w	r9, #0
 80074e6:	d000      	beq.n	80074ea <__gethex+0xfe>
 80074e8:	4252      	negs	r2, r2
 80074ea:	4414      	add	r4, r2
 80074ec:	f8ca 1000 	str.w	r1, [sl]
 80074f0:	b30d      	cbz	r5, 8007536 <__gethex+0x14a>
 80074f2:	f1bb 0f00 	cmp.w	fp, #0
 80074f6:	bf0c      	ite	eq
 80074f8:	2706      	moveq	r7, #6
 80074fa:	2700      	movne	r7, #0
 80074fc:	4638      	mov	r0, r7
 80074fe:	b00b      	add	sp, #44	; 0x2c
 8007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007504:	f10b 0b01 	add.w	fp, fp, #1
 8007508:	e78a      	b.n	8007420 <__gethex+0x34>
 800750a:	2500      	movs	r5, #0
 800750c:	462c      	mov	r4, r5
 800750e:	e7ae      	b.n	800746e <__gethex+0x82>
 8007510:	463e      	mov	r6, r7
 8007512:	2501      	movs	r5, #1
 8007514:	e7c7      	b.n	80074a6 <__gethex+0xba>
 8007516:	4604      	mov	r4, r0
 8007518:	e7fb      	b.n	8007512 <__gethex+0x126>
 800751a:	f04f 0900 	mov.w	r9, #0
 800751e:	1cb1      	adds	r1, r6, #2
 8007520:	e7ce      	b.n	80074c0 <__gethex+0xd4>
 8007522:	f04f 0901 	mov.w	r9, #1
 8007526:	e7fa      	b.n	800751e <__gethex+0x132>
 8007528:	230a      	movs	r3, #10
 800752a:	fb03 0202 	mla	r2, r3, r2, r0
 800752e:	3a10      	subs	r2, #16
 8007530:	e7cf      	b.n	80074d2 <__gethex+0xe6>
 8007532:	4631      	mov	r1, r6
 8007534:	e7da      	b.n	80074ec <__gethex+0x100>
 8007536:	4629      	mov	r1, r5
 8007538:	1bf3      	subs	r3, r6, r7
 800753a:	3b01      	subs	r3, #1
 800753c:	2b07      	cmp	r3, #7
 800753e:	dc49      	bgt.n	80075d4 <__gethex+0x1e8>
 8007540:	9802      	ldr	r0, [sp, #8]
 8007542:	f000 fa72 	bl	8007a2a <_Balloc>
 8007546:	f04f 0b00 	mov.w	fp, #0
 800754a:	4605      	mov	r5, r0
 800754c:	46da      	mov	sl, fp
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	f100 0914 	add.w	r9, r0, #20
 8007554:	f1c3 0301 	rsb	r3, r3, #1
 8007558:	f8cd 9010 	str.w	r9, [sp, #16]
 800755c:	9308      	str	r3, [sp, #32]
 800755e:	42b7      	cmp	r7, r6
 8007560:	d33b      	bcc.n	80075da <__gethex+0x1ee>
 8007562:	9804      	ldr	r0, [sp, #16]
 8007564:	f840 ab04 	str.w	sl, [r0], #4
 8007568:	eba0 0009 	sub.w	r0, r0, r9
 800756c:	1080      	asrs	r0, r0, #2
 800756e:	6128      	str	r0, [r5, #16]
 8007570:	0147      	lsls	r7, r0, #5
 8007572:	4650      	mov	r0, sl
 8007574:	f000 fb1d 	bl	8007bb2 <__hi0bits>
 8007578:	f8d8 6000 	ldr.w	r6, [r8]
 800757c:	1a3f      	subs	r7, r7, r0
 800757e:	42b7      	cmp	r7, r6
 8007580:	dd64      	ble.n	800764c <__gethex+0x260>
 8007582:	1bbf      	subs	r7, r7, r6
 8007584:	4639      	mov	r1, r7
 8007586:	4628      	mov	r0, r5
 8007588:	f000 fe27 	bl	80081da <__any_on>
 800758c:	4682      	mov	sl, r0
 800758e:	b178      	cbz	r0, 80075b0 <__gethex+0x1c4>
 8007590:	f04f 0a01 	mov.w	sl, #1
 8007594:	1e7b      	subs	r3, r7, #1
 8007596:	1159      	asrs	r1, r3, #5
 8007598:	f003 021f 	and.w	r2, r3, #31
 800759c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80075a0:	fa0a f202 	lsl.w	r2, sl, r2
 80075a4:	420a      	tst	r2, r1
 80075a6:	d003      	beq.n	80075b0 <__gethex+0x1c4>
 80075a8:	4553      	cmp	r3, sl
 80075aa:	dc46      	bgt.n	800763a <__gethex+0x24e>
 80075ac:	f04f 0a02 	mov.w	sl, #2
 80075b0:	4639      	mov	r1, r7
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7ff feca 	bl	800734c <rshift>
 80075b8:	443c      	add	r4, r7
 80075ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075be:	42a3      	cmp	r3, r4
 80075c0:	da52      	bge.n	8007668 <__gethex+0x27c>
 80075c2:	4629      	mov	r1, r5
 80075c4:	9802      	ldr	r0, [sp, #8]
 80075c6:	f000 fa64 	bl	8007a92 <_Bfree>
 80075ca:	2300      	movs	r3, #0
 80075cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075ce:	27a3      	movs	r7, #163	; 0xa3
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e793      	b.n	80074fc <__gethex+0x110>
 80075d4:	3101      	adds	r1, #1
 80075d6:	105b      	asrs	r3, r3, #1
 80075d8:	e7b0      	b.n	800753c <__gethex+0x150>
 80075da:	1e73      	subs	r3, r6, #1
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	9a07      	ldr	r2, [sp, #28]
 80075e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d018      	beq.n	800761a <__gethex+0x22e>
 80075e8:	f1bb 0f20 	cmp.w	fp, #32
 80075ec:	d107      	bne.n	80075fe <__gethex+0x212>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	f8c3 a000 	str.w	sl, [r3]
 80075f4:	f04f 0a00 	mov.w	sl, #0
 80075f8:	46d3      	mov	fp, sl
 80075fa:	3304      	adds	r3, #4
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007602:	f7ff fede 	bl	80073c2 <__hexdig_fun>
 8007606:	f000 000f 	and.w	r0, r0, #15
 800760a:	fa00 f00b 	lsl.w	r0, r0, fp
 800760e:	ea4a 0a00 	orr.w	sl, sl, r0
 8007612:	f10b 0b04 	add.w	fp, fp, #4
 8007616:	9b05      	ldr	r3, [sp, #20]
 8007618:	e00d      	b.n	8007636 <__gethex+0x24a>
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	9a08      	ldr	r2, [sp, #32]
 800761e:	4413      	add	r3, r2
 8007620:	42bb      	cmp	r3, r7
 8007622:	d3e1      	bcc.n	80075e8 <__gethex+0x1fc>
 8007624:	4618      	mov	r0, r3
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	9903      	ldr	r1, [sp, #12]
 800762a:	9309      	str	r3, [sp, #36]	; 0x24
 800762c:	f001 f98d 	bl	800894a <strncmp>
 8007630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007632:	2800      	cmp	r0, #0
 8007634:	d1d8      	bne.n	80075e8 <__gethex+0x1fc>
 8007636:	461e      	mov	r6, r3
 8007638:	e791      	b.n	800755e <__gethex+0x172>
 800763a:	1eb9      	subs	r1, r7, #2
 800763c:	4628      	mov	r0, r5
 800763e:	f000 fdcc 	bl	80081da <__any_on>
 8007642:	2800      	cmp	r0, #0
 8007644:	d0b2      	beq.n	80075ac <__gethex+0x1c0>
 8007646:	f04f 0a03 	mov.w	sl, #3
 800764a:	e7b1      	b.n	80075b0 <__gethex+0x1c4>
 800764c:	da09      	bge.n	8007662 <__gethex+0x276>
 800764e:	1bf7      	subs	r7, r6, r7
 8007650:	4629      	mov	r1, r5
 8007652:	463a      	mov	r2, r7
 8007654:	9802      	ldr	r0, [sp, #8]
 8007656:	f000 fbe7 	bl	8007e28 <__lshift>
 800765a:	4605      	mov	r5, r0
 800765c:	1be4      	subs	r4, r4, r7
 800765e:	f100 0914 	add.w	r9, r0, #20
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	e7a8      	b.n	80075ba <__gethex+0x1ce>
 8007668:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800766c:	42a0      	cmp	r0, r4
 800766e:	dd6b      	ble.n	8007748 <__gethex+0x35c>
 8007670:	1b04      	subs	r4, r0, r4
 8007672:	42a6      	cmp	r6, r4
 8007674:	dc2e      	bgt.n	80076d4 <__gethex+0x2e8>
 8007676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d022      	beq.n	80076c4 <__gethex+0x2d8>
 800767e:	2b03      	cmp	r3, #3
 8007680:	d024      	beq.n	80076cc <__gethex+0x2e0>
 8007682:	2b01      	cmp	r3, #1
 8007684:	d115      	bne.n	80076b2 <__gethex+0x2c6>
 8007686:	42a6      	cmp	r6, r4
 8007688:	d113      	bne.n	80076b2 <__gethex+0x2c6>
 800768a:	2e01      	cmp	r6, #1
 800768c:	dc0b      	bgt.n	80076a6 <__gethex+0x2ba>
 800768e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007692:	9a06      	ldr	r2, [sp, #24]
 8007694:	2762      	movs	r7, #98	; 0x62
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	2301      	movs	r3, #1
 800769a:	612b      	str	r3, [r5, #16]
 800769c:	f8c9 3000 	str.w	r3, [r9]
 80076a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076a2:	601d      	str	r5, [r3, #0]
 80076a4:	e72a      	b.n	80074fc <__gethex+0x110>
 80076a6:	1e71      	subs	r1, r6, #1
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 fd96 	bl	80081da <__any_on>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d1ed      	bne.n	800768e <__gethex+0x2a2>
 80076b2:	4629      	mov	r1, r5
 80076b4:	9802      	ldr	r0, [sp, #8]
 80076b6:	f000 f9ec 	bl	8007a92 <_Bfree>
 80076ba:	2300      	movs	r3, #0
 80076bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076be:	2750      	movs	r7, #80	; 0x50
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	e71b      	b.n	80074fc <__gethex+0x110>
 80076c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0e1      	beq.n	800768e <__gethex+0x2a2>
 80076ca:	e7f2      	b.n	80076b2 <__gethex+0x2c6>
 80076cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1dd      	bne.n	800768e <__gethex+0x2a2>
 80076d2:	e7ee      	b.n	80076b2 <__gethex+0x2c6>
 80076d4:	1e67      	subs	r7, r4, #1
 80076d6:	f1ba 0f00 	cmp.w	sl, #0
 80076da:	d132      	bne.n	8007742 <__gethex+0x356>
 80076dc:	b127      	cbz	r7, 80076e8 <__gethex+0x2fc>
 80076de:	4639      	mov	r1, r7
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 fd7a 	bl	80081da <__any_on>
 80076e6:	4682      	mov	sl, r0
 80076e8:	2301      	movs	r3, #1
 80076ea:	117a      	asrs	r2, r7, #5
 80076ec:	f007 071f 	and.w	r7, r7, #31
 80076f0:	fa03 f707 	lsl.w	r7, r3, r7
 80076f4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80076f8:	4621      	mov	r1, r4
 80076fa:	421f      	tst	r7, r3
 80076fc:	f04f 0702 	mov.w	r7, #2
 8007700:	4628      	mov	r0, r5
 8007702:	bf18      	it	ne
 8007704:	f04a 0a02 	orrne.w	sl, sl, #2
 8007708:	1b36      	subs	r6, r6, r4
 800770a:	f7ff fe1f 	bl	800734c <rshift>
 800770e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007712:	f1ba 0f00 	cmp.w	sl, #0
 8007716:	d048      	beq.n	80077aa <__gethex+0x3be>
 8007718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d015      	beq.n	800774c <__gethex+0x360>
 8007720:	2b03      	cmp	r3, #3
 8007722:	d017      	beq.n	8007754 <__gethex+0x368>
 8007724:	2b01      	cmp	r3, #1
 8007726:	d109      	bne.n	800773c <__gethex+0x350>
 8007728:	f01a 0f02 	tst.w	sl, #2
 800772c:	d006      	beq.n	800773c <__gethex+0x350>
 800772e:	f8d9 3000 	ldr.w	r3, [r9]
 8007732:	ea4a 0a03 	orr.w	sl, sl, r3
 8007736:	f01a 0f01 	tst.w	sl, #1
 800773a:	d10e      	bne.n	800775a <__gethex+0x36e>
 800773c:	f047 0710 	orr.w	r7, r7, #16
 8007740:	e033      	b.n	80077aa <__gethex+0x3be>
 8007742:	f04f 0a01 	mov.w	sl, #1
 8007746:	e7cf      	b.n	80076e8 <__gethex+0x2fc>
 8007748:	2701      	movs	r7, #1
 800774a:	e7e2      	b.n	8007712 <__gethex+0x326>
 800774c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800774e:	f1c3 0301 	rsb	r3, r3, #1
 8007752:	9315      	str	r3, [sp, #84]	; 0x54
 8007754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <__gethex+0x350>
 800775a:	f04f 0c00 	mov.w	ip, #0
 800775e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007762:	f105 0314 	add.w	r3, r5, #20
 8007766:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800776a:	eb03 010a 	add.w	r1, r3, sl
 800776e:	4618      	mov	r0, r3
 8007770:	f853 2b04 	ldr.w	r2, [r3], #4
 8007774:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007778:	d01c      	beq.n	80077b4 <__gethex+0x3c8>
 800777a:	3201      	adds	r2, #1
 800777c:	6002      	str	r2, [r0, #0]
 800777e:	2f02      	cmp	r7, #2
 8007780:	f105 0314 	add.w	r3, r5, #20
 8007784:	d138      	bne.n	80077f8 <__gethex+0x40c>
 8007786:	f8d8 2000 	ldr.w	r2, [r8]
 800778a:	3a01      	subs	r2, #1
 800778c:	42b2      	cmp	r2, r6
 800778e:	d10a      	bne.n	80077a6 <__gethex+0x3ba>
 8007790:	2201      	movs	r2, #1
 8007792:	1171      	asrs	r1, r6, #5
 8007794:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007798:	f006 061f 	and.w	r6, r6, #31
 800779c:	fa02 f606 	lsl.w	r6, r2, r6
 80077a0:	421e      	tst	r6, r3
 80077a2:	bf18      	it	ne
 80077a4:	4617      	movne	r7, r2
 80077a6:	f047 0720 	orr.w	r7, r7, #32
 80077aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077ac:	601d      	str	r5, [r3, #0]
 80077ae:	9b06      	ldr	r3, [sp, #24]
 80077b0:	601c      	str	r4, [r3, #0]
 80077b2:	e6a3      	b.n	80074fc <__gethex+0x110>
 80077b4:	4299      	cmp	r1, r3
 80077b6:	f843 cc04 	str.w	ip, [r3, #-4]
 80077ba:	d8d8      	bhi.n	800776e <__gethex+0x382>
 80077bc:	68ab      	ldr	r3, [r5, #8]
 80077be:	4599      	cmp	r9, r3
 80077c0:	db12      	blt.n	80077e8 <__gethex+0x3fc>
 80077c2:	6869      	ldr	r1, [r5, #4]
 80077c4:	9802      	ldr	r0, [sp, #8]
 80077c6:	3101      	adds	r1, #1
 80077c8:	f000 f92f 	bl	8007a2a <_Balloc>
 80077cc:	4683      	mov	fp, r0
 80077ce:	692a      	ldr	r2, [r5, #16]
 80077d0:	f105 010c 	add.w	r1, r5, #12
 80077d4:	3202      	adds	r2, #2
 80077d6:	0092      	lsls	r2, r2, #2
 80077d8:	300c      	adds	r0, #12
 80077da:	f000 f91b 	bl	8007a14 <memcpy>
 80077de:	4629      	mov	r1, r5
 80077e0:	9802      	ldr	r0, [sp, #8]
 80077e2:	f000 f956 	bl	8007a92 <_Bfree>
 80077e6:	465d      	mov	r5, fp
 80077e8:	692b      	ldr	r3, [r5, #16]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	612a      	str	r2, [r5, #16]
 80077ee:	2201      	movs	r2, #1
 80077f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80077f4:	615a      	str	r2, [r3, #20]
 80077f6:	e7c2      	b.n	800777e <__gethex+0x392>
 80077f8:	692a      	ldr	r2, [r5, #16]
 80077fa:	454a      	cmp	r2, r9
 80077fc:	dd0b      	ble.n	8007816 <__gethex+0x42a>
 80077fe:	2101      	movs	r1, #1
 8007800:	4628      	mov	r0, r5
 8007802:	f7ff fda3 	bl	800734c <rshift>
 8007806:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800780a:	3401      	adds	r4, #1
 800780c:	42a3      	cmp	r3, r4
 800780e:	f6ff aed8 	blt.w	80075c2 <__gethex+0x1d6>
 8007812:	2701      	movs	r7, #1
 8007814:	e7c7      	b.n	80077a6 <__gethex+0x3ba>
 8007816:	f016 061f 	ands.w	r6, r6, #31
 800781a:	d0fa      	beq.n	8007812 <__gethex+0x426>
 800781c:	449a      	add	sl, r3
 800781e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007822:	f000 f9c6 	bl	8007bb2 <__hi0bits>
 8007826:	f1c6 0620 	rsb	r6, r6, #32
 800782a:	42b0      	cmp	r0, r6
 800782c:	dbe7      	blt.n	80077fe <__gethex+0x412>
 800782e:	e7f0      	b.n	8007812 <__gethex+0x426>

08007830 <L_shift>:
 8007830:	f1c2 0208 	rsb	r2, r2, #8
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	f1c2 0620 	rsb	r6, r2, #32
 800783c:	6843      	ldr	r3, [r0, #4]
 800783e:	6804      	ldr	r4, [r0, #0]
 8007840:	fa03 f506 	lsl.w	r5, r3, r6
 8007844:	432c      	orrs	r4, r5
 8007846:	40d3      	lsrs	r3, r2
 8007848:	6004      	str	r4, [r0, #0]
 800784a:	f840 3f04 	str.w	r3, [r0, #4]!
 800784e:	4288      	cmp	r0, r1
 8007850:	d3f4      	bcc.n	800783c <L_shift+0xc>
 8007852:	bd70      	pop	{r4, r5, r6, pc}

08007854 <__match>:
 8007854:	b530      	push	{r4, r5, lr}
 8007856:	6803      	ldr	r3, [r0, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785e:	b914      	cbnz	r4, 8007866 <__match+0x12>
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	2001      	movs	r0, #1
 8007864:	bd30      	pop	{r4, r5, pc}
 8007866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800786a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800786e:	2d19      	cmp	r5, #25
 8007870:	bf98      	it	ls
 8007872:	3220      	addls	r2, #32
 8007874:	42a2      	cmp	r2, r4
 8007876:	d0f0      	beq.n	800785a <__match+0x6>
 8007878:	2000      	movs	r0, #0
 800787a:	e7f3      	b.n	8007864 <__match+0x10>

0800787c <__hexnan>:
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	2500      	movs	r5, #0
 8007882:	680b      	ldr	r3, [r1, #0]
 8007884:	4682      	mov	sl, r0
 8007886:	115f      	asrs	r7, r3, #5
 8007888:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800788c:	f013 031f 	ands.w	r3, r3, #31
 8007890:	bf18      	it	ne
 8007892:	3704      	addne	r7, #4
 8007894:	1f3e      	subs	r6, r7, #4
 8007896:	4690      	mov	r8, r2
 8007898:	46b1      	mov	r9, r6
 800789a:	4634      	mov	r4, r6
 800789c:	46ab      	mov	fp, r5
 800789e:	b087      	sub	sp, #28
 80078a0:	6801      	ldr	r1, [r0, #0]
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f847 5c04 	str.w	r5, [r7, #-4]
 80078a8:	9502      	str	r5, [sp, #8]
 80078aa:	784a      	ldrb	r2, [r1, #1]
 80078ac:	1c4b      	adds	r3, r1, #1
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	b342      	cbz	r2, 8007904 <__hexnan+0x88>
 80078b2:	4610      	mov	r0, r2
 80078b4:	9105      	str	r1, [sp, #20]
 80078b6:	9204      	str	r2, [sp, #16]
 80078b8:	f7ff fd83 	bl	80073c2 <__hexdig_fun>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d143      	bne.n	8007948 <__hexnan+0xcc>
 80078c0:	9a04      	ldr	r2, [sp, #16]
 80078c2:	9905      	ldr	r1, [sp, #20]
 80078c4:	2a20      	cmp	r2, #32
 80078c6:	d818      	bhi.n	80078fa <__hexnan+0x7e>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	459b      	cmp	fp, r3
 80078cc:	dd13      	ble.n	80078f6 <__hexnan+0x7a>
 80078ce:	454c      	cmp	r4, r9
 80078d0:	d206      	bcs.n	80078e0 <__hexnan+0x64>
 80078d2:	2d07      	cmp	r5, #7
 80078d4:	dc04      	bgt.n	80078e0 <__hexnan+0x64>
 80078d6:	462a      	mov	r2, r5
 80078d8:	4649      	mov	r1, r9
 80078da:	4620      	mov	r0, r4
 80078dc:	f7ff ffa8 	bl	8007830 <L_shift>
 80078e0:	4544      	cmp	r4, r8
 80078e2:	d944      	bls.n	800796e <__hexnan+0xf2>
 80078e4:	2300      	movs	r3, #0
 80078e6:	f1a4 0904 	sub.w	r9, r4, #4
 80078ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80078ee:	461d      	mov	r5, r3
 80078f0:	464c      	mov	r4, r9
 80078f2:	f8cd b008 	str.w	fp, [sp, #8]
 80078f6:	9903      	ldr	r1, [sp, #12]
 80078f8:	e7d7      	b.n	80078aa <__hexnan+0x2e>
 80078fa:	2a29      	cmp	r2, #41	; 0x29
 80078fc:	d14a      	bne.n	8007994 <__hexnan+0x118>
 80078fe:	3102      	adds	r1, #2
 8007900:	f8ca 1000 	str.w	r1, [sl]
 8007904:	f1bb 0f00 	cmp.w	fp, #0
 8007908:	d044      	beq.n	8007994 <__hexnan+0x118>
 800790a:	454c      	cmp	r4, r9
 800790c:	d206      	bcs.n	800791c <__hexnan+0xa0>
 800790e:	2d07      	cmp	r5, #7
 8007910:	dc04      	bgt.n	800791c <__hexnan+0xa0>
 8007912:	462a      	mov	r2, r5
 8007914:	4649      	mov	r1, r9
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff ff8a 	bl	8007830 <L_shift>
 800791c:	4544      	cmp	r4, r8
 800791e:	d928      	bls.n	8007972 <__hexnan+0xf6>
 8007920:	4643      	mov	r3, r8
 8007922:	f854 2b04 	ldr.w	r2, [r4], #4
 8007926:	42a6      	cmp	r6, r4
 8007928:	f843 2b04 	str.w	r2, [r3], #4
 800792c:	d2f9      	bcs.n	8007922 <__hexnan+0xa6>
 800792e:	2200      	movs	r2, #0
 8007930:	f843 2b04 	str.w	r2, [r3], #4
 8007934:	429e      	cmp	r6, r3
 8007936:	d2fb      	bcs.n	8007930 <__hexnan+0xb4>
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	b91b      	cbnz	r3, 8007944 <__hexnan+0xc8>
 800793c:	4546      	cmp	r6, r8
 800793e:	d127      	bne.n	8007990 <__hexnan+0x114>
 8007940:	2301      	movs	r3, #1
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	2005      	movs	r0, #5
 8007946:	e026      	b.n	8007996 <__hexnan+0x11a>
 8007948:	3501      	adds	r5, #1
 800794a:	2d08      	cmp	r5, #8
 800794c:	f10b 0b01 	add.w	fp, fp, #1
 8007950:	dd06      	ble.n	8007960 <__hexnan+0xe4>
 8007952:	4544      	cmp	r4, r8
 8007954:	d9cf      	bls.n	80078f6 <__hexnan+0x7a>
 8007956:	2300      	movs	r3, #0
 8007958:	2501      	movs	r5, #1
 800795a:	f844 3c04 	str.w	r3, [r4, #-4]
 800795e:	3c04      	subs	r4, #4
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	f000 000f 	and.w	r0, r0, #15
 8007966:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800796a:	6020      	str	r0, [r4, #0]
 800796c:	e7c3      	b.n	80078f6 <__hexnan+0x7a>
 800796e:	2508      	movs	r5, #8
 8007970:	e7c1      	b.n	80078f6 <__hexnan+0x7a>
 8007972:	9b01      	ldr	r3, [sp, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0df      	beq.n	8007938 <__hexnan+0xbc>
 8007978:	f04f 32ff 	mov.w	r2, #4294967295
 800797c:	f1c3 0320 	rsb	r3, r3, #32
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
 8007984:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007988:	401a      	ands	r2, r3
 800798a:	f847 2c04 	str.w	r2, [r7, #-4]
 800798e:	e7d3      	b.n	8007938 <__hexnan+0xbc>
 8007990:	3e04      	subs	r6, #4
 8007992:	e7d1      	b.n	8007938 <__hexnan+0xbc>
 8007994:	2004      	movs	r0, #4
 8007996:	b007      	add	sp, #28
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800799c <__locale_ctype_ptr_l>:
 800799c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80079a0:	4770      	bx	lr

080079a2 <__localeconv_l>:
 80079a2:	30f0      	adds	r0, #240	; 0xf0
 80079a4:	4770      	bx	lr
	...

080079a8 <_localeconv_r>:
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <_localeconv_r+0x14>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a18      	ldr	r0, [r3, #32]
 80079ae:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <_localeconv_r+0x18>)
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bf08      	it	eq
 80079b4:	4618      	moveq	r0, r3
 80079b6:	30f0      	adds	r0, #240	; 0xf0
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	2000000c 	.word	0x2000000c
 80079c0:	20000070 	.word	0x20000070

080079c4 <malloc>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <malloc+0xc>)
 80079c6:	4601      	mov	r1, r0
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	f000 bc81 	b.w	80082d0 <_malloc_r>
 80079ce:	bf00      	nop
 80079d0:	2000000c 	.word	0x2000000c

080079d4 <__ascii_mbtowc>:
 80079d4:	b082      	sub	sp, #8
 80079d6:	b901      	cbnz	r1, 80079da <__ascii_mbtowc+0x6>
 80079d8:	a901      	add	r1, sp, #4
 80079da:	b142      	cbz	r2, 80079ee <__ascii_mbtowc+0x1a>
 80079dc:	b14b      	cbz	r3, 80079f2 <__ascii_mbtowc+0x1e>
 80079de:	7813      	ldrb	r3, [r2, #0]
 80079e0:	600b      	str	r3, [r1, #0]
 80079e2:	7812      	ldrb	r2, [r2, #0]
 80079e4:	1c10      	adds	r0, r2, #0
 80079e6:	bf18      	it	ne
 80079e8:	2001      	movne	r0, #1
 80079ea:	b002      	add	sp, #8
 80079ec:	4770      	bx	lr
 80079ee:	4610      	mov	r0, r2
 80079f0:	e7fb      	b.n	80079ea <__ascii_mbtowc+0x16>
 80079f2:	f06f 0001 	mvn.w	r0, #1
 80079f6:	e7f8      	b.n	80079ea <__ascii_mbtowc+0x16>

080079f8 <memchr>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	b2c9      	uxtb	r1, r1
 80079fc:	4402      	add	r2, r0
 80079fe:	4290      	cmp	r0, r2
 8007a00:	4603      	mov	r3, r0
 8007a02:	d101      	bne.n	8007a08 <memchr+0x10>
 8007a04:	2300      	movs	r3, #0
 8007a06:	e003      	b.n	8007a10 <memchr+0x18>
 8007a08:	781c      	ldrb	r4, [r3, #0]
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	428c      	cmp	r4, r1
 8007a0e:	d1f6      	bne.n	80079fe <memchr+0x6>
 8007a10:	4618      	mov	r0, r3
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <memcpy>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	1e43      	subs	r3, r0, #1
 8007a18:	440a      	add	r2, r1
 8007a1a:	4291      	cmp	r1, r2
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	bd10      	pop	{r4, pc}
 8007a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a28:	e7f7      	b.n	8007a1a <memcpy+0x6>

08007a2a <_Balloc>:
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460e      	mov	r6, r1
 8007a32:	b93d      	cbnz	r5, 8007a44 <_Balloc+0x1a>
 8007a34:	2010      	movs	r0, #16
 8007a36:	f7ff ffc5 	bl	80079c4 <malloc>
 8007a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a3c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a40:	6005      	str	r5, [r0, #0]
 8007a42:	60c5      	str	r5, [r0, #12]
 8007a44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007a46:	68eb      	ldr	r3, [r5, #12]
 8007a48:	b183      	cbz	r3, 8007a6c <_Balloc+0x42>
 8007a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007a52:	b9b8      	cbnz	r0, 8007a84 <_Balloc+0x5a>
 8007a54:	2101      	movs	r1, #1
 8007a56:	fa01 f506 	lsl.w	r5, r1, r6
 8007a5a:	1d6a      	adds	r2, r5, #5
 8007a5c:	0092      	lsls	r2, r2, #2
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 fbdc 	bl	800821c <_calloc_r>
 8007a64:	b160      	cbz	r0, 8007a80 <_Balloc+0x56>
 8007a66:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007a6a:	e00e      	b.n	8007a8a <_Balloc+0x60>
 8007a6c:	2221      	movs	r2, #33	; 0x21
 8007a6e:	2104      	movs	r1, #4
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fbd3 	bl	800821c <_calloc_r>
 8007a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a78:	60e8      	str	r0, [r5, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e4      	bne.n	8007a4a <_Balloc+0x20>
 8007a80:	2000      	movs	r0, #0
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	6802      	ldr	r2, [r0, #0]
 8007a86:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a90:	e7f7      	b.n	8007a82 <_Balloc+0x58>

08007a92 <_Bfree>:
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a96:	4606      	mov	r6, r0
 8007a98:	460d      	mov	r5, r1
 8007a9a:	b93c      	cbnz	r4, 8007aac <_Bfree+0x1a>
 8007a9c:	2010      	movs	r0, #16
 8007a9e:	f7ff ff91 	bl	80079c4 <malloc>
 8007aa2:	6270      	str	r0, [r6, #36]	; 0x24
 8007aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007aa8:	6004      	str	r4, [r0, #0]
 8007aaa:	60c4      	str	r4, [r0, #12]
 8007aac:	b13d      	cbz	r5, 8007abe <_Bfree+0x2c>
 8007aae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ab0:	686a      	ldr	r2, [r5, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ab8:	6029      	str	r1, [r5, #0]
 8007aba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007abe:	bd70      	pop	{r4, r5, r6, pc}

08007ac0 <__multadd>:
 8007ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac4:	461f      	mov	r7, r3
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460c      	mov	r4, r1
 8007aca:	2300      	movs	r3, #0
 8007acc:	690d      	ldr	r5, [r1, #16]
 8007ace:	f101 0c14 	add.w	ip, r1, #20
 8007ad2:	f8dc 0000 	ldr.w	r0, [ip]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b281      	uxth	r1, r0
 8007ada:	fb02 7101 	mla	r1, r2, r1, r7
 8007ade:	0c00      	lsrs	r0, r0, #16
 8007ae0:	0c0f      	lsrs	r7, r1, #16
 8007ae2:	fb02 7000 	mla	r0, r2, r0, r7
 8007ae6:	b289      	uxth	r1, r1
 8007ae8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007aec:	429d      	cmp	r5, r3
 8007aee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007af2:	f84c 1b04 	str.w	r1, [ip], #4
 8007af6:	dcec      	bgt.n	8007ad2 <__multadd+0x12>
 8007af8:	b1d7      	cbz	r7, 8007b30 <__multadd+0x70>
 8007afa:	68a3      	ldr	r3, [r4, #8]
 8007afc:	42ab      	cmp	r3, r5
 8007afe:	dc12      	bgt.n	8007b26 <__multadd+0x66>
 8007b00:	6861      	ldr	r1, [r4, #4]
 8007b02:	4630      	mov	r0, r6
 8007b04:	3101      	adds	r1, #1
 8007b06:	f7ff ff90 	bl	8007a2a <_Balloc>
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	f104 010c 	add.w	r1, r4, #12
 8007b12:	3202      	adds	r2, #2
 8007b14:	0092      	lsls	r2, r2, #2
 8007b16:	300c      	adds	r0, #12
 8007b18:	f7ff ff7c 	bl	8007a14 <memcpy>
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ffb7 	bl	8007a92 <_Bfree>
 8007b24:	4644      	mov	r4, r8
 8007b26:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b2a:	3501      	adds	r5, #1
 8007b2c:	615f      	str	r7, [r3, #20]
 8007b2e:	6125      	str	r5, [r4, #16]
 8007b30:	4620      	mov	r0, r4
 8007b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b36 <__s2b>:
 8007b36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b3a:	4615      	mov	r5, r2
 8007b3c:	2209      	movs	r2, #9
 8007b3e:	461f      	mov	r7, r3
 8007b40:	3308      	adds	r3, #8
 8007b42:	460c      	mov	r4, r1
 8007b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b48:	4606      	mov	r6, r0
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	db20      	blt.n	8007b94 <__s2b+0x5e>
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff69 	bl	8007a2a <_Balloc>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	2d09      	cmp	r5, #9
 8007b5c:	6143      	str	r3, [r0, #20]
 8007b5e:	f04f 0301 	mov.w	r3, #1
 8007b62:	6103      	str	r3, [r0, #16]
 8007b64:	dd19      	ble.n	8007b9a <__s2b+0x64>
 8007b66:	f104 0809 	add.w	r8, r4, #9
 8007b6a:	46c1      	mov	r9, r8
 8007b6c:	442c      	add	r4, r5
 8007b6e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007b72:	4601      	mov	r1, r0
 8007b74:	3b30      	subs	r3, #48	; 0x30
 8007b76:	220a      	movs	r2, #10
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ffa1 	bl	8007ac0 <__multadd>
 8007b7e:	45a1      	cmp	r9, r4
 8007b80:	d1f5      	bne.n	8007b6e <__s2b+0x38>
 8007b82:	eb08 0405 	add.w	r4, r8, r5
 8007b86:	3c08      	subs	r4, #8
 8007b88:	1b2d      	subs	r5, r5, r4
 8007b8a:	1963      	adds	r3, r4, r5
 8007b8c:	42bb      	cmp	r3, r7
 8007b8e:	db07      	blt.n	8007ba0 <__s2b+0x6a>
 8007b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b94:	0052      	lsls	r2, r2, #1
 8007b96:	3101      	adds	r1, #1
 8007b98:	e7d9      	b.n	8007b4e <__s2b+0x18>
 8007b9a:	340a      	adds	r4, #10
 8007b9c:	2509      	movs	r5, #9
 8007b9e:	e7f3      	b.n	8007b88 <__s2b+0x52>
 8007ba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ba4:	4601      	mov	r1, r0
 8007ba6:	3b30      	subs	r3, #48	; 0x30
 8007ba8:	220a      	movs	r2, #10
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ff88 	bl	8007ac0 <__multadd>
 8007bb0:	e7eb      	b.n	8007b8a <__s2b+0x54>

08007bb2 <__hi0bits>:
 8007bb2:	0c02      	lsrs	r2, r0, #16
 8007bb4:	0412      	lsls	r2, r2, #16
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	b9b2      	cbnz	r2, 8007be8 <__hi0bits+0x36>
 8007bba:	0403      	lsls	r3, r0, #16
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bc2:	bf04      	itt	eq
 8007bc4:	021b      	lsleq	r3, r3, #8
 8007bc6:	3008      	addeq	r0, #8
 8007bc8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bcc:	bf04      	itt	eq
 8007bce:	011b      	lsleq	r3, r3, #4
 8007bd0:	3004      	addeq	r0, #4
 8007bd2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bd6:	bf04      	itt	eq
 8007bd8:	009b      	lsleq	r3, r3, #2
 8007bda:	3002      	addeq	r0, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	db06      	blt.n	8007bee <__hi0bits+0x3c>
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	d503      	bpl.n	8007bec <__hi0bits+0x3a>
 8007be4:	3001      	adds	r0, #1
 8007be6:	4770      	bx	lr
 8007be8:	2000      	movs	r0, #0
 8007bea:	e7e8      	b.n	8007bbe <__hi0bits+0xc>
 8007bec:	2020      	movs	r0, #32
 8007bee:	4770      	bx	lr

08007bf0 <__lo0bits>:
 8007bf0:	6803      	ldr	r3, [r0, #0]
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	f013 0207 	ands.w	r2, r3, #7
 8007bf8:	d00b      	beq.n	8007c12 <__lo0bits+0x22>
 8007bfa:	07da      	lsls	r2, r3, #31
 8007bfc:	d423      	bmi.n	8007c46 <__lo0bits+0x56>
 8007bfe:	0798      	lsls	r0, r3, #30
 8007c00:	bf49      	itett	mi
 8007c02:	085b      	lsrmi	r3, r3, #1
 8007c04:	089b      	lsrpl	r3, r3, #2
 8007c06:	2001      	movmi	r0, #1
 8007c08:	600b      	strmi	r3, [r1, #0]
 8007c0a:	bf5c      	itt	pl
 8007c0c:	600b      	strpl	r3, [r1, #0]
 8007c0e:	2002      	movpl	r0, #2
 8007c10:	4770      	bx	lr
 8007c12:	b298      	uxth	r0, r3
 8007c14:	b9a8      	cbnz	r0, 8007c42 <__lo0bits+0x52>
 8007c16:	2010      	movs	r0, #16
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c1e:	bf04      	itt	eq
 8007c20:	0a1b      	lsreq	r3, r3, #8
 8007c22:	3008      	addeq	r0, #8
 8007c24:	071a      	lsls	r2, r3, #28
 8007c26:	bf04      	itt	eq
 8007c28:	091b      	lsreq	r3, r3, #4
 8007c2a:	3004      	addeq	r0, #4
 8007c2c:	079a      	lsls	r2, r3, #30
 8007c2e:	bf04      	itt	eq
 8007c30:	089b      	lsreq	r3, r3, #2
 8007c32:	3002      	addeq	r0, #2
 8007c34:	07da      	lsls	r2, r3, #31
 8007c36:	d402      	bmi.n	8007c3e <__lo0bits+0x4e>
 8007c38:	085b      	lsrs	r3, r3, #1
 8007c3a:	d006      	beq.n	8007c4a <__lo0bits+0x5a>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	600b      	str	r3, [r1, #0]
 8007c40:	4770      	bx	lr
 8007c42:	4610      	mov	r0, r2
 8007c44:	e7e9      	b.n	8007c1a <__lo0bits+0x2a>
 8007c46:	2000      	movs	r0, #0
 8007c48:	4770      	bx	lr
 8007c4a:	2020      	movs	r0, #32
 8007c4c:	4770      	bx	lr

08007c4e <__i2b>:
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	460c      	mov	r4, r1
 8007c52:	2101      	movs	r1, #1
 8007c54:	f7ff fee9 	bl	8007a2a <_Balloc>
 8007c58:	2201      	movs	r2, #1
 8007c5a:	6144      	str	r4, [r0, #20]
 8007c5c:	6102      	str	r2, [r0, #16]
 8007c5e:	bd10      	pop	{r4, pc}

08007c60 <__multiply>:
 8007c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	4614      	mov	r4, r2
 8007c66:	690a      	ldr	r2, [r1, #16]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	4688      	mov	r8, r1
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	bfbe      	ittt	lt
 8007c70:	460b      	movlt	r3, r1
 8007c72:	46a0      	movlt	r8, r4
 8007c74:	461c      	movlt	r4, r3
 8007c76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c86:	eb07 0609 	add.w	r6, r7, r9
 8007c8a:	42b3      	cmp	r3, r6
 8007c8c:	bfb8      	it	lt
 8007c8e:	3101      	addlt	r1, #1
 8007c90:	f7ff fecb 	bl	8007a2a <_Balloc>
 8007c94:	f100 0514 	add.w	r5, r0, #20
 8007c98:	462b      	mov	r3, r5
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007ca0:	4573      	cmp	r3, lr
 8007ca2:	d316      	bcc.n	8007cd2 <__multiply+0x72>
 8007ca4:	f104 0214 	add.w	r2, r4, #20
 8007ca8:	f108 0114 	add.w	r1, r8, #20
 8007cac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007cb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	9201      	str	r2, [sp, #4]
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d80c      	bhi.n	8007cd8 <__multiply+0x78>
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	dd03      	ble.n	8007cca <__multiply+0x6a>
 8007cc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d05d      	beq.n	8007d86 <__multiply+0x126>
 8007cca:	6106      	str	r6, [r0, #16]
 8007ccc:	b003      	add	sp, #12
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	f843 2b04 	str.w	r2, [r3], #4
 8007cd6:	e7e3      	b.n	8007ca0 <__multiply+0x40>
 8007cd8:	f8b2 b000 	ldrh.w	fp, [r2]
 8007cdc:	f1bb 0f00 	cmp.w	fp, #0
 8007ce0:	d023      	beq.n	8007d2a <__multiply+0xca>
 8007ce2:	4689      	mov	r9, r1
 8007ce4:	46ac      	mov	ip, r5
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	f859 4b04 	ldr.w	r4, [r9], #4
 8007cee:	f8dc a000 	ldr.w	sl, [ip]
 8007cf2:	b2a3      	uxth	r3, r4
 8007cf4:	fa1f fa8a 	uxth.w	sl, sl
 8007cf8:	fb0b a303 	mla	r3, fp, r3, sl
 8007cfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d00:	f8dc 4000 	ldr.w	r4, [ip]
 8007d04:	4443      	add	r3, r8
 8007d06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d0a:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d0e:	46e2      	mov	sl, ip
 8007d10:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d1a:	454f      	cmp	r7, r9
 8007d1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d20:	f84a 3b04 	str.w	r3, [sl], #4
 8007d24:	d82b      	bhi.n	8007d7e <__multiply+0x11e>
 8007d26:	f8cc 8004 	str.w	r8, [ip, #4]
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	3204      	adds	r2, #4
 8007d2e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007d32:	f1ba 0f00 	cmp.w	sl, #0
 8007d36:	d020      	beq.n	8007d7a <__multiply+0x11a>
 8007d38:	4689      	mov	r9, r1
 8007d3a:	46a8      	mov	r8, r5
 8007d3c:	f04f 0b00 	mov.w	fp, #0
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	f8b9 c000 	ldrh.w	ip, [r9]
 8007d46:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007d50:	46c4      	mov	ip, r8
 8007d52:	445c      	add	r4, fp
 8007d54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d58:	f84c 3b04 	str.w	r3, [ip], #4
 8007d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d60:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	fb0a b303 	mla	r3, sl, r3, fp
 8007d6a:	454f      	cmp	r7, r9
 8007d6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007d70:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007d74:	d805      	bhi.n	8007d82 <__multiply+0x122>
 8007d76:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d7a:	3504      	adds	r5, #4
 8007d7c:	e79b      	b.n	8007cb6 <__multiply+0x56>
 8007d7e:	46d4      	mov	ip, sl
 8007d80:	e7b3      	b.n	8007cea <__multiply+0x8a>
 8007d82:	46e0      	mov	r8, ip
 8007d84:	e7dd      	b.n	8007d42 <__multiply+0xe2>
 8007d86:	3e01      	subs	r6, #1
 8007d88:	e799      	b.n	8007cbe <__multiply+0x5e>
	...

08007d8c <__pow5mult>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	4615      	mov	r5, r2
 8007d92:	f012 0203 	ands.w	r2, r2, #3
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	d007      	beq.n	8007dac <__pow5mult+0x20>
 8007d9c:	4c21      	ldr	r4, [pc, #132]	; (8007e24 <__pow5mult+0x98>)
 8007d9e:	3a01      	subs	r2, #1
 8007da0:	2300      	movs	r3, #0
 8007da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007da6:	f7ff fe8b 	bl	8007ac0 <__multadd>
 8007daa:	4607      	mov	r7, r0
 8007dac:	10ad      	asrs	r5, r5, #2
 8007dae:	d035      	beq.n	8007e1c <__pow5mult+0x90>
 8007db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007db2:	b93c      	cbnz	r4, 8007dc4 <__pow5mult+0x38>
 8007db4:	2010      	movs	r0, #16
 8007db6:	f7ff fe05 	bl	80079c4 <malloc>
 8007dba:	6270      	str	r0, [r6, #36]	; 0x24
 8007dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dc0:	6004      	str	r4, [r0, #0]
 8007dc2:	60c4      	str	r4, [r0, #12]
 8007dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dcc:	b94c      	cbnz	r4, 8007de2 <__pow5mult+0x56>
 8007dce:	f240 2171 	movw	r1, #625	; 0x271
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7ff ff3b 	bl	8007c4e <__i2b>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007de0:	6003      	str	r3, [r0, #0]
 8007de2:	f04f 0800 	mov.w	r8, #0
 8007de6:	07eb      	lsls	r3, r5, #31
 8007de8:	d50a      	bpl.n	8007e00 <__pow5mult+0x74>
 8007dea:	4639      	mov	r1, r7
 8007dec:	4622      	mov	r2, r4
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff ff36 	bl	8007c60 <__multiply>
 8007df4:	4681      	mov	r9, r0
 8007df6:	4639      	mov	r1, r7
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff fe4a 	bl	8007a92 <_Bfree>
 8007dfe:	464f      	mov	r7, r9
 8007e00:	106d      	asrs	r5, r5, #1
 8007e02:	d00b      	beq.n	8007e1c <__pow5mult+0x90>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	b938      	cbnz	r0, 8007e18 <__pow5mult+0x8c>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff ff27 	bl	8007c60 <__multiply>
 8007e12:	6020      	str	r0, [r4, #0]
 8007e14:	f8c0 8000 	str.w	r8, [r0]
 8007e18:	4604      	mov	r4, r0
 8007e1a:	e7e4      	b.n	8007de6 <__pow5mult+0x5a>
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e22:	bf00      	nop
 8007e24:	08009120 	.word	0x08009120

08007e28 <__lshift>:
 8007e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	4607      	mov	r7, r0
 8007e30:	4616      	mov	r6, r2
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e38:	eb0a 0903 	add.w	r9, sl, r3
 8007e3c:	6849      	ldr	r1, [r1, #4]
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	f109 0501 	add.w	r5, r9, #1
 8007e44:	42ab      	cmp	r3, r5
 8007e46:	db32      	blt.n	8007eae <__lshift+0x86>
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff fdee 	bl	8007a2a <_Balloc>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4680      	mov	r8, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	f100 0114 	add.w	r1, r0, #20
 8007e58:	4553      	cmp	r3, sl
 8007e5a:	db2b      	blt.n	8007eb4 <__lshift+0x8c>
 8007e5c:	6920      	ldr	r0, [r4, #16]
 8007e5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e62:	f104 0314 	add.w	r3, r4, #20
 8007e66:	f016 021f 	ands.w	r2, r6, #31
 8007e6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e72:	d025      	beq.n	8007ec0 <__lshift+0x98>
 8007e74:	2000      	movs	r0, #0
 8007e76:	f1c2 0e20 	rsb	lr, r2, #32
 8007e7a:	468a      	mov	sl, r1
 8007e7c:	681e      	ldr	r6, [r3, #0]
 8007e7e:	4096      	lsls	r6, r2
 8007e80:	4330      	orrs	r0, r6
 8007e82:	f84a 0b04 	str.w	r0, [sl], #4
 8007e86:	f853 0b04 	ldr.w	r0, [r3], #4
 8007e8a:	459c      	cmp	ip, r3
 8007e8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007e90:	d814      	bhi.n	8007ebc <__lshift+0x94>
 8007e92:	6048      	str	r0, [r1, #4]
 8007e94:	b108      	cbz	r0, 8007e9a <__lshift+0x72>
 8007e96:	f109 0502 	add.w	r5, r9, #2
 8007e9a:	3d01      	subs	r5, #1
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	f7ff fdf5 	bl	8007a92 <_Bfree>
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	3101      	adds	r1, #1
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	e7c7      	b.n	8007e44 <__lshift+0x1c>
 8007eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	e7cd      	b.n	8007e58 <__lshift+0x30>
 8007ebc:	4651      	mov	r1, sl
 8007ebe:	e7dc      	b.n	8007e7a <__lshift+0x52>
 8007ec0:	3904      	subs	r1, #4
 8007ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec6:	459c      	cmp	ip, r3
 8007ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ecc:	d8f9      	bhi.n	8007ec2 <__lshift+0x9a>
 8007ece:	e7e4      	b.n	8007e9a <__lshift+0x72>

08007ed0 <__mcmp>:
 8007ed0:	6903      	ldr	r3, [r0, #16]
 8007ed2:	690a      	ldr	r2, [r1, #16]
 8007ed4:	b530      	push	{r4, r5, lr}
 8007ed6:	1a9b      	subs	r3, r3, r2
 8007ed8:	d10c      	bne.n	8007ef4 <__mcmp+0x24>
 8007eda:	0092      	lsls	r2, r2, #2
 8007edc:	3014      	adds	r0, #20
 8007ede:	3114      	adds	r1, #20
 8007ee0:	1884      	adds	r4, r0, r2
 8007ee2:	4411      	add	r1, r2
 8007ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007eec:	4295      	cmp	r5, r2
 8007eee:	d003      	beq.n	8007ef8 <__mcmp+0x28>
 8007ef0:	d305      	bcc.n	8007efe <__mcmp+0x2e>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	bd30      	pop	{r4, r5, pc}
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d3f3      	bcc.n	8007ee4 <__mcmp+0x14>
 8007efc:	e7fa      	b.n	8007ef4 <__mcmp+0x24>
 8007efe:	f04f 33ff 	mov.w	r3, #4294967295
 8007f02:	e7f7      	b.n	8007ef4 <__mcmp+0x24>

08007f04 <__mdiff>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	460d      	mov	r5, r1
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4614      	mov	r4, r2
 8007f12:	f7ff ffdd 	bl	8007ed0 <__mcmp>
 8007f16:	1e06      	subs	r6, r0, #0
 8007f18:	d108      	bne.n	8007f2c <__mdiff+0x28>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f7ff fd84 	bl	8007a2a <_Balloc>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2c:	bfa4      	itt	ge
 8007f2e:	4623      	movge	r3, r4
 8007f30:	462c      	movge	r4, r5
 8007f32:	4638      	mov	r0, r7
 8007f34:	6861      	ldr	r1, [r4, #4]
 8007f36:	bfa6      	itte	ge
 8007f38:	461d      	movge	r5, r3
 8007f3a:	2600      	movge	r6, #0
 8007f3c:	2601      	movlt	r6, #1
 8007f3e:	f7ff fd74 	bl	8007a2a <_Balloc>
 8007f42:	f04f 0e00 	mov.w	lr, #0
 8007f46:	60c6      	str	r6, [r0, #12]
 8007f48:	692b      	ldr	r3, [r5, #16]
 8007f4a:	6926      	ldr	r6, [r4, #16]
 8007f4c:	f104 0214 	add.w	r2, r4, #20
 8007f50:	f105 0914 	add.w	r9, r5, #20
 8007f54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007f58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007f5c:	f100 0114 	add.w	r1, r0, #20
 8007f60:	f852 ab04 	ldr.w	sl, [r2], #4
 8007f64:	f859 5b04 	ldr.w	r5, [r9], #4
 8007f68:	fa1f f38a 	uxth.w	r3, sl
 8007f6c:	4473      	add	r3, lr
 8007f6e:	b2ac      	uxth	r4, r5
 8007f70:	1b1b      	subs	r3, r3, r4
 8007f72:	0c2c      	lsrs	r4, r5, #16
 8007f74:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007f78:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007f82:	45c8      	cmp	r8, r9
 8007f84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007f88:	4694      	mov	ip, r2
 8007f8a:	f841 4b04 	str.w	r4, [r1], #4
 8007f8e:	d8e7      	bhi.n	8007f60 <__mdiff+0x5c>
 8007f90:	45bc      	cmp	ip, r7
 8007f92:	d304      	bcc.n	8007f9e <__mdiff+0x9a>
 8007f94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007f98:	b183      	cbz	r3, 8007fbc <__mdiff+0xb8>
 8007f9a:	6106      	str	r6, [r0, #16]
 8007f9c:	e7c4      	b.n	8007f28 <__mdiff+0x24>
 8007f9e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007fa2:	b2a2      	uxth	r2, r4
 8007fa4:	4472      	add	r2, lr
 8007fa6:	1413      	asrs	r3, r2, #16
 8007fa8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007fac:	b292      	uxth	r2, r2
 8007fae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fb2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007fb6:	f841 2b04 	str.w	r2, [r1], #4
 8007fba:	e7e9      	b.n	8007f90 <__mdiff+0x8c>
 8007fbc:	3e01      	subs	r6, #1
 8007fbe:	e7e9      	b.n	8007f94 <__mdiff+0x90>

08007fc0 <__ulp>:
 8007fc0:	4b10      	ldr	r3, [pc, #64]	; (8008004 <__ulp+0x44>)
 8007fc2:	400b      	ands	r3, r1
 8007fc4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dd02      	ble.n	8007fd2 <__ulp+0x12>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4770      	bx	lr
 8007fd2:	425b      	negs	r3, r3
 8007fd4:	151b      	asrs	r3, r3, #20
 8007fd6:	2b13      	cmp	r3, #19
 8007fd8:	f04f 0000 	mov.w	r0, #0
 8007fdc:	f04f 0100 	mov.w	r1, #0
 8007fe0:	dc04      	bgt.n	8007fec <__ulp+0x2c>
 8007fe2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007fe6:	fa42 f103 	asr.w	r1, r2, r3
 8007fea:	4770      	bx	lr
 8007fec:	2201      	movs	r2, #1
 8007fee:	3b14      	subs	r3, #20
 8007ff0:	2b1e      	cmp	r3, #30
 8007ff2:	bfce      	itee	gt
 8007ff4:	4613      	movgt	r3, r2
 8007ff6:	f1c3 031f 	rsble	r3, r3, #31
 8007ffa:	fa02 f303 	lslle.w	r3, r2, r3
 8007ffe:	4618      	mov	r0, r3
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	7ff00000 	.word	0x7ff00000

08008008 <__b2d>:
 8008008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800800c:	6907      	ldr	r7, [r0, #16]
 800800e:	f100 0914 	add.w	r9, r0, #20
 8008012:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008016:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800801a:	f1a7 0804 	sub.w	r8, r7, #4
 800801e:	4630      	mov	r0, r6
 8008020:	f7ff fdc7 	bl	8007bb2 <__hi0bits>
 8008024:	f1c0 0320 	rsb	r3, r0, #32
 8008028:	280a      	cmp	r0, #10
 800802a:	600b      	str	r3, [r1, #0]
 800802c:	491e      	ldr	r1, [pc, #120]	; (80080a8 <__b2d+0xa0>)
 800802e:	dc17      	bgt.n	8008060 <__b2d+0x58>
 8008030:	45c1      	cmp	r9, r8
 8008032:	bf28      	it	cs
 8008034:	2200      	movcs	r2, #0
 8008036:	f1c0 0c0b 	rsb	ip, r0, #11
 800803a:	fa26 f30c 	lsr.w	r3, r6, ip
 800803e:	bf38      	it	cc
 8008040:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008044:	ea43 0501 	orr.w	r5, r3, r1
 8008048:	f100 0315 	add.w	r3, r0, #21
 800804c:	fa06 f303 	lsl.w	r3, r6, r3
 8008050:	fa22 f20c 	lsr.w	r2, r2, ip
 8008054:	ea43 0402 	orr.w	r4, r3, r2
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008060:	45c1      	cmp	r9, r8
 8008062:	bf3a      	itte	cc
 8008064:	f1a7 0808 	subcc.w	r8, r7, #8
 8008068:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800806c:	2200      	movcs	r2, #0
 800806e:	f1b0 030b 	subs.w	r3, r0, #11
 8008072:	d015      	beq.n	80080a0 <__b2d+0x98>
 8008074:	409e      	lsls	r6, r3
 8008076:	f1c3 0720 	rsb	r7, r3, #32
 800807a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800807e:	fa22 f107 	lsr.w	r1, r2, r7
 8008082:	45c8      	cmp	r8, r9
 8008084:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008088:	ea46 0501 	orr.w	r5, r6, r1
 800808c:	bf94      	ite	ls
 800808e:	2100      	movls	r1, #0
 8008090:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008094:	fa02 f003 	lsl.w	r0, r2, r3
 8008098:	40f9      	lsrs	r1, r7
 800809a:	ea40 0401 	orr.w	r4, r0, r1
 800809e:	e7db      	b.n	8008058 <__b2d+0x50>
 80080a0:	ea46 0501 	orr.w	r5, r6, r1
 80080a4:	4614      	mov	r4, r2
 80080a6:	e7d7      	b.n	8008058 <__b2d+0x50>
 80080a8:	3ff00000 	.word	0x3ff00000

080080ac <__d2b>:
 80080ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80080b0:	461c      	mov	r4, r3
 80080b2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80080b6:	2101      	movs	r1, #1
 80080b8:	4690      	mov	r8, r2
 80080ba:	f7ff fcb6 	bl	8007a2a <_Balloc>
 80080be:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80080c2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80080c6:	4607      	mov	r7, r0
 80080c8:	bb34      	cbnz	r4, 8008118 <__d2b+0x6c>
 80080ca:	9201      	str	r2, [sp, #4]
 80080cc:	f1b8 0200 	subs.w	r2, r8, #0
 80080d0:	d027      	beq.n	8008122 <__d2b+0x76>
 80080d2:	a802      	add	r0, sp, #8
 80080d4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80080d8:	f7ff fd8a 	bl	8007bf0 <__lo0bits>
 80080dc:	9900      	ldr	r1, [sp, #0]
 80080de:	b1f0      	cbz	r0, 800811e <__d2b+0x72>
 80080e0:	9a01      	ldr	r2, [sp, #4]
 80080e2:	f1c0 0320 	rsb	r3, r0, #32
 80080e6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ea:	430b      	orrs	r3, r1
 80080ec:	40c2      	lsrs	r2, r0
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	9201      	str	r2, [sp, #4]
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bf14      	ite	ne
 80080f8:	2102      	movne	r1, #2
 80080fa:	2101      	moveq	r1, #1
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	6139      	str	r1, [r7, #16]
 8008100:	b1c4      	cbz	r4, 8008134 <__d2b+0x88>
 8008102:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008106:	4404      	add	r4, r0
 8008108:	6034      	str	r4, [r6, #0]
 800810a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800810e:	6028      	str	r0, [r5, #0]
 8008110:	4638      	mov	r0, r7
 8008112:	b002      	add	sp, #8
 8008114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008118:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800811c:	e7d5      	b.n	80080ca <__d2b+0x1e>
 800811e:	6179      	str	r1, [r7, #20]
 8008120:	e7e7      	b.n	80080f2 <__d2b+0x46>
 8008122:	a801      	add	r0, sp, #4
 8008124:	f7ff fd64 	bl	8007bf0 <__lo0bits>
 8008128:	2101      	movs	r1, #1
 800812a:	9b01      	ldr	r3, [sp, #4]
 800812c:	6139      	str	r1, [r7, #16]
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	3020      	adds	r0, #32
 8008132:	e7e5      	b.n	8008100 <__d2b+0x54>
 8008134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008138:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	6918      	ldr	r0, [r3, #16]
 8008140:	f7ff fd37 	bl	8007bb2 <__hi0bits>
 8008144:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008148:	e7e1      	b.n	800810e <__d2b+0x62>

0800814a <__ratio>:
 800814a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814e:	4688      	mov	r8, r1
 8008150:	4669      	mov	r1, sp
 8008152:	4681      	mov	r9, r0
 8008154:	f7ff ff58 	bl	8008008 <__b2d>
 8008158:	468b      	mov	fp, r1
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	4640      	mov	r0, r8
 8008160:	a901      	add	r1, sp, #4
 8008162:	f7ff ff51 	bl	8008008 <__b2d>
 8008166:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800816a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800816e:	460d      	mov	r5, r1
 8008170:	eba3 0c02 	sub.w	ip, r3, r2
 8008174:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008178:	1a9b      	subs	r3, r3, r2
 800817a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800817e:	2b00      	cmp	r3, #0
 8008180:	bfd5      	itete	le
 8008182:	460a      	movle	r2, r1
 8008184:	463a      	movgt	r2, r7
 8008186:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800818a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800818e:	bfd8      	it	le
 8008190:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008194:	462b      	mov	r3, r5
 8008196:	4602      	mov	r2, r0
 8008198:	4659      	mov	r1, fp
 800819a:	4630      	mov	r0, r6
 800819c:	f7f8 fac6 	bl	800072c <__aeabi_ddiv>
 80081a0:	b003      	add	sp, #12
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081a6 <__copybits>:
 80081a6:	3901      	subs	r1, #1
 80081a8:	b510      	push	{r4, lr}
 80081aa:	1149      	asrs	r1, r1, #5
 80081ac:	6914      	ldr	r4, [r2, #16]
 80081ae:	3101      	adds	r1, #1
 80081b0:	f102 0314 	add.w	r3, r2, #20
 80081b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081bc:	42a3      	cmp	r3, r4
 80081be:	4602      	mov	r2, r0
 80081c0:	d303      	bcc.n	80081ca <__copybits+0x24>
 80081c2:	2300      	movs	r3, #0
 80081c4:	428a      	cmp	r2, r1
 80081c6:	d305      	bcc.n	80081d4 <__copybits+0x2e>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ce:	f840 2b04 	str.w	r2, [r0], #4
 80081d2:	e7f3      	b.n	80081bc <__copybits+0x16>
 80081d4:	f842 3b04 	str.w	r3, [r2], #4
 80081d8:	e7f4      	b.n	80081c4 <__copybits+0x1e>

080081da <__any_on>:
 80081da:	f100 0214 	add.w	r2, r0, #20
 80081de:	6900      	ldr	r0, [r0, #16]
 80081e0:	114b      	asrs	r3, r1, #5
 80081e2:	4298      	cmp	r0, r3
 80081e4:	b510      	push	{r4, lr}
 80081e6:	db11      	blt.n	800820c <__any_on+0x32>
 80081e8:	dd0a      	ble.n	8008200 <__any_on+0x26>
 80081ea:	f011 011f 	ands.w	r1, r1, #31
 80081ee:	d007      	beq.n	8008200 <__any_on+0x26>
 80081f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081f4:	fa24 f001 	lsr.w	r0, r4, r1
 80081f8:	fa00 f101 	lsl.w	r1, r0, r1
 80081fc:	428c      	cmp	r4, r1
 80081fe:	d10b      	bne.n	8008218 <__any_on+0x3e>
 8008200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008204:	4293      	cmp	r3, r2
 8008206:	d803      	bhi.n	8008210 <__any_on+0x36>
 8008208:	2000      	movs	r0, #0
 800820a:	bd10      	pop	{r4, pc}
 800820c:	4603      	mov	r3, r0
 800820e:	e7f7      	b.n	8008200 <__any_on+0x26>
 8008210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008214:	2900      	cmp	r1, #0
 8008216:	d0f5      	beq.n	8008204 <__any_on+0x2a>
 8008218:	2001      	movs	r0, #1
 800821a:	e7f6      	b.n	800820a <__any_on+0x30>

0800821c <_calloc_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	fb02 f401 	mul.w	r4, r2, r1
 8008222:	4621      	mov	r1, r4
 8008224:	f000 f854 	bl	80082d0 <_malloc_r>
 8008228:	4605      	mov	r5, r0
 800822a:	b118      	cbz	r0, 8008234 <_calloc_r+0x18>
 800822c:	4622      	mov	r2, r4
 800822e:	2100      	movs	r1, #0
 8008230:	f7fc fc4a 	bl	8004ac8 <memset>
 8008234:	4628      	mov	r0, r5
 8008236:	bd38      	pop	{r3, r4, r5, pc}

08008238 <_free_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4605      	mov	r5, r0
 800823c:	2900      	cmp	r1, #0
 800823e:	d043      	beq.n	80082c8 <_free_r+0x90>
 8008240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008244:	1f0c      	subs	r4, r1, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfb8      	it	lt
 800824a:	18e4      	addlt	r4, r4, r3
 800824c:	f000 fdbf 	bl	8008dce <__malloc_lock>
 8008250:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <_free_r+0x94>)
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	4610      	mov	r0, r2
 8008256:	b933      	cbnz	r3, 8008266 <_free_r+0x2e>
 8008258:	6063      	str	r3, [r4, #4]
 800825a:	6014      	str	r4, [r2, #0]
 800825c:	4628      	mov	r0, r5
 800825e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008262:	f000 bdb5 	b.w	8008dd0 <__malloc_unlock>
 8008266:	42a3      	cmp	r3, r4
 8008268:	d90b      	bls.n	8008282 <_free_r+0x4a>
 800826a:	6821      	ldr	r1, [r4, #0]
 800826c:	1862      	adds	r2, r4, r1
 800826e:	4293      	cmp	r3, r2
 8008270:	bf01      	itttt	eq
 8008272:	681a      	ldreq	r2, [r3, #0]
 8008274:	685b      	ldreq	r3, [r3, #4]
 8008276:	1852      	addeq	r2, r2, r1
 8008278:	6022      	streq	r2, [r4, #0]
 800827a:	6063      	str	r3, [r4, #4]
 800827c:	6004      	str	r4, [r0, #0]
 800827e:	e7ed      	b.n	800825c <_free_r+0x24>
 8008280:	4613      	mov	r3, r2
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	b10a      	cbz	r2, 800828a <_free_r+0x52>
 8008286:	42a2      	cmp	r2, r4
 8008288:	d9fa      	bls.n	8008280 <_free_r+0x48>
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	1858      	adds	r0, r3, r1
 800828e:	42a0      	cmp	r0, r4
 8008290:	d10b      	bne.n	80082aa <_free_r+0x72>
 8008292:	6820      	ldr	r0, [r4, #0]
 8008294:	4401      	add	r1, r0
 8008296:	1858      	adds	r0, r3, r1
 8008298:	4282      	cmp	r2, r0
 800829a:	6019      	str	r1, [r3, #0]
 800829c:	d1de      	bne.n	800825c <_free_r+0x24>
 800829e:	6810      	ldr	r0, [r2, #0]
 80082a0:	6852      	ldr	r2, [r2, #4]
 80082a2:	4401      	add	r1, r0
 80082a4:	6019      	str	r1, [r3, #0]
 80082a6:	605a      	str	r2, [r3, #4]
 80082a8:	e7d8      	b.n	800825c <_free_r+0x24>
 80082aa:	d902      	bls.n	80082b2 <_free_r+0x7a>
 80082ac:	230c      	movs	r3, #12
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	e7d4      	b.n	800825c <_free_r+0x24>
 80082b2:	6820      	ldr	r0, [r4, #0]
 80082b4:	1821      	adds	r1, r4, r0
 80082b6:	428a      	cmp	r2, r1
 80082b8:	bf01      	itttt	eq
 80082ba:	6811      	ldreq	r1, [r2, #0]
 80082bc:	6852      	ldreq	r2, [r2, #4]
 80082be:	1809      	addeq	r1, r1, r0
 80082c0:	6021      	streq	r1, [r4, #0]
 80082c2:	6062      	str	r2, [r4, #4]
 80082c4:	605c      	str	r4, [r3, #4]
 80082c6:	e7c9      	b.n	800825c <_free_r+0x24>
 80082c8:	bd38      	pop	{r3, r4, r5, pc}
 80082ca:	bf00      	nop
 80082cc:	200001fc 	.word	0x200001fc

080082d0 <_malloc_r>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	1ccd      	adds	r5, r1, #3
 80082d4:	f025 0503 	bic.w	r5, r5, #3
 80082d8:	3508      	adds	r5, #8
 80082da:	2d0c      	cmp	r5, #12
 80082dc:	bf38      	it	cc
 80082de:	250c      	movcc	r5, #12
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	4606      	mov	r6, r0
 80082e4:	db01      	blt.n	80082ea <_malloc_r+0x1a>
 80082e6:	42a9      	cmp	r1, r5
 80082e8:	d903      	bls.n	80082f2 <_malloc_r+0x22>
 80082ea:	230c      	movs	r3, #12
 80082ec:	6033      	str	r3, [r6, #0]
 80082ee:	2000      	movs	r0, #0
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	f000 fd6c 	bl	8008dce <__malloc_lock>
 80082f6:	4a21      	ldr	r2, [pc, #132]	; (800837c <_malloc_r+0xac>)
 80082f8:	6814      	ldr	r4, [r2, #0]
 80082fa:	4621      	mov	r1, r4
 80082fc:	b991      	cbnz	r1, 8008324 <_malloc_r+0x54>
 80082fe:	4c20      	ldr	r4, [pc, #128]	; (8008380 <_malloc_r+0xb0>)
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	b91b      	cbnz	r3, 800830c <_malloc_r+0x3c>
 8008304:	4630      	mov	r0, r6
 8008306:	f000 facd 	bl	80088a4 <_sbrk_r>
 800830a:	6020      	str	r0, [r4, #0]
 800830c:	4629      	mov	r1, r5
 800830e:	4630      	mov	r0, r6
 8008310:	f000 fac8 	bl	80088a4 <_sbrk_r>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d124      	bne.n	8008362 <_malloc_r+0x92>
 8008318:	230c      	movs	r3, #12
 800831a:	4630      	mov	r0, r6
 800831c:	6033      	str	r3, [r6, #0]
 800831e:	f000 fd57 	bl	8008dd0 <__malloc_unlock>
 8008322:	e7e4      	b.n	80082ee <_malloc_r+0x1e>
 8008324:	680b      	ldr	r3, [r1, #0]
 8008326:	1b5b      	subs	r3, r3, r5
 8008328:	d418      	bmi.n	800835c <_malloc_r+0x8c>
 800832a:	2b0b      	cmp	r3, #11
 800832c:	d90f      	bls.n	800834e <_malloc_r+0x7e>
 800832e:	600b      	str	r3, [r1, #0]
 8008330:	18cc      	adds	r4, r1, r3
 8008332:	50cd      	str	r5, [r1, r3]
 8008334:	4630      	mov	r0, r6
 8008336:	f000 fd4b 	bl	8008dd0 <__malloc_unlock>
 800833a:	f104 000b 	add.w	r0, r4, #11
 800833e:	1d23      	adds	r3, r4, #4
 8008340:	f020 0007 	bic.w	r0, r0, #7
 8008344:	1ac3      	subs	r3, r0, r3
 8008346:	d0d3      	beq.n	80082f0 <_malloc_r+0x20>
 8008348:	425a      	negs	r2, r3
 800834a:	50e2      	str	r2, [r4, r3]
 800834c:	e7d0      	b.n	80082f0 <_malloc_r+0x20>
 800834e:	684b      	ldr	r3, [r1, #4]
 8008350:	428c      	cmp	r4, r1
 8008352:	bf16      	itet	ne
 8008354:	6063      	strne	r3, [r4, #4]
 8008356:	6013      	streq	r3, [r2, #0]
 8008358:	460c      	movne	r4, r1
 800835a:	e7eb      	b.n	8008334 <_malloc_r+0x64>
 800835c:	460c      	mov	r4, r1
 800835e:	6849      	ldr	r1, [r1, #4]
 8008360:	e7cc      	b.n	80082fc <_malloc_r+0x2c>
 8008362:	1cc4      	adds	r4, r0, #3
 8008364:	f024 0403 	bic.w	r4, r4, #3
 8008368:	42a0      	cmp	r0, r4
 800836a:	d005      	beq.n	8008378 <_malloc_r+0xa8>
 800836c:	1a21      	subs	r1, r4, r0
 800836e:	4630      	mov	r0, r6
 8008370:	f000 fa98 	bl	80088a4 <_sbrk_r>
 8008374:	3001      	adds	r0, #1
 8008376:	d0cf      	beq.n	8008318 <_malloc_r+0x48>
 8008378:	6025      	str	r5, [r4, #0]
 800837a:	e7db      	b.n	8008334 <_malloc_r+0x64>
 800837c:	200001fc 	.word	0x200001fc
 8008380:	20000200 	.word	0x20000200

08008384 <__ssputs_r>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	688e      	ldr	r6, [r1, #8]
 800838a:	4682      	mov	sl, r0
 800838c:	429e      	cmp	r6, r3
 800838e:	460c      	mov	r4, r1
 8008390:	4690      	mov	r8, r2
 8008392:	4699      	mov	r9, r3
 8008394:	d837      	bhi.n	8008406 <__ssputs_r+0x82>
 8008396:	898a      	ldrh	r2, [r1, #12]
 8008398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800839c:	d031      	beq.n	8008402 <__ssputs_r+0x7e>
 800839e:	2302      	movs	r3, #2
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	6909      	ldr	r1, [r1, #16]
 80083a4:	1a6f      	subs	r7, r5, r1
 80083a6:	6965      	ldr	r5, [r4, #20]
 80083a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80083b0:	f109 0301 	add.w	r3, r9, #1
 80083b4:	443b      	add	r3, r7
 80083b6:	429d      	cmp	r5, r3
 80083b8:	bf38      	it	cc
 80083ba:	461d      	movcc	r5, r3
 80083bc:	0553      	lsls	r3, r2, #21
 80083be:	d530      	bpl.n	8008422 <__ssputs_r+0x9e>
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7ff ff85 	bl	80082d0 <_malloc_r>
 80083c6:	4606      	mov	r6, r0
 80083c8:	b950      	cbnz	r0, 80083e0 <__ssputs_r+0x5c>
 80083ca:	230c      	movs	r3, #12
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	f8ca 3000 	str.w	r3, [sl]
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e0:	463a      	mov	r2, r7
 80083e2:	6921      	ldr	r1, [r4, #16]
 80083e4:	f7ff fb16 	bl	8007a14 <memcpy>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	6126      	str	r6, [r4, #16]
 80083f6:	443e      	add	r6, r7
 80083f8:	6026      	str	r6, [r4, #0]
 80083fa:	464e      	mov	r6, r9
 80083fc:	6165      	str	r5, [r4, #20]
 80083fe:	1bed      	subs	r5, r5, r7
 8008400:	60a5      	str	r5, [r4, #8]
 8008402:	454e      	cmp	r6, r9
 8008404:	d900      	bls.n	8008408 <__ssputs_r+0x84>
 8008406:	464e      	mov	r6, r9
 8008408:	4632      	mov	r2, r6
 800840a:	4641      	mov	r1, r8
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	f000 fcc5 	bl	8008d9c <memmove>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	2000      	movs	r0, #0
 8008416:	1b9b      	subs	r3, r3, r6
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	441e      	add	r6, r3
 800841e:	6026      	str	r6, [r4, #0]
 8008420:	e7dc      	b.n	80083dc <__ssputs_r+0x58>
 8008422:	462a      	mov	r2, r5
 8008424:	f000 fcd5 	bl	8008dd2 <_realloc_r>
 8008428:	4606      	mov	r6, r0
 800842a:	2800      	cmp	r0, #0
 800842c:	d1e2      	bne.n	80083f4 <__ssputs_r+0x70>
 800842e:	6921      	ldr	r1, [r4, #16]
 8008430:	4650      	mov	r0, sl
 8008432:	f7ff ff01 	bl	8008238 <_free_r>
 8008436:	e7c8      	b.n	80083ca <__ssputs_r+0x46>

08008438 <_svfiprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	461d      	mov	r5, r3
 800843e:	898b      	ldrh	r3, [r1, #12]
 8008440:	b09d      	sub	sp, #116	; 0x74
 8008442:	061f      	lsls	r7, r3, #24
 8008444:	4680      	mov	r8, r0
 8008446:	460c      	mov	r4, r1
 8008448:	4616      	mov	r6, r2
 800844a:	d50f      	bpl.n	800846c <_svfiprintf_r+0x34>
 800844c:	690b      	ldr	r3, [r1, #16]
 800844e:	b96b      	cbnz	r3, 800846c <_svfiprintf_r+0x34>
 8008450:	2140      	movs	r1, #64	; 0x40
 8008452:	f7ff ff3d 	bl	80082d0 <_malloc_r>
 8008456:	6020      	str	r0, [r4, #0]
 8008458:	6120      	str	r0, [r4, #16]
 800845a:	b928      	cbnz	r0, 8008468 <_svfiprintf_r+0x30>
 800845c:	230c      	movs	r3, #12
 800845e:	f8c8 3000 	str.w	r3, [r8]
 8008462:	f04f 30ff 	mov.w	r0, #4294967295
 8008466:	e0c8      	b.n	80085fa <_svfiprintf_r+0x1c2>
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	6163      	str	r3, [r4, #20]
 800846c:	2300      	movs	r3, #0
 800846e:	9309      	str	r3, [sp, #36]	; 0x24
 8008470:	2320      	movs	r3, #32
 8008472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008476:	2330      	movs	r3, #48	; 0x30
 8008478:	f04f 0b01 	mov.w	fp, #1
 800847c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008480:	9503      	str	r5, [sp, #12]
 8008482:	4637      	mov	r7, r6
 8008484:	463d      	mov	r5, r7
 8008486:	f815 3b01 	ldrb.w	r3, [r5], #1
 800848a:	b10b      	cbz	r3, 8008490 <_svfiprintf_r+0x58>
 800848c:	2b25      	cmp	r3, #37	; 0x25
 800848e:	d13e      	bne.n	800850e <_svfiprintf_r+0xd6>
 8008490:	ebb7 0a06 	subs.w	sl, r7, r6
 8008494:	d00b      	beq.n	80084ae <_svfiprintf_r+0x76>
 8008496:	4653      	mov	r3, sl
 8008498:	4632      	mov	r2, r6
 800849a:	4621      	mov	r1, r4
 800849c:	4640      	mov	r0, r8
 800849e:	f7ff ff71 	bl	8008384 <__ssputs_r>
 80084a2:	3001      	adds	r0, #1
 80084a4:	f000 80a4 	beq.w	80085f0 <_svfiprintf_r+0x1b8>
 80084a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084aa:	4453      	add	r3, sl
 80084ac:	9309      	str	r3, [sp, #36]	; 0x24
 80084ae:	783b      	ldrb	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 809d 	beq.w	80085f0 <_svfiprintf_r+0x1b8>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f04f 32ff 	mov.w	r2, #4294967295
 80084bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	9307      	str	r3, [sp, #28]
 80084c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c8:	931a      	str	r3, [sp, #104]	; 0x68
 80084ca:	462f      	mov	r7, r5
 80084cc:	2205      	movs	r2, #5
 80084ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80084d2:	4850      	ldr	r0, [pc, #320]	; (8008614 <_svfiprintf_r+0x1dc>)
 80084d4:	f7ff fa90 	bl	80079f8 <memchr>
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	b9d0      	cbnz	r0, 8008512 <_svfiprintf_r+0xda>
 80084dc:	06d9      	lsls	r1, r3, #27
 80084de:	bf44      	itt	mi
 80084e0:	2220      	movmi	r2, #32
 80084e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084e6:	071a      	lsls	r2, r3, #28
 80084e8:	bf44      	itt	mi
 80084ea:	222b      	movmi	r2, #43	; 0x2b
 80084ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084f0:	782a      	ldrb	r2, [r5, #0]
 80084f2:	2a2a      	cmp	r2, #42	; 0x2a
 80084f4:	d015      	beq.n	8008522 <_svfiprintf_r+0xea>
 80084f6:	462f      	mov	r7, r5
 80084f8:	2000      	movs	r0, #0
 80084fa:	250a      	movs	r5, #10
 80084fc:	9a07      	ldr	r2, [sp, #28]
 80084fe:	4639      	mov	r1, r7
 8008500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008504:	3b30      	subs	r3, #48	; 0x30
 8008506:	2b09      	cmp	r3, #9
 8008508:	d94d      	bls.n	80085a6 <_svfiprintf_r+0x16e>
 800850a:	b1b8      	cbz	r0, 800853c <_svfiprintf_r+0x104>
 800850c:	e00f      	b.n	800852e <_svfiprintf_r+0xf6>
 800850e:	462f      	mov	r7, r5
 8008510:	e7b8      	b.n	8008484 <_svfiprintf_r+0x4c>
 8008512:	4a40      	ldr	r2, [pc, #256]	; (8008614 <_svfiprintf_r+0x1dc>)
 8008514:	463d      	mov	r5, r7
 8008516:	1a80      	subs	r0, r0, r2
 8008518:	fa0b f000 	lsl.w	r0, fp, r0
 800851c:	4318      	orrs	r0, r3
 800851e:	9004      	str	r0, [sp, #16]
 8008520:	e7d3      	b.n	80084ca <_svfiprintf_r+0x92>
 8008522:	9a03      	ldr	r2, [sp, #12]
 8008524:	1d11      	adds	r1, r2, #4
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	9103      	str	r1, [sp, #12]
 800852a:	2a00      	cmp	r2, #0
 800852c:	db01      	blt.n	8008532 <_svfiprintf_r+0xfa>
 800852e:	9207      	str	r2, [sp, #28]
 8008530:	e004      	b.n	800853c <_svfiprintf_r+0x104>
 8008532:	4252      	negs	r2, r2
 8008534:	f043 0302 	orr.w	r3, r3, #2
 8008538:	9207      	str	r2, [sp, #28]
 800853a:	9304      	str	r3, [sp, #16]
 800853c:	783b      	ldrb	r3, [r7, #0]
 800853e:	2b2e      	cmp	r3, #46	; 0x2e
 8008540:	d10c      	bne.n	800855c <_svfiprintf_r+0x124>
 8008542:	787b      	ldrb	r3, [r7, #1]
 8008544:	2b2a      	cmp	r3, #42	; 0x2a
 8008546:	d133      	bne.n	80085b0 <_svfiprintf_r+0x178>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	3702      	adds	r7, #2
 800854c:	1d1a      	adds	r2, r3, #4
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	9203      	str	r2, [sp, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	bfb8      	it	lt
 8008556:	f04f 33ff 	movlt.w	r3, #4294967295
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	4d2e      	ldr	r5, [pc, #184]	; (8008618 <_svfiprintf_r+0x1e0>)
 800855e:	2203      	movs	r2, #3
 8008560:	7839      	ldrb	r1, [r7, #0]
 8008562:	4628      	mov	r0, r5
 8008564:	f7ff fa48 	bl	80079f8 <memchr>
 8008568:	b138      	cbz	r0, 800857a <_svfiprintf_r+0x142>
 800856a:	2340      	movs	r3, #64	; 0x40
 800856c:	1b40      	subs	r0, r0, r5
 800856e:	fa03 f000 	lsl.w	r0, r3, r0
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	3701      	adds	r7, #1
 8008576:	4303      	orrs	r3, r0
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	7839      	ldrb	r1, [r7, #0]
 800857c:	2206      	movs	r2, #6
 800857e:	4827      	ldr	r0, [pc, #156]	; (800861c <_svfiprintf_r+0x1e4>)
 8008580:	1c7e      	adds	r6, r7, #1
 8008582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008586:	f7ff fa37 	bl	80079f8 <memchr>
 800858a:	2800      	cmp	r0, #0
 800858c:	d038      	beq.n	8008600 <_svfiprintf_r+0x1c8>
 800858e:	4b24      	ldr	r3, [pc, #144]	; (8008620 <_svfiprintf_r+0x1e8>)
 8008590:	bb13      	cbnz	r3, 80085d8 <_svfiprintf_r+0x1a0>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	3307      	adds	r3, #7
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	3308      	adds	r3, #8
 800859c:	9303      	str	r3, [sp, #12]
 800859e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a0:	444b      	add	r3, r9
 80085a2:	9309      	str	r3, [sp, #36]	; 0x24
 80085a4:	e76d      	b.n	8008482 <_svfiprintf_r+0x4a>
 80085a6:	fb05 3202 	mla	r2, r5, r2, r3
 80085aa:	2001      	movs	r0, #1
 80085ac:	460f      	mov	r7, r1
 80085ae:	e7a6      	b.n	80084fe <_svfiprintf_r+0xc6>
 80085b0:	2300      	movs	r3, #0
 80085b2:	250a      	movs	r5, #10
 80085b4:	4619      	mov	r1, r3
 80085b6:	3701      	adds	r7, #1
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	4638      	mov	r0, r7
 80085bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c0:	3a30      	subs	r2, #48	; 0x30
 80085c2:	2a09      	cmp	r2, #9
 80085c4:	d903      	bls.n	80085ce <_svfiprintf_r+0x196>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0c8      	beq.n	800855c <_svfiprintf_r+0x124>
 80085ca:	9105      	str	r1, [sp, #20]
 80085cc:	e7c6      	b.n	800855c <_svfiprintf_r+0x124>
 80085ce:	fb05 2101 	mla	r1, r5, r1, r2
 80085d2:	2301      	movs	r3, #1
 80085d4:	4607      	mov	r7, r0
 80085d6:	e7f0      	b.n	80085ba <_svfiprintf_r+0x182>
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	4622      	mov	r2, r4
 80085de:	4b11      	ldr	r3, [pc, #68]	; (8008624 <_svfiprintf_r+0x1ec>)
 80085e0:	a904      	add	r1, sp, #16
 80085e2:	4640      	mov	r0, r8
 80085e4:	f7fc fb0a 	bl	8004bfc <_printf_float>
 80085e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085ec:	4681      	mov	r9, r0
 80085ee:	d1d6      	bne.n	800859e <_svfiprintf_r+0x166>
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	065b      	lsls	r3, r3, #25
 80085f4:	f53f af35 	bmi.w	8008462 <_svfiprintf_r+0x2a>
 80085f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085fa:	b01d      	add	sp, #116	; 0x74
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	ab03      	add	r3, sp, #12
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	4622      	mov	r2, r4
 8008606:	4b07      	ldr	r3, [pc, #28]	; (8008624 <_svfiprintf_r+0x1ec>)
 8008608:	a904      	add	r1, sp, #16
 800860a:	4640      	mov	r0, r8
 800860c:	f7fc fda2 	bl	8005154 <_printf_i>
 8008610:	e7ea      	b.n	80085e8 <_svfiprintf_r+0x1b0>
 8008612:	bf00      	nop
 8008614:	0800912c 	.word	0x0800912c
 8008618:	08009132 	.word	0x08009132
 800861c:	08009136 	.word	0x08009136
 8008620:	08004bfd 	.word	0x08004bfd
 8008624:	08008385 	.word	0x08008385

08008628 <__sfputc_r>:
 8008628:	6893      	ldr	r3, [r2, #8]
 800862a:	b410      	push	{r4}
 800862c:	3b01      	subs	r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	6093      	str	r3, [r2, #8]
 8008632:	da07      	bge.n	8008644 <__sfputc_r+0x1c>
 8008634:	6994      	ldr	r4, [r2, #24]
 8008636:	42a3      	cmp	r3, r4
 8008638:	db01      	blt.n	800863e <__sfputc_r+0x16>
 800863a:	290a      	cmp	r1, #10
 800863c:	d102      	bne.n	8008644 <__sfputc_r+0x1c>
 800863e:	bc10      	pop	{r4}
 8008640:	f000 b996 	b.w	8008970 <__swbuf_r>
 8008644:	6813      	ldr	r3, [r2, #0]
 8008646:	1c58      	adds	r0, r3, #1
 8008648:	6010      	str	r0, [r2, #0]
 800864a:	7019      	strb	r1, [r3, #0]
 800864c:	4608      	mov	r0, r1
 800864e:	bc10      	pop	{r4}
 8008650:	4770      	bx	lr

08008652 <__sfputs_r>:
 8008652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	4614      	mov	r4, r2
 800865a:	18d5      	adds	r5, r2, r3
 800865c:	42ac      	cmp	r4, r5
 800865e:	d101      	bne.n	8008664 <__sfputs_r+0x12>
 8008660:	2000      	movs	r0, #0
 8008662:	e007      	b.n	8008674 <__sfputs_r+0x22>
 8008664:	463a      	mov	r2, r7
 8008666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ffdc 	bl	8008628 <__sfputc_r>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d1f3      	bne.n	800865c <__sfputs_r+0xa>
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008678 <_vfiprintf_r>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	460c      	mov	r4, r1
 800867e:	b09d      	sub	sp, #116	; 0x74
 8008680:	4617      	mov	r7, r2
 8008682:	461d      	mov	r5, r3
 8008684:	4606      	mov	r6, r0
 8008686:	b118      	cbz	r0, 8008690 <_vfiprintf_r+0x18>
 8008688:	6983      	ldr	r3, [r0, #24]
 800868a:	b90b      	cbnz	r3, 8008690 <_vfiprintf_r+0x18>
 800868c:	f7fe fdd4 	bl	8007238 <__sinit>
 8008690:	4b7c      	ldr	r3, [pc, #496]	; (8008884 <_vfiprintf_r+0x20c>)
 8008692:	429c      	cmp	r4, r3
 8008694:	d158      	bne.n	8008748 <_vfiprintf_r+0xd0>
 8008696:	6874      	ldr	r4, [r6, #4]
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	0718      	lsls	r0, r3, #28
 800869c:	d55e      	bpl.n	800875c <_vfiprintf_r+0xe4>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d05b      	beq.n	800875c <_vfiprintf_r+0xe4>
 80086a4:	2300      	movs	r3, #0
 80086a6:	9309      	str	r3, [sp, #36]	; 0x24
 80086a8:	2320      	movs	r3, #32
 80086aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ae:	2330      	movs	r3, #48	; 0x30
 80086b0:	f04f 0b01 	mov.w	fp, #1
 80086b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b8:	9503      	str	r5, [sp, #12]
 80086ba:	46b8      	mov	r8, r7
 80086bc:	4645      	mov	r5, r8
 80086be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086c2:	b10b      	cbz	r3, 80086c8 <_vfiprintf_r+0x50>
 80086c4:	2b25      	cmp	r3, #37	; 0x25
 80086c6:	d154      	bne.n	8008772 <_vfiprintf_r+0xfa>
 80086c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80086cc:	d00b      	beq.n	80086e6 <_vfiprintf_r+0x6e>
 80086ce:	4653      	mov	r3, sl
 80086d0:	463a      	mov	r2, r7
 80086d2:	4621      	mov	r1, r4
 80086d4:	4630      	mov	r0, r6
 80086d6:	f7ff ffbc 	bl	8008652 <__sfputs_r>
 80086da:	3001      	adds	r0, #1
 80086dc:	f000 80c2 	beq.w	8008864 <_vfiprintf_r+0x1ec>
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	4453      	add	r3, sl
 80086e4:	9309      	str	r3, [sp, #36]	; 0x24
 80086e6:	f898 3000 	ldrb.w	r3, [r8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80ba 	beq.w	8008864 <_vfiprintf_r+0x1ec>
 80086f0:	2300      	movs	r3, #0
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295
 80086f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	9307      	str	r3, [sp, #28]
 80086fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008702:	931a      	str	r3, [sp, #104]	; 0x68
 8008704:	46a8      	mov	r8, r5
 8008706:	2205      	movs	r2, #5
 8008708:	f818 1b01 	ldrb.w	r1, [r8], #1
 800870c:	485e      	ldr	r0, [pc, #376]	; (8008888 <_vfiprintf_r+0x210>)
 800870e:	f7ff f973 	bl	80079f8 <memchr>
 8008712:	9b04      	ldr	r3, [sp, #16]
 8008714:	bb78      	cbnz	r0, 8008776 <_vfiprintf_r+0xfe>
 8008716:	06d9      	lsls	r1, r3, #27
 8008718:	bf44      	itt	mi
 800871a:	2220      	movmi	r2, #32
 800871c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008720:	071a      	lsls	r2, r3, #28
 8008722:	bf44      	itt	mi
 8008724:	222b      	movmi	r2, #43	; 0x2b
 8008726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800872a:	782a      	ldrb	r2, [r5, #0]
 800872c:	2a2a      	cmp	r2, #42	; 0x2a
 800872e:	d02a      	beq.n	8008786 <_vfiprintf_r+0x10e>
 8008730:	46a8      	mov	r8, r5
 8008732:	2000      	movs	r0, #0
 8008734:	250a      	movs	r5, #10
 8008736:	9a07      	ldr	r2, [sp, #28]
 8008738:	4641      	mov	r1, r8
 800873a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873e:	3b30      	subs	r3, #48	; 0x30
 8008740:	2b09      	cmp	r3, #9
 8008742:	d969      	bls.n	8008818 <_vfiprintf_r+0x1a0>
 8008744:	b360      	cbz	r0, 80087a0 <_vfiprintf_r+0x128>
 8008746:	e024      	b.n	8008792 <_vfiprintf_r+0x11a>
 8008748:	4b50      	ldr	r3, [pc, #320]	; (800888c <_vfiprintf_r+0x214>)
 800874a:	429c      	cmp	r4, r3
 800874c:	d101      	bne.n	8008752 <_vfiprintf_r+0xda>
 800874e:	68b4      	ldr	r4, [r6, #8]
 8008750:	e7a2      	b.n	8008698 <_vfiprintf_r+0x20>
 8008752:	4b4f      	ldr	r3, [pc, #316]	; (8008890 <_vfiprintf_r+0x218>)
 8008754:	429c      	cmp	r4, r3
 8008756:	bf08      	it	eq
 8008758:	68f4      	ldreq	r4, [r6, #12]
 800875a:	e79d      	b.n	8008698 <_vfiprintf_r+0x20>
 800875c:	4621      	mov	r1, r4
 800875e:	4630      	mov	r0, r6
 8008760:	f000 f978 	bl	8008a54 <__swsetup_r>
 8008764:	2800      	cmp	r0, #0
 8008766:	d09d      	beq.n	80086a4 <_vfiprintf_r+0x2c>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	b01d      	add	sp, #116	; 0x74
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	46a8      	mov	r8, r5
 8008774:	e7a2      	b.n	80086bc <_vfiprintf_r+0x44>
 8008776:	4a44      	ldr	r2, [pc, #272]	; (8008888 <_vfiprintf_r+0x210>)
 8008778:	4645      	mov	r5, r8
 800877a:	1a80      	subs	r0, r0, r2
 800877c:	fa0b f000 	lsl.w	r0, fp, r0
 8008780:	4318      	orrs	r0, r3
 8008782:	9004      	str	r0, [sp, #16]
 8008784:	e7be      	b.n	8008704 <_vfiprintf_r+0x8c>
 8008786:	9a03      	ldr	r2, [sp, #12]
 8008788:	1d11      	adds	r1, r2, #4
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	9103      	str	r1, [sp, #12]
 800878e:	2a00      	cmp	r2, #0
 8008790:	db01      	blt.n	8008796 <_vfiprintf_r+0x11e>
 8008792:	9207      	str	r2, [sp, #28]
 8008794:	e004      	b.n	80087a0 <_vfiprintf_r+0x128>
 8008796:	4252      	negs	r2, r2
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	9207      	str	r2, [sp, #28]
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	f898 3000 	ldrb.w	r3, [r8]
 80087a4:	2b2e      	cmp	r3, #46	; 0x2e
 80087a6:	d10e      	bne.n	80087c6 <_vfiprintf_r+0x14e>
 80087a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80087ac:	2b2a      	cmp	r3, #42	; 0x2a
 80087ae:	d138      	bne.n	8008822 <_vfiprintf_r+0x1aa>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	f108 0802 	add.w	r8, r8, #2
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	9203      	str	r2, [sp, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfb8      	it	lt
 80087c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80087c4:	9305      	str	r3, [sp, #20]
 80087c6:	4d33      	ldr	r5, [pc, #204]	; (8008894 <_vfiprintf_r+0x21c>)
 80087c8:	2203      	movs	r2, #3
 80087ca:	f898 1000 	ldrb.w	r1, [r8]
 80087ce:	4628      	mov	r0, r5
 80087d0:	f7ff f912 	bl	80079f8 <memchr>
 80087d4:	b140      	cbz	r0, 80087e8 <_vfiprintf_r+0x170>
 80087d6:	2340      	movs	r3, #64	; 0x40
 80087d8:	1b40      	subs	r0, r0, r5
 80087da:	fa03 f000 	lsl.w	r0, r3, r0
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	f108 0801 	add.w	r8, r8, #1
 80087e4:	4303      	orrs	r3, r0
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	f898 1000 	ldrb.w	r1, [r8]
 80087ec:	2206      	movs	r2, #6
 80087ee:	482a      	ldr	r0, [pc, #168]	; (8008898 <_vfiprintf_r+0x220>)
 80087f0:	f108 0701 	add.w	r7, r8, #1
 80087f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087f8:	f7ff f8fe 	bl	80079f8 <memchr>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d037      	beq.n	8008870 <_vfiprintf_r+0x1f8>
 8008800:	4b26      	ldr	r3, [pc, #152]	; (800889c <_vfiprintf_r+0x224>)
 8008802:	bb1b      	cbnz	r3, 800884c <_vfiprintf_r+0x1d4>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	3307      	adds	r3, #7
 8008808:	f023 0307 	bic.w	r3, r3, #7
 800880c:	3308      	adds	r3, #8
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008812:	444b      	add	r3, r9
 8008814:	9309      	str	r3, [sp, #36]	; 0x24
 8008816:	e750      	b.n	80086ba <_vfiprintf_r+0x42>
 8008818:	fb05 3202 	mla	r2, r5, r2, r3
 800881c:	2001      	movs	r0, #1
 800881e:	4688      	mov	r8, r1
 8008820:	e78a      	b.n	8008738 <_vfiprintf_r+0xc0>
 8008822:	2300      	movs	r3, #0
 8008824:	250a      	movs	r5, #10
 8008826:	4619      	mov	r1, r3
 8008828:	f108 0801 	add.w	r8, r8, #1
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	4640      	mov	r0, r8
 8008830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008834:	3a30      	subs	r2, #48	; 0x30
 8008836:	2a09      	cmp	r2, #9
 8008838:	d903      	bls.n	8008842 <_vfiprintf_r+0x1ca>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0c3      	beq.n	80087c6 <_vfiprintf_r+0x14e>
 800883e:	9105      	str	r1, [sp, #20]
 8008840:	e7c1      	b.n	80087c6 <_vfiprintf_r+0x14e>
 8008842:	fb05 2101 	mla	r1, r5, r1, r2
 8008846:	2301      	movs	r3, #1
 8008848:	4680      	mov	r8, r0
 800884a:	e7f0      	b.n	800882e <_vfiprintf_r+0x1b6>
 800884c:	ab03      	add	r3, sp, #12
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	4622      	mov	r2, r4
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <_vfiprintf_r+0x228>)
 8008854:	a904      	add	r1, sp, #16
 8008856:	4630      	mov	r0, r6
 8008858:	f7fc f9d0 	bl	8004bfc <_printf_float>
 800885c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008860:	4681      	mov	r9, r0
 8008862:	d1d5      	bne.n	8008810 <_vfiprintf_r+0x198>
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	065b      	lsls	r3, r3, #25
 8008868:	f53f af7e 	bmi.w	8008768 <_vfiprintf_r+0xf0>
 800886c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800886e:	e77d      	b.n	800876c <_vfiprintf_r+0xf4>
 8008870:	ab03      	add	r3, sp, #12
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	4622      	mov	r2, r4
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <_vfiprintf_r+0x228>)
 8008878:	a904      	add	r1, sp, #16
 800887a:	4630      	mov	r0, r6
 800887c:	f7fc fc6a 	bl	8005154 <_printf_i>
 8008880:	e7ec      	b.n	800885c <_vfiprintf_r+0x1e4>
 8008882:	bf00      	nop
 8008884:	08008fe0 	.word	0x08008fe0
 8008888:	0800912c 	.word	0x0800912c
 800888c:	08009000 	.word	0x08009000
 8008890:	08008fc0 	.word	0x08008fc0
 8008894:	08009132 	.word	0x08009132
 8008898:	08009136 	.word	0x08009136
 800889c:	08004bfd 	.word	0x08004bfd
 80088a0:	08008653 	.word	0x08008653

080088a4 <_sbrk_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	2300      	movs	r3, #0
 80088a8:	4c05      	ldr	r4, [pc, #20]	; (80088c0 <_sbrk_r+0x1c>)
 80088aa:	4605      	mov	r5, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	6023      	str	r3, [r4, #0]
 80088b0:	f7f8 ff02 	bl	80016b8 <_sbrk>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_sbrk_r+0x1a>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	b103      	cbz	r3, 80088be <_sbrk_r+0x1a>
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	20000358 	.word	0x20000358

080088c4 <__sread>:
 80088c4:	b510      	push	{r4, lr}
 80088c6:	460c      	mov	r4, r1
 80088c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088cc:	f000 faa8 	bl	8008e20 <_read_r>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	bfab      	itete	ge
 80088d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088d6:	89a3      	ldrhlt	r3, [r4, #12]
 80088d8:	181b      	addge	r3, r3, r0
 80088da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088de:	bfac      	ite	ge
 80088e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088e2:	81a3      	strhlt	r3, [r4, #12]
 80088e4:	bd10      	pop	{r4, pc}

080088e6 <__swrite>:
 80088e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	461f      	mov	r7, r3
 80088ec:	898b      	ldrh	r3, [r1, #12]
 80088ee:	4605      	mov	r5, r0
 80088f0:	05db      	lsls	r3, r3, #23
 80088f2:	460c      	mov	r4, r1
 80088f4:	4616      	mov	r6, r2
 80088f6:	d505      	bpl.n	8008904 <__swrite+0x1e>
 80088f8:	2302      	movs	r3, #2
 80088fa:	2200      	movs	r2, #0
 80088fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008900:	f000 f9d6 	bl	8008cb0 <_lseek_r>
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	4632      	mov	r2, r6
 8008908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008912:	463b      	mov	r3, r7
 8008914:	4628      	mov	r0, r5
 8008916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891a:	f000 b889 	b.w	8008a30 <_write_r>

0800891e <__sseek>:
 800891e:	b510      	push	{r4, lr}
 8008920:	460c      	mov	r4, r1
 8008922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008926:	f000 f9c3 	bl	8008cb0 <_lseek_r>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	bf15      	itete	ne
 8008930:	6560      	strne	r0, [r4, #84]	; 0x54
 8008932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800893a:	81a3      	strheq	r3, [r4, #12]
 800893c:	bf18      	it	ne
 800893e:	81a3      	strhne	r3, [r4, #12]
 8008940:	bd10      	pop	{r4, pc}

08008942 <__sclose>:
 8008942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008946:	f000 b8f3 	b.w	8008b30 <_close_r>

0800894a <strncmp>:
 800894a:	b510      	push	{r4, lr}
 800894c:	b16a      	cbz	r2, 800896a <strncmp+0x20>
 800894e:	3901      	subs	r1, #1
 8008950:	1884      	adds	r4, r0, r2
 8008952:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008956:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800895a:	4293      	cmp	r3, r2
 800895c:	d103      	bne.n	8008966 <strncmp+0x1c>
 800895e:	42a0      	cmp	r0, r4
 8008960:	d001      	beq.n	8008966 <strncmp+0x1c>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f5      	bne.n	8008952 <strncmp+0x8>
 8008966:	1a98      	subs	r0, r3, r2
 8008968:	bd10      	pop	{r4, pc}
 800896a:	4610      	mov	r0, r2
 800896c:	e7fc      	b.n	8008968 <strncmp+0x1e>
	...

08008970 <__swbuf_r>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	460e      	mov	r6, r1
 8008974:	4614      	mov	r4, r2
 8008976:	4605      	mov	r5, r0
 8008978:	b118      	cbz	r0, 8008982 <__swbuf_r+0x12>
 800897a:	6983      	ldr	r3, [r0, #24]
 800897c:	b90b      	cbnz	r3, 8008982 <__swbuf_r+0x12>
 800897e:	f7fe fc5b 	bl	8007238 <__sinit>
 8008982:	4b21      	ldr	r3, [pc, #132]	; (8008a08 <__swbuf_r+0x98>)
 8008984:	429c      	cmp	r4, r3
 8008986:	d12a      	bne.n	80089de <__swbuf_r+0x6e>
 8008988:	686c      	ldr	r4, [r5, #4]
 800898a:	69a3      	ldr	r3, [r4, #24]
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	071a      	lsls	r2, r3, #28
 8008992:	d52e      	bpl.n	80089f2 <__swbuf_r+0x82>
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	b363      	cbz	r3, 80089f2 <__swbuf_r+0x82>
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	6820      	ldr	r0, [r4, #0]
 800899c:	b2f6      	uxtb	r6, r6
 800899e:	1ac0      	subs	r0, r0, r3
 80089a0:	6963      	ldr	r3, [r4, #20]
 80089a2:	4637      	mov	r7, r6
 80089a4:	4283      	cmp	r3, r0
 80089a6:	dc04      	bgt.n	80089b2 <__swbuf_r+0x42>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f956 	bl	8008c5c <_fflush_r>
 80089b0:	bb28      	cbnz	r0, 80089fe <__swbuf_r+0x8e>
 80089b2:	68a3      	ldr	r3, [r4, #8]
 80089b4:	3001      	adds	r0, #1
 80089b6:	3b01      	subs	r3, #1
 80089b8:	60a3      	str	r3, [r4, #8]
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	701e      	strb	r6, [r3, #0]
 80089c2:	6963      	ldr	r3, [r4, #20]
 80089c4:	4283      	cmp	r3, r0
 80089c6:	d004      	beq.n	80089d2 <__swbuf_r+0x62>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	07db      	lsls	r3, r3, #31
 80089cc:	d519      	bpl.n	8008a02 <__swbuf_r+0x92>
 80089ce:	2e0a      	cmp	r6, #10
 80089d0:	d117      	bne.n	8008a02 <__swbuf_r+0x92>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 f941 	bl	8008c5c <_fflush_r>
 80089da:	b190      	cbz	r0, 8008a02 <__swbuf_r+0x92>
 80089dc:	e00f      	b.n	80089fe <__swbuf_r+0x8e>
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <__swbuf_r+0x9c>)
 80089e0:	429c      	cmp	r4, r3
 80089e2:	d101      	bne.n	80089e8 <__swbuf_r+0x78>
 80089e4:	68ac      	ldr	r4, [r5, #8]
 80089e6:	e7d0      	b.n	800898a <__swbuf_r+0x1a>
 80089e8:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <__swbuf_r+0xa0>)
 80089ea:	429c      	cmp	r4, r3
 80089ec:	bf08      	it	eq
 80089ee:	68ec      	ldreq	r4, [r5, #12]
 80089f0:	e7cb      	b.n	800898a <__swbuf_r+0x1a>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 f82d 	bl	8008a54 <__swsetup_r>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d0cc      	beq.n	8008998 <__swbuf_r+0x28>
 80089fe:	f04f 37ff 	mov.w	r7, #4294967295
 8008a02:	4638      	mov	r0, r7
 8008a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a06:	bf00      	nop
 8008a08:	08008fe0 	.word	0x08008fe0
 8008a0c:	08009000 	.word	0x08009000
 8008a10:	08008fc0 	.word	0x08008fc0

08008a14 <__ascii_wctomb>:
 8008a14:	b149      	cbz	r1, 8008a2a <__ascii_wctomb+0x16>
 8008a16:	2aff      	cmp	r2, #255	; 0xff
 8008a18:	bf8b      	itete	hi
 8008a1a:	238a      	movhi	r3, #138	; 0x8a
 8008a1c:	700a      	strbls	r2, [r1, #0]
 8008a1e:	6003      	strhi	r3, [r0, #0]
 8008a20:	2001      	movls	r0, #1
 8008a22:	bf88      	it	hi
 8008a24:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a28:	4770      	bx	lr
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4770      	bx	lr
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4605      	mov	r5, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4c05      	ldr	r4, [pc, #20]	; (8008a50 <_write_r+0x20>)
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 fded 	bl	800161e <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000358 	.word	0x20000358

08008a54 <__swsetup_r>:
 8008a54:	4b32      	ldr	r3, [pc, #200]	; (8008b20 <__swsetup_r+0xcc>)
 8008a56:	b570      	push	{r4, r5, r6, lr}
 8008a58:	681d      	ldr	r5, [r3, #0]
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	b125      	cbz	r5, 8008a6a <__swsetup_r+0x16>
 8008a60:	69ab      	ldr	r3, [r5, #24]
 8008a62:	b913      	cbnz	r3, 8008a6a <__swsetup_r+0x16>
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7fe fbe7 	bl	8007238 <__sinit>
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <__swsetup_r+0xd0>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	d10f      	bne.n	8008a90 <__swsetup_r+0x3c>
 8008a70:	686c      	ldr	r4, [r5, #4]
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	0715      	lsls	r5, r2, #28
 8008a7a:	d42c      	bmi.n	8008ad6 <__swsetup_r+0x82>
 8008a7c:	06d0      	lsls	r0, r2, #27
 8008a7e:	d411      	bmi.n	8008aa4 <__swsetup_r+0x50>
 8008a80:	2209      	movs	r2, #9
 8008a82:	6032      	str	r2, [r6, #0]
 8008a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	e03e      	b.n	8008b0e <__swsetup_r+0xba>
 8008a90:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <__swsetup_r+0xd4>)
 8008a92:	429c      	cmp	r4, r3
 8008a94:	d101      	bne.n	8008a9a <__swsetup_r+0x46>
 8008a96:	68ac      	ldr	r4, [r5, #8]
 8008a98:	e7eb      	b.n	8008a72 <__swsetup_r+0x1e>
 8008a9a:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <__swsetup_r+0xd8>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	bf08      	it	eq
 8008aa0:	68ec      	ldreq	r4, [r5, #12]
 8008aa2:	e7e6      	b.n	8008a72 <__swsetup_r+0x1e>
 8008aa4:	0751      	lsls	r1, r2, #29
 8008aa6:	d512      	bpl.n	8008ace <__swsetup_r+0x7a>
 8008aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aaa:	b141      	cbz	r1, 8008abe <__swsetup_r+0x6a>
 8008aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d002      	beq.n	8008aba <__swsetup_r+0x66>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff fbbf 	bl	8008238 <_free_r>
 8008aba:	2300      	movs	r3, #0
 8008abc:	6363      	str	r3, [r4, #52]	; 0x34
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f043 0308 	orr.w	r3, r3, #8
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	b94b      	cbnz	r3, 8008aee <__swsetup_r+0x9a>
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae4:	d003      	beq.n	8008aee <__swsetup_r+0x9a>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 f917 	bl	8008d1c <__smakebuf_r>
 8008aee:	89a2      	ldrh	r2, [r4, #12]
 8008af0:	f012 0301 	ands.w	r3, r2, #1
 8008af4:	d00c      	beq.n	8008b10 <__swsetup_r+0xbc>
 8008af6:	2300      	movs	r3, #0
 8008af8:	60a3      	str	r3, [r4, #8]
 8008afa:	6963      	ldr	r3, [r4, #20]
 8008afc:	425b      	negs	r3, r3
 8008afe:	61a3      	str	r3, [r4, #24]
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	b953      	cbnz	r3, 8008b1a <__swsetup_r+0xc6>
 8008b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008b0c:	d1ba      	bne.n	8008a84 <__swsetup_r+0x30>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	0792      	lsls	r2, r2, #30
 8008b12:	bf58      	it	pl
 8008b14:	6963      	ldrpl	r3, [r4, #20]
 8008b16:	60a3      	str	r3, [r4, #8]
 8008b18:	e7f2      	b.n	8008b00 <__swsetup_r+0xac>
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e7f7      	b.n	8008b0e <__swsetup_r+0xba>
 8008b1e:	bf00      	nop
 8008b20:	2000000c 	.word	0x2000000c
 8008b24:	08008fe0 	.word	0x08008fe0
 8008b28:	08009000 	.word	0x08009000
 8008b2c:	08008fc0 	.word	0x08008fc0

08008b30 <_close_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	2300      	movs	r3, #0
 8008b34:	4c05      	ldr	r4, [pc, #20]	; (8008b4c <_close_r+0x1c>)
 8008b36:	4605      	mov	r5, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	f7f8 fd8b 	bl	8001656 <_close>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_close_r+0x1a>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_close_r+0x1a>
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000358 	.word	0x20000358

08008b50 <__sflush_r>:
 8008b50:	898a      	ldrh	r2, [r1, #12]
 8008b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	4605      	mov	r5, r0
 8008b58:	0710      	lsls	r0, r2, #28
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	d458      	bmi.n	8008c10 <__sflush_r+0xc0>
 8008b5e:	684b      	ldr	r3, [r1, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dc05      	bgt.n	8008b70 <__sflush_r+0x20>
 8008b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dc02      	bgt.n	8008b70 <__sflush_r+0x20>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d0f9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b7c:	682f      	ldr	r7, [r5, #0]
 8008b7e:	6a21      	ldr	r1, [r4, #32]
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	d032      	beq.n	8008bea <__sflush_r+0x9a>
 8008b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	075a      	lsls	r2, r3, #29
 8008b8a:	d505      	bpl.n	8008b98 <__sflush_r+0x48>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	1ac0      	subs	r0, r0, r3
 8008b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b92:	b10b      	cbz	r3, 8008b98 <__sflush_r+0x48>
 8008b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b96:	1ac0      	subs	r0, r0, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9e:	6a21      	ldr	r1, [r4, #32]
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b0      	blx	r6
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	d106      	bne.n	8008bb8 <__sflush_r+0x68>
 8008baa:	6829      	ldr	r1, [r5, #0]
 8008bac:	291d      	cmp	r1, #29
 8008bae:	d848      	bhi.n	8008c42 <__sflush_r+0xf2>
 8008bb0:	4a29      	ldr	r2, [pc, #164]	; (8008c58 <__sflush_r+0x108>)
 8008bb2:	40ca      	lsrs	r2, r1
 8008bb4:	07d6      	lsls	r6, r2, #31
 8008bb6:	d544      	bpl.n	8008c42 <__sflush_r+0xf2>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	6062      	str	r2, [r4, #4]
 8008bbc:	6922      	ldr	r2, [r4, #16]
 8008bbe:	04d9      	lsls	r1, r3, #19
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	d504      	bpl.n	8008bce <__sflush_r+0x7e>
 8008bc4:	1c42      	adds	r2, r0, #1
 8008bc6:	d101      	bne.n	8008bcc <__sflush_r+0x7c>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b903      	cbnz	r3, 8008bce <__sflush_r+0x7e>
 8008bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8008bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd0:	602f      	str	r7, [r5, #0]
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	d0c9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	d002      	beq.n	8008be4 <__sflush_r+0x94>
 8008bde:	4628      	mov	r0, r5
 8008be0:	f7ff fb2a 	bl	8008238 <_free_r>
 8008be4:	2000      	movs	r0, #0
 8008be6:	6360      	str	r0, [r4, #52]	; 0x34
 8008be8:	e7c0      	b.n	8008b6c <__sflush_r+0x1c>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b0      	blx	r6
 8008bf0:	1c41      	adds	r1, r0, #1
 8008bf2:	d1c8      	bne.n	8008b86 <__sflush_r+0x36>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0c5      	beq.n	8008b86 <__sflush_r+0x36>
 8008bfa:	2b1d      	cmp	r3, #29
 8008bfc:	d001      	beq.n	8008c02 <__sflush_r+0xb2>
 8008bfe:	2b16      	cmp	r3, #22
 8008c00:	d101      	bne.n	8008c06 <__sflush_r+0xb6>
 8008c02:	602f      	str	r7, [r5, #0]
 8008c04:	e7b1      	b.n	8008b6a <__sflush_r+0x1a>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	e7ad      	b.n	8008b6c <__sflush_r+0x1c>
 8008c10:	690f      	ldr	r7, [r1, #16]
 8008c12:	2f00      	cmp	r7, #0
 8008c14:	d0a9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008c16:	0793      	lsls	r3, r2, #30
 8008c18:	bf18      	it	ne
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	680e      	ldr	r6, [r1, #0]
 8008c1e:	bf08      	it	eq
 8008c20:	694b      	ldreq	r3, [r1, #20]
 8008c22:	eba6 0807 	sub.w	r8, r6, r7
 8008c26:	600f      	str	r7, [r1, #0]
 8008c28:	608b      	str	r3, [r1, #8]
 8008c2a:	f1b8 0f00 	cmp.w	r8, #0
 8008c2e:	dd9c      	ble.n	8008b6a <__sflush_r+0x1a>
 8008c30:	4643      	mov	r3, r8
 8008c32:	463a      	mov	r2, r7
 8008c34:	6a21      	ldr	r1, [r4, #32]
 8008c36:	4628      	mov	r0, r5
 8008c38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c3a:	47b0      	blx	r6
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dc06      	bgt.n	8008c4e <__sflush_r+0xfe>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	e78e      	b.n	8008b6c <__sflush_r+0x1c>
 8008c4e:	4407      	add	r7, r0
 8008c50:	eba8 0800 	sub.w	r8, r8, r0
 8008c54:	e7e9      	b.n	8008c2a <__sflush_r+0xda>
 8008c56:	bf00      	nop
 8008c58:	20400001 	.word	0x20400001

08008c5c <_fflush_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	4605      	mov	r5, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	b1db      	cbz	r3, 8008c9e <_fflush_r+0x42>
 8008c66:	b118      	cbz	r0, 8008c70 <_fflush_r+0x14>
 8008c68:	6983      	ldr	r3, [r0, #24]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <_fflush_r+0x14>
 8008c6c:	f7fe fae4 	bl	8007238 <__sinit>
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <_fflush_r+0x48>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d109      	bne.n	8008c8a <_fflush_r+0x2e>
 8008c76:	686c      	ldr	r4, [r5, #4]
 8008c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7c:	b17b      	cbz	r3, 8008c9e <_fflush_r+0x42>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c86:	f7ff bf63 	b.w	8008b50 <__sflush_r>
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <_fflush_r+0x4c>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d101      	bne.n	8008c94 <_fflush_r+0x38>
 8008c90:	68ac      	ldr	r4, [r5, #8]
 8008c92:	e7f1      	b.n	8008c78 <_fflush_r+0x1c>
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <_fflush_r+0x50>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	bf08      	it	eq
 8008c9a:	68ec      	ldreq	r4, [r5, #12]
 8008c9c:	e7ec      	b.n	8008c78 <_fflush_r+0x1c>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08008fe0 	.word	0x08008fe0
 8008ca8:	08009000 	.word	0x08009000
 8008cac:	08008fc0 	.word	0x08008fc0

08008cb0 <_lseek_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	2200      	movs	r2, #0
 8008cba:	4c05      	ldr	r4, [pc, #20]	; (8008cd0 <_lseek_r+0x20>)
 8008cbc:	6022      	str	r2, [r4, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7f8 fced 	bl	800169e <_lseek>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_lseek_r+0x1e>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_lseek_r+0x1e>
 8008ccc:	602b      	str	r3, [r5, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20000358 	.word	0x20000358

08008cd4 <__swhatbuf_r>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cdc:	b096      	sub	sp, #88	; 0x58
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	461d      	mov	r5, r3
 8008ce4:	da07      	bge.n	8008cf6 <__swhatbuf_r+0x22>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	89b3      	ldrh	r3, [r6, #12]
 8008cec:	061a      	lsls	r2, r3, #24
 8008cee:	d410      	bmi.n	8008d12 <__swhatbuf_r+0x3e>
 8008cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf4:	e00e      	b.n	8008d14 <__swhatbuf_r+0x40>
 8008cf6:	466a      	mov	r2, sp
 8008cf8:	f000 f8a4 	bl	8008e44 <_fstat_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	dbf2      	blt.n	8008ce6 <__swhatbuf_r+0x12>
 8008d00:	9a01      	ldr	r2, [sp, #4]
 8008d02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d0a:	425a      	negs	r2, r3
 8008d0c:	415a      	adcs	r2, r3
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	e7ee      	b.n	8008cf0 <__swhatbuf_r+0x1c>
 8008d12:	2340      	movs	r3, #64	; 0x40
 8008d14:	2000      	movs	r0, #0
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	b016      	add	sp, #88	; 0x58
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}

08008d1c <__smakebuf_r>:
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d20:	079d      	lsls	r5, r3, #30
 8008d22:	4606      	mov	r6, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	d507      	bpl.n	8008d38 <__smakebuf_r+0x1c>
 8008d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	2301      	movs	r3, #1
 8008d32:	6163      	str	r3, [r4, #20]
 8008d34:	b002      	add	sp, #8
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	ab01      	add	r3, sp, #4
 8008d3a:	466a      	mov	r2, sp
 8008d3c:	f7ff ffca 	bl	8008cd4 <__swhatbuf_r>
 8008d40:	9900      	ldr	r1, [sp, #0]
 8008d42:	4605      	mov	r5, r0
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff fac3 	bl	80082d0 <_malloc_r>
 8008d4a:	b948      	cbnz	r0, 8008d60 <__smakebuf_r+0x44>
 8008d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d4ef      	bmi.n	8008d34 <__smakebuf_r+0x18>
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	f043 0302 	orr.w	r3, r3, #2
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	e7e3      	b.n	8008d28 <__smakebuf_r+0xc>
 8008d60:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <__smakebuf_r+0x7c>)
 8008d62:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	6020      	str	r0, [r4, #0]
 8008d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	6120      	str	r0, [r4, #16]
 8008d72:	6163      	str	r3, [r4, #20]
 8008d74:	9b01      	ldr	r3, [sp, #4]
 8008d76:	b15b      	cbz	r3, 8008d90 <__smakebuf_r+0x74>
 8008d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f873 	bl	8008e68 <_isatty_r>
 8008d82:	b128      	cbz	r0, 8008d90 <__smakebuf_r+0x74>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	431d      	orrs	r5, r3
 8008d94:	81a5      	strh	r5, [r4, #12]
 8008d96:	e7cd      	b.n	8008d34 <__smakebuf_r+0x18>
 8008d98:	08007201 	.word	0x08007201

08008d9c <memmove>:
 8008d9c:	4288      	cmp	r0, r1
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	eb01 0302 	add.w	r3, r1, r2
 8008da4:	d807      	bhi.n	8008db6 <memmove+0x1a>
 8008da6:	1e42      	subs	r2, r0, #1
 8008da8:	4299      	cmp	r1, r3
 8008daa:	d00a      	beq.n	8008dc2 <memmove+0x26>
 8008dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008db4:	e7f8      	b.n	8008da8 <memmove+0xc>
 8008db6:	4283      	cmp	r3, r0
 8008db8:	d9f5      	bls.n	8008da6 <memmove+0xa>
 8008dba:	1881      	adds	r1, r0, r2
 8008dbc:	1ad2      	subs	r2, r2, r3
 8008dbe:	42d3      	cmn	r3, r2
 8008dc0:	d100      	bne.n	8008dc4 <memmove+0x28>
 8008dc2:	bd10      	pop	{r4, pc}
 8008dc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008dcc:	e7f7      	b.n	8008dbe <memmove+0x22>

08008dce <__malloc_lock>:
 8008dce:	4770      	bx	lr

08008dd0 <__malloc_unlock>:
 8008dd0:	4770      	bx	lr

08008dd2 <_realloc_r>:
 8008dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	460e      	mov	r6, r1
 8008dda:	b921      	cbnz	r1, 8008de6 <_realloc_r+0x14>
 8008ddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008de0:	4611      	mov	r1, r2
 8008de2:	f7ff ba75 	b.w	80082d0 <_malloc_r>
 8008de6:	b922      	cbnz	r2, 8008df2 <_realloc_r+0x20>
 8008de8:	f7ff fa26 	bl	8008238 <_free_r>
 8008dec:	4625      	mov	r5, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df2:	f000 f849 	bl	8008e88 <_malloc_usable_size_r>
 8008df6:	42a0      	cmp	r0, r4
 8008df8:	d20f      	bcs.n	8008e1a <_realloc_r+0x48>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff fa67 	bl	80082d0 <_malloc_r>
 8008e02:	4605      	mov	r5, r0
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0f2      	beq.n	8008dee <_realloc_r+0x1c>
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	f7fe fe02 	bl	8007a14 <memcpy>
 8008e10:	4631      	mov	r1, r6
 8008e12:	4638      	mov	r0, r7
 8008e14:	f7ff fa10 	bl	8008238 <_free_r>
 8008e18:	e7e9      	b.n	8008dee <_realloc_r+0x1c>
 8008e1a:	4635      	mov	r5, r6
 8008e1c:	e7e7      	b.n	8008dee <_realloc_r+0x1c>
	...

08008e20 <_read_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4605      	mov	r5, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4c05      	ldr	r4, [pc, #20]	; (8008e40 <_read_r+0x20>)
 8008e2c:	6022      	str	r2, [r4, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7f8 fbd8 	bl	80015e4 <_read>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_read_r+0x1e>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_read_r+0x1e>
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20000358 	.word	0x20000358

08008e44 <_fstat_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	2300      	movs	r3, #0
 8008e48:	4c06      	ldr	r4, [pc, #24]	; (8008e64 <_fstat_r+0x20>)
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	f7f8 fc0b 	bl	800166c <_fstat>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d102      	bne.n	8008e60 <_fstat_r+0x1c>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	b103      	cbz	r3, 8008e60 <_fstat_r+0x1c>
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	20000358 	.word	0x20000358

08008e68 <_isatty_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4c05      	ldr	r4, [pc, #20]	; (8008e84 <_isatty_r+0x1c>)
 8008e6e:	4605      	mov	r5, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	f7f8 fc09 	bl	800168a <_isatty>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_isatty_r+0x1a>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_isatty_r+0x1a>
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000358 	.word	0x20000358

08008e88 <_malloc_usable_size_r>:
 8008e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8c:	1f18      	subs	r0, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bfbc      	itt	lt
 8008e92:	580b      	ldrlt	r3, [r1, r0]
 8008e94:	18c0      	addlt	r0, r0, r3
 8008e96:	4770      	bx	lr

08008e98 <_init>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr

08008ea4 <_fini>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr
